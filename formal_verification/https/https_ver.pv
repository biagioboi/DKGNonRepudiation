(* --------------------------------------------------------------------------------------------------------- *)
(* HTTPS Connect *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* START keys *)
type SymmetricKey.
type ktag.
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)

const uri:bitstring.
const usr:bitstring.


const tag1:bitstring.
const tag2:bitstring.
const tag2_bis:bitstring.
const tag3:bitstring.
const tag4:bitstring.
const tag5:bitstring.
const tag6:bitstring.
const tag7:bitstring.
const tag8:bitstring.
const tag9:bitstring.
const tag10:bitstring.
const tag11:bitstring.
const tag12:bitstring.

(* START hash *)
fun hash(bitstring): bitstring.
fun hash_pk(PublicKey): bitstring.
(* End hash *)

(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).

fun symk_to_bit(SymmetricKey): bitstring.
reduc forall symk:SymmetricKey; bit_to_symk(symk_to_bit(symk)) = symk.
(* END symmetric encryption *)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(*DEFS*)
fun ch(bitstring): channel.
fun chSymK(SymmetricKey): channel.


(* SECRECY *)

free rule_fromVerifier: bitstring [private].
free vp_fromProver: bitstring [private].
free vp_fromVerifier: bitstring [private].
free cred_fromVerifier: bitstring [private].
free access_token_fromVerifier: bitstring [private].
free access_token_fromApp: bitstring [private].

(* AUTHENTICATION *)

event auth_AppCompletesProtocol(bitstring,bitstring, bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring).
event auth_UserCompletesProtocol(bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_VerifierCompletesProtocol(bitstring,bitstring,bitstring,bitstring, bitstring,bitstring).

(* App -> User *)
event auth_AppSendsLastMessageToUser(bitstring,bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring).
event verifierInConeOfUser(bitstring,bitstring,bitstring,bitstring).

(* User -> App *)
event auth_UserSendsLastMessageToApp(bitstring,bitstring,bitstring, bitstring,bitstring).

(* Verifier -> App *)
event auth_VerifierSendsLastMessageToApp(bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).

(* App -> Verifier *)
event auth_AppSendsLastMessageToVerifier(bitstring, bitstring, bitstring, bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_AppCompletesProtocolWithUser(bitstring, bitstring, bitstring,bitstring, bitstring, bitstring,bitstring,bitstring, bitstring).



(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

let user(talksOnlyToHonest:bool, c:channel, u:bitstring, sku:SecretKey, a:bitstring, pka:PublicKey, v:bitstring, pkv:PublicKey, vc:bitstring, uri:bitstring) =
    (* Message 1 *)
    new n_u:bitstring;
    new sk_su:SecretKey;
    let m_1 = aenc((tag1, n_u, pk(sk_su)), pka) in
    out(c, m_1);

    (* Message 2 *)
    in(c, m_2:bitstring);
    let (tag2':bitstring, n_u':bitstring, n_d:bitstring, symk_ua:SymmetricKey) = adec(m_2, sk_su) in
    if (tag2=tag2') then
    if (n_u = n_u') then
    let m_2_bis = enc((tag2_bis, n_d, u), symk_ua) in
    out(c, m_2_bis);

    (* Message 7 *)
    in(c, m_7:bitstring);
    let (tag7':bitstring, a':bitstring, v':bitstring, n_r: bitstring, vpr_body:bitstring) = dec(m_7, symk_ua) in
    if (a=a') then
    if (v=v') then
    if (tag7 = tag7') then

    (* let (vpr_body:bitstring, vpr_body_signature:bitstring) = vpr_signed in *)
    let (n_c:bitstring, V:bitstring, vpr:bitstring) = vpr_body in
    let (usr':bitstring, uri':bitstring, a':bitstring) = vpr in
    
    (* Message 8 *)
    (* if (check(vpr_body, vpr_body_signature, pkv)) then *)
    if (uri', a') = (uri, a) then
    let vp = ((n_c, vc, V, uri, a), sig((n_c, vc, V, uri, a), sku)) in
    let m'_8 = (tag8, u, n_r, vp) in
    let m_8 = enc(m'_8, symk_ua) in

    event auth_UserSendsLastMessageToApp(m_1, m_2,m_2_bis, m_7,m_8);
    out(c, m_8);
    (* --------------------------------------------------------------------------------------- *)
    (* Query Preparations *)
    
    if talksOnlyToHonest then
        event auth_UserCompletesProtocol(m_1, m_2 ,m_2_bis, m_7, m_8)|
        out(ch(vp), vp_fromProver);

    0.

let app(talksOnlyToHonest:bool, c:channel, a:bitstring, ska:SecretKey, u:bitstring, pku:PublicKey, v:bitstring, pkv:PublicKey, uri:bitstring) =

    (* Message 1 *)
    in(c, m_1:bitstring);
    let (tag1':bitstring, n_u:bitstring, pk_su:PublicKey) = adec(m_1, ska) in
    if (tag1 = tag1') then

    (* Message 2 *)
    new symk_ua: SymmetricKey;
    new n_d:bitstring;
    let m_2 = aenc((tag2, n_u, n_d, symk_ua), pk_su) in
    out(c, m_2);

    in(c, m_2_bis:bitstring);
    let (tag2_bis':bitstring, n_d':bitstring, u':bitstring) = dec(m_2_bis, symk_ua) in
    if (tag2_bis' = tag2_bis) then
    if (n_d'=n_d) then

    (* Start contacting the Verifier for VPR generation *)
    (* Message 3 *)
    new n_a:bitstring;
    new sk_sa:SecretKey;
    let m_3 = aenc((tag3, n_a, pk(sk_sa)), pkv) in
    out(c, m_3);

    (* Message 4 *)
    in(c, m_4:bitstring);
    let (tag4':bitstring, n_a':bitstring, n_b:bitstring, symk_av:SymmetricKey) = adec(m_4, sk_sa) in
    if (tag4' = tag4) then
    if n_a = n_a' then

    
    (* Message 5 *)
    let m_5 = enc((tag5, n_b, u, a, uri), symk_av) in
    out(c, m_5);

    (* Message 6 *)
    in(c, m_6:bitstring);
    let (tag6':bitstring, v':bitstring, vpr_signed:bitstring) = dec(m_6, symk_av) in
    if (tag6=tag6') then
    let (n_c:bitstring, V:bitstring, vpr:bitstring) = vpr_signed in
    let (u':bitstring, uri':bitstring, a':bitstring) = vpr in
    if u' = u && uri' = uri && a' = a && v' = v then  (* RH: check the rule before contacting the user *)
    


    (* End contacting the Verifier for VPR generation *)

    (* Message 7 *)
    new n_r:bitstring;
    let m_7 = enc((tag7, a, v, n_r, vpr_signed), symk_ua) in
    event auth_AppSendsLastMessageToUser(m_1,m_2,m_2_bis,m_3, m_4, m_5, m_6, m_7);
    out(c, m_7);

    (* Message 8 *)
    in(c, m_8:bitstring);
    let (tag8':bitstring, u':bitstring, n_r':bitstring, vp_signed:bitstring) = dec(m_8, symk_ua) in
    if (tag8 = tag8') then
    if (u=u') then
    if (n_r'=n_r) then
    let (vp:bitstring, sign_on_vp:bitstring) = vp_signed in
    if (check(vp, sign_on_vp, pku)) then

    (* Message 9 *)
    let m_9 = enc((tag9,vp_signed),symk_av) in
    event auth_AppSendsLastMessageToVerifier(m_1, m_2, m_2_bis, m_3,m_4,m_5,m_6, m_7, m_8,m_9);
    out(c, m_9);

    
    (* Message 10 *)
    in(c, m_10:bitstring);
    let (tag10':bitstring, tkn_access:bitstring, sign_tkn:bitstring) = dec(m_10, symk_av) in
    if (tag10' = tag10) then
    out(ch(( tkn_access, sig(tkn_access,ska) )),access_token_fromApp);

    if (talksOnlyToHonest) then
    event auth_AppCompletesProtocol(m_1,m_2, m_2_bis, m_3,m_4,m_5,m_6,m_7, m_8, m_9,m_10);
    event auth_AppCompletesProtocolWithUser(m_1,m_2, m_2_bis, m_3, m_4, m_5, m_6, m_7,m_8);
    
    0.

let verifier(talksOnlyToHonest:bool, c:channel, v:bitstring, skv:SecretKey, u:bitstring, pku:PublicKey, a:bitstring, pka:PublicKey, uri:bitstring) =

    (* Message 3 *)
    in(c, m_3:bitstring);
    let (tag3':bitstring, n_a:bitstring, pk_sa:PublicKey) = adec(m_3, skv) in
    if (tag3' = tag3) then

    (* Message 4 *)
    new symk_av: SymmetricKey;
    new n_b:bitstring;
    let m_4 = aenc((tag4, n_a, n_b, symk_av), pk_sa) in
    (* event verifierSendsSymKey(m_3, m_4);  Please create this event *)
    out(c, m_4);

    (* Message 5 *)
    in(c, m_5:bitstring);
    let (tag5':bitstring, n_b':bitstring, u':bitstring, a':bitstring, uri':bitstring) = dec(m_5, symk_av) in
    if (tag5 = tag5') then
    if (n_b', u', uri', a') = (n_b, u, uri, a) then

    (* Message 6, VPR *)
    new n_c:bitstring;
    new V:bitstring;
    let vpr = (u, uri, a) in
    (* let m'_6 = ((n_c, V, vpr), sig((n_c, V, vpr), skv)) in *)
    let m'_6 = (n_c, V, vpr) in 
    let m_6 = enc((tag6, v, m'_6), symk_av)  in
    event verifierInConeOfUser(m_3,m_4,m_5,m_6);
    out(c, m_6);

    (* Message 9 *)
    in(c, m_9:bitstring);

    let (tag9': bitstring,vp_signed:bitstring) = dec(m_9, symk_av) in
    if (tag9=tag9') then
    let (vp:bitstring, sign_vp:bitstring) = vp_signed in
    let (n_c':bitstring, vc_signed':bitstring, V':bitstring, uri'':bitstring, a'':bitstring) = vp in
    let (vc:bitstring, sign_vc:bitstring) = vc_signed' in
    let (u'':bitstring, iss':bitstring) = vc in

    if check(vp_signed, sign_vp, pku) then
    (* missing check on issuer*)
    if (n_c', u'', V', uri'', a'') = (n_c, u, V, uri, a) then
    new tkn_access:bitstring;
    let m_10 = enc((tag10, tkn_access, sig(tkn_access,skv)),symk_av)  in
    event auth_VerifierSendsLastMessageToApp(m_3,m_4,m_5,m_6, m_9, m_10);
    out(ch(( tkn_access, sig(tkn_access,skv) )),access_token_fromVerifier);

    if talksOnlyToHonest then
    event auth_VerifierCompletesProtocol(m_3,m_4,m_5,m_6,m_9,m_10)|
    out(ch(vpr), rule_fromVerifier);
    
    0.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

let open_user(c:channel, u:bitstring, sku:SecretKey, a:bitstring, pka:PublicKey, v:bitstring, pkv:PublicKey, vc:bitstring, uri:bitstring) =
    in(c, e:bitstring);
    in(c, e2:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    in(c, euri:bitstring);
    if(e = a && e2 = v) then user(true, c, u, sku, a, pka, v, pkv, vc, uri)
    else if(e2 = v) then user(false, c, u, sku, e, pke1, v, pkv, vc, uri)
    else if(e = a) then user(false, c, u, sku, a, pka, e2, pke2, vc, euri)
    else user(false, c, u, sku, e, pke1, e2, pke2, vc, euri).

let open_app(c:channel, a:bitstring, ska:SecretKey, u:bitstring, pku:PublicKey, v:bitstring, pkv:PublicKey, uri:bitstring) =
    in(c, e:bitstring);
    in(c, e2:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    in(c, euri:bitstring);
    if(e = u && e2 = v) then app(true, c, a, ska, u, pku, v, pkv, uri) 
    else if(e2 = v) then app(false, c, a, ska, e, pke1, v, pkv, uri)
    else if(e = u) then     app(false, c, a, ska, u, pku, e2, pke2, euri)
    else app(false, c, a, ska, e, pke1, e2, pke2, euri)
    .  (* euri is a URI for another server. If the verifier is the intended trusted Solid server then the uri is as expected *) 

let open_verifier(c:channel, v:bitstring, skv:SecretKey, u:bitstring, pku:PublicKey, a:bitstring, pka:PublicKey, uri:bitstring) =
    in(c, e:bitstring);
    in(c, e2:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    if(e = u && e2 = a) then verifier(true, c, v, skv, u, pku, a, pka, uri)
    else if(e2 = a) then verifier(false, c, v, skv, e, pke1, a, pka, uri) 
    else if(e = u) then      verifier(false, c, v, skv, u, pku, e2, pke2, uri)
    else verifier(false, c, v, skv, e, pke1, e2, pke2, uri)
    .

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* SECRECY *)

query attacker(rule_fromVerifier).
query attacker(vp_fromVerifier). 
query attacker(access_token_fromVerifier).


query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_complete:bitstring, m_vpr:bitstring, m_vp:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring, m_6:bitstring; 
    inj-event(auth_UserCompletesProtocol(m_handshakeReq, m_handshakeResp, m_complete, m_vpr, m_vp))
    ==>
    inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq, m_handshakeResp, m_complete, m_3, m_4, m_5, m_6, m_vpr))
    &&
    inj-event(verifierInConeOfUser(m_3, m_4, m_5, m_6)).

query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_complete:bitstring, m_handshake_ver:bitstring, m_handshake_resp_ver:bitstring, m_uri:bitstring, m_rule:bitstring, m_vpr:bitstring, m_vp:bitstring, m_accesstoken:bitstring, m_1:bitstring, m_2:bitstring, m_2_bis:bitstring, m_7:bitstring, m_8:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_handshake_ver, m_handshake_resp_ver, m_uri, m_vpr, m_vp, m_accesstoken))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_2_bis, m_handshake_ver, m_handshake_resp_ver, m_uri, m_vpr, m_7, m_8, m_vp))
    &&
    inj-event(auth_UserSendsLastMessageToApp(m_1, m_2, m_2_bis, m_7, m_8)). 


query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_accesstoken:bitstring,  m_1:bitstring, m_2:bitstring,m_2_bis:bitstring, m_7:bitstring, m_8:bitstring;
    inj-event(auth_AppCompletesProtocol(m_1, m_2, m_2_bis, m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_7, m_8, m_vp, m_accesstoken))
    ==>
    inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp, m_accesstoken))
    &&
    inj-event(auth_UserSendsLastMessageToApp(m_1, m_2, m_2_bis, m_7, m_8)). 



(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

free c:channel.
process (*use root process for setup *)

    (* create identities *)
    new u:bitstring;
    new a:bitstring;
    new v:bitstring;
    new i:bitstring;

    (*advertise identities*)
    out(c,u);
    out(c,a);
    out(c,v);
    out(c, i);

    (*declare secret keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;
    (* new ske:SecretKey;   RH: if this is the evesdropper we can omit it. *)

    (*advertise public keys*)
    out(c,pk(sku));
    out(c,pk(ska));
    out(c,pk(skv));
    out(c,pk(ski));

    let vc = ((i, u), sig((i, u), ski)) in

    (*let agents dance*)
    (
        ! open_user(c, u, sku, a, pk(ska), v, pk(skv), vc, uri)
      | ! open_app(c, a, ska, u, pk(sku), v, pk(skv), uri)
      | ! open_verifier(c, v, skv, u, pk(sku), a, pk(ska), uri)
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)