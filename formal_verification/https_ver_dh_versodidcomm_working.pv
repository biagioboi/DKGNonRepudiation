(* --------------------------------------------------------------------------------------------------------- *)
(* HTTPS Connect *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* START keys *)
type SymmetricKey.
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)
type G.
type exponent.

const uri_req:bitstring.
const usr:bitstring.

type tag.
type ktag.

const tag1:bitstring.
const tag2:bitstring.
const tag2_bis:bitstring.
const tag3:bitstring.
const tag4:bitstring.
const tag5:bitstring.
const tag6:bitstring.
const tag7:bitstring.
const tag8:bitstring.
const tag9:bitstring.
const tag10:bitstring.
const tag11:bitstring.
const tag12:bitstring.


const KEXDHINIT, KEXDHREPLY, KEXDHINITSERVER, KEXDHREPLYSERVER: tag [data].
const keyEncStoC, keyEncCtoS, keyEncAtoC, keyEncCtoA: ktag [data].

(* START hash *)
fun hash(bitstring): bitstring.
fun hash_pk(PublicKey): bitstring.
fun hash_fork(bitstring): SymmetricKey.
(* End hash *)

(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).

fun symk_to_bit(SymmetricKey): bitstring.
reduc forall symk:SymmetricKey; bit_to_symk(symk_to_bit(symk)) = symk.
(* END symmetric encryption *)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START asymmetric encryption *)
fun genaenc(G(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:G,sk:SecretKey; genadec(genaenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(* START digital signature *)
fun sig_hash_k(SymmetricKey(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:SymmetricKey,sk:SecretKey; check_hash_k(msg,sig_hash_k(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(*DEFS*)
fun ch(bitstring): channel.
fun chSymK(SymmetricKey): channel.



const g: G.
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).


(* SECRECY *)

free rule_fromVerifier: bitstring [private].
free vp_fromProver: bitstring [private].
free vp_fromVerifier: bitstring [private].
free cred_fromVerifier: bitstring [private].
free resource_fromVerifier: bitstring [private].

free vp_fromApp: bitstring [private].

(* AUTHENTICATION *)

event auth_AppCompletesProtocol(bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring).
event auth_UserCompletesProtocol(bitstring,bitstring,bitstring,bitstring).
event auth_VerifierCompletesProtocol(bitstring,bitstring,bitstring,bitstring, bitstring,bitstring).

(* App -> User *)
event auth_AppSendsLastMessageToUser(bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring).
event verifierInConeOfUser(bitstring,bitstring,bitstring,bitstring).

(* User -> App *)
event auth_UserSendsLastMessageToApp(bitstring,bitstring, bitstring,bitstring).

(* Verifier -> App *)
event auth_VerifierSendsLastMessageToApp(bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).

(* App -> Verifier *)
event auth_AppSendsLastMessageToVerifier(bitstring, bitstring, bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_AppCompletesProtocolWithUser(bitstring, bitstring,bitstring, bitstring, bitstring,bitstring,bitstring, bitstring).


free sk_E:SecretKey.
free exp_E:exponent.
free sk_E2:SecretKey.
free exp_E2:exponent.
free e:bitstring.
free e2:bitstring.

(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

let user(talksOnlyToHonest:bool, c:channel, u:bitstring, exp_u:exponent, sku:SecretKey, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, exp_v:G, vc:bitstring, uri:bitstring) =
    (* Message 1 *)
    new dhsecretU: exponent;
    let dhpublicU = exp(g, dhsecretU) in
    let K0 = exp(exp_a, dhsecretU) in
    let h0 = hash_fork((dhpublicU, exp_a, K0)) in
    let m_1:bitstring = (KEXDHINIT, dhpublicU, sig_hash_k(h0, sku)) in
    out(c, m_1);

    in(c, m_2:bitstring);
    let (=KEXDHREPLY, dhpublicA: G, sign: bitstring) = m_2 in
    let K = exp(dhpublicA, dhsecretU) in
    let h = hash_fork((dhpublicU, dhpublicA, K)) in
    if check_hash_k(h, sign, pka) = true then

    let symk_ua_enc = hash_fork((K, h, keyEncCtoS)) in
    let symk_ua_dec = hash_fork((K, h, keyEncStoC)) in
    

    (* Message 7 *)

    in(c, m_7:bitstring);
    let (=tag7, v':bitstring, n_r:bitstring, m_cinque:bitstring) = dec(m_7, symk_ua_dec)  in
    if (v = v') then
    let (vpr_rec:bitstring, sig_vpr_2:bitstring) = m_cinque in (* Here it is the message *)
    let (v'':bitstring, rule':bitstring, n_c:bitstring) = vpr_rec in
    let (u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    (*  We trust the signature applied by the verifier because we trust the app, which already checked on this, 
        so we just check the signature applied by the app *)
    if (check(vpr_rec, sig_vpr_2, pka)) then
    if ((u', uri', a', v'') = (u, uri, a, v)) then
    
    (* Message 8 *)
    (* if (check(vpr_body, vpr_body_signature, pkv)) then *)
    (*if (uri', a') = (uri, a) then*)
    let vp = ((u,v, n_c, vc, uri, a), sig((u, v, n_c, vc, uri, a), sku)) in
    let tosend = (u, vp) in
    let m_8 = enc((tag8, n_r, tosend), symk_ua_enc) in

    event auth_UserSendsLastMessageToApp(m_1, m_2, m_7,m_8);
    out(c, m_8);
    
    if talksOnlyToHonest then
        event auth_UserCompletesProtocol(m_1, m_2 , m_7, m_8)|
        out(ch(vp), vp_fromProver);

    0.

let app(talksOnlyToHonest:bool, c:channel, c2:channel, a:bitstring, exp_a:exponent, ska:SecretKey,  u:bitstring, pku:PublicKey, exp_u:G, v:bitstring, pkv:PublicKey, exp_v:G, i:bitstring, pki:PublicKey, uri:bitstring) =

    (* Message 1 *)

    in(c, m_1:bitstring);

    let (=KEXDHINIT, dhpublicU: G, sig_hash_dhPublicU:bitstring) = m_1 in
    let K0 = exp(dhpublicU, exp_a) in
    let h0 = hash_fork((dhpublicU, exp(g, exp_a), K0)) in
    if check_hash_k(h0, sig_hash_dhPublicU, pku) then

    new dhsecretAU: exponent;
    let dhpublicAU = exp(g, dhsecretAU) in
    let K = exp(dhpublicU, dhsecretAU) in
    let h = hash_fork((dhpublicU, dhpublicAU, K)) in

    let m_2:bitstring = (KEXDHREPLY, dhpublicAU, sig_hash_k(h, ska)) in 
    out(c, m_2);
    
    let symk_ua_enc = hash_fork((K, h, keyEncStoC)) in
    let symk_ua_dec = hash_fork((K, h, keyEncCtoS)) in

    (* Start contacting the Verifier for VPR generation *)
    (* Message 3 *)

    new dhsecretAC: exponent;
    let dhpublicAC = exp(g, dhsecretAC) in
    let KC0 = exp(exp_v, dhsecretAC) in
    let hc0 = hash_fork((exp_v, dhpublicAC, KC0)) in
    let m_3:bitstring = (KEXDHINITSERVER, dhpublicAC, sig_hash_k(hc0, ska)) in
    out(c2, m_3);

    in(c2, m_4:bitstring);
    let (=KEXDHREPLYSERVER, dhpublicC: G, sign: bitstring) = m_4 in
    let KC = exp(dhpublicC, dhsecretAC) in
    let hc = hash_fork((dhpublicC, dhpublicAC, KC)) in
    if check_hash_k(hc, sign, pkv) = true then

    let symk_av_enc = hash_fork((KC, hc, keyEncAtoC)) in
    let symk_av_dec = hash_fork((KC, hc, keyEncCtoA)) in

    (* Message 4 *)
    let m_5 = enc((tag5, (i, v, u, uri, a)), symk_av_enc) in
    out(c2,m_5);


    (* Receive VPR *)
    in(c2, m_6:bitstring);
    let (=tag6, dec_vpr:bitstring) = dec(m_6, symk_av_dec) in
    let (v':bitstring, rule':bitstring, n_c':bitstring) = dec_vpr in
    let(u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    if ((v', u', i', uri', a') = (v, u, i, uri, a)) then (*Who knows, maybe server is starting behaving maliciously *)


    (* End contacting the Verifier for VPR generation *)

    (* Message 7 *)
    new n_r:bitstring;
    let vpr_signed = (dec_vpr, sig(dec_vpr, ska)) in
    let m_7 = enc((tag7, n_r, v, vpr_signed), symk_ua_enc) in
    event auth_AppSendsLastMessageToUser(m_1,m_2,m_3, m_4, m_5, m_6, m_7);
    out(c, m_7);

    (* Message 8 *)
    in(c, m_8:bitstring);
    let (=tag8, n_r':bitstring, (u':bitstring, vp_signed:bitstring)) = dec(m_8, symk_ua_dec) in
    if (u=u' && n_r = n_r') then
    let (vp:bitstring, sign_on_vp:bitstring) = vp_signed in
    let (u'':bitstring, v'':bitstring, n_c'':bitstring, vc_signed':bitstring, uri'':bitstring, a'':bitstring) = vp in
    let vp_2_prev:bitstring = ((vp, sign_on_vp), sig((vp, sign_on_vp), ska)) in
    if (check(vp, sign_on_vp, pku)) then
    if (u, v, a) = (u'', v'', a'') then

    (* Message 9 *)
    let m_9 = enc((tag9,vp_2_prev),symk_av_enc) in
    event auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4,m_5,m_6, m_7, m_8,m_9);
    out(c2, m_9);

    
    (* Message 10 *)
    in(c2, m_10:bitstring);
    let (=tag10, resource:bitstring) = dec(m_10, symk_av_dec) in

    if (talksOnlyToHonest) then
        event auth_AppCompletesProtocol(m_1,m_2, m_3,m_4,m_5,m_6,m_7, m_8, m_9,m_10)|
        out(ch(vp), vp_fromApp);
    
    0.

let verifier(talksOnlyToHonest:bool, c:channel, v:bitstring, exp_v:exponent, skv:SecretKey, u:bitstring, pku:PublicKey, exp_u:G, a:bitstring, pka:PublicKey, exp_a:G, i:bitstring, pki:PublicKey,  uri:bitstring) =

    in(c, m_3:bitstring);
    let (=KEXDHINITSERVER, dhpublicA: G, sig_hash_dhPublicA:bitstring) = m_3 in
    let K0 = exp(dhpublicA, exp_v) in
    let h = hash_fork(( exp(g, exp_v), dhpublicA, K0)) in
    if check_hash_k(h, sig_hash_dhPublicA, pka) then

    new dhsecretV: exponent;
    let dhpublicV = exp(g, dhsecretV) in
    let K = exp(dhpublicA, dhsecretV) in
    let h = hash_fork(( dhpublicV, dhpublicA, K)) in

    let m_4:bitstring = (KEXDHREPLYSERVER, dhpublicV, sig_hash_k(h, skv)) in 
    out(c, m_4);

    let symk_av_enc = hash_fork((K, h, keyEncCtoA)) in
    let symk_av_dec = hash_fork((K, h, keyEncAtoC)) in

    (* Message 5 *)
    in(c, m_5:bitstring);
    let (=tag5, (i':bitstring, v':bitstring, u':bitstring,  uri':bitstring, a':bitstring)) = dec(m_5, symk_av_enc) in
    if (i', v', u', uri', a') = (i, v, u, uri, a) then
    
    (* Message 6, VPR *)
    new n_c:bitstring;
    let rule = (u, i, uri, a) in
    let vpr_send_prev = (v, rule, n_c)  in
    let m_6 = enc((tag6, vpr_send_prev), symk_av_enc)  in
    event verifierInConeOfUser(m_3,m_4,m_5,m_6);
    out(c, m_6);

    (* Message 9 *)
    in(c, m_9:bitstring);
    let (=tag9, vp_signed_2:bitstring) = dec(m_9, symk_av_dec) in
    let (vp_signed:bitstring, vp_sign_2:bitstring) = vp_signed_2 in
    if (check(vp_signed, vp_sign_2, pka)) then


    let (vp:bitstring, sign_vp:bitstring) = vp_signed in
    let (u4:bitstring, v4:bitstring, n_c':bitstring, vc_signed':bitstring, uri'':bitstring, a'':bitstring) = vp in
    let (vc:bitstring, sign_vc:bitstring) = vc_signed' in
    let (iss'':bitstring, u'':bitstring) = vc in

    if check(vp, sign_vp, pku) then
    if check(vc, sign_vc, pki) then
    if (n_c', u'', uri'', a'', u4, v4) = (n_c, u, uri, a, u, v) then
    new resource:bitstring;
    let m_10 = enc((tag10, resource),symk_av_enc)  in
    event auth_VerifierSendsLastMessageToApp(m_3,m_4,m_5,m_6, m_9, m_10);

    if talksOnlyToHonest then
        event auth_VerifierCompletesProtocol(m_3,m_4,m_5,m_6,m_9,m_10)|
        out(ch(resource), resource_fromVerifier);
    
    0.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

let open_user(c:channel, u:bitstring, exp_u:exponent, sku:SecretKey, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, exp_v:G, vc:bitstring, uri:bitstring) =
    in(c, euri:bitstring);
    user(true, c, u, exp_u, sku, a, pka, exp_a, v, pkv, exp_v,vc, uri) |
    user(false, c, u, exp_u, sku,e,pk(sk_E), exp(g, exp_E) ,v, pkv, exp_v, vc, uri) |
    user(false, c, u, exp_u, sku, a, pka, exp_a, e,pk(sk_E), exp(g, exp_E), vc, euri) |
    user(false, c, u, exp_u, sku, e,pk(sk_E), exp(g, exp_E),e,pk(sk_E), exp(g, exp_E), vc, euri).

let open_app(c:channel, c2:channel, a:bitstring, exp_a:exponent,  ska:SecretKey, u:bitstring, pku:PublicKey, exp_u:G, v:bitstring, pkv:PublicKey, exp_v:G, i:bitstring, pki:PublicKey, exp_i:G, uri:bitstring) =
    app(true, c, c2, a, exp_a, ska, u, pku, exp_u, v, pkv, exp_v, i, pki, uri) |
    app(false, c, c2, a, exp_a, ska, e,pk(sk_E), exp(g, exp_E), v, pkv, exp_v, i, pki, uri) |
    app(false, c, c2, a, exp_a, ska, u, pku, exp_u, e2, pk(sk_E), exp(g, exp_E), i, pki, uri) |
    app(false, c, c2, a, exp_a, ska, e,pk(sk_E), exp(g, exp_E), e, pk(sk_E), exp(g, exp_E), i, pki, uri)
    .  (* euri is a URI for another server. If the verifier is the intended trusted Solid server then the uri is as expected *) 

let open_verifier(c:channel, v:bitstring, exp_v:exponent,  skv:SecretKey, u:bitstring, pku:PublicKey, exp_u:G, a:bitstring, pka:PublicKey, exp_a:G, i:bitstring, pki:PublicKey,exp_i:G, uri:bitstring) =
    
    verifier(true, c, v, exp_v, skv, u, pku, exp_u, a, pka, exp_a, i, pki,  uri) |
    verifier(false, c, v, exp_v, skv, e,pk(sk_E), exp(g, exp_E), a, pka,exp_a,  i, pki, uri) |
    verifier(false, c, v, exp_v, skv, u, pku, exp_u, e,pk(sk_E), exp(g, exp_E), i, pki,  uri) |
    verifier(false, c, v, exp_v, skv, e,pk(sk_E), exp(g, exp_E), e,pk(sk_E), exp(g, exp_E), i, pki, uri)
    .

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* SECRECY *)

(*query attacker(vp_fromProver). 
query attacker(vp_fromApp). 
query attacker(resource_fromVerifier). *)


query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_vpr:bitstring, m_vp:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring, m_6:bitstring; 
    inj-event(auth_UserCompletesProtocol(m_handshakeReq, m_handshakeResp, m_vpr, m_vp))
    ==>
    inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq, m_handshakeResp, m_3, m_4, m_5, m_6, m_vpr))
    &&
    inj-event(verifierInConeOfUser(m_3, m_4, m_5, m_6)).




query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_vp:bitstring, m_accesstoken:bitstring,  m_1:bitstring, m_2:bitstring,m_2_bis:bitstring, m_7:bitstring, m_8:bitstring;
    inj-event(auth_AppCompletesProtocol(m_1, m_2, m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_7, m_8, m_vp, m_accesstoken))
    ==>
    inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_vp, m_accesstoken))
    &&
    inj-event(auth_UserSendsLastMessageToApp(m_1, m_2, m_7, m_8)). 

query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_complete:bitstring, m_handshake_ver:bitstring, m_handshake_resp_ver:bitstring, m_uri:bitstring, m_rule:bitstring, m_vpr:bitstring, m_vp:bitstring, m_accesstoken:bitstring, m_1:bitstring, m_2:bitstring, m_2_bis:bitstring, m_7:bitstring, m_8:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_handshake_ver, m_handshake_resp_ver, m_uri, m_vpr, m_vp, m_accesstoken))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_handshake_ver, m_handshake_resp_ver, m_uri, m_vpr, m_7, m_8, m_vp))
    &&
    inj-event(auth_UserSendsLastMessageToApp(m_1, m_2, m_7, m_8)). 


(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

free c:channel.
free c2:channel.
process (*use root process for setup *)

    (* create identities *)
    new u:bitstring;
    new a:bitstring;
    new v:bitstring;
    new i:bitstring;

    (*advertise identities*)
    out(c,u);
    out(c,a);
    out(c,v);
    out(c, i);

    (*declare secret keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;


    new exp_u:exponent;
    new exp_a:exponent;
    new exp_v:exponent;
    new exp_i:exponent;

    out(c, exp(g, exp_u));
    out(c, exp(g, exp_a));
    out(c, exp(g, exp_v));
    out(c, exp(g, exp_i));
    
    (*advertise public keys*)
    out(c,pk(sku));
    out(c,pk(ska));
    out(c,pk(skv));
    out(c,pk(ski));

    let vc = ((i, u), sig((i, u), ski)) in

    (*let agents dance*)
    (
       ! open_app(c, c2, a, exp_a, ska, u, pk(sku), exp(g, exp_u),v, pk(skv), exp(g, exp_v),i, pk(ski), exp(g, exp_i),uri_req)
      |  ! open_user(c, u, exp_u, sku, a, pk(ska), exp(g, exp_a), v, pk(skv), exp(g, exp_v),vc, uri_req)
      | ! open_verifier(c2, v, exp_v, skv, u, pk(sku), exp(g, exp_u),a, pk(ska), exp(g, exp_a), i, pk(ski),exp(g, exp_i),uri_req)
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)