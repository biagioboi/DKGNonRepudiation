File "didcomm_ver_encres_updated.pv", line 322, character 9:
Warning: identifier h rebound.
Linear part:
exp(exp(g,x),y) = exp(exp(g,y),x)
Completing equations...
Completed equations:
exp(exp(g,x),y) = exp(exp(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new u: bitstring;
{2}new a: bitstring;
{3}new v: bitstring;
{4}new i: bitstring;
{5}new ttp: bitstring;
{6}out(c, u);
{7}out(c, a);
{8}out(c, v);
{9}out(c, i);
{10}out(c, ttp);
{11}new sku: SecretKey;
{12}new ska: SecretKey;
{13}new skv: SecretKey;
{14}new ski: SecretKey;
{15}new sk_ttp: SecretKey;
{16}new exp_u: exponent;
{17}new exp_a: exponent;
{18}new exp_v: exponent;
{19}new exp_i: exponent;
{20}new exp_ttp: exponent;
{21}out(c, exp(g,exp_u));
{22}out(c, exp(g,exp_a));
{23}out(c, exp(g,exp_v));
{24}out(c, exp(g,exp_i));
{25}out(c, exp(g,exp_ttp));
{26}out(c, pk(sku));
{27}out(c, pk(ska));
{28}out(c, pk(skv));
{29}out(c, pk(ski));
{30}out(c, pk(sk_ttp));
{31}let vc: bitstring = ((i,u),sig((i,u),ski)) in
(
    {32}!
    {33}let talksOnlyToHonest: bool = true in
    {34}let c_1: channel = c in
    {35}let u_1: bitstring = u in
    {36}let exp_u_1: exponent = exp_u in
    {37}let sku_1: SecretKey = sku in
    {38}let a_1: bitstring = a in
    {39}let pka: PublicKey = pk(ska) in
    {40}let exp_a_1: G = exp(g,exp_a) in
    {41}let v_1: bitstring = v in
    {42}let pkv: PublicKey = pk(skv) in
    {43}let exp_v_1: G = exp(g,exp_v) in
    {44}let uri: bitstring = uri_req in
    {45}new su: exponent;
    {46}let g_su: G = exp(g,su) in
    {47}let K0: G = exp(exp_a_1,su) in
    {48}let h0: SymmetricKey = hash_fork(((g_su,exp_a_1,K0),keyEncCtoSTemp)) in
    {49}new symk_0: SymmetricKey;
    {50}let diddoc_su_signed: bitstring = (g_su,sig(hash((sig_gsu,pka,g_su)),sku_1)) in
    {51}let m_1: bitstring = (KEXDHINIT,aenc((gsu,g_su),pka),enc((symk0,symk_0),h0),enc(diddoc_su_signed,symk_0)) in
    {52}out(c_1, (msg1,m_1));
    {53}in(c_1, (=msg2,m_2: bitstring));
    {54}let (=KEXDHREPLY,g_sa_enc: bitstring,symk_1_enc: bitstring,diddoc_sa_signed_enc: bitstring) = m_2 in
    {55}let (=gsa,g_sa: G) = adec(g_sa_enc,sku_1) in
    {56}let K: G = exp(g_sa,su) in
    {57}let h: SymmetricKey = hash_fork(((g_su,g_sa,K),keyEncStoCTemp)) in
    {58}let (=symk1,symk_1: SymmetricKey) = dec(symk_1_enc,h) in
    {59}let (g_sa': G,g_sa_signed: bitstring) = dec(diddoc_sa_signed_enc,symk_1) in
    {60}if check(hash((sig_gsa,pk(sku_1),g_sa)),g_sa_signed,pka) then
    {61}let symk_ua_enc: SymmetricKey = hash_fork((K,h,keyEncCtoS)) in
    {62}let symk_ua_dec: SymmetricKey = hash_fork((K,h,keyEncStoC)) in
    {63}in(c_1, (=msg7,m_7: bitstring));
    {64}let (symk6_enc: bitstring,m7_enc: bitstring) = m_7 in
    {65}let (=symk6,symk_6: SymmetricKey) = dec(symk6_enc,symk_ua_dec) in
    {66}let (=tag7,n_r: bitstring,v': bitstring,vpr_signed: bitstring) = dec(m7_enc,symk_6) in
    {67}if (v_1 = v') then
    {68}let (=dec_vpr_2_msg,vpr_rec: bitstring,sig_vpr_2: bitstring) = vpr_signed in
    {69}if check(vpr_rec,sig_vpr_2,pka) then
    {70}let (=dec_vpr_msg,v'': bitstring,rule': bitstring,n_c: bitstring) = vpr_rec in
    {71}let (u': bitstring,i': bitstring,uri': bitstring,a': bitstring) = rule' in
    {72}if ((u',uri',a',v'') = (u_1,uri,a_1,v_1)) then
    {73}let vp: bitstring = (vp_msg,(vpr_rec,vc),sig((vpr_rec,vc),sku_1)) in
    {74}new symk_7: SymmetricKey;
    {75}let symk7_enc: bitstring = enc((symk7,symk_7),symk_ua_enc) in
    {76}let m_8: bitstring = (symk7_enc,enc((tag8,n_r,vp),symk_ua_enc)) in
    {77}event auth_UserSendsLastMessageToApp(m_1,m_2,m_7,m_8);
    {78}out(c_1, (msg8,m_8));
    {79}if talksOnlyToHonest then
    (
        {80}event auth_UserCompletesProtocol(m_1,m_2,m_7,m_8)
    ) | (
        {81}out(ch(vp), vp_fromProver)
    )
) | (
    {82}!
    {83}let talksOnlyToHonest_1: bool = false in
    {84}let c_2: channel = c in
    {85}let u_2: bitstring = u in
    {86}let exp_u_2: exponent = exp_u in
    {87}let sku_2: SecretKey = sku in
    {88}let a_2: bitstring = e in
    {89}let pka_1: PublicKey = pk(sk_E) in
    {90}let exp_a_2: G = exp(g,exp_E) in
    {91}let v_2: bitstring = v in
    {92}let pkv_1: PublicKey = pk(skv) in
    {93}let exp_v_2: G = exp(g,exp_v) in
    {94}let uri_1: bitstring = uri_req in
    {95}new su_1: exponent;
    {96}let g_su_1: G = exp(g,su_1) in
    {97}let K0_1: G = exp(exp_a_2,su_1) in
    {98}let h0_1: SymmetricKey = hash_fork(((g_su_1,exp_a_2,K0_1),keyEncCtoSTemp)) in
    {99}new symk_0_1: SymmetricKey;
    {100}let diddoc_su_signed_1: bitstring = (g_su_1,sig(hash((sig_gsu,pka_1,g_su_1)),sku_2)) in
    {101}let m: bitstring = (KEXDHINIT,aenc((gsu,g_su_1),pka_1),enc((symk0,symk_0_1),h0_1),enc(diddoc_su_signed_1,symk_0_1)) in
    {102}out(c_2, (msg1,m));
    {103}in(c_2, (=msg2,m_3: bitstring));
    {104}let (=KEXDHREPLY,g_sa_enc_1: bitstring,symk_1_enc_1: bitstring,diddoc_sa_signed_enc_1: bitstring) = m_3 in
    {105}let (=gsa,g_sa_1: G) = adec(g_sa_enc_1,sku_2) in
    {106}let K_1: G = exp(g_sa_1,su_1) in
    {107}let h_1: SymmetricKey = hash_fork(((g_su_1,g_sa_1,K_1),keyEncStoCTemp)) in
    {108}let (=symk1,symk: SymmetricKey) = dec(symk_1_enc_1,h_1) in
    {109}let (g_sa'_1: G,g_sa_signed_1: bitstring) = dec(diddoc_sa_signed_enc_1,symk) in
    {110}if check(hash((sig_gsa,pk(sku_2),g_sa_1)),g_sa_signed_1,pka_1) then
    {111}let symk_ua_enc_1: SymmetricKey = hash_fork((K_1,h_1,keyEncCtoS)) in
    {112}let symk_ua_dec_1: SymmetricKey = hash_fork((K_1,h_1,keyEncStoC)) in
    {113}in(c_2, (=msg7,m_4: bitstring));
    {114}let (symk6_enc_1: bitstring,m7_enc_1: bitstring) = m_4 in
    {115}let (=symk6,symk_2: SymmetricKey) = dec(symk6_enc_1,symk_ua_dec_1) in
    {116}let (=tag7,n_r_1: bitstring,v'_1: bitstring,vpr_signed_1: bitstring) = dec(m7_enc_1,symk_2) in
    {117}if (v_2 = v'_1) then
    {118}let (=dec_vpr_2_msg,vpr_rec_1: bitstring,sig_vpr: bitstring) = vpr_signed_1 in
    {119}if check(vpr_rec_1,sig_vpr,pka_1) then
    {120}let (=dec_vpr_msg,v''_1: bitstring,rule'_1: bitstring,n_c_1: bitstring) = vpr_rec_1 in
    {121}let (u'_1: bitstring,i'_1: bitstring,uri'_1: bitstring,a'_1: bitstring) = rule'_1 in
    {122}if ((u'_1,uri'_1,a'_1,v''_1) = (u_2,uri_1,a_2,v_2)) then
    {123}let vp_1: bitstring = (vp_msg,(vpr_rec_1,vc),sig((vpr_rec_1,vc),sku_2)) in
    {124}new symk_3: SymmetricKey;
    {125}let symk7_enc_1: bitstring = enc((symk7,symk_3),symk_ua_enc_1) in
    {126}let m_5: bitstring = (symk7_enc_1,enc((tag8,n_r_1,vp_1),symk_ua_enc_1)) in
    {127}event auth_UserSendsLastMessageToApp(m,m_3,m_4,m_5);
    {128}out(c_2, (msg8,m_5));
    {129}if talksOnlyToHonest_1 then
    (
        {130}event auth_UserCompletesProtocol(m,m_3,m_4,m_5)
    ) | (
        {131}out(ch(vp_1), vp_fromProver)
    )
) | (
    {132}!
    {133}let talksOnlyToHonest_2: bool = false in
    {134}let c_3: channel = c in
    {135}let u_3: bitstring = u in
    {136}let exp_u_3: exponent = exp_u in
    {137}let sku_3: SecretKey = sku in
    {138}let a_3: bitstring = a in
    {139}let pka_2: PublicKey = pk(ska) in
    {140}let exp_a_3: G = exp(g,exp_a) in
    {141}let v_3: bitstring = e in
    {142}let pkv_2: PublicKey = pk(sk_E) in
    {143}let exp_v_3: G = exp(g,exp_E) in
    {144}let uri_2: bitstring = euri in
    {145}new su_2: exponent;
    {146}let g_su_2: G = exp(g,su_2) in
    {147}let K0_2: G = exp(exp_a_3,su_2) in
    {148}let h0_2: SymmetricKey = hash_fork(((g_su_2,exp_a_3,K0_2),keyEncCtoSTemp)) in
    {149}new symk_0_2: SymmetricKey;
    {150}let diddoc_su_signed_2: bitstring = (g_su_2,sig(hash((sig_gsu,pka_2,g_su_2)),sku_3)) in
    {151}let m_6: bitstring = (KEXDHINIT,aenc((gsu,g_su_2),pka_2),enc((symk0,symk_0_2),h0_2),enc(diddoc_su_signed_2,symk_0_2)) in
    {152}out(c_3, (msg1,m_6));
    {153}in(c_3, (=msg2,m_9: bitstring));
    {154}let (=KEXDHREPLY,g_sa_enc_2: bitstring,symk_1_enc_2: bitstring,diddoc_sa_signed_enc_2: bitstring) = m_9 in
    {155}let (=gsa,g_sa_2: G) = adec(g_sa_enc_2,sku_3) in
    {156}let K_2: G = exp(g_sa_2,su_2) in
    {157}let h_2: SymmetricKey = hash_fork(((g_su_2,g_sa_2,K_2),keyEncStoCTemp)) in
    {158}let (=symk1,symk_4: SymmetricKey) = dec(symk_1_enc_2,h_2) in
    {159}let (g_sa'_2: G,g_sa_signed_2: bitstring) = dec(diddoc_sa_signed_enc_2,symk_4) in
    {160}if check(hash((sig_gsa,pk(sku_3),g_sa_2)),g_sa_signed_2,pka_2) then
    {161}let symk_ua_enc_2: SymmetricKey = hash_fork((K_2,h_2,keyEncCtoS)) in
    {162}let symk_ua_dec_2: SymmetricKey = hash_fork((K_2,h_2,keyEncStoC)) in
    {163}in(c_3, (=msg7,m_10: bitstring));
    {164}let (symk6_enc_2: bitstring,m7_enc_2: bitstring) = m_10 in
    {165}let (=symk6,symk_5: SymmetricKey) = dec(symk6_enc_2,symk_ua_dec_2) in
    {166}let (=tag7,n_r_2: bitstring,v'_2: bitstring,vpr_signed_2: bitstring) = dec(m7_enc_2,symk_5) in
    {167}if (v_3 = v'_2) then
    {168}let (=dec_vpr_2_msg,vpr_rec_2: bitstring,sig_vpr_1: bitstring) = vpr_signed_2 in
    {169}if check(vpr_rec_2,sig_vpr_1,pka_2) then
    {170}let (=dec_vpr_msg,v''_2: bitstring,rule'_2: bitstring,n_c_2: bitstring) = vpr_rec_2 in
    {171}let (u'_2: bitstring,i'_2: bitstring,uri'_2: bitstring,a'_2: bitstring) = rule'_2 in
    {172}if ((u'_2,uri'_2,a'_2,v''_2) = (u_3,uri_2,a_3,v_3)) then
    {173}let vp_2: bitstring = (vp_msg,(vpr_rec_2,vc),sig((vpr_rec_2,vc),sku_3)) in
    {174}new symk_8: SymmetricKey;
    {175}let symk7_enc_2: bitstring = enc((symk7,symk_8),symk_ua_enc_2) in
    {176}let m_11: bitstring = (symk7_enc_2,enc((tag8,n_r_2,vp_2),symk_ua_enc_2)) in
    {177}event auth_UserSendsLastMessageToApp(m_6,m_9,m_10,m_11);
    {178}out(c_3, (msg8,m_11));
    {179}if talksOnlyToHonest_2 then
    (
        {180}event auth_UserCompletesProtocol(m_6,m_9,m_10,m_11)
    ) | (
        {181}out(ch(vp_2), vp_fromProver)
    )
) | (
    {182}!
    {183}let talksOnlyToHonest_3: bool = false in
    {184}let c_4: channel = c in
    {185}let u_4: bitstring = u in
    {186}let exp_u_4: exponent = exp_u in
    {187}let sku_4: SecretKey = sku in
    {188}let a_4: bitstring = e in
    {189}let pka_3: PublicKey = pk(sk_E) in
    {190}let exp_a_4: G = exp(g,exp_E) in
    {191}let v_4: bitstring = e in
    {192}let pkv_3: PublicKey = pk(sk_E) in
    {193}let exp_v_4: G = exp(g,exp_E) in
    {194}let uri_3: bitstring = euri in
    {195}new su_3: exponent;
    {196}let g_su_3: G = exp(g,su_3) in
    {197}let K0_3: G = exp(exp_a_4,su_3) in
    {198}let h0_3: SymmetricKey = hash_fork(((g_su_3,exp_a_4,K0_3),keyEncCtoSTemp)) in
    {199}new symk_0_3: SymmetricKey;
    {200}let diddoc_su_signed_3: bitstring = (g_su_3,sig(hash((sig_gsu,pka_3,g_su_3)),sku_4)) in
    {201}let m_12: bitstring = (KEXDHINIT,aenc((gsu,g_su_3),pka_3),enc((symk0,symk_0_3),h0_3),enc(diddoc_su_signed_3,symk_0_3)) in
    {202}out(c_4, (msg1,m_12));
    {203}in(c_4, (=msg2,m_13: bitstring));
    {204}let (=KEXDHREPLY,g_sa_enc_3: bitstring,symk_1_enc_3: bitstring,diddoc_sa_signed_enc_3: bitstring) = m_13 in
    {205}let (=gsa,g_sa_3: G) = adec(g_sa_enc_3,sku_4) in
    {206}let K_3: G = exp(g_sa_3,su_3) in
    {207}let h_3: SymmetricKey = hash_fork(((g_su_3,g_sa_3,K_3),keyEncStoCTemp)) in
    {208}let (=symk1,symk_9: SymmetricKey) = dec(symk_1_enc_3,h_3) in
    {209}let (g_sa'_3: G,g_sa_signed_3: bitstring) = dec(diddoc_sa_signed_enc_3,symk_9) in
    {210}if check(hash((sig_gsa,pk(sku_4),g_sa_3)),g_sa_signed_3,pka_3) then
    {211}let symk_ua_enc_3: SymmetricKey = hash_fork((K_3,h_3,keyEncCtoS)) in
    {212}let symk_ua_dec_3: SymmetricKey = hash_fork((K_3,h_3,keyEncStoC)) in
    {213}in(c_4, (=msg7,m_14: bitstring));
    {214}let (symk6_enc_3: bitstring,m7_enc_3: bitstring) = m_14 in
    {215}let (=symk6,symk_10: SymmetricKey) = dec(symk6_enc_3,symk_ua_dec_3) in
    {216}let (=tag7,n_r_3: bitstring,v'_3: bitstring,vpr_signed_3: bitstring) = dec(m7_enc_3,symk_10) in
    {217}if (v_4 = v'_3) then
    {218}let (=dec_vpr_2_msg,vpr_rec_3: bitstring,sig_vpr_3: bitstring) = vpr_signed_3 in
    {219}if check(vpr_rec_3,sig_vpr_3,pka_3) then
    {220}let (=dec_vpr_msg,v''_3: bitstring,rule'_3: bitstring,n_c_3: bitstring) = vpr_rec_3 in
    {221}let (u'_3: bitstring,i'_3: bitstring,uri'_3: bitstring,a'_3: bitstring) = rule'_3 in
    {222}if ((u'_3,uri'_3,a'_3,v''_3) = (u_4,uri_3,a_4,v_4)) then
    {223}let vp_3: bitstring = (vp_msg,(vpr_rec_3,vc),sig((vpr_rec_3,vc),sku_4)) in
    {224}new symk_11: SymmetricKey;
    {225}let symk7_enc_3: bitstring = enc((symk7,symk_11),symk_ua_enc_3) in
    {226}let m_15: bitstring = (symk7_enc_3,enc((tag8,n_r_3,vp_3),symk_ua_enc_3)) in
    {227}event auth_UserSendsLastMessageToApp(m_12,m_13,m_14,m_15);
    {228}out(c_4, (msg8,m_15));
    {229}if talksOnlyToHonest_3 then
    (
        {230}event auth_UserCompletesProtocol(m_12,m_13,m_14,m_15)
    ) | (
        {231}out(ch(vp_3), vp_fromProver)
    )
) | (
    {232}!
    {233}let talksOnlyToHonest_4: bool = true in
    {234}let c_5: channel = c in
    {235}let c2_1: channel = c2 in
    {236}let a_5: bitstring = a in
    {237}let exp_a_5: exponent = exp_a in
    {238}let ska_1: SecretKey = ska in
    {239}let u_5: bitstring = u in
    {240}let pku: PublicKey = pk(sku) in
    {241}let exp_u_5: G = exp(g,exp_u) in
    {242}let v_5: bitstring = v in
    {243}let pkv_4: PublicKey = pk(skv) in
    {244}let exp_v_5: G = exp(g,exp_v) in
    {245}let i_1: bitstring = i in
    {246}let pki: PublicKey = pk(ski) in
    {247}let uri_4: bitstring = uri_req in
    {248}in(c_5, (=msg1,m_16: bitstring));
    {249}let (=KEXDHINIT,g_su_enc: bitstring,symk0_enc: bitstring,g_su_signed_enc: bitstring) = m_16 in
    {250}let (=gsu,g_su_4: G) = adec(g_su_enc,ska_1) in
    {251}let K_temp: G = exp(g_su_4,exp_a_5) in
    {252}let h_temp: SymmetricKey = hash_fork(((g_su_4,exp(g,exp_a_5),K_temp),keyEncCtoSTemp)) in
    {253}let (=symk0,symk_0_4: SymmetricKey) = dec(symk0_enc,h_temp) in
    {254}let (g_su': G,g_su_sign: bitstring) = dec(g_su_signed_enc,symk_0_4) in
    {255}if check(hash((sig_gsu,pk(ska_1),g_su_4)),g_su_sign,pku) then
    {256}new sa: exponent;
    {257}let g_sa_4: G = exp(g,sa) in
    {258}let K_4: G = exp(g_su_4,sa) in
    {259}let h_4: SymmetricKey = hash_fork(((g_su_4,g_sa_4,K_4),keyEncStoCTemp)) in
    {260}new symk_12: SymmetricKey;
    {261}let diddoc_sa_enc: bitstring = (g_sa_4,sig(hash((sig_gsa,pku,g_sa_4)),ska_1)) in
    {262}let m_17: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_4),pkv_4),enc((symk1,symk_12),h_4),enc(diddoc_sa_enc,symk_12)) in
    {263}out(c_5, (msg2,m_17));
    {264}let symk_ua_enc_4: SymmetricKey = hash_fork((K_4,h_4,keyEncStoC)) in
    {265}let symk_ua_dec_4: SymmetricKey = hash_fork((K_4,h_4,keyEncCtoS)) in
    {266}new sav: exponent;
    {267}let g_sav: G = exp(g,sav) in
    {268}let KC_temp: G = exp(exp_v_5,sav) in
    {269}let hc_temp: SymmetricKey = hash_fork(((exp_v_5,g_sav,KC_temp),keyEncAtoCTemp)) in
    {270}new symk_13: SymmetricKey;
    {271}let diddoc_sav_signed: bitstring = (g_sav,sig(hash((sig_gsav,pkv_4,g_sav)),ska_1)) in
    {272}let m_18: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav),pku),enc((symk2,symk_13),hc_temp),enc(diddoc_sav_signed,symk_13)) in
    {273}out(c2_1, (msg3,m_18));
    {274}in(c2_1, (=msg4,m_19: bitstring));
    {275}let (=KEXDHREPLYSERVER,g_sc_enc: bitstring,symk3_enc: bitstring,g_sc_signed_enc: bitstring) = m_19 in
    {276}let (=gsac,g_sc: G) = adec(g_sc_enc,ska_1) in
    {277}let KC: G = exp(g_sc,sav) in
    {278}let hc: SymmetricKey = hash_fork(((g_sc,g_sav,KC),keyEncCtoATemp)) in
    {279}let (=symk3,symk_14: SymmetricKey) = dec(symk3_enc,hc) in
    {280}let (g_sc': G,g_sc_sisn: bitstring) = dec(g_sc_signed_enc,symk_14) in
    {281}if check(hash((sig_gsac,pk(ska_1),g_sc)),g_sc_sisn,pkv_4) then
    {282}let symk_av_enc: SymmetricKey = hash_fork((KC,hc,keyEncAtoC)) in
    {283}let symk_av_dec: SymmetricKey = hash_fork((KC,hc,keyEncCtoA)) in
    {284}new symk_15: SymmetricKey;
    {285}let symk4_enc: bitstring = enc((symk4,symk_15),symk_av_enc) in
    {286}let m_20: bitstring = (symk4_enc,enc((tag5,(i_1,v_5,u_5,uri_4,a_5)),symk_15)) in
    {287}out(c2_1, (msg5,m_20));
    {288}in(c2_1, (=msg6,m_21: bitstring));
    {289}let (symk5_enc: bitstring,m6_enc: bitstring) = m_21 in
    {290}let (=symk5,symk_16: SymmetricKey) = dec(symk5_enc,symk_av_dec) in
    {291}let (=tag6,dec_vpr: bitstring) = dec(m6_enc,symk_16) in
    {292}let (=dec_vpr_msg,v'_4: bitstring,rule'_4: bitstring,n_c': bitstring) = dec_vpr in
    {293}let (u'_4: bitstring,i'_4: bitstring,uri'_4: bitstring,a'_4: bitstring) = rule'_4 in
    {294}if ((v'_4,u'_4,i'_4,uri'_4,a'_4) = (v_5,u_5,i_1,uri_4,a_5)) then
    {295}new n_r_4: bitstring;
    {296}let vpr_signed_4: bitstring = (dec_vpr_2_msg,dec_vpr,sig(dec_vpr,ska_1)) in
    {297}new symk_17: SymmetricKey;
    {298}let symk6_enc_4: bitstring = enc((symk6,symk_17),symk_ua_enc_4) in
    {299}let m_22: bitstring = (symk6_enc_4,enc((tag7,n_r_4,v_5,vpr_signed_4),symk_17)) in
    {300}event auth_AppSendsLastMessageToUser(m_16,m_17,m_18,m_19,m_20,m_21,m_22);
    {301}out(c_5, (msg7,m_22));
    {302}in(c_5, (=msg8,m_23: bitstring));
    {303}let (symk7_enc_4: bitstring,m8_enc: bitstring) = m_23 in
    {304}let (=symk7,symk_18: SymmetricKey) = dec(symk7_enc_4,symk_ua_dec_4) in
    {305}let (=tag8,n_r': bitstring,vp_signed: bitstring) = dec(m8_enc,symk_18) in
    {306}if (n_r_4 = n_r') then
    {307}let (=vp_msg,vp_4: bitstring,sign_on_vp: bitstring) = vp_signed in
    {308}if check(vp_4,sign_on_vp,pku) then
    {309}let vp_2_prev: bitstring = (vp_2_msg,vp_signed,sig(vp_signed,ska_1)) in
    {310}new symk_19: SymmetricKey;
    {311}let symk8_enc: bitstring = enc((symk8,symk_19),symk_av_enc) in
    {312}let m_24: bitstring = (symk8_enc,enc((tag9,vp_2_prev),symk_19)) in
    {313}out(c2_1, (msg9,m_24));
    {314}in(c2_1, (=msg13,m_25: bitstring));
    {315}let (symk13_enc: bitstring,m13_enc: bitstring) = m_25 in
    {316}let (=symk13,symk_20: SymmetricKey) = dec(symk13_enc,symk_av_dec) in
    {317}let (=tag13,m13_dec: bitstring) = dec(m13_enc,symk_20) in
    {318}let (encrypted_k12': bitstring,encrypted_resource': bitstring,hash_encrypted_resource': bitstring) = m13_dec in
    {319}new symk_k14: SymmetricKey;
    {320}let encrypted_k14: bitstring = enc((symk14,symk_k14),symk_av_enc) in
    {321}let msg_sign: bitstring = (m13_dec,sig(m13_dec,ska_1)) in
    {322}let m_26: bitstring = (encrypted_k14,(tag14,enc(msg_sign,symk_k14))) in
    {323}event auth_AppSendsLastMessageToVerifier(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24,m_25,m_26);
    {324}out(c2_1, (msg14,m_26));
    {325}in(c2_1, (=msg15,m_27: bitstring));
    {326}let (symk15_enc: bitstring,m15_enc: bitstring) = m_27 in
    {327}let (=symk15,symk_21: SymmetricKey) = dec(symk15_enc,symk_av_dec) in
    {328}let (=symkForResource,skForSkForRes: SymmetricKey) = dec(m15_enc,symk_21) in
    {329}let (=tag16,skForRes: SymmetricKey) = dec(m15_enc,skForSkForRes) in
    {330}let resource': bitstring = dec(encrypted_resource',skForRes) in
    {331}if (hash(resource') = hash_encrypted_resource') then
    {332}if talksOnlyToHonest_4 then
    {333}event auth_AppCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24,m_25,m_26,m_27);
    {334}out(ch(resource'), resource_fromApp)
) | (
    {335}!
    {336}let talksOnlyToHonest_5: bool = false in
    {337}let c_6: channel = c in
    {338}let c2_2: channel = c2 in
    {339}let a_6: bitstring = a in
    {340}let exp_a_6: exponent = exp_a in
    {341}let ska_2: SecretKey = ska in
    {342}let u_6: bitstring = e in
    {343}let pku_1: PublicKey = pk(sk_E) in
    {344}let exp_u_6: G = exp(g,exp_E) in
    {345}let v_6: bitstring = v in
    {346}let pkv_5: PublicKey = pk(skv) in
    {347}let exp_v_6: G = exp(g,exp_v) in
    {348}let i_2: bitstring = i in
    {349}let pki_1: PublicKey = pk(ski) in
    {350}let uri_5: bitstring = uri_req in
    {351}in(c_6, (=msg1,m_28: bitstring));
    {352}let (=KEXDHINIT,g_su_enc_1: bitstring,symk0_enc_1: bitstring,g_su_signed_enc_1: bitstring) = m_28 in
    {353}let (=gsu,g_su_5: G) = adec(g_su_enc_1,ska_2) in
    {354}let K_temp_1: G = exp(g_su_5,exp_a_6) in
    {355}let h_temp_1: SymmetricKey = hash_fork(((g_su_5,exp(g,exp_a_6),K_temp_1),keyEncCtoSTemp)) in
    {356}let (=symk0,symk_0_5: SymmetricKey) = dec(symk0_enc_1,h_temp_1) in
    {357}let (g_su'_1: G,g_su_sign_1: bitstring) = dec(g_su_signed_enc_1,symk_0_5) in
    {358}if check(hash((sig_gsu,pk(ska_2),g_su_5)),g_su_sign_1,pku_1) then
    {359}new sa_1: exponent;
    {360}let g_sa_5: G = exp(g,sa_1) in
    {361}let K_5: G = exp(g_su_5,sa_1) in
    {362}let h_5: SymmetricKey = hash_fork(((g_su_5,g_sa_5,K_5),keyEncStoCTemp)) in
    {363}new symk_22: SymmetricKey;
    {364}let diddoc_sa_enc_1: bitstring = (g_sa_5,sig(hash((sig_gsa,pku_1,g_sa_5)),ska_2)) in
    {365}let m_29: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_5),pkv_5),enc((symk1,symk_22),h_5),enc(diddoc_sa_enc_1,symk_22)) in
    {366}out(c_6, (msg2,m_29));
    {367}let symk_ua_enc_5: SymmetricKey = hash_fork((K_5,h_5,keyEncStoC)) in
    {368}let symk_ua_dec_5: SymmetricKey = hash_fork((K_5,h_5,keyEncCtoS)) in
    {369}new sav_1: exponent;
    {370}let g_sav_1: G = exp(g,sav_1) in
    {371}let KC_temp_1: G = exp(exp_v_6,sav_1) in
    {372}let hc_temp_1: SymmetricKey = hash_fork(((exp_v_6,g_sav_1,KC_temp_1),keyEncAtoCTemp)) in
    {373}new symk_23: SymmetricKey;
    {374}let diddoc_sav_signed_1: bitstring = (g_sav_1,sig(hash((sig_gsav,pkv_5,g_sav_1)),ska_2)) in
    {375}let m_30: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_1),pku_1),enc((symk2,symk_23),hc_temp_1),enc(diddoc_sav_signed_1,symk_23)) in
    {376}out(c2_2, (msg3,m_30));
    {377}in(c2_2, (=msg4,m_31: bitstring));
    {378}let (=KEXDHREPLYSERVER,g_sc_enc_1: bitstring,symk3_enc_1: bitstring,g_sc_signed_enc_1: bitstring) = m_31 in
    {379}let (=gsac,g_sc_1: G) = adec(g_sc_enc_1,ska_2) in
    {380}let KC_1: G = exp(g_sc_1,sav_1) in
    {381}let hc_1: SymmetricKey = hash_fork(((g_sc_1,g_sav_1,KC_1),keyEncCtoATemp)) in
    {382}let (=symk3,symk_24: SymmetricKey) = dec(symk3_enc_1,hc_1) in
    {383}let (g_sc'_1: G,g_sc_sisn_1: bitstring) = dec(g_sc_signed_enc_1,symk_24) in
    {384}if check(hash((sig_gsac,pk(ska_2),g_sc_1)),g_sc_sisn_1,pkv_5) then
    {385}let symk_av_enc_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncAtoC)) in
    {386}let symk_av_dec_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncCtoA)) in
    {387}new symk_25: SymmetricKey;
    {388}let symk4_enc_1: bitstring = enc((symk4,symk_25),symk_av_enc_1) in
    {389}let m_32: bitstring = (symk4_enc_1,enc((tag5,(i_2,v_6,u_6,uri_5,a_6)),symk_25)) in
    {390}out(c2_2, (msg5,m_32));
    {391}in(c2_2, (=msg6,m_33: bitstring));
    {392}let (symk5_enc_1: bitstring,m6_enc_1: bitstring) = m_33 in
    {393}let (=symk5,symk_26: SymmetricKey) = dec(symk5_enc_1,symk_av_dec_1) in
    {394}let (=tag6,dec_vpr_1: bitstring) = dec(m6_enc_1,symk_26) in
    {395}let (=dec_vpr_msg,v'_5: bitstring,rule'_5: bitstring,n_c'_1: bitstring) = dec_vpr_1 in
    {396}let (u'_5: bitstring,i'_5: bitstring,uri'_5: bitstring,a'_5: bitstring) = rule'_5 in
    {397}if ((v'_5,u'_5,i'_5,uri'_5,a'_5) = (v_6,u_6,i_2,uri_5,a_6)) then
    {398}new n_r_5: bitstring;
    {399}let vpr_signed_5: bitstring = (dec_vpr_2_msg,dec_vpr_1,sig(dec_vpr_1,ska_2)) in
    {400}new symk_27: SymmetricKey;
    {401}let symk6_enc_5: bitstring = enc((symk6,symk_27),symk_ua_enc_5) in
    {402}let m_34: bitstring = (symk6_enc_5,enc((tag7,n_r_5,v_6,vpr_signed_5),symk_27)) in
    {403}event auth_AppSendsLastMessageToUser(m_28,m_29,m_30,m_31,m_32,m_33,m_34);
    {404}out(c_6, (msg7,m_34));
    {405}in(c_6, (=msg8,m_35: bitstring));
    {406}let (symk7_enc_5: bitstring,m8_enc_1: bitstring) = m_35 in
    {407}let (=symk7,symk_28: SymmetricKey) = dec(symk7_enc_5,symk_ua_dec_5) in
    {408}let (=tag8,n_r'_1: bitstring,vp_signed_1: bitstring) = dec(m8_enc_1,symk_28) in
    {409}if (n_r_5 = n_r'_1) then
    {410}let (=vp_msg,vp_5: bitstring,sign_on_vp_1: bitstring) = vp_signed_1 in
    {411}if check(vp_5,sign_on_vp_1,pku_1) then
    {412}let vp_2_prev_1: bitstring = (vp_2_msg,vp_signed_1,sig(vp_signed_1,ska_2)) in
    {413}new symk_29: SymmetricKey;
    {414}let symk8_enc_1: bitstring = enc((symk8,symk_29),symk_av_enc_1) in
    {415}let m_36: bitstring = (symk8_enc_1,enc((tag9,vp_2_prev_1),symk_29)) in
    {416}out(c2_2, (msg9,m_36));
    {417}in(c2_2, (=msg13,m_37: bitstring));
    {418}let (symk13_enc_1: bitstring,m13_enc_1: bitstring) = m_37 in
    {419}let (=symk13,symk_30: SymmetricKey) = dec(symk13_enc_1,symk_av_dec_1) in
    {420}let (=tag13,m13_dec_1: bitstring) = dec(m13_enc_1,symk_30) in
    {421}let (encrypted_k12'_1: bitstring,encrypted_resource'_1: bitstring,hash_encrypted_resource'_1: bitstring) = m13_dec_1 in
    {422}new symk_k14_1: SymmetricKey;
    {423}let encrypted_k14_1: bitstring = enc((symk14,symk_k14_1),symk_av_enc_1) in
    {424}let msg_sign_1: bitstring = (m13_dec_1,sig(m13_dec_1,ska_2)) in
    {425}let m_38: bitstring = (encrypted_k14_1,(tag14,enc(msg_sign_1,symk_k14_1))) in
    {426}event auth_AppSendsLastMessageToVerifier(m_28,m_29,m_30,m_31,m_32,m_33,m_34,m_35,m_36,m_37,m_38);
    {427}out(c2_2, (msg14,m_38));
    {428}in(c2_2, (=msg15,m_39: bitstring));
    {429}let (symk15_enc_1: bitstring,m15_enc_1: bitstring) = m_39 in
    {430}let (=symk15,symk_31: SymmetricKey) = dec(symk15_enc_1,symk_av_dec_1) in
    {431}let (=symkForResource,skForSkForRes_1: SymmetricKey) = dec(m15_enc_1,symk_31) in
    {432}let (=tag16,skForRes_1: SymmetricKey) = dec(m15_enc_1,skForSkForRes_1) in
    {433}let resource'_1: bitstring = dec(encrypted_resource'_1,skForRes_1) in
    {434}if (hash(resource'_1) = hash_encrypted_resource'_1) then
    {435}if talksOnlyToHonest_5 then
    {436}event auth_AppCompletesProtocol(m_28,m_29,m_30,m_31,m_32,m_33,m_34,m_35,m_36,m_37,m_38,m_39);
    {437}out(ch(resource'_1), resource_fromApp)
) | (
    {438}!
    {439}let talksOnlyToHonest_6: bool = false in
    {440}let c_7: channel = c in
    {441}let c2_3: channel = c2 in
    {442}let a_7: bitstring = a in
    {443}let exp_a_7: exponent = exp_a in
    {444}let ska_3: SecretKey = ska in
    {445}let u_7: bitstring = u in
    {446}let pku_2: PublicKey = pk(sku) in
    {447}let exp_u_7: G = exp(g,exp_u) in
    {448}let v_7: bitstring = e in
    {449}let pkv_6: PublicKey = pk(sk_E) in
    {450}let exp_v_7: G = exp(g,exp_E) in
    {451}let i_3: bitstring = i in
    {452}let pki_2: PublicKey = pk(ski) in
    {453}let uri_6: bitstring = euri in
    {454}in(c_7, (=msg1,m_40: bitstring));
    {455}let (=KEXDHINIT,g_su_enc_2: bitstring,symk0_enc_2: bitstring,g_su_signed_enc_2: bitstring) = m_40 in
    {456}let (=gsu,g_su_6: G) = adec(g_su_enc_2,ska_3) in
    {457}let K_temp_2: G = exp(g_su_6,exp_a_7) in
    {458}let h_temp_2: SymmetricKey = hash_fork(((g_su_6,exp(g,exp_a_7),K_temp_2),keyEncCtoSTemp)) in
    {459}let (=symk0,symk_0_6: SymmetricKey) = dec(symk0_enc_2,h_temp_2) in
    {460}let (g_su'_2: G,g_su_sign_2: bitstring) = dec(g_su_signed_enc_2,symk_0_6) in
    {461}if check(hash((sig_gsu,pk(ska_3),g_su_6)),g_su_sign_2,pku_2) then
    {462}new sa_2: exponent;
    {463}let g_sa_6: G = exp(g,sa_2) in
    {464}let K_6: G = exp(g_su_6,sa_2) in
    {465}let h_6: SymmetricKey = hash_fork(((g_su_6,g_sa_6,K_6),keyEncStoCTemp)) in
    {466}new symk_32: SymmetricKey;
    {467}let diddoc_sa_enc_2: bitstring = (g_sa_6,sig(hash((sig_gsa,pku_2,g_sa_6)),ska_3)) in
    {468}let m_41: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_6),pkv_6),enc((symk1,symk_32),h_6),enc(diddoc_sa_enc_2,symk_32)) in
    {469}out(c_7, (msg2,m_41));
    {470}let symk_ua_enc_6: SymmetricKey = hash_fork((K_6,h_6,keyEncStoC)) in
    {471}let symk_ua_dec_6: SymmetricKey = hash_fork((K_6,h_6,keyEncCtoS)) in
    {472}new sav_2: exponent;
    {473}let g_sav_2: G = exp(g,sav_2) in
    {474}let KC_temp_2: G = exp(exp_v_7,sav_2) in
    {475}let hc_temp_2: SymmetricKey = hash_fork(((exp_v_7,g_sav_2,KC_temp_2),keyEncAtoCTemp)) in
    {476}new symk_33: SymmetricKey;
    {477}let diddoc_sav_signed_2: bitstring = (g_sav_2,sig(hash((sig_gsav,pkv_6,g_sav_2)),ska_3)) in
    {478}let m_42: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_2),pku_2),enc((symk2,symk_33),hc_temp_2),enc(diddoc_sav_signed_2,symk_33)) in
    {479}out(c2_3, (msg3,m_42));
    {480}in(c2_3, (=msg4,m_43: bitstring));
    {481}let (=KEXDHREPLYSERVER,g_sc_enc_2: bitstring,symk3_enc_2: bitstring,g_sc_signed_enc_2: bitstring) = m_43 in
    {482}let (=gsac,g_sc_2: G) = adec(g_sc_enc_2,ska_3) in
    {483}let KC_2: G = exp(g_sc_2,sav_2) in
    {484}let hc_2: SymmetricKey = hash_fork(((g_sc_2,g_sav_2,KC_2),keyEncCtoATemp)) in
    {485}let (=symk3,symk_34: SymmetricKey) = dec(symk3_enc_2,hc_2) in
    {486}let (g_sc'_2: G,g_sc_sisn_2: bitstring) = dec(g_sc_signed_enc_2,symk_34) in
    {487}if check(hash((sig_gsac,pk(ska_3),g_sc_2)),g_sc_sisn_2,pkv_6) then
    {488}let symk_av_enc_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncAtoC)) in
    {489}let symk_av_dec_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncCtoA)) in
    {490}new symk_35: SymmetricKey;
    {491}let symk4_enc_2: bitstring = enc((symk4,symk_35),symk_av_enc_2) in
    {492}let m_44: bitstring = (symk4_enc_2,enc((tag5,(i_3,v_7,u_7,uri_6,a_7)),symk_35)) in
    {493}out(c2_3, (msg5,m_44));
    {494}in(c2_3, (=msg6,m_45: bitstring));
    {495}let (symk5_enc_2: bitstring,m6_enc_2: bitstring) = m_45 in
    {496}let (=symk5,symk_36: SymmetricKey) = dec(symk5_enc_2,symk_av_dec_2) in
    {497}let (=tag6,dec_vpr_2: bitstring) = dec(m6_enc_2,symk_36) in
    {498}let (=dec_vpr_msg,v'_6: bitstring,rule'_6: bitstring,n_c'_2: bitstring) = dec_vpr_2 in
    {499}let (u'_6: bitstring,i'_6: bitstring,uri'_6: bitstring,a'_6: bitstring) = rule'_6 in
    {500}if ((v'_6,u'_6,i'_6,uri'_6,a'_6) = (v_7,u_7,i_3,uri_6,a_7)) then
    {501}new n_r_6: bitstring;
    {502}let vpr_signed_6: bitstring = (dec_vpr_2_msg,dec_vpr_2,sig(dec_vpr_2,ska_3)) in
    {503}new symk_37: SymmetricKey;
    {504}let symk6_enc_6: bitstring = enc((symk6,symk_37),symk_ua_enc_6) in
    {505}let m_46: bitstring = (symk6_enc_6,enc((tag7,n_r_6,v_7,vpr_signed_6),symk_37)) in
    {506}event auth_AppSendsLastMessageToUser(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
    {507}out(c_7, (msg7,m_46));
    {508}in(c_7, (=msg8,m_47: bitstring));
    {509}let (symk7_enc_6: bitstring,m8_enc_2: bitstring) = m_47 in
    {510}let (=symk7,symk_38: SymmetricKey) = dec(symk7_enc_6,symk_ua_dec_6) in
    {511}let (=tag8,n_r'_2: bitstring,vp_signed_2: bitstring) = dec(m8_enc_2,symk_38) in
    {512}if (n_r_6 = n_r'_2) then
    {513}let (=vp_msg,vp_6: bitstring,sign_on_vp_2: bitstring) = vp_signed_2 in
    {514}if check(vp_6,sign_on_vp_2,pku_2) then
    {515}let vp_2_prev_2: bitstring = (vp_2_msg,vp_signed_2,sig(vp_signed_2,ska_3)) in
    {516}new symk_39: SymmetricKey;
    {517}let symk8_enc_2: bitstring = enc((symk8,symk_39),symk_av_enc_2) in
    {518}let m_48: bitstring = (symk8_enc_2,enc((tag9,vp_2_prev_2),symk_39)) in
    {519}out(c2_3, (msg9,m_48));
    {520}in(c2_3, (=msg13,m_49: bitstring));
    {521}let (symk13_enc_2: bitstring,m13_enc_2: bitstring) = m_49 in
    {522}let (=symk13,symk_40: SymmetricKey) = dec(symk13_enc_2,symk_av_dec_2) in
    {523}let (=tag13,m13_dec_2: bitstring) = dec(m13_enc_2,symk_40) in
    {524}let (encrypted_k12'_2: bitstring,encrypted_resource'_2: bitstring,hash_encrypted_resource'_2: bitstring) = m13_dec_2 in
    {525}new symk_k14_2: SymmetricKey;
    {526}let encrypted_k14_2: bitstring = enc((symk14,symk_k14_2),symk_av_enc_2) in
    {527}let msg_sign_2: bitstring = (m13_dec_2,sig(m13_dec_2,ska_3)) in
    {528}let m_50: bitstring = (encrypted_k14_2,(tag14,enc(msg_sign_2,symk_k14_2))) in
    {529}event auth_AppSendsLastMessageToVerifier(m_40,m_41,m_42,m_43,m_44,m_45,m_46,m_47,m_48,m_49,m_50);
    {530}out(c2_3, (msg14,m_50));
    {531}in(c2_3, (=msg15,m_51: bitstring));
    {532}let (symk15_enc_2: bitstring,m15_enc_2: bitstring) = m_51 in
    {533}let (=symk15,symk_41: SymmetricKey) = dec(symk15_enc_2,symk_av_dec_2) in
    {534}let (=symkForResource,skForSkForRes_2: SymmetricKey) = dec(m15_enc_2,symk_41) in
    {535}let (=tag16,skForRes_2: SymmetricKey) = dec(m15_enc_2,skForSkForRes_2) in
    {536}let resource'_2: bitstring = dec(encrypted_resource'_2,skForRes_2) in
    {537}if (hash(resource'_2) = hash_encrypted_resource'_2) then
    {538}if talksOnlyToHonest_6 then
    {539}event auth_AppCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46,m_47,m_48,m_49,m_50,m_51);
    {540}out(ch(resource'_2), resource_fromApp)
) | (
    {541}!
    {542}let talksOnlyToHonest_7: bool = false in
    {543}let c_8: channel = c in
    {544}let c2_4: channel = c2 in
    {545}let a_8: bitstring = a in
    {546}let exp_a_8: exponent = exp_a in
    {547}let ska_4: SecretKey = ska in
    {548}let u_8: bitstring = e in
    {549}let pku_3: PublicKey = pk(sk_E) in
    {550}let exp_u_8: G = exp(g,exp_E) in
    {551}let v_8: bitstring = e in
    {552}let pkv_7: PublicKey = pk(sk_E) in
    {553}let exp_v_8: G = exp(g,exp_E) in
    {554}let i_4: bitstring = i in
    {555}let pki_3: PublicKey = pk(ski) in
    {556}let uri_7: bitstring = euri in
    {557}in(c_8, (=msg1,m_52: bitstring));
    {558}let (=KEXDHINIT,g_su_enc_3: bitstring,symk0_enc_3: bitstring,g_su_signed_enc_3: bitstring) = m_52 in
    {559}let (=gsu,g_su_7: G) = adec(g_su_enc_3,ska_4) in
    {560}let K_temp_3: G = exp(g_su_7,exp_a_8) in
    {561}let h_temp_3: SymmetricKey = hash_fork(((g_su_7,exp(g,exp_a_8),K_temp_3),keyEncCtoSTemp)) in
    {562}let (=symk0,symk_0_7: SymmetricKey) = dec(symk0_enc_3,h_temp_3) in
    {563}let (g_su'_3: G,g_su_sign_3: bitstring) = dec(g_su_signed_enc_3,symk_0_7) in
    {564}if check(hash((sig_gsu,pk(ska_4),g_su_7)),g_su_sign_3,pku_3) then
    {565}new sa_3: exponent;
    {566}let g_sa_7: G = exp(g,sa_3) in
    {567}let K_7: G = exp(g_su_7,sa_3) in
    {568}let h_7: SymmetricKey = hash_fork(((g_su_7,g_sa_7,K_7),keyEncStoCTemp)) in
    {569}new symk_42: SymmetricKey;
    {570}let diddoc_sa_enc_3: bitstring = (g_sa_7,sig(hash((sig_gsa,pku_3,g_sa_7)),ska_4)) in
    {571}let m_53: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_7),pkv_7),enc((symk1,symk_42),h_7),enc(diddoc_sa_enc_3,symk_42)) in
    {572}out(c_8, (msg2,m_53));
    {573}let symk_ua_enc_7: SymmetricKey = hash_fork((K_7,h_7,keyEncStoC)) in
    {574}let symk_ua_dec_7: SymmetricKey = hash_fork((K_7,h_7,keyEncCtoS)) in
    {575}new sav_3: exponent;
    {576}let g_sav_3: G = exp(g,sav_3) in
    {577}let KC_temp_3: G = exp(exp_v_8,sav_3) in
    {578}let hc_temp_3: SymmetricKey = hash_fork(((exp_v_8,g_sav_3,KC_temp_3),keyEncAtoCTemp)) in
    {579}new symk_43: SymmetricKey;
    {580}let diddoc_sav_signed_3: bitstring = (g_sav_3,sig(hash((sig_gsav,pkv_7,g_sav_3)),ska_4)) in
    {581}let m_54: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_3),pku_3),enc((symk2,symk_43),hc_temp_3),enc(diddoc_sav_signed_3,symk_43)) in
    {582}out(c2_4, (msg3,m_54));
    {583}in(c2_4, (=msg4,m_55: bitstring));
    {584}let (=KEXDHREPLYSERVER,g_sc_enc_3: bitstring,symk3_enc_3: bitstring,g_sc_signed_enc_3: bitstring) = m_55 in
    {585}let (=gsac,g_sc_3: G) = adec(g_sc_enc_3,ska_4) in
    {586}let KC_3: G = exp(g_sc_3,sav_3) in
    {587}let hc_3: SymmetricKey = hash_fork(((g_sc_3,g_sav_3,KC_3),keyEncCtoATemp)) in
    {588}let (=symk3,symk_44: SymmetricKey) = dec(symk3_enc_3,hc_3) in
    {589}let (g_sc'_3: G,g_sc_sisn_3: bitstring) = dec(g_sc_signed_enc_3,symk_44) in
    {590}if check(hash((sig_gsac,pk(ska_4),g_sc_3)),g_sc_sisn_3,pkv_7) then
    {591}let symk_av_enc_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncAtoC)) in
    {592}let symk_av_dec_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncCtoA)) in
    {593}new symk_45: SymmetricKey;
    {594}let symk4_enc_3: bitstring = enc((symk4,symk_45),symk_av_enc_3) in
    {595}let m_56: bitstring = (symk4_enc_3,enc((tag5,(i_4,v_8,u_8,uri_7,a_8)),symk_45)) in
    {596}out(c2_4, (msg5,m_56));
    {597}in(c2_4, (=msg6,m_57: bitstring));
    {598}let (symk5_enc_3: bitstring,m6_enc_3: bitstring) = m_57 in
    {599}let (=symk5,symk_46: SymmetricKey) = dec(symk5_enc_3,symk_av_dec_3) in
    {600}let (=tag6,dec_vpr_3: bitstring) = dec(m6_enc_3,symk_46) in
    {601}let (=dec_vpr_msg,v'_7: bitstring,rule'_7: bitstring,n_c'_3: bitstring) = dec_vpr_3 in
    {602}let (u'_7: bitstring,i'_7: bitstring,uri'_7: bitstring,a'_7: bitstring) = rule'_7 in
    {603}if ((v'_7,u'_7,i'_7,uri'_7,a'_7) = (v_8,u_8,i_4,uri_7,a_8)) then
    {604}new n_r_7: bitstring;
    {605}let vpr_signed_7: bitstring = (dec_vpr_2_msg,dec_vpr_3,sig(dec_vpr_3,ska_4)) in
    {606}new symk_47: SymmetricKey;
    {607}let symk6_enc_7: bitstring = enc((symk6,symk_47),symk_ua_enc_7) in
    {608}let m_58: bitstring = (symk6_enc_7,enc((tag7,n_r_7,v_8,vpr_signed_7),symk_47)) in
    {609}event auth_AppSendsLastMessageToUser(m_52,m_53,m_54,m_55,m_56,m_57,m_58);
    {610}out(c_8, (msg7,m_58));
    {611}in(c_8, (=msg8,m_59: bitstring));
    {612}let (symk7_enc_7: bitstring,m8_enc_3: bitstring) = m_59 in
    {613}let (=symk7,symk_48: SymmetricKey) = dec(symk7_enc_7,symk_ua_dec_7) in
    {614}let (=tag8,n_r'_3: bitstring,vp_signed_3: bitstring) = dec(m8_enc_3,symk_48) in
    {615}if (n_r_7 = n_r'_3) then
    {616}let (=vp_msg,vp_7: bitstring,sign_on_vp_3: bitstring) = vp_signed_3 in
    {617}if check(vp_7,sign_on_vp_3,pku_3) then
    {618}let vp_2_prev_3: bitstring = (vp_2_msg,vp_signed_3,sig(vp_signed_3,ska_4)) in
    {619}new symk_49: SymmetricKey;
    {620}let symk8_enc_3: bitstring = enc((symk8,symk_49),symk_av_enc_3) in
    {621}let m_60: bitstring = (symk8_enc_3,enc((tag9,vp_2_prev_3),symk_49)) in
    {622}out(c2_4, (msg9,m_60));
    {623}in(c2_4, (=msg13,m_61: bitstring));
    {624}let (symk13_enc_3: bitstring,m13_enc_3: bitstring) = m_61 in
    {625}let (=symk13,symk_50: SymmetricKey) = dec(symk13_enc_3,symk_av_dec_3) in
    {626}let (=tag13,m13_dec_3: bitstring) = dec(m13_enc_3,symk_50) in
    {627}let (encrypted_k12'_3: bitstring,encrypted_resource'_3: bitstring,hash_encrypted_resource'_3: bitstring) = m13_dec_3 in
    {628}new symk_k14_3: SymmetricKey;
    {629}let encrypted_k14_3: bitstring = enc((symk14,symk_k14_3),symk_av_enc_3) in
    {630}let msg_sign_3: bitstring = (m13_dec_3,sig(m13_dec_3,ska_4)) in
    {631}let m_62: bitstring = (encrypted_k14_3,(tag14,enc(msg_sign_3,symk_k14_3))) in
    {632}event auth_AppSendsLastMessageToVerifier(m_52,m_53,m_54,m_55,m_56,m_57,m_58,m_59,m_60,m_61,m_62);
    {633}out(c2_4, (msg14,m_62));
    {634}in(c2_4, (=msg15,m_63: bitstring));
    {635}let (symk15_enc_3: bitstring,m15_enc_3: bitstring) = m_63 in
    {636}let (=symk15,symk_51: SymmetricKey) = dec(symk15_enc_3,symk_av_dec_3) in
    {637}let (=symkForResource,skForSkForRes_3: SymmetricKey) = dec(m15_enc_3,symk_51) in
    {638}let (=tag16,skForRes_3: SymmetricKey) = dec(m15_enc_3,skForSkForRes_3) in
    {639}let resource'_3: bitstring = dec(encrypted_resource'_3,skForRes_3) in
    {640}if (hash(resource'_3) = hash_encrypted_resource'_3) then
    {641}if talksOnlyToHonest_7 then
    {642}event auth_AppCompletesProtocol(m_52,m_53,m_54,m_55,m_56,m_57,m_58,m_59,m_60,m_61,m_62,m_63);
    {643}out(ch(resource'_3), resource_fromApp)
) | (
    {644}!
    {645}let talksOnlyToHonest_8: bool = true in
    {646}let c_9: channel = c2 in
    {647}let c2_5: channel = c3 in
    {648}let v_9: bitstring = v in
    {649}let exp_v_9: exponent = exp_v in
    {650}let skv_1: SecretKey = skv in
    {651}let u_9: bitstring = u in
    {652}let pku_4: PublicKey = pk(sku) in
    {653}let exp_u_9: G = exp(g,exp_u) in
    {654}let a_9: bitstring = a in
    {655}let pka_4: PublicKey = pk(ska) in
    {656}let exp_a_9: G = exp(g,exp_a) in
    {657}let i_5: bitstring = i in
    {658}let pki_4: PublicKey = pk(ski) in
    {659}let ttp_1: bitstring = ttp in
    {660}let pkttp: PublicKey = pk(sk_ttp) in
    {661}let exp_ttp_1: G = exp(g,exp_ttp) in
    {662}let uri_8: bitstring = uri_req in
    {663}in(c_9, (=msg3,m_64: bitstring));
    {664}let (=KEXDHINITSERVER,g_sav_enc: bitstring,symk2_enc: bitstring,g_sav_enc_signed: bitstring) = m_64 in
    {665}let (=gsav,g_sav_4: G) = adec(g_sav_enc,skv_1) in
    {666}let K0_4: G = exp(g_sav_4,exp_v_9) in
    {667}let h_8: SymmetricKey = hash_fork(((exp(g,exp_v_9),g_sav_4,K0_4),keyEncAtoCTemp)) in
    {668}let (=symk2,symk_52: SymmetricKey) = dec(symk2_enc,h_8) in
    {669}let (g_sav': G,sign_g_sav: bitstring) = dec(g_sav_enc_signed,symk_52) in
    {670}if check(hash((sig_gsav,pk(skv_1),g_sav_4)),sign_g_sav,pka_4) then
    {671}new sc: exponent;
    {672}let g_sc_4: G = exp(g,sc) in
    {673}let K_8: G = exp(g_sav_4,sc) in
    {674}let h_9: SymmetricKey = hash_fork(((g_sc_4,g_sav_4,K_8),keyEncCtoATemp)) in
    {675}new symk_k3: SymmetricKey;
    {676}let diddoc_sc_signed: bitstring = (g_sc_4,sig(hash((sig_gsac,pka_4,g_sc_4)),skv_1)) in
    {677}let m_65: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_4),pka_4),enc((symk3,symk_k3),h_9),enc(diddoc_sc_signed,symk_k3)) in
    {678}out(c_9, (msg4,m_65));
    {679}let symk_av_enc_4: SymmetricKey = hash_fork((K_8,h_9,keyEncCtoA)) in
    {680}let symk_av_dec_4: SymmetricKey = hash_fork((K_8,h_9,keyEncAtoC)) in
    {681}in(c_9, (=msg5,m_66: bitstring));
    {682}let (symk4_enc_4: bitstring,m5_enc: bitstring) = m_66 in
    {683}let (=symk4,symk_53: SymmetricKey) = dec(symk4_enc_4,symk_av_dec_4) in
    {684}let (=tag5,(i'_8: bitstring,v'_8: bitstring,u'_8: bitstring,uri'_8: bitstring,a'_8: bitstring)) = dec(m5_enc,symk_53) in
    {685}if ((i'_8,v'_8,u'_8,uri'_8,a'_8) = (i_5,v_9,u_9,uri_8,a_9)) then
    {686}new n_c_4: bitstring;
    {687}let rule: bitstring = (u_9,i_5,uri_8,a_9) in
    {688}let vpr_send_prev: bitstring = (dec_vpr_msg,v_9,rule,n_c_4) in
    {689}new symk_54: SymmetricKey;
    {690}let enc_symk5: bitstring = enc((symk5,symk_54),symk_av_enc_4) in
    {691}let m_67: bitstring = (enc_symk5,enc((tag6,vpr_send_prev),symk_54)) in
    {692}event verifierInConeOfUser(m_64,m_65,m_66,m_67);
    {693}out(c_9, (msg6,m_67));
    {694}in(c_9, (=msg9,m_68: bitstring));
    {695}let (symk8_enc_4: bitstring,m9_enc: bitstring) = m_68 in
    {696}let (=symk8,symk_55: SymmetricKey) = dec(symk8_enc_4,symk_av_dec_4) in
    {697}let (=tag9,vp_signed_4: bitstring) = dec(m9_enc,symk_55) in
    {698}let (=vp_2_msg,vp_signed_5: bitstring,vp_sign_2: bitstring) = vp_signed_4 in
    {699}if check(vp_signed_5,vp_sign_2,pka_4) then
    {700}let (=vp_msg,vp_8: bitstring,sign_vp: bitstring) = vp_signed_5 in
    {701}if check(vp_8,sign_vp,pku_4) then
    {702}let (vpr_rec_4: bitstring,vc_rec_signed: bitstring) = vp_8 in
    {703}let (vc_rec: bitstring,sign_vc_rec: bitstring) = vc_rec_signed in
    {704}if check(vc_rec,sign_vc_rec,pki_4) then
    {705}let (iss'': bitstring,u'': bitstring) = vc_rec in
    {706}if ((iss'',u'') = (i_5,u_9)) then
    {707}let (=dec_vpr_msg,v''_4: bitstring,rule'': bitstring,n_c'': bitstring) = vpr_rec_4 in
    {708}if ((v''_4,rule'',n_c'') = (c_9,rule,n_c_4)) then
    {709}let (u''': bitstring,i''': bitstring,uri''': bitstring,a''': bitstring) = rule'' in
    {710}if ((u''',i''',uri''',a''') = (u_9,i_5,uri_8,a_9)) then
    {711}new sv: exponent;
    {712}let g_sv: G = exp(g,sv) in
    {713}let K3_temp: G = exp(exp_ttp_1,sv) in
    {714}let h3_temp: SymmetricKey = hash_fork((exp_ttp_1,g_sv,K3_temp,keyEncVertoTTPTemp)) in
    {715}new symk_56: SymmetricKey;
    {716}let diddoc_sv_signed: bitstring = (g_sv,sig(hash((sig_gsttp,pkttp,g_sv)),skv_1)) in
    {717}let m_69: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv),pkttp),enc((symk10,symk_56),h3_temp),enc(diddoc_sv_signed,symk_56)) in
    {718}out(c2_5, (msg10,m_69));
    {719}in(c2_5, (=msg11,m_70: bitstring));
    {720}let (=KEXDHREPLYTTP,g_sttp_enc: bitstring,symk11_enc: bitstring,g_sttp_enc_signed: bitstring) = m_69 in
    {721}let (=gsttp,g_sttp: G) = adec(g_sttp_enc,skv_1) in
    {722}let K3: G = exp(g_sttp,sv) in
    {723}let h3: SymmetricKey = hash_fork((g_sttp,g_sv,K3,keyEncTTPtoVerTemp)) in
    {724}let (=symk11,symk_57: SymmetricKey) = dec(symk11_enc,h3_temp) in
    {725}let (g_sttp': G,sign_g_sttp: bitstring) = dec(g_sttp_enc_signed,symk_57) in
    {726}if check(hash((sig_gsttp,pk(skv_1),g_sttp)),sign_g_sttp,pkttp) then
    {727}let symk_ttpv_enc: SymmetricKey = hash_fork((K3,h3,keyEncVertoTTP)) in
    {728}let symk_ttpv_dec: SymmetricKey = hash_fork((K3,h3,keyEncTTPtoVer)) in
    {729}new symk_k12: SymmetricKey;
    {730}let encrypted_k12: bitstring = enc((symk12,symk_k12),symk_ttpv_enc) in
    {731}new resource: bitstring;
    {732}let m_71: bitstring = (encrypted_k12,enc(resource,symk_k12),hash(resource)) in
    {733}new symk_k13: SymmetricKey;
    {734}let encrypted_k13: bitstring = enc((symk13,symk_k13),symk_av_enc_4) in
    {735}let m_72: bitstring = (encrypted_k13,enc((tag13,m_71),symk_k13)) in
    {736}out(c_9, (msg13,m_72));
    {737}in(c_9, (=msg14,m_73: bitstring));
    {738}let (symk14_enc: bitstring,m14_enc: bitstring) = m_73 in
    {739}let (=symk14,symk_58: SymmetricKey) = dec(symk14_enc,symk_av_dec_4) in
    {740}let (=tag14,m14_dec: bitstring) = dec(m14_enc,symk_58) in
    {741}let (m14_received: bitstring,m14_signature: bitstring) = m14_dec in
    {742}if check(m14_received,m14_signature,pka_4) then
    {743}new symk_k15: SymmetricKey;
    {744}let encrypted_k15: bitstring = enc((symk15,symk_k15),symk_av_enc_4) in
    {745}let m_74: bitstring = (encrypted_k15,enc((tag16,symk_k12),symk_k15)) in
    {746}event auth_VerifierSendsLastMessageToApp(m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73,m_74);
    {747}out(c_9, (msg15,m_74));
    {748}if talksOnlyToHonest_8 then
    (
        {749}event auth_VerifierCompletesProtocol(m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73,m_74)
    ) | (
        {750}out(ch(resource), resource_fromVerifier)
    )
) | (
    {751}!
    {752}let talksOnlyToHonest_9: bool = false in
    {753}let c_10: channel = c2 in
    {754}let c2_6: channel = c3 in
    {755}let v_10: bitstring = v in
    {756}let exp_v_10: exponent = exp_v in
    {757}let skv_2: SecretKey = skv in
    {758}let u_10: bitstring = e in
    {759}let pku_5: PublicKey = pk(sk_E) in
    {760}let exp_u_10: G = exp(g,exp_E) in
    {761}let a_10: bitstring = a in
    {762}let pka_5: PublicKey = pk(ska) in
    {763}let exp_a_10: G = exp(g,exp_a) in
    {764}let i_6: bitstring = i in
    {765}let pki_5: PublicKey = pk(ski) in
    {766}let ttp_2: bitstring = ttp in
    {767}let pkttp_1: PublicKey = pk(sk_ttp) in
    {768}let exp_ttp_2: G = exp(g,exp_ttp) in
    {769}let uri_9: bitstring = uri_req in
    {770}in(c_10, (=msg3,m_75: bitstring));
    {771}let (=KEXDHINITSERVER,g_sav_enc_1: bitstring,symk2_enc_1: bitstring,g_sav_enc_signed_1: bitstring) = m_75 in
    {772}let (=gsav,g_sav_5: G) = adec(g_sav_enc_1,skv_2) in
    {773}let K0_5: G = exp(g_sav_5,exp_v_10) in
    {774}let h_10: SymmetricKey = hash_fork(((exp(g,exp_v_10),g_sav_5,K0_5),keyEncAtoCTemp)) in
    {775}let (=symk2,symk_59: SymmetricKey) = dec(symk2_enc_1,h_10) in
    {776}let (g_sav'_1: G,sign_g_sav_1: bitstring) = dec(g_sav_enc_signed_1,symk_59) in
    {777}if check(hash((sig_gsav,pk(skv_2),g_sav_5)),sign_g_sav_1,pka_5) then
    {778}new sc_1: exponent;
    {779}let g_sc_5: G = exp(g,sc_1) in
    {780}let K_9: G = exp(g_sav_5,sc_1) in
    {781}let h_11: SymmetricKey = hash_fork(((g_sc_5,g_sav_5,K_9),keyEncCtoATemp)) in
    {782}new symk_k3_1: SymmetricKey;
    {783}let diddoc_sc_signed_1: bitstring = (g_sc_5,sig(hash((sig_gsac,pka_5,g_sc_5)),skv_2)) in
    {784}let m_76: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_5),pka_5),enc((symk3,symk_k3_1),h_11),enc(diddoc_sc_signed_1,symk_k3_1)) in
    {785}out(c_10, (msg4,m_76));
    {786}let symk_av_enc_5: SymmetricKey = hash_fork((K_9,h_11,keyEncCtoA)) in
    {787}let symk_av_dec_5: SymmetricKey = hash_fork((K_9,h_11,keyEncAtoC)) in
    {788}in(c_10, (=msg5,m_77: bitstring));
    {789}let (symk4_enc_5: bitstring,m5_enc_1: bitstring) = m_77 in
    {790}let (=symk4,symk_60: SymmetricKey) = dec(symk4_enc_5,symk_av_dec_5) in
    {791}let (=tag5,(i'_9: bitstring,v'_9: bitstring,u'_9: bitstring,uri'_9: bitstring,a'_9: bitstring)) = dec(m5_enc_1,symk_60) in
    {792}if ((i'_9,v'_9,u'_9,uri'_9,a'_9) = (i_6,v_10,u_10,uri_9,a_10)) then
    {793}new n_c_5: bitstring;
    {794}let rule_1: bitstring = (u_10,i_6,uri_9,a_10) in
    {795}let vpr_send_prev_1: bitstring = (dec_vpr_msg,v_10,rule_1,n_c_5) in
    {796}new symk_61: SymmetricKey;
    {797}let enc_symk5_1: bitstring = enc((symk5,symk_61),symk_av_enc_5) in
    {798}let m_78: bitstring = (enc_symk5_1,enc((tag6,vpr_send_prev_1),symk_61)) in
    {799}event verifierInConeOfUser(m_75,m_76,m_77,m_78);
    {800}out(c_10, (msg6,m_78));
    {801}in(c_10, (=msg9,m_79: bitstring));
    {802}let (symk8_enc_5: bitstring,m9_enc_1: bitstring) = m_79 in
    {803}let (=symk8,symk_62: SymmetricKey) = dec(symk8_enc_5,symk_av_dec_5) in
    {804}let (=tag9,vp_signed_6: bitstring) = dec(m9_enc_1,symk_62) in
    {805}let (=vp_2_msg,vp_signed_7: bitstring,vp_sign: bitstring) = vp_signed_6 in
    {806}if check(vp_signed_7,vp_sign,pka_5) then
    {807}let (=vp_msg,vp_9: bitstring,sign_vp_1: bitstring) = vp_signed_7 in
    {808}if check(vp_9,sign_vp_1,pku_5) then
    {809}let (vpr_rec_5: bitstring,vc_rec_signed_1: bitstring) = vp_9 in
    {810}let (vc_rec_1: bitstring,sign_vc_rec_1: bitstring) = vc_rec_signed_1 in
    {811}if check(vc_rec_1,sign_vc_rec_1,pki_5) then
    {812}let (iss''_1: bitstring,u''_1: bitstring) = vc_rec_1 in
    {813}if ((iss''_1,u''_1) = (i_6,u_10)) then
    {814}let (=dec_vpr_msg,v''_5: bitstring,rule''_1: bitstring,n_c''_1: bitstring) = vpr_rec_5 in
    {815}if ((v''_5,rule''_1,n_c''_1) = (c_10,rule_1,n_c_5)) then
    {816}let (u'''_1: bitstring,i'''_1: bitstring,uri'''_1: bitstring,a'''_1: bitstring) = rule''_1 in
    {817}if ((u'''_1,i'''_1,uri'''_1,a'''_1) = (u_10,i_6,uri_9,a_10)) then
    {818}new sv_1: exponent;
    {819}let g_sv_1: G = exp(g,sv_1) in
    {820}let K3_temp_1: G = exp(exp_ttp_2,sv_1) in
    {821}let h3_temp_1: SymmetricKey = hash_fork((exp_ttp_2,g_sv_1,K3_temp_1,keyEncVertoTTPTemp)) in
    {822}new symk_63: SymmetricKey;
    {823}let diddoc_sv_signed_1: bitstring = (g_sv_1,sig(hash((sig_gsttp,pkttp_1,g_sv_1)),skv_2)) in
    {824}let m_80: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_1),pkttp_1),enc((symk10,symk_63),h3_temp_1),enc(diddoc_sv_signed_1,symk_63)) in
    {825}out(c2_6, (msg10,m_80));
    {826}in(c2_6, (=msg11,m_81: bitstring));
    {827}let (=KEXDHREPLYTTP,g_sttp_enc_1: bitstring,symk11_enc_1: bitstring,g_sttp_enc_signed_1: bitstring) = m_80 in
    {828}let (=gsttp,g_sttp_1: G) = adec(g_sttp_enc_1,skv_2) in
    {829}let K3_1: G = exp(g_sttp_1,sv_1) in
    {830}let h3_1: SymmetricKey = hash_fork((g_sttp_1,g_sv_1,K3_1,keyEncTTPtoVerTemp)) in
    {831}let (=symk11,symk_64: SymmetricKey) = dec(symk11_enc_1,h3_temp_1) in
    {832}let (g_sttp'_1: G,sign_g_sttp_1: bitstring) = dec(g_sttp_enc_signed_1,symk_64) in
    {833}if check(hash((sig_gsttp,pk(skv_2),g_sttp_1)),sign_g_sttp_1,pkttp_1) then
    {834}let symk_ttpv_enc_1: SymmetricKey = hash_fork((K3_1,h3_1,keyEncVertoTTP)) in
    {835}let symk_ttpv_dec_1: SymmetricKey = hash_fork((K3_1,h3_1,keyEncTTPtoVer)) in
    {836}new symk_k12_1: SymmetricKey;
    {837}let encrypted_k12_1: bitstring = enc((symk12,symk_k12_1),symk_ttpv_enc_1) in
    {838}new resource_1: bitstring;
    {839}let m_82: bitstring = (encrypted_k12_1,enc(resource_1,symk_k12_1),hash(resource_1)) in
    {840}new symk_k13_1: SymmetricKey;
    {841}let encrypted_k13_1: bitstring = enc((symk13,symk_k13_1),symk_av_enc_5) in
    {842}let m_83: bitstring = (encrypted_k13_1,enc((tag13,m_82),symk_k13_1)) in
    {843}out(c_10, (msg13,m_83));
    {844}in(c_10, (=msg14,m_84: bitstring));
    {845}let (symk14_enc_1: bitstring,m14_enc_1: bitstring) = m_84 in
    {846}let (=symk14,symk_65: SymmetricKey) = dec(symk14_enc_1,symk_av_dec_5) in
    {847}let (=tag14,m14_dec_1: bitstring) = dec(m14_enc_1,symk_65) in
    {848}let (m14_received_1: bitstring,m14_signature_1: bitstring) = m14_dec_1 in
    {849}if check(m14_received_1,m14_signature_1,pka_5) then
    {850}new symk_k15_1: SymmetricKey;
    {851}let encrypted_k15_1: bitstring = enc((symk15,symk_k15_1),symk_av_enc_5) in
    {852}let m_85: bitstring = (encrypted_k15_1,enc((tag16,symk_k12_1),symk_k15_1)) in
    {853}event auth_VerifierSendsLastMessageToApp(m_75,m_76,m_77,m_78,m_79,m_80,m_81,m_82,m_83,m_84,m_85);
    {854}out(c_10, (msg15,m_85));
    {855}if talksOnlyToHonest_9 then
    (
        {856}event auth_VerifierCompletesProtocol(m_75,m_76,m_77,m_78,m_79,m_80,m_81,m_82,m_83,m_84,m_85)
    ) | (
        {857}out(ch(resource_1), resource_fromVerifier)
    )
) | (
    {858}!
    {859}let talksOnlyToHonest_10: bool = false in
    {860}let c_11: channel = c2 in
    {861}let c2_7: channel = c3 in
    {862}let v_11: bitstring = v in
    {863}let exp_v_11: exponent = exp_v in
    {864}let skv_3: SecretKey = skv in
    {865}let u_11: bitstring = u in
    {866}let pku_6: PublicKey = pk(sku) in
    {867}let exp_u_11: G = exp(g,exp_u) in
    {868}let a_11: bitstring = e in
    {869}let pka_6: PublicKey = pk(sk_E) in
    {870}let exp_a_11: G = exp(g,exp_E) in
    {871}let i_7: bitstring = i in
    {872}let pki_6: PublicKey = pk(ski) in
    {873}let ttp_3: bitstring = ttp in
    {874}let pkttp_2: PublicKey = pk(sk_ttp) in
    {875}let exp_ttp_3: G = exp(g,exp_ttp) in
    {876}let uri_10: bitstring = uri_req in
    {877}in(c_11, (=msg3,m_86: bitstring));
    {878}let (=KEXDHINITSERVER,g_sav_enc_2: bitstring,symk2_enc_2: bitstring,g_sav_enc_signed_2: bitstring) = m_86 in
    {879}let (=gsav,g_sav_6: G) = adec(g_sav_enc_2,skv_3) in
    {880}let K0_6: G = exp(g_sav_6,exp_v_11) in
    {881}let h_12: SymmetricKey = hash_fork(((exp(g,exp_v_11),g_sav_6,K0_6),keyEncAtoCTemp)) in
    {882}let (=symk2,symk_66: SymmetricKey) = dec(symk2_enc_2,h_12) in
    {883}let (g_sav'_2: G,sign_g_sav_2: bitstring) = dec(g_sav_enc_signed_2,symk_66) in
    {884}if check(hash((sig_gsav,pk(skv_3),g_sav_6)),sign_g_sav_2,pka_6) then
    {885}new sc_2: exponent;
    {886}let g_sc_6: G = exp(g,sc_2) in
    {887}let K_10: G = exp(g_sav_6,sc_2) in
    {888}let h_13: SymmetricKey = hash_fork(((g_sc_6,g_sav_6,K_10),keyEncCtoATemp)) in
    {889}new symk_k3_2: SymmetricKey;
    {890}let diddoc_sc_signed_2: bitstring = (g_sc_6,sig(hash((sig_gsac,pka_6,g_sc_6)),skv_3)) in
    {891}let m_87: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_6),pka_6),enc((symk3,symk_k3_2),h_13),enc(diddoc_sc_signed_2,symk_k3_2)) in
    {892}out(c_11, (msg4,m_87));
    {893}let symk_av_enc_6: SymmetricKey = hash_fork((K_10,h_13,keyEncCtoA)) in
    {894}let symk_av_dec_6: SymmetricKey = hash_fork((K_10,h_13,keyEncAtoC)) in
    {895}in(c_11, (=msg5,m_88: bitstring));
    {896}let (symk4_enc_6: bitstring,m5_enc_2: bitstring) = m_88 in
    {897}let (=symk4,symk_67: SymmetricKey) = dec(symk4_enc_6,symk_av_dec_6) in
    {898}let (=tag5,(i'_10: bitstring,v'_10: bitstring,u'_10: bitstring,uri'_10: bitstring,a'_10: bitstring)) = dec(m5_enc_2,symk_67) in
    {899}if ((i'_10,v'_10,u'_10,uri'_10,a'_10) = (i_7,v_11,u_11,uri_10,a_11)) then
    {900}new n_c_6: bitstring;
    {901}let rule_2: bitstring = (u_11,i_7,uri_10,a_11) in
    {902}let vpr_send_prev_2: bitstring = (dec_vpr_msg,v_11,rule_2,n_c_6) in
    {903}new symk_68: SymmetricKey;
    {904}let enc_symk5_2: bitstring = enc((symk5,symk_68),symk_av_enc_6) in
    {905}let m_89: bitstring = (enc_symk5_2,enc((tag6,vpr_send_prev_2),symk_68)) in
    {906}event verifierInConeOfUser(m_86,m_87,m_88,m_89);
    {907}out(c_11, (msg6,m_89));
    {908}in(c_11, (=msg9,m_90: bitstring));
    {909}let (symk8_enc_6: bitstring,m9_enc_2: bitstring) = m_90 in
    {910}let (=symk8,symk_69: SymmetricKey) = dec(symk8_enc_6,symk_av_dec_6) in
    {911}let (=tag9,vp_signed_8: bitstring) = dec(m9_enc_2,symk_69) in
    {912}let (=vp_2_msg,vp_signed_9: bitstring,vp_sign_1: bitstring) = vp_signed_8 in
    {913}if check(vp_signed_9,vp_sign_1,pka_6) then
    {914}let (=vp_msg,vp_10: bitstring,sign_vp_2: bitstring) = vp_signed_9 in
    {915}if check(vp_10,sign_vp_2,pku_6) then
    {916}let (vpr_rec_6: bitstring,vc_rec_signed_2: bitstring) = vp_10 in
    {917}let (vc_rec_2: bitstring,sign_vc_rec_2: bitstring) = vc_rec_signed_2 in
    {918}if check(vc_rec_2,sign_vc_rec_2,pki_6) then
    {919}let (iss''_2: bitstring,u''_2: bitstring) = vc_rec_2 in
    {920}if ((iss''_2,u''_2) = (i_7,u_11)) then
    {921}let (=dec_vpr_msg,v''_6: bitstring,rule''_2: bitstring,n_c''_2: bitstring) = vpr_rec_6 in
    {922}if ((v''_6,rule''_2,n_c''_2) = (c_11,rule_2,n_c_6)) then
    {923}let (u'''_2: bitstring,i'''_2: bitstring,uri'''_2: bitstring,a'''_2: bitstring) = rule''_2 in
    {924}if ((u'''_2,i'''_2,uri'''_2,a'''_2) = (u_11,i_7,uri_10,a_11)) then
    {925}new sv_2: exponent;
    {926}let g_sv_2: G = exp(g,sv_2) in
    {927}let K3_temp_2: G = exp(exp_ttp_3,sv_2) in
    {928}let h3_temp_2: SymmetricKey = hash_fork((exp_ttp_3,g_sv_2,K3_temp_2,keyEncVertoTTPTemp)) in
    {929}new symk_70: SymmetricKey;
    {930}let diddoc_sv_signed_2: bitstring = (g_sv_2,sig(hash((sig_gsttp,pkttp_2,g_sv_2)),skv_3)) in
    {931}let m_91: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_2),pkttp_2),enc((symk10,symk_70),h3_temp_2),enc(diddoc_sv_signed_2,symk_70)) in
    {932}out(c2_7, (msg10,m_91));
    {933}in(c2_7, (=msg11,m_92: bitstring));
    {934}let (=KEXDHREPLYTTP,g_sttp_enc_2: bitstring,symk11_enc_2: bitstring,g_sttp_enc_signed_2: bitstring) = m_91 in
    {935}let (=gsttp,g_sttp_2: G) = adec(g_sttp_enc_2,skv_3) in
    {936}let K3_2: G = exp(g_sttp_2,sv_2) in
    {937}let h3_2: SymmetricKey = hash_fork((g_sttp_2,g_sv_2,K3_2,keyEncTTPtoVerTemp)) in
    {938}let (=symk11,symk_71: SymmetricKey) = dec(symk11_enc_2,h3_temp_2) in
    {939}let (g_sttp'_2: G,sign_g_sttp_2: bitstring) = dec(g_sttp_enc_signed_2,symk_71) in
    {940}if check(hash((sig_gsttp,pk(skv_3),g_sttp_2)),sign_g_sttp_2,pkttp_2) then
    {941}let symk_ttpv_enc_2: SymmetricKey = hash_fork((K3_2,h3_2,keyEncVertoTTP)) in
    {942}let symk_ttpv_dec_2: SymmetricKey = hash_fork((K3_2,h3_2,keyEncTTPtoVer)) in
    {943}new symk_k12_2: SymmetricKey;
    {944}let encrypted_k12_2: bitstring = enc((symk12,symk_k12_2),symk_ttpv_enc_2) in
    {945}new resource_2: bitstring;
    {946}let m_93: bitstring = (encrypted_k12_2,enc(resource_2,symk_k12_2),hash(resource_2)) in
    {947}new symk_k13_2: SymmetricKey;
    {948}let encrypted_k13_2: bitstring = enc((symk13,symk_k13_2),symk_av_enc_6) in
    {949}let m_94: bitstring = (encrypted_k13_2,enc((tag13,m_93),symk_k13_2)) in
    {950}out(c_11, (msg13,m_94));
    {951}in(c_11, (=msg14,m_95: bitstring));
    {952}let (symk14_enc_2: bitstring,m14_enc_2: bitstring) = m_95 in
    {953}let (=symk14,symk_72: SymmetricKey) = dec(symk14_enc_2,symk_av_dec_6) in
    {954}let (=tag14,m14_dec_2: bitstring) = dec(m14_enc_2,symk_72) in
    {955}let (m14_received_2: bitstring,m14_signature_2: bitstring) = m14_dec_2 in
    {956}if check(m14_received_2,m14_signature_2,pka_6) then
    {957}new symk_k15_2: SymmetricKey;
    {958}let encrypted_k15_2: bitstring = enc((symk15,symk_k15_2),symk_av_enc_6) in
    {959}let m_96: bitstring = (encrypted_k15_2,enc((tag16,symk_k12_2),symk_k15_2)) in
    {960}event auth_VerifierSendsLastMessageToApp(m_86,m_87,m_88,m_89,m_90,m_91,m_92,m_93,m_94,m_95,m_96);
    {961}out(c_11, (msg15,m_96));
    {962}if talksOnlyToHonest_10 then
    (
        {963}event auth_VerifierCompletesProtocol(m_86,m_87,m_88,m_89,m_90,m_91,m_92,m_93,m_94,m_95,m_96)
    ) | (
        {964}out(ch(resource_2), resource_fromVerifier)
    )
) | (
    {965}!
    {966}let talksOnlyToHonest_11: bool = false in
    {967}let c_12: channel = c2 in
    {968}let c2_8: channel = c3 in
    {969}let v_12: bitstring = v in
    {970}let exp_v_12: exponent = exp_v in
    {971}let skv_4: SecretKey = skv in
    {972}let u_12: bitstring = e in
    {973}let pku_7: PublicKey = pk(sk_E) in
    {974}let exp_u_12: G = exp(g,exp_E) in
    {975}let a_12: bitstring = e in
    {976}let pka_7: PublicKey = pk(sk_E) in
    {977}let exp_a_12: G = exp(g,exp_E) in
    {978}let i_8: bitstring = i in
    {979}let pki_7: PublicKey = pk(ski) in
    {980}let ttp_4: bitstring = ttp in
    {981}let pkttp_3: PublicKey = pk(sk_ttp) in
    {982}let exp_ttp_4: G = exp(g,exp_ttp) in
    {983}let uri_11: bitstring = uri_req in
    {984}in(c_12, (=msg3,m_97: bitstring));
    {985}let (=KEXDHINITSERVER,g_sav_enc_3: bitstring,symk2_enc_3: bitstring,g_sav_enc_signed_3: bitstring) = m_97 in
    {986}let (=gsav,g_sav_7: G) = adec(g_sav_enc_3,skv_4) in
    {987}let K0_7: G = exp(g_sav_7,exp_v_12) in
    {988}let h_14: SymmetricKey = hash_fork(((exp(g,exp_v_12),g_sav_7,K0_7),keyEncAtoCTemp)) in
    {989}let (=symk2,symk_73: SymmetricKey) = dec(symk2_enc_3,h_14) in
    {990}let (g_sav'_3: G,sign_g_sav_3: bitstring) = dec(g_sav_enc_signed_3,symk_73) in
    {991}if check(hash((sig_gsav,pk(skv_4),g_sav_7)),sign_g_sav_3,pka_7) then
    {992}new sc_3: exponent;
    {993}let g_sc_7: G = exp(g,sc_3) in
    {994}let K_11: G = exp(g_sav_7,sc_3) in
    {995}let h_15: SymmetricKey = hash_fork(((g_sc_7,g_sav_7,K_11),keyEncCtoATemp)) in
    {996}new symk_k3_3: SymmetricKey;
    {997}let diddoc_sc_signed_3: bitstring = (g_sc_7,sig(hash((sig_gsac,pka_7,g_sc_7)),skv_4)) in
    {998}let m_98: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_7),pka_7),enc((symk3,symk_k3_3),h_15),enc(diddoc_sc_signed_3,symk_k3_3)) in
    {999}out(c_12, (msg4,m_98));
    {1000}let symk_av_enc_7: SymmetricKey = hash_fork((K_11,h_15,keyEncCtoA)) in
    {1001}let symk_av_dec_7: SymmetricKey = hash_fork((K_11,h_15,keyEncAtoC)) in
    {1002}in(c_12, (=msg5,m_99: bitstring));
    {1003}let (symk4_enc_7: bitstring,m5_enc_3: bitstring) = m_99 in
    {1004}let (=symk4,symk_74: SymmetricKey) = dec(symk4_enc_7,symk_av_dec_7) in
    {1005}let (=tag5,(i'_11: bitstring,v'_11: bitstring,u'_11: bitstring,uri'_11: bitstring,a'_11: bitstring)) = dec(m5_enc_3,symk_74) in
    {1006}if ((i'_11,v'_11,u'_11,uri'_11,a'_11) = (i_8,v_12,u_12,uri_11,a_12)) then
    {1007}new n_c_7: bitstring;
    {1008}let rule_3: bitstring = (u_12,i_8,uri_11,a_12) in
    {1009}let vpr_send_prev_3: bitstring = (dec_vpr_msg,v_12,rule_3,n_c_7) in
    {1010}new symk_75: SymmetricKey;
    {1011}let enc_symk5_3: bitstring = enc((symk5,symk_75),symk_av_enc_7) in
    {1012}let m_100: bitstring = (enc_symk5_3,enc((tag6,vpr_send_prev_3),symk_75)) in
    {1013}event verifierInConeOfUser(m_97,m_98,m_99,m_100);
    {1014}out(c_12, (msg6,m_100));
    {1015}in(c_12, (=msg9,m_101: bitstring));
    {1016}let (symk8_enc_7: bitstring,m9_enc_3: bitstring) = m_101 in
    {1017}let (=symk8,symk_76: SymmetricKey) = dec(symk8_enc_7,symk_av_dec_7) in
    {1018}let (=tag9,vp_signed_10: bitstring) = dec(m9_enc_3,symk_76) in
    {1019}let (=vp_2_msg,vp_signed_11: bitstring,vp_sign_3: bitstring) = vp_signed_10 in
    {1020}if check(vp_signed_11,vp_sign_3,pka_7) then
    {1021}let (=vp_msg,vp_11: bitstring,sign_vp_3: bitstring) = vp_signed_11 in
    {1022}if check(vp_11,sign_vp_3,pku_7) then
    {1023}let (vpr_rec_7: bitstring,vc_rec_signed_3: bitstring) = vp_11 in
    {1024}let (vc_rec_3: bitstring,sign_vc_rec_3: bitstring) = vc_rec_signed_3 in
    {1025}if check(vc_rec_3,sign_vc_rec_3,pki_7) then
    {1026}let (iss''_3: bitstring,u''_3: bitstring) = vc_rec_3 in
    {1027}if ((iss''_3,u''_3) = (i_8,u_12)) then
    {1028}let (=dec_vpr_msg,v''_7: bitstring,rule''_3: bitstring,n_c''_3: bitstring) = vpr_rec_7 in
    {1029}if ((v''_7,rule''_3,n_c''_3) = (c_12,rule_3,n_c_7)) then
    {1030}let (u'''_3: bitstring,i'''_3: bitstring,uri'''_3: bitstring,a'''_3: bitstring) = rule''_3 in
    {1031}if ((u'''_3,i'''_3,uri'''_3,a'''_3) = (u_12,i_8,uri_11,a_12)) then
    {1032}new sv_3: exponent;
    {1033}let g_sv_3: G = exp(g,sv_3) in
    {1034}let K3_temp_3: G = exp(exp_ttp_4,sv_3) in
    {1035}let h3_temp_3: SymmetricKey = hash_fork((exp_ttp_4,g_sv_3,K3_temp_3,keyEncVertoTTPTemp)) in
    {1036}new symk_77: SymmetricKey;
    {1037}let diddoc_sv_signed_3: bitstring = (g_sv_3,sig(hash((sig_gsttp,pkttp_3,g_sv_3)),skv_4)) in
    {1038}let m_102: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_3),pkttp_3),enc((symk10,symk_77),h3_temp_3),enc(diddoc_sv_signed_3,symk_77)) in
    {1039}out(c2_8, (msg10,m_102));
    {1040}in(c2_8, (=msg11,m_103: bitstring));
    {1041}let (=KEXDHREPLYTTP,g_sttp_enc_3: bitstring,symk11_enc_3: bitstring,g_sttp_enc_signed_3: bitstring) = m_102 in
    {1042}let (=gsttp,g_sttp_3: G) = adec(g_sttp_enc_3,skv_4) in
    {1043}let K3_3: G = exp(g_sttp_3,sv_3) in
    {1044}let h3_3: SymmetricKey = hash_fork((g_sttp_3,g_sv_3,K3_3,keyEncTTPtoVerTemp)) in
    {1045}let (=symk11,symk_78: SymmetricKey) = dec(symk11_enc_3,h3_temp_3) in
    {1046}let (g_sttp'_3: G,sign_g_sttp_3: bitstring) = dec(g_sttp_enc_signed_3,symk_78) in
    {1047}if check(hash((sig_gsttp,pk(skv_4),g_sttp_3)),sign_g_sttp_3,pkttp_3) then
    {1048}let symk_ttpv_enc_3: SymmetricKey = hash_fork((K3_3,h3_3,keyEncVertoTTP)) in
    {1049}let symk_ttpv_dec_3: SymmetricKey = hash_fork((K3_3,h3_3,keyEncTTPtoVer)) in
    {1050}new symk_k12_3: SymmetricKey;
    {1051}let encrypted_k12_3: bitstring = enc((symk12,symk_k12_3),symk_ttpv_enc_3) in
    {1052}new resource_3: bitstring;
    {1053}let m_104: bitstring = (encrypted_k12_3,enc(resource_3,symk_k12_3),hash(resource_3)) in
    {1054}new symk_k13_3: SymmetricKey;
    {1055}let encrypted_k13_3: bitstring = enc((symk13,symk_k13_3),symk_av_enc_7) in
    {1056}let m_105: bitstring = (encrypted_k13_3,enc((tag13,m_104),symk_k13_3)) in
    {1057}out(c_12, (msg13,m_105));
    {1058}in(c_12, (=msg14,m_106: bitstring));
    {1059}let (symk14_enc_3: bitstring,m14_enc_3: bitstring) = m_106 in
    {1060}let (=symk14,symk_79: SymmetricKey) = dec(symk14_enc_3,symk_av_dec_7) in
    {1061}let (=tag14,m14_dec_3: bitstring) = dec(m14_enc_3,symk_79) in
    {1062}let (m14_received_3: bitstring,m14_signature_3: bitstring) = m14_dec_3 in
    {1063}if check(m14_received_3,m14_signature_3,pka_7) then
    {1064}new symk_k15_3: SymmetricKey;
    {1065}let encrypted_k15_3: bitstring = enc((symk15,symk_k15_3),symk_av_enc_7) in
    {1066}let m_107: bitstring = (encrypted_k15_3,enc((tag16,symk_k12_3),symk_k15_3)) in
    {1067}event auth_VerifierSendsLastMessageToApp(m_97,m_98,m_99,m_100,m_101,m_102,m_103,m_104,m_105,m_106,m_107);
    {1068}out(c_12, (msg15,m_107));
    {1069}if talksOnlyToHonest_11 then
    (
        {1070}event auth_VerifierCompletesProtocol(m_97,m_98,m_99,m_100,m_101,m_102,m_103,m_104,m_105,m_106,m_107)
    ) | (
        {1071}out(ch(resource_3), resource_fromVerifier)
    )
) | (
    {1072}!
    {1073}let talksOnlyToHonest_12: bool = false in
    {1074}let c_13: channel = c2 in
    {1075}let c2_9: channel = c3 in
    {1076}let v_13: bitstring = v in
    {1077}let exp_v_13: exponent = exp_v in
    {1078}let skv_5: SecretKey = skv in
    {1079}let u_13: bitstring = u in
    {1080}let pku_8: PublicKey = pk(sku) in
    {1081}let exp_u_13: G = exp(g,exp_u) in
    {1082}let a_13: bitstring = a in
    {1083}let pka_8: PublicKey = pk(ska) in
    {1084}let exp_a_13: G = exp(g,exp_a) in
    {1085}let i_9: bitstring = e in
    {1086}let pki_8: PublicKey = pk(sk_E) in
    {1087}let ttp_5: bitstring = ttp in
    {1088}let pkttp_4: PublicKey = pk(sk_ttp) in
    {1089}let exp_ttp_5: G = exp(g,exp_ttp) in
    {1090}let uri_12: bitstring = uri_req in
    {1091}in(c_13, (=msg3,m_108: bitstring));
    {1092}let (=KEXDHINITSERVER,g_sav_enc_4: bitstring,symk2_enc_4: bitstring,g_sav_enc_signed_4: bitstring) = m_108 in
    {1093}let (=gsav,g_sav_8: G) = adec(g_sav_enc_4,skv_5) in
    {1094}let K0_8: G = exp(g_sav_8,exp_v_13) in
    {1095}let h_16: SymmetricKey = hash_fork(((exp(g,exp_v_13),g_sav_8,K0_8),keyEncAtoCTemp)) in
    {1096}let (=symk2,symk_80: SymmetricKey) = dec(symk2_enc_4,h_16) in
    {1097}let (g_sav'_4: G,sign_g_sav_4: bitstring) = dec(g_sav_enc_signed_4,symk_80) in
    {1098}if check(hash((sig_gsav,pk(skv_5),g_sav_8)),sign_g_sav_4,pka_8) then
    {1099}new sc_4: exponent;
    {1100}let g_sc_8: G = exp(g,sc_4) in
    {1101}let K_12: G = exp(g_sav_8,sc_4) in
    {1102}let h_17: SymmetricKey = hash_fork(((g_sc_8,g_sav_8,K_12),keyEncCtoATemp)) in
    {1103}new symk_k3_4: SymmetricKey;
    {1104}let diddoc_sc_signed_4: bitstring = (g_sc_8,sig(hash((sig_gsac,pka_8,g_sc_8)),skv_5)) in
    {1105}let m_109: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_8),pka_8),enc((symk3,symk_k3_4),h_17),enc(diddoc_sc_signed_4,symk_k3_4)) in
    {1106}out(c_13, (msg4,m_109));
    {1107}let symk_av_enc_8: SymmetricKey = hash_fork((K_12,h_17,keyEncCtoA)) in
    {1108}let symk_av_dec_8: SymmetricKey = hash_fork((K_12,h_17,keyEncAtoC)) in
    {1109}in(c_13, (=msg5,m_110: bitstring));
    {1110}let (symk4_enc_8: bitstring,m5_enc_4: bitstring) = m_110 in
    {1111}let (=symk4,symk_81: SymmetricKey) = dec(symk4_enc_8,symk_av_dec_8) in
    {1112}let (=tag5,(i'_12: bitstring,v'_12: bitstring,u'_12: bitstring,uri'_12: bitstring,a'_12: bitstring)) = dec(m5_enc_4,symk_81) in
    {1113}if ((i'_12,v'_12,u'_12,uri'_12,a'_12) = (i_9,v_13,u_13,uri_12,a_13)) then
    {1114}new n_c_8: bitstring;
    {1115}let rule_4: bitstring = (u_13,i_9,uri_12,a_13) in
    {1116}let vpr_send_prev_4: bitstring = (dec_vpr_msg,v_13,rule_4,n_c_8) in
    {1117}new symk_82: SymmetricKey;
    {1118}let enc_symk5_4: bitstring = enc((symk5,symk_82),symk_av_enc_8) in
    {1119}let m_111: bitstring = (enc_symk5_4,enc((tag6,vpr_send_prev_4),symk_82)) in
    {1120}event verifierInConeOfUser(m_108,m_109,m_110,m_111);
    {1121}out(c_13, (msg6,m_111));
    {1122}in(c_13, (=msg9,m_112: bitstring));
    {1123}let (symk8_enc_8: bitstring,m9_enc_4: bitstring) = m_112 in
    {1124}let (=symk8,symk_83: SymmetricKey) = dec(symk8_enc_8,symk_av_dec_8) in
    {1125}let (=tag9,vp_signed_12: bitstring) = dec(m9_enc_4,symk_83) in
    {1126}let (=vp_2_msg,vp_signed_13: bitstring,vp_sign_4: bitstring) = vp_signed_12 in
    {1127}if check(vp_signed_13,vp_sign_4,pka_8) then
    {1128}let (=vp_msg,vp_12: bitstring,sign_vp_4: bitstring) = vp_signed_13 in
    {1129}if check(vp_12,sign_vp_4,pku_8) then
    {1130}let (vpr_rec_8: bitstring,vc_rec_signed_4: bitstring) = vp_12 in
    {1131}let (vc_rec_4: bitstring,sign_vc_rec_4: bitstring) = vc_rec_signed_4 in
    {1132}if check(vc_rec_4,sign_vc_rec_4,pki_8) then
    {1133}let (iss''_4: bitstring,u''_4: bitstring) = vc_rec_4 in
    {1134}if ((iss''_4,u''_4) = (i_9,u_13)) then
    {1135}let (=dec_vpr_msg,v''_8: bitstring,rule''_4: bitstring,n_c''_4: bitstring) = vpr_rec_8 in
    {1136}if ((v''_8,rule''_4,n_c''_4) = (c_13,rule_4,n_c_8)) then
    {1137}let (u'''_4: bitstring,i'''_4: bitstring,uri'''_4: bitstring,a'''_4: bitstring) = rule''_4 in
    {1138}if ((u'''_4,i'''_4,uri'''_4,a'''_4) = (u_13,i_9,uri_12,a_13)) then
    {1139}new sv_4: exponent;
    {1140}let g_sv_4: G = exp(g,sv_4) in
    {1141}let K3_temp_4: G = exp(exp_ttp_5,sv_4) in
    {1142}let h3_temp_4: SymmetricKey = hash_fork((exp_ttp_5,g_sv_4,K3_temp_4,keyEncVertoTTPTemp)) in
    {1143}new symk_84: SymmetricKey;
    {1144}let diddoc_sv_signed_4: bitstring = (g_sv_4,sig(hash((sig_gsttp,pkttp_4,g_sv_4)),skv_5)) in
    {1145}let m_113: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_4),pkttp_4),enc((symk10,symk_84),h3_temp_4),enc(diddoc_sv_signed_4,symk_84)) in
    {1146}out(c2_9, (msg10,m_113));
    {1147}in(c2_9, (=msg11,m_114: bitstring));
    {1148}let (=KEXDHREPLYTTP,g_sttp_enc_4: bitstring,symk11_enc_4: bitstring,g_sttp_enc_signed_4: bitstring) = m_113 in
    {1149}let (=gsttp,g_sttp_4: G) = adec(g_sttp_enc_4,skv_5) in
    {1150}let K3_4: G = exp(g_sttp_4,sv_4) in
    {1151}let h3_4: SymmetricKey = hash_fork((g_sttp_4,g_sv_4,K3_4,keyEncTTPtoVerTemp)) in
    {1152}let (=symk11,symk_85: SymmetricKey) = dec(symk11_enc_4,h3_temp_4) in
    {1153}let (g_sttp'_4: G,sign_g_sttp_4: bitstring) = dec(g_sttp_enc_signed_4,symk_85) in
    {1154}if check(hash((sig_gsttp,pk(skv_5),g_sttp_4)),sign_g_sttp_4,pkttp_4) then
    {1155}let symk_ttpv_enc_4: SymmetricKey = hash_fork((K3_4,h3_4,keyEncVertoTTP)) in
    {1156}let symk_ttpv_dec_4: SymmetricKey = hash_fork((K3_4,h3_4,keyEncTTPtoVer)) in
    {1157}new symk_k12_4: SymmetricKey;
    {1158}let encrypted_k12_4: bitstring = enc((symk12,symk_k12_4),symk_ttpv_enc_4) in
    {1159}new resource_4: bitstring;
    {1160}let m_115: bitstring = (encrypted_k12_4,enc(resource_4,symk_k12_4),hash(resource_4)) in
    {1161}new symk_k13_4: SymmetricKey;
    {1162}let encrypted_k13_4: bitstring = enc((symk13,symk_k13_4),symk_av_enc_8) in
    {1163}let m_116: bitstring = (encrypted_k13_4,enc((tag13,m_115),symk_k13_4)) in
    {1164}out(c_13, (msg13,m_116));
    {1165}in(c_13, (=msg14,m_117: bitstring));
    {1166}let (symk14_enc_4: bitstring,m14_enc_4: bitstring) = m_117 in
    {1167}let (=symk14,symk_86: SymmetricKey) = dec(symk14_enc_4,symk_av_dec_8) in
    {1168}let (=tag14,m14_dec_4: bitstring) = dec(m14_enc_4,symk_86) in
    {1169}let (m14_received_4: bitstring,m14_signature_4: bitstring) = m14_dec_4 in
    {1170}if check(m14_received_4,m14_signature_4,pka_8) then
    {1171}new symk_k15_4: SymmetricKey;
    {1172}let encrypted_k15_4: bitstring = enc((symk15,symk_k15_4),symk_av_enc_8) in
    {1173}let m_118: bitstring = (encrypted_k15_4,enc((tag16,symk_k12_4),symk_k15_4)) in
    {1174}event auth_VerifierSendsLastMessageToApp(m_108,m_109,m_110,m_111,m_112,m_113,m_114,m_115,m_116,m_117,m_118);
    {1175}out(c_13, (msg15,m_118));
    {1176}if talksOnlyToHonest_12 then
    (
        {1177}event auth_VerifierCompletesProtocol(m_108,m_109,m_110,m_111,m_112,m_113,m_114,m_115,m_116,m_117,m_118)
    ) | (
        {1178}out(ch(resource_4), resource_fromVerifier)
    )
) | (
    {1179}!
    {1180}let talksOnlyToHonest_13: bool = false in
    {1181}let c_14: channel = c2 in
    {1182}let c2_10: channel = c3 in
    {1183}let v_14: bitstring = v in
    {1184}let exp_v_14: exponent = exp_v in
    {1185}let skv_6: SecretKey = skv in
    {1186}let u_14: bitstring = e in
    {1187}let pku_9: PublicKey = pk(sk_E) in
    {1188}let exp_u_14: G = exp(g,exp_E) in
    {1189}let a_14: bitstring = a in
    {1190}let pka_9: PublicKey = pk(ska) in
    {1191}let exp_a_14: G = exp(g,exp_a) in
    {1192}let i_10: bitstring = e in
    {1193}let pki_9: PublicKey = pk(sk_E) in
    {1194}let ttp_6: bitstring = ttp in
    {1195}let pkttp_5: PublicKey = pk(sk_ttp) in
    {1196}let exp_ttp_6: G = exp(g,exp_ttp) in
    {1197}let uri_13: bitstring = uri_req in
    {1198}in(c_14, (=msg3,m_119: bitstring));
    {1199}let (=KEXDHINITSERVER,g_sav_enc_5: bitstring,symk2_enc_5: bitstring,g_sav_enc_signed_5: bitstring) = m_119 in
    {1200}let (=gsav,g_sav_9: G) = adec(g_sav_enc_5,skv_6) in
    {1201}let K0_9: G = exp(g_sav_9,exp_v_14) in
    {1202}let h_18: SymmetricKey = hash_fork(((exp(g,exp_v_14),g_sav_9,K0_9),keyEncAtoCTemp)) in
    {1203}let (=symk2,symk_87: SymmetricKey) = dec(symk2_enc_5,h_18) in
    {1204}let (g_sav'_5: G,sign_g_sav_5: bitstring) = dec(g_sav_enc_signed_5,symk_87) in
    {1205}if check(hash((sig_gsav,pk(skv_6),g_sav_9)),sign_g_sav_5,pka_9) then
    {1206}new sc_5: exponent;
    {1207}let g_sc_9: G = exp(g,sc_5) in
    {1208}let K_13: G = exp(g_sav_9,sc_5) in
    {1209}let h_19: SymmetricKey = hash_fork(((g_sc_9,g_sav_9,K_13),keyEncCtoATemp)) in
    {1210}new symk_k3_5: SymmetricKey;
    {1211}let diddoc_sc_signed_5: bitstring = (g_sc_9,sig(hash((sig_gsac,pka_9,g_sc_9)),skv_6)) in
    {1212}let m_120: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_9),pka_9),enc((symk3,symk_k3_5),h_19),enc(diddoc_sc_signed_5,symk_k3_5)) in
    {1213}out(c_14, (msg4,m_120));
    {1214}let symk_av_enc_9: SymmetricKey = hash_fork((K_13,h_19,keyEncCtoA)) in
    {1215}let symk_av_dec_9: SymmetricKey = hash_fork((K_13,h_19,keyEncAtoC)) in
    {1216}in(c_14, (=msg5,m_121: bitstring));
    {1217}let (symk4_enc_9: bitstring,m5_enc_5: bitstring) = m_121 in
    {1218}let (=symk4,symk_88: SymmetricKey) = dec(symk4_enc_9,symk_av_dec_9) in
    {1219}let (=tag5,(i'_13: bitstring,v'_13: bitstring,u'_13: bitstring,uri'_13: bitstring,a'_13: bitstring)) = dec(m5_enc_5,symk_88) in
    {1220}if ((i'_13,v'_13,u'_13,uri'_13,a'_13) = (i_10,v_14,u_14,uri_13,a_14)) then
    {1221}new n_c_9: bitstring;
    {1222}let rule_5: bitstring = (u_14,i_10,uri_13,a_14) in
    {1223}let vpr_send_prev_5: bitstring = (dec_vpr_msg,v_14,rule_5,n_c_9) in
    {1224}new symk_89: SymmetricKey;
    {1225}let enc_symk5_5: bitstring = enc((symk5,symk_89),symk_av_enc_9) in
    {1226}let m_122: bitstring = (enc_symk5_5,enc((tag6,vpr_send_prev_5),symk_89)) in
    {1227}event verifierInConeOfUser(m_119,m_120,m_121,m_122);
    {1228}out(c_14, (msg6,m_122));
    {1229}in(c_14, (=msg9,m_123: bitstring));
    {1230}let (symk8_enc_9: bitstring,m9_enc_5: bitstring) = m_123 in
    {1231}let (=symk8,symk_90: SymmetricKey) = dec(symk8_enc_9,symk_av_dec_9) in
    {1232}let (=tag9,vp_signed_14: bitstring) = dec(m9_enc_5,symk_90) in
    {1233}let (=vp_2_msg,vp_signed_15: bitstring,vp_sign_5: bitstring) = vp_signed_14 in
    {1234}if check(vp_signed_15,vp_sign_5,pka_9) then
    {1235}let (=vp_msg,vp_13: bitstring,sign_vp_5: bitstring) = vp_signed_15 in
    {1236}if check(vp_13,sign_vp_5,pku_9) then
    {1237}let (vpr_rec_9: bitstring,vc_rec_signed_5: bitstring) = vp_13 in
    {1238}let (vc_rec_5: bitstring,sign_vc_rec_5: bitstring) = vc_rec_signed_5 in
    {1239}if check(vc_rec_5,sign_vc_rec_5,pki_9) then
    {1240}let (iss''_5: bitstring,u''_5: bitstring) = vc_rec_5 in
    {1241}if ((iss''_5,u''_5) = (i_10,u_14)) then
    {1242}let (=dec_vpr_msg,v''_9: bitstring,rule''_5: bitstring,n_c''_5: bitstring) = vpr_rec_9 in
    {1243}if ((v''_9,rule''_5,n_c''_5) = (c_14,rule_5,n_c_9)) then
    {1244}let (u'''_5: bitstring,i'''_5: bitstring,uri'''_5: bitstring,a'''_5: bitstring) = rule''_5 in
    {1245}if ((u'''_5,i'''_5,uri'''_5,a'''_5) = (u_14,i_10,uri_13,a_14)) then
    {1246}new sv_5: exponent;
    {1247}let g_sv_5: G = exp(g,sv_5) in
    {1248}let K3_temp_5: G = exp(exp_ttp_6,sv_5) in
    {1249}let h3_temp_5: SymmetricKey = hash_fork((exp_ttp_6,g_sv_5,K3_temp_5,keyEncVertoTTPTemp)) in
    {1250}new symk_91: SymmetricKey;
    {1251}let diddoc_sv_signed_5: bitstring = (g_sv_5,sig(hash((sig_gsttp,pkttp_5,g_sv_5)),skv_6)) in
    {1252}let m_124: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_5),pkttp_5),enc((symk10,symk_91),h3_temp_5),enc(diddoc_sv_signed_5,symk_91)) in
    {1253}out(c2_10, (msg10,m_124));
    {1254}in(c2_10, (=msg11,m_125: bitstring));
    {1255}let (=KEXDHREPLYTTP,g_sttp_enc_5: bitstring,symk11_enc_5: bitstring,g_sttp_enc_signed_5: bitstring) = m_124 in
    {1256}let (=gsttp,g_sttp_5: G) = adec(g_sttp_enc_5,skv_6) in
    {1257}let K3_5: G = exp(g_sttp_5,sv_5) in
    {1258}let h3_5: SymmetricKey = hash_fork((g_sttp_5,g_sv_5,K3_5,keyEncTTPtoVerTemp)) in
    {1259}let (=symk11,symk_92: SymmetricKey) = dec(symk11_enc_5,h3_temp_5) in
    {1260}let (g_sttp'_5: G,sign_g_sttp_5: bitstring) = dec(g_sttp_enc_signed_5,symk_92) in
    {1261}if check(hash((sig_gsttp,pk(skv_6),g_sttp_5)),sign_g_sttp_5,pkttp_5) then
    {1262}let symk_ttpv_enc_5: SymmetricKey = hash_fork((K3_5,h3_5,keyEncVertoTTP)) in
    {1263}let symk_ttpv_dec_5: SymmetricKey = hash_fork((K3_5,h3_5,keyEncTTPtoVer)) in
    {1264}new symk_k12_5: SymmetricKey;
    {1265}let encrypted_k12_5: bitstring = enc((symk12,symk_k12_5),symk_ttpv_enc_5) in
    {1266}new resource_5: bitstring;
    {1267}let m_126: bitstring = (encrypted_k12_5,enc(resource_5,symk_k12_5),hash(resource_5)) in
    {1268}new symk_k13_5: SymmetricKey;
    {1269}let encrypted_k13_5: bitstring = enc((symk13,symk_k13_5),symk_av_enc_9) in
    {1270}let m_127: bitstring = (encrypted_k13_5,enc((tag13,m_126),symk_k13_5)) in
    {1271}out(c_14, (msg13,m_127));
    {1272}in(c_14, (=msg14,m_128: bitstring));
    {1273}let (symk14_enc_5: bitstring,m14_enc_5: bitstring) = m_128 in
    {1274}let (=symk14,symk_93: SymmetricKey) = dec(symk14_enc_5,symk_av_dec_9) in
    {1275}let (=tag14,m14_dec_5: bitstring) = dec(m14_enc_5,symk_93) in
    {1276}let (m14_received_5: bitstring,m14_signature_5: bitstring) = m14_dec_5 in
    {1277}if check(m14_received_5,m14_signature_5,pka_9) then
    {1278}new symk_k15_5: SymmetricKey;
    {1279}let encrypted_k15_5: bitstring = enc((symk15,symk_k15_5),symk_av_enc_9) in
    {1280}let m_129: bitstring = (encrypted_k15_5,enc((tag16,symk_k12_5),symk_k15_5)) in
    {1281}event auth_VerifierSendsLastMessageToApp(m_119,m_120,m_121,m_122,m_123,m_124,m_125,m_126,m_127,m_128,m_129);
    {1282}out(c_14, (msg15,m_129));
    {1283}if talksOnlyToHonest_13 then
    (
        {1284}event auth_VerifierCompletesProtocol(m_119,m_120,m_121,m_122,m_123,m_124,m_125,m_126,m_127,m_128,m_129)
    ) | (
        {1285}out(ch(resource_5), resource_fromVerifier)
    )
) | (
    {1286}!
    {1287}let talksOnlyToHonest_14: bool = false in
    {1288}let c_15: channel = c2 in
    {1289}let c2_11: channel = c3 in
    {1290}let v_15: bitstring = v in
    {1291}let exp_v_15: exponent = exp_v in
    {1292}let skv_7: SecretKey = skv in
    {1293}let u_15: bitstring = u in
    {1294}let pku_10: PublicKey = pk(sku) in
    {1295}let exp_u_15: G = exp(g,exp_u) in
    {1296}let a_15: bitstring = e in
    {1297}let pka_10: PublicKey = pk(sk_E) in
    {1298}let exp_a_15: G = exp(g,exp_E) in
    {1299}let i_11: bitstring = e in
    {1300}let pki_10: PublicKey = pk(sk_E) in
    {1301}let ttp_7: bitstring = ttp in
    {1302}let pkttp_6: PublicKey = pk(sk_ttp) in
    {1303}let exp_ttp_7: G = exp(g,exp_ttp) in
    {1304}let uri_14: bitstring = uri_req in
    {1305}in(c_15, (=msg3,m_130: bitstring));
    {1306}let (=KEXDHINITSERVER,g_sav_enc_6: bitstring,symk2_enc_6: bitstring,g_sav_enc_signed_6: bitstring) = m_130 in
    {1307}let (=gsav,g_sav_10: G) = adec(g_sav_enc_6,skv_7) in
    {1308}let K0_10: G = exp(g_sav_10,exp_v_15) in
    {1309}let h_20: SymmetricKey = hash_fork(((exp(g,exp_v_15),g_sav_10,K0_10),keyEncAtoCTemp)) in
    {1310}let (=symk2,symk_94: SymmetricKey) = dec(symk2_enc_6,h_20) in
    {1311}let (g_sav'_6: G,sign_g_sav_6: bitstring) = dec(g_sav_enc_signed_6,symk_94) in
    {1312}if check(hash((sig_gsav,pk(skv_7),g_sav_10)),sign_g_sav_6,pka_10) then
    {1313}new sc_6: exponent;
    {1314}let g_sc_10: G = exp(g,sc_6) in
    {1315}let K_14: G = exp(g_sav_10,sc_6) in
    {1316}let h_21: SymmetricKey = hash_fork(((g_sc_10,g_sav_10,K_14),keyEncCtoATemp)) in
    {1317}new symk_k3_6: SymmetricKey;
    {1318}let diddoc_sc_signed_6: bitstring = (g_sc_10,sig(hash((sig_gsac,pka_10,g_sc_10)),skv_7)) in
    {1319}let m_131: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_10),pka_10),enc((symk3,symk_k3_6),h_21),enc(diddoc_sc_signed_6,symk_k3_6)) in
    {1320}out(c_15, (msg4,m_131));
    {1321}let symk_av_enc_10: SymmetricKey = hash_fork((K_14,h_21,keyEncCtoA)) in
    {1322}let symk_av_dec_10: SymmetricKey = hash_fork((K_14,h_21,keyEncAtoC)) in
    {1323}in(c_15, (=msg5,m_132: bitstring));
    {1324}let (symk4_enc_10: bitstring,m5_enc_6: bitstring) = m_132 in
    {1325}let (=symk4,symk_95: SymmetricKey) = dec(symk4_enc_10,symk_av_dec_10) in
    {1326}let (=tag5,(i'_14: bitstring,v'_14: bitstring,u'_14: bitstring,uri'_14: bitstring,a'_14: bitstring)) = dec(m5_enc_6,symk_95) in
    {1327}if ((i'_14,v'_14,u'_14,uri'_14,a'_14) = (i_11,v_15,u_15,uri_14,a_15)) then
    {1328}new n_c_10: bitstring;
    {1329}let rule_6: bitstring = (u_15,i_11,uri_14,a_15) in
    {1330}let vpr_send_prev_6: bitstring = (dec_vpr_msg,v_15,rule_6,n_c_10) in
    {1331}new symk_96: SymmetricKey;
    {1332}let enc_symk5_6: bitstring = enc((symk5,symk_96),symk_av_enc_10) in
    {1333}let m_133: bitstring = (enc_symk5_6,enc((tag6,vpr_send_prev_6),symk_96)) in
    {1334}event verifierInConeOfUser(m_130,m_131,m_132,m_133);
    {1335}out(c_15, (msg6,m_133));
    {1336}in(c_15, (=msg9,m_134: bitstring));
    {1337}let (symk8_enc_10: bitstring,m9_enc_6: bitstring) = m_134 in
    {1338}let (=symk8,symk_97: SymmetricKey) = dec(symk8_enc_10,symk_av_dec_10) in
    {1339}let (=tag9,vp_signed_16: bitstring) = dec(m9_enc_6,symk_97) in
    {1340}let (=vp_2_msg,vp_signed_17: bitstring,vp_sign_6: bitstring) = vp_signed_16 in
    {1341}if check(vp_signed_17,vp_sign_6,pka_10) then
    {1342}let (=vp_msg,vp_14: bitstring,sign_vp_6: bitstring) = vp_signed_17 in
    {1343}if check(vp_14,sign_vp_6,pku_10) then
    {1344}let (vpr_rec_10: bitstring,vc_rec_signed_6: bitstring) = vp_14 in
    {1345}let (vc_rec_6: bitstring,sign_vc_rec_6: bitstring) = vc_rec_signed_6 in
    {1346}if check(vc_rec_6,sign_vc_rec_6,pki_10) then
    {1347}let (iss''_6: bitstring,u''_6: bitstring) = vc_rec_6 in
    {1348}if ((iss''_6,u''_6) = (i_11,u_15)) then
    {1349}let (=dec_vpr_msg,v''_10: bitstring,rule''_6: bitstring,n_c''_6: bitstring) = vpr_rec_10 in
    {1350}if ((v''_10,rule''_6,n_c''_6) = (c_15,rule_6,n_c_10)) then
    {1351}let (u'''_6: bitstring,i'''_6: bitstring,uri'''_6: bitstring,a'''_6: bitstring) = rule''_6 in
    {1352}if ((u'''_6,i'''_6,uri'''_6,a'''_6) = (u_15,i_11,uri_14,a_15)) then
    {1353}new sv_6: exponent;
    {1354}let g_sv_6: G = exp(g,sv_6) in
    {1355}let K3_temp_6: G = exp(exp_ttp_7,sv_6) in
    {1356}let h3_temp_6: SymmetricKey = hash_fork((exp_ttp_7,g_sv_6,K3_temp_6,keyEncVertoTTPTemp)) in
    {1357}new symk_98: SymmetricKey;
    {1358}let diddoc_sv_signed_6: bitstring = (g_sv_6,sig(hash((sig_gsttp,pkttp_6,g_sv_6)),skv_7)) in
    {1359}let m_135: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_6),pkttp_6),enc((symk10,symk_98),h3_temp_6),enc(diddoc_sv_signed_6,symk_98)) in
    {1360}out(c2_11, (msg10,m_135));
    {1361}in(c2_11, (=msg11,m_136: bitstring));
    {1362}let (=KEXDHREPLYTTP,g_sttp_enc_6: bitstring,symk11_enc_6: bitstring,g_sttp_enc_signed_6: bitstring) = m_135 in
    {1363}let (=gsttp,g_sttp_6: G) = adec(g_sttp_enc_6,skv_7) in
    {1364}let K3_6: G = exp(g_sttp_6,sv_6) in
    {1365}let h3_6: SymmetricKey = hash_fork((g_sttp_6,g_sv_6,K3_6,keyEncTTPtoVerTemp)) in
    {1366}let (=symk11,symk_99: SymmetricKey) = dec(symk11_enc_6,h3_temp_6) in
    {1367}let (g_sttp'_6: G,sign_g_sttp_6: bitstring) = dec(g_sttp_enc_signed_6,symk_99) in
    {1368}if check(hash((sig_gsttp,pk(skv_7),g_sttp_6)),sign_g_sttp_6,pkttp_6) then
    {1369}let symk_ttpv_enc_6: SymmetricKey = hash_fork((K3_6,h3_6,keyEncVertoTTP)) in
    {1370}let symk_ttpv_dec_6: SymmetricKey = hash_fork((K3_6,h3_6,keyEncTTPtoVer)) in
    {1371}new symk_k12_6: SymmetricKey;
    {1372}let encrypted_k12_6: bitstring = enc((symk12,symk_k12_6),symk_ttpv_enc_6) in
    {1373}new resource_6: bitstring;
    {1374}let m_137: bitstring = (encrypted_k12_6,enc(resource_6,symk_k12_6),hash(resource_6)) in
    {1375}new symk_k13_6: SymmetricKey;
    {1376}let encrypted_k13_6: bitstring = enc((symk13,symk_k13_6),symk_av_enc_10) in
    {1377}let m_138: bitstring = (encrypted_k13_6,enc((tag13,m_137),symk_k13_6)) in
    {1378}out(c_15, (msg13,m_138));
    {1379}in(c_15, (=msg14,m_139: bitstring));
    {1380}let (symk14_enc_6: bitstring,m14_enc_6: bitstring) = m_139 in
    {1381}let (=symk14,symk_100: SymmetricKey) = dec(symk14_enc_6,symk_av_dec_10) in
    {1382}let (=tag14,m14_dec_6: bitstring) = dec(m14_enc_6,symk_100) in
    {1383}let (m14_received_6: bitstring,m14_signature_6: bitstring) = m14_dec_6 in
    {1384}if check(m14_received_6,m14_signature_6,pka_10) then
    {1385}new symk_k15_6: SymmetricKey;
    {1386}let encrypted_k15_6: bitstring = enc((symk15,symk_k15_6),symk_av_enc_10) in
    {1387}let m_140: bitstring = (encrypted_k15_6,enc((tag16,symk_k12_6),symk_k15_6)) in
    {1388}event auth_VerifierSendsLastMessageToApp(m_130,m_131,m_132,m_133,m_134,m_135,m_136,m_137,m_138,m_139,m_140);
    {1389}out(c_15, (msg15,m_140));
    {1390}if talksOnlyToHonest_14 then
    (
        {1391}event auth_VerifierCompletesProtocol(m_130,m_131,m_132,m_133,m_134,m_135,m_136,m_137,m_138,m_139,m_140)
    ) | (
        {1392}out(ch(resource_6), resource_fromVerifier)
    )
) | (
    {1393}!
    {1394}let talksOnlyToHonest_15: bool = false in
    {1395}let c_16: channel = c2 in
    {1396}let c2_12: channel = c3 in
    {1397}let v_16: bitstring = v in
    {1398}let exp_v_16: exponent = exp_v in
    {1399}let skv_8: SecretKey = skv in
    {1400}let u_16: bitstring = e in
    {1401}let pku_11: PublicKey = pk(sk_E) in
    {1402}let exp_u_16: G = exp(g,exp_E) in
    {1403}let a_16: bitstring = e in
    {1404}let pka_11: PublicKey = pk(sk_E) in
    {1405}let exp_a_16: G = exp(g,exp_E) in
    {1406}let i_12: bitstring = e in
    {1407}let pki_11: PublicKey = pk(sk_E) in
    {1408}let ttp_8: bitstring = ttp in
    {1409}let pkttp_7: PublicKey = pk(sk_ttp) in
    {1410}let exp_ttp_8: G = exp(g,exp_ttp) in
    {1411}let uri_15: bitstring = uri_req in
    {1412}in(c_16, (=msg3,m_141: bitstring));
    {1413}let (=KEXDHINITSERVER,g_sav_enc_7: bitstring,symk2_enc_7: bitstring,g_sav_enc_signed_7: bitstring) = m_141 in
    {1414}let (=gsav,g_sav_11: G) = adec(g_sav_enc_7,skv_8) in
    {1415}let K0_11: G = exp(g_sav_11,exp_v_16) in
    {1416}let h_22: SymmetricKey = hash_fork(((exp(g,exp_v_16),g_sav_11,K0_11),keyEncAtoCTemp)) in
    {1417}let (=symk2,symk_101: SymmetricKey) = dec(symk2_enc_7,h_22) in
    {1418}let (g_sav'_7: G,sign_g_sav_7: bitstring) = dec(g_sav_enc_signed_7,symk_101) in
    {1419}if check(hash((sig_gsav,pk(skv_8),g_sav_11)),sign_g_sav_7,pka_11) then
    {1420}new sc_7: exponent;
    {1421}let g_sc_11: G = exp(g,sc_7) in
    {1422}let K_15: G = exp(g_sav_11,sc_7) in
    {1423}let h_23: SymmetricKey = hash_fork(((g_sc_11,g_sav_11,K_15),keyEncCtoATemp)) in
    {1424}new symk_k3_7: SymmetricKey;
    {1425}let diddoc_sc_signed_7: bitstring = (g_sc_11,sig(hash((sig_gsac,pka_11,g_sc_11)),skv_8)) in
    {1426}let m_142: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_11),pka_11),enc((symk3,symk_k3_7),h_23),enc(diddoc_sc_signed_7,symk_k3_7)) in
    {1427}out(c_16, (msg4,m_142));
    {1428}let symk_av_enc_11: SymmetricKey = hash_fork((K_15,h_23,keyEncCtoA)) in
    {1429}let symk_av_dec_11: SymmetricKey = hash_fork((K_15,h_23,keyEncAtoC)) in
    {1430}in(c_16, (=msg5,m_143: bitstring));
    {1431}let (symk4_enc_11: bitstring,m5_enc_7: bitstring) = m_143 in
    {1432}let (=symk4,symk_102: SymmetricKey) = dec(symk4_enc_11,symk_av_dec_11) in
    {1433}let (=tag5,(i'_15: bitstring,v'_15: bitstring,u'_15: bitstring,uri'_15: bitstring,a'_15: bitstring)) = dec(m5_enc_7,symk_102) in
    {1434}if ((i'_15,v'_15,u'_15,uri'_15,a'_15) = (i_12,v_16,u_16,uri_15,a_16)) then
    {1435}new n_c_11: bitstring;
    {1436}let rule_7: bitstring = (u_16,i_12,uri_15,a_16) in
    {1437}let vpr_send_prev_7: bitstring = (dec_vpr_msg,v_16,rule_7,n_c_11) in
    {1438}new symk_103: SymmetricKey;
    {1439}let enc_symk5_7: bitstring = enc((symk5,symk_103),symk_av_enc_11) in
    {1440}let m_144: bitstring = (enc_symk5_7,enc((tag6,vpr_send_prev_7),symk_103)) in
    {1441}event verifierInConeOfUser(m_141,m_142,m_143,m_144);
    {1442}out(c_16, (msg6,m_144));
    {1443}in(c_16, (=msg9,m_145: bitstring));
    {1444}let (symk8_enc_11: bitstring,m9_enc_7: bitstring) = m_145 in
    {1445}let (=symk8,symk_104: SymmetricKey) = dec(symk8_enc_11,symk_av_dec_11) in
    {1446}let (=tag9,vp_signed_18: bitstring) = dec(m9_enc_7,symk_104) in
    {1447}let (=vp_2_msg,vp_signed_19: bitstring,vp_sign_7: bitstring) = vp_signed_18 in
    {1448}if check(vp_signed_19,vp_sign_7,pka_11) then
    {1449}let (=vp_msg,vp_15: bitstring,sign_vp_7: bitstring) = vp_signed_19 in
    {1450}if check(vp_15,sign_vp_7,pku_11) then
    {1451}let (vpr_rec_11: bitstring,vc_rec_signed_7: bitstring) = vp_15 in
    {1452}let (vc_rec_7: bitstring,sign_vc_rec_7: bitstring) = vc_rec_signed_7 in
    {1453}if check(vc_rec_7,sign_vc_rec_7,pki_11) then
    {1454}let (iss''_7: bitstring,u''_7: bitstring) = vc_rec_7 in
    {1455}if ((iss''_7,u''_7) = (i_12,u_16)) then
    {1456}let (=dec_vpr_msg,v''_11: bitstring,rule''_7: bitstring,n_c''_7: bitstring) = vpr_rec_11 in
    {1457}if ((v''_11,rule''_7,n_c''_7) = (c_16,rule_7,n_c_11)) then
    {1458}let (u'''_7: bitstring,i'''_7: bitstring,uri'''_7: bitstring,a'''_7: bitstring) = rule''_7 in
    {1459}if ((u'''_7,i'''_7,uri'''_7,a'''_7) = (u_16,i_12,uri_15,a_16)) then
    {1460}new sv_7: exponent;
    {1461}let g_sv_7: G = exp(g,sv_7) in
    {1462}let K3_temp_7: G = exp(exp_ttp_8,sv_7) in
    {1463}let h3_temp_7: SymmetricKey = hash_fork((exp_ttp_8,g_sv_7,K3_temp_7,keyEncVertoTTPTemp)) in
    {1464}new symk_105: SymmetricKey;
    {1465}let diddoc_sv_signed_7: bitstring = (g_sv_7,sig(hash((sig_gsttp,pkttp_7,g_sv_7)),skv_8)) in
    {1466}let m_146: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_7),pkttp_7),enc((symk10,symk_105),h3_temp_7),enc(diddoc_sv_signed_7,symk_105)) in
    {1467}out(c2_12, (msg10,m_146));
    {1468}in(c2_12, (=msg11,m_147: bitstring));
    {1469}let (=KEXDHREPLYTTP,g_sttp_enc_7: bitstring,symk11_enc_7: bitstring,g_sttp_enc_signed_7: bitstring) = m_146 in
    {1470}let (=gsttp,g_sttp_7: G) = adec(g_sttp_enc_7,skv_8) in
    {1471}let K3_7: G = exp(g_sttp_7,sv_7) in
    {1472}let h3_7: SymmetricKey = hash_fork((g_sttp_7,g_sv_7,K3_7,keyEncTTPtoVerTemp)) in
    {1473}let (=symk11,symk_106: SymmetricKey) = dec(symk11_enc_7,h3_temp_7) in
    {1474}let (g_sttp'_7: G,sign_g_sttp_7: bitstring) = dec(g_sttp_enc_signed_7,symk_106) in
    {1475}if check(hash((sig_gsttp,pk(skv_8),g_sttp_7)),sign_g_sttp_7,pkttp_7) then
    {1476}let symk_ttpv_enc_7: SymmetricKey = hash_fork((K3_7,h3_7,keyEncVertoTTP)) in
    {1477}let symk_ttpv_dec_7: SymmetricKey = hash_fork((K3_7,h3_7,keyEncTTPtoVer)) in
    {1478}new symk_k12_7: SymmetricKey;
    {1479}let encrypted_k12_7: bitstring = enc((symk12,symk_k12_7),symk_ttpv_enc_7) in
    {1480}new resource_7: bitstring;
    {1481}let m_148: bitstring = (encrypted_k12_7,enc(resource_7,symk_k12_7),hash(resource_7)) in
    {1482}new symk_k13_7: SymmetricKey;
    {1483}let encrypted_k13_7: bitstring = enc((symk13,symk_k13_7),symk_av_enc_11) in
    {1484}let m_149: bitstring = (encrypted_k13_7,enc((tag13,m_148),symk_k13_7)) in
    {1485}out(c_16, (msg13,m_149));
    {1486}in(c_16, (=msg14,m_150: bitstring));
    {1487}let (symk14_enc_7: bitstring,m14_enc_7: bitstring) = m_150 in
    {1488}let (=symk14,symk_107: SymmetricKey) = dec(symk14_enc_7,symk_av_dec_11) in
    {1489}let (=tag14,m14_dec_7: bitstring) = dec(m14_enc_7,symk_107) in
    {1490}let (m14_received_7: bitstring,m14_signature_7: bitstring) = m14_dec_7 in
    {1491}if check(m14_received_7,m14_signature_7,pka_11) then
    {1492}new symk_k15_7: SymmetricKey;
    {1493}let encrypted_k15_7: bitstring = enc((symk15,symk_k15_7),symk_av_enc_11) in
    {1494}let m_151: bitstring = (encrypted_k15_7,enc((tag16,symk_k12_7),symk_k15_7)) in
    {1495}event auth_VerifierSendsLastMessageToApp(m_141,m_142,m_143,m_144,m_145,m_146,m_147,m_148,m_149,m_150,m_151);
    {1496}out(c_16, (msg15,m_151));
    {1497}if talksOnlyToHonest_15 then
    (
        {1498}event auth_VerifierCompletesProtocol(m_141,m_142,m_143,m_144,m_145,m_146,m_147,m_148,m_149,m_150,m_151)
    ) | (
        {1499}out(ch(resource_7), resource_fromVerifier)
    )
) | (
    {1500}!
    {1501}let talksOnlyToHonest_16: bool = true in
    {1502}let c_17: channel = c3 in
    {1503}let ttp_9: bitstring = ttp in
    {1504}let exp_ttp_9: exponent = exp_ttp in
    {1505}let sk_ttp_1: SecretKey = sk_ttp in
    {1506}let a_17: bitstring = a in
    {1507}let pka_12: PublicKey = pk(ska) in
    {1508}let exp_a_17: G = exp(g,exp_a) in
    {1509}let v_17: bitstring = v in
    {1510}let pkv_8: PublicKey = pk(skv) in
    {1511}let exp_v_17: G = exp(g,exp_v) in
    {1512}in(c_17, (=msg10,m_152: bitstring));
    {1513}let (=KEXDHINITTTP,g_sv_enc: bitstring,symk_11_enc: bitstring,diddoc_sv_signed_enc: bitstring) = m_152 in
    {1514}let (=gsv,g_sv_8: G) = adec(g_sv_enc,sk_ttp_1) in
    {1515}let K_16: G = exp(g_sv_8,exp_ttp_9) in
    {1516}let h_24: SymmetricKey = hash_fork((exp(g,exp_ttp_9),g_sv_8,K_16,keyEncVertoTTPTemp)) in
    {1517}let (=symk10,symk_108: SymmetricKey) = dec(symk_11_enc,h_24) in
    {1518}let (g_sv': G,g_sv_signed: bitstring) = dec(diddoc_sv_signed_enc,symk_108) in
    {1519}if check((gsv,pk(sk_ttp_1),g_sv_8),g_sv_signed,pkv_8) then
    {1520}new sttp: exponent;
    {1521}let g_sttp_8: G = exp(g,sttp) in
    {1522}let K0_12: G = exp(g_sv_8,sttp) in
    {1523}let h0_4: SymmetricKey = hash_fork((g_sttp_8,g_sv_8,K0_12,keyEncTTPtoVerTemp)) in
    {1524}new symk_109: SymmetricKey;
    {1525}let diddoc_sttp_signed: bitstring = (g_sttp_8,sig((sig_gsttp,pkv_8,g_sttp_8),sk_ttp_1)) in
    {1526}let m_153: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_8),pkv_8),enc((symk11,symk_109),h0_4),enc(diddoc_sttp_signed,symk_109)) in
    {1527}event auth_TTPInConeOfApp(m_152,m_153);
    {1528}out(c_17, (msg11,m_153));
    {1529}let symk_ttpv_enc_8: SymmetricKey = hash_fork((K0_12,h0_4,keyEncTTPtoVer)) in
    {1530}let symk_ttpv_dec_8: SymmetricKey = hash_fork((K0_12,h0_4,keyEncVertoTTP)) in
    0
) | (
    {1531}!
    {1532}let talksOnlyToHonest_17: bool = false in
    {1533}let c_18: channel = c3 in
    {1534}let ttp_10: bitstring = ttp in
    {1535}let exp_ttp_10: exponent = exp_ttp in
    {1536}let sk_ttp_2: SecretKey = sk_ttp in
    {1537}let a_18: bitstring = e in
    {1538}let pka_13: PublicKey = pk(sk_E) in
    {1539}let exp_a_18: G = exp(g,exp_E) in
    {1540}let v_18: bitstring = v in
    {1541}let pkv_9: PublicKey = pk(skv) in
    {1542}let exp_v_18: G = exp(g,exp_v) in
    {1543}in(c_18, (=msg10,m_154: bitstring));
    {1544}let (=KEXDHINITTTP,g_sv_enc_1: bitstring,symk_11_enc_1: bitstring,diddoc_sv_signed_enc_1: bitstring) = m_154 in
    {1545}let (=gsv,g_sv_9: G) = adec(g_sv_enc_1,sk_ttp_2) in
    {1546}let K_17: G = exp(g_sv_9,exp_ttp_10) in
    {1547}let h_25: SymmetricKey = hash_fork((exp(g,exp_ttp_10),g_sv_9,K_17,keyEncVertoTTPTemp)) in
    {1548}let (=symk10,symk_110: SymmetricKey) = dec(symk_11_enc_1,h_25) in
    {1549}let (g_sv'_1: G,g_sv_signed_1: bitstring) = dec(diddoc_sv_signed_enc_1,symk_110) in
    {1550}if check((gsv,pk(sk_ttp_2),g_sv_9),g_sv_signed_1,pkv_9) then
    {1551}new sttp_1: exponent;
    {1552}let g_sttp_9: G = exp(g,sttp_1) in
    {1553}let K0_13: G = exp(g_sv_9,sttp_1) in
    {1554}let h0_5: SymmetricKey = hash_fork((g_sttp_9,g_sv_9,K0_13,keyEncTTPtoVerTemp)) in
    {1555}new symk_111: SymmetricKey;
    {1556}let diddoc_sttp_signed_1: bitstring = (g_sttp_9,sig((sig_gsttp,pkv_9,g_sttp_9),sk_ttp_2)) in
    {1557}let m_155: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_9),pkv_9),enc((symk11,symk_111),h0_5),enc(diddoc_sttp_signed_1,symk_111)) in
    {1558}event auth_TTPInConeOfApp(m_154,m_155);
    {1559}out(c_18, (msg11,m_155));
    {1560}let symk_ttpv_enc_9: SymmetricKey = hash_fork((K0_13,h0_5,keyEncTTPtoVer)) in
    {1561}let symk_ttpv_dec_9: SymmetricKey = hash_fork((K0_13,h0_5,keyEncVertoTTP)) in
    0
) | (
    {1562}!
    {1563}let talksOnlyToHonest_18: bool = false in
    {1564}let c_19: channel = c3 in
    {1565}let ttp_11: bitstring = ttp in
    {1566}let exp_ttp_11: exponent = exp_ttp in
    {1567}let sk_ttp_3: SecretKey = sk_ttp in
    {1568}let a_19: bitstring = a in
    {1569}let pka_14: PublicKey = pk(ska) in
    {1570}let exp_a_19: G = exp(g,exp_a) in
    {1571}let v_19: bitstring = e in
    {1572}let pkv_10: PublicKey = pk(sk_E) in
    {1573}let exp_v_19: G = exp(g,exp_E) in
    {1574}in(c_19, (=msg10,m_156: bitstring));
    {1575}let (=KEXDHINITTTP,g_sv_enc_2: bitstring,symk_11_enc_2: bitstring,diddoc_sv_signed_enc_2: bitstring) = m_156 in
    {1576}let (=gsv,g_sv_10: G) = adec(g_sv_enc_2,sk_ttp_3) in
    {1577}let K_18: G = exp(g_sv_10,exp_ttp_11) in
    {1578}let h_26: SymmetricKey = hash_fork((exp(g,exp_ttp_11),g_sv_10,K_18,keyEncVertoTTPTemp)) in
    {1579}let (=symk10,symk_112: SymmetricKey) = dec(symk_11_enc_2,h_26) in
    {1580}let (g_sv'_2: G,g_sv_signed_2: bitstring) = dec(diddoc_sv_signed_enc_2,symk_112) in
    {1581}if check((gsv,pk(sk_ttp_3),g_sv_10),g_sv_signed_2,pkv_10) then
    {1582}new sttp_2: exponent;
    {1583}let g_sttp_10: G = exp(g,sttp_2) in
    {1584}let K0_14: G = exp(g_sv_10,sttp_2) in
    {1585}let h0_6: SymmetricKey = hash_fork((g_sttp_10,g_sv_10,K0_14,keyEncTTPtoVerTemp)) in
    {1586}new symk_113: SymmetricKey;
    {1587}let diddoc_sttp_signed_2: bitstring = (g_sttp_10,sig((sig_gsttp,pkv_10,g_sttp_10),sk_ttp_3)) in
    {1588}let m_157: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_10),pkv_10),enc((symk11,symk_113),h0_6),enc(diddoc_sttp_signed_2,symk_113)) in
    {1589}event auth_TTPInConeOfApp(m_156,m_157);
    {1590}out(c_19, (msg11,m_157));
    {1591}let symk_ttpv_enc_10: SymmetricKey = hash_fork((K0_14,h0_6,keyEncTTPtoVer)) in
    {1592}let symk_ttpv_dec_10: SymmetricKey = hash_fork((K0_14,h0_6,keyEncVertoTTP)) in
    0
) | (
    {1593}!
    {1594}let talksOnlyToHonest_19: bool = false in
    {1595}let c_20: channel = c3 in
    {1596}let ttp_12: bitstring = ttp in
    {1597}let exp_ttp_12: exponent = exp_ttp in
    {1598}let sk_ttp_4: SecretKey = sk_ttp in
    {1599}let a_20: bitstring = e in
    {1600}let pka_15: PublicKey = pk(sk_E) in
    {1601}let exp_a_20: G = exp(g,exp_E) in
    {1602}let v_20: bitstring = e in
    {1603}let pkv_11: PublicKey = pk(sk_E) in
    {1604}let exp_v_20: G = exp(g,exp_E) in
    {1605}in(c_20, (=msg10,m_158: bitstring));
    {1606}let (=KEXDHINITTTP,g_sv_enc_3: bitstring,symk_11_enc_3: bitstring,diddoc_sv_signed_enc_3: bitstring) = m_158 in
    {1607}let (=gsv,g_sv_11: G) = adec(g_sv_enc_3,sk_ttp_4) in
    {1608}let K_19: G = exp(g_sv_11,exp_ttp_12) in
    {1609}let h_27: SymmetricKey = hash_fork((exp(g,exp_ttp_12),g_sv_11,K_19,keyEncVertoTTPTemp)) in
    {1610}let (=symk10,symk_114: SymmetricKey) = dec(symk_11_enc_3,h_27) in
    {1611}let (g_sv'_3: G,g_sv_signed_3: bitstring) = dec(diddoc_sv_signed_enc_3,symk_114) in
    {1612}if check((gsv,pk(sk_ttp_4),g_sv_11),g_sv_signed_3,pkv_11) then
    {1613}new sttp_3: exponent;
    {1614}let g_sttp_11: G = exp(g,sttp_3) in
    {1615}let K0_15: G = exp(g_sv_11,sttp_3) in
    {1616}let h0_7: SymmetricKey = hash_fork((g_sttp_11,g_sv_11,K0_15,keyEncTTPtoVerTemp)) in
    {1617}new symk_115: SymmetricKey;
    {1618}let diddoc_sttp_signed_3: bitstring = (g_sttp_11,sig((sig_gsttp,pkv_11,g_sttp_11),sk_ttp_4)) in
    {1619}let m_159: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_11),pkv_11),enc((symk11,symk_115),h0_7),enc(diddoc_sttp_signed_3,symk_115)) in
    {1620}event auth_TTPInConeOfApp(m_158,m_159);
    {1621}out(c_20, (msg11,m_159));
    {1622}let symk_ttpv_enc_11: SymmetricKey = hash_fork((K0_15,h0_7,keyEncTTPtoVer)) in
    {1623}let symk_ttpv_dec_11: SymmetricKey = hash_fork((K0_15,h0_7,keyEncVertoTTP)) in
    0
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new u: bitstring;
{2}new a: bitstring;
{3}new v: bitstring;
{4}new i: bitstring;
{5}new ttp: bitstring;
{6}out(c, u);
{7}out(c, a);
{8}out(c, v);
{9}out(c, i);
{10}out(c, ttp);
{11}new sku: SecretKey;
{12}new ska: SecretKey;
{13}new skv: SecretKey;
{14}new ski: SecretKey;
{15}new sk_ttp: SecretKey;
{16}new exp_u: exponent;
{17}new exp_a: exponent;
{18}new exp_v: exponent;
{19}new exp_i: exponent;
{20}new exp_ttp: exponent;
{21}out(c, exp(g,exp_u));
{22}out(c, exp(g,exp_a));
{23}out(c, exp(g,exp_v));
{24}out(c, exp(g,exp_i));
{25}out(c, exp(g,exp_ttp));
{26}out(c, pk(sku));
{27}out(c, pk(ska));
{28}out(c, pk(skv));
{29}out(c, pk(ski));
{30}out(c, pk(sk_ttp));
{31}let vc: bitstring = ((i,u),sig((i,u),ski)) in
(
    {32}!
    {45}new su: exponent;
    {49}new symk_0: SymmetricKey;
    {46}let g_su: G = exp(g,su) in
    {39}let pka: PublicKey = pk(ska) in
    {37}let sku_1: SecretKey = sku in
    {50}let diddoc_su_signed: bitstring = (g_su,sig(hash((sig_gsu,pka,g_su)),sku_1)) in
    {40}let exp_a_1: G = exp(g,exp_a) in
    {47}let K0: G = exp(exp_a_1,su) in
    {48}let h0: SymmetricKey = hash_fork(((g_su,exp_a_1,K0),keyEncCtoSTemp)) in
    {51}let m_1: bitstring = (KEXDHINIT,aenc((gsu,g_su),pka),enc((symk0,symk_0),h0),enc(diddoc_su_signed,symk_0)) in
    {34}let c_1: channel = c in
    {52}out(c_1, (msg1,m_1));
    {53}in(c_1, (=msg2,m_2: bitstring));
    {54}let (=KEXDHREPLY,g_sa_enc: bitstring,symk_1_enc: bitstring,diddoc_sa_signed_enc: bitstring) = m_2 in
    {55}let (=gsa,g_sa: G) = adec(g_sa_enc,sku_1) in
    {56}let K: G = exp(g_sa,su) in
    {57}let h: SymmetricKey = hash_fork(((g_su,g_sa,K),keyEncStoCTemp)) in
    {58}let (=symk1,symk_1: SymmetricKey) = dec(symk_1_enc,h) in
    {59}let (g_sa': G,g_sa_signed: bitstring) = dec(diddoc_sa_signed_enc,symk_1) in
    {60}if check(hash((sig_gsa,pk(sku_1),g_sa)),g_sa_signed,pka) then
    {63}in(c_1, (=msg7,m_7: bitstring));
    {64}let (symk6_enc: bitstring,m7_enc: bitstring) = m_7 in
    {62}let symk_ua_dec: SymmetricKey = hash_fork((K,h,keyEncStoC)) in
    {65}let (=symk6,symk_6: SymmetricKey) = dec(symk6_enc,symk_ua_dec) in
    {66}let (=tag7,n_r: bitstring,v': bitstring,vpr_signed: bitstring) = dec(m7_enc,symk_6) in
    {41}let v_1: bitstring = v in
    {67}if (v_1 = v') then
    {68}let (=dec_vpr_2_msg,vpr_rec: bitstring,sig_vpr_2: bitstring) = vpr_signed in
    {69}if check(vpr_rec,sig_vpr_2,pka) then
    {70}let (=dec_vpr_msg,v'': bitstring,rule': bitstring,n_c: bitstring) = vpr_rec in
    {71}let (u': bitstring,i': bitstring,uri': bitstring,a': bitstring) = rule' in
    {44}let uri: bitstring = uri_req in
    {38}let a_1: bitstring = a in
    {35}let u_1: bitstring = u in
    {72}if ((u',uri',a',v'') = (u_1,uri,a_1,v_1)) then
    {74}new symk_7: SymmetricKey;
    {61}let symk_ua_enc: SymmetricKey = hash_fork((K,h,keyEncCtoS)) in
    {75}let symk7_enc: bitstring = enc((symk7,symk_7),symk_ua_enc) in
    {73}let vp: bitstring = (vp_msg,(vpr_rec,vc),sig((vpr_rec,vc),sku_1)) in
    {76}let m_8: bitstring = (symk7_enc,enc((tag8,n_r,vp),symk_ua_enc)) in
    {77}event auth_UserSendsLastMessageToApp(m_1,m_2,m_7,m_8);
    {78}out(c_1, (msg8,m_8));
    {33}let talksOnlyToHonest: bool = true in
    {79}if talksOnlyToHonest then
    (
        {80}event auth_UserCompletesProtocol(m_1,m_2,m_7,m_8)
    ) | (
        {81}out(ch(vp), vp_fromProver)
    )
) | (
    {82}!
    {95}new su_1: exponent;
    {99}new symk_0_1: SymmetricKey;
    {96}let g_su_1: G = exp(g,su_1) in
    {89}let pka_1: PublicKey = pk(sk_E) in
    {87}let sku_2: SecretKey = sku in
    {100}let diddoc_su_signed_1: bitstring = (g_su_1,sig(hash((sig_gsu,pka_1,g_su_1)),sku_2)) in
    {90}let exp_a_2: G = exp(g,exp_E) in
    {97}let K0_1: G = exp(exp_a_2,su_1) in
    {98}let h0_1: SymmetricKey = hash_fork(((g_su_1,exp_a_2,K0_1),keyEncCtoSTemp)) in
    {101}let m: bitstring = (KEXDHINIT,aenc((gsu,g_su_1),pka_1),enc((symk0,symk_0_1),h0_1),enc(diddoc_su_signed_1,symk_0_1)) in
    {84}let c_2: channel = c in
    {102}out(c_2, (msg1,m));
    {103}in(c_2, (=msg2,m_3: bitstring));
    {104}let (=KEXDHREPLY,g_sa_enc_1: bitstring,symk_1_enc_1: bitstring,diddoc_sa_signed_enc_1: bitstring) = m_3 in
    {105}let (=gsa,g_sa_1: G) = adec(g_sa_enc_1,sku_2) in
    {106}let K_1: G = exp(g_sa_1,su_1) in
    {107}let h_1: SymmetricKey = hash_fork(((g_su_1,g_sa_1,K_1),keyEncStoCTemp)) in
    {108}let (=symk1,symk: SymmetricKey) = dec(symk_1_enc_1,h_1) in
    {109}let (g_sa'_1: G,g_sa_signed_1: bitstring) = dec(diddoc_sa_signed_enc_1,symk) in
    {110}if check(hash((sig_gsa,pk(sku_2),g_sa_1)),g_sa_signed_1,pka_1) then
    {113}in(c_2, (=msg7,m_4: bitstring));
    {114}let (symk6_enc_1: bitstring,m7_enc_1: bitstring) = m_4 in
    {112}let symk_ua_dec_1: SymmetricKey = hash_fork((K_1,h_1,keyEncStoC)) in
    {115}let (=symk6,symk_2: SymmetricKey) = dec(symk6_enc_1,symk_ua_dec_1) in
    {116}let (=tag7,n_r_1: bitstring,v'_1: bitstring,vpr_signed_1: bitstring) = dec(m7_enc_1,symk_2) in
    {91}let v_2: bitstring = v in
    {117}if (v_2 = v'_1) then
    {118}let (=dec_vpr_2_msg,vpr_rec_1: bitstring,sig_vpr: bitstring) = vpr_signed_1 in
    {119}if check(vpr_rec_1,sig_vpr,pka_1) then
    {120}let (=dec_vpr_msg,v''_1: bitstring,rule'_1: bitstring,n_c_1: bitstring) = vpr_rec_1 in
    {121}let (u'_1: bitstring,i'_1: bitstring,uri'_1: bitstring,a'_1: bitstring) = rule'_1 in
    {94}let uri_1: bitstring = uri_req in
    {88}let a_2: bitstring = e in
    {85}let u_2: bitstring = u in
    {122}if ((u'_1,uri'_1,a'_1,v''_1) = (u_2,uri_1,a_2,v_2)) then
    {124}new symk_3: SymmetricKey;
    {111}let symk_ua_enc_1: SymmetricKey = hash_fork((K_1,h_1,keyEncCtoS)) in
    {125}let symk7_enc_1: bitstring = enc((symk7,symk_3),symk_ua_enc_1) in
    {123}let vp_1: bitstring = (vp_msg,(vpr_rec_1,vc),sig((vpr_rec_1,vc),sku_2)) in
    {126}let m_5: bitstring = (symk7_enc_1,enc((tag8,n_r_1,vp_1),symk_ua_enc_1)) in
    {127}event auth_UserSendsLastMessageToApp(m,m_3,m_4,m_5);
    {128}out(c_2, (msg8,m_5));
    {83}let talksOnlyToHonest_1: bool = false in
    {129}if talksOnlyToHonest_1 then
    (
        {130}event auth_UserCompletesProtocol(m,m_3,m_4,m_5)
    ) | (
        {131}out(ch(vp_1), vp_fromProver)
    )
) | (
    {132}!
    {145}new su_2: exponent;
    {149}new symk_0_2: SymmetricKey;
    {146}let g_su_2: G = exp(g,su_2) in
    {139}let pka_2: PublicKey = pk(ska) in
    {137}let sku_3: SecretKey = sku in
    {150}let diddoc_su_signed_2: bitstring = (g_su_2,sig(hash((sig_gsu,pka_2,g_su_2)),sku_3)) in
    {140}let exp_a_3: G = exp(g,exp_a) in
    {147}let K0_2: G = exp(exp_a_3,su_2) in
    {148}let h0_2: SymmetricKey = hash_fork(((g_su_2,exp_a_3,K0_2),keyEncCtoSTemp)) in
    {151}let m_6: bitstring = (KEXDHINIT,aenc((gsu,g_su_2),pka_2),enc((symk0,symk_0_2),h0_2),enc(diddoc_su_signed_2,symk_0_2)) in
    {134}let c_3: channel = c in
    {152}out(c_3, (msg1,m_6));
    {153}in(c_3, (=msg2,m_9: bitstring));
    {154}let (=KEXDHREPLY,g_sa_enc_2: bitstring,symk_1_enc_2: bitstring,diddoc_sa_signed_enc_2: bitstring) = m_9 in
    {155}let (=gsa,g_sa_2: G) = adec(g_sa_enc_2,sku_3) in
    {156}let K_2: G = exp(g_sa_2,su_2) in
    {157}let h_2: SymmetricKey = hash_fork(((g_su_2,g_sa_2,K_2),keyEncStoCTemp)) in
    {158}let (=symk1,symk_4: SymmetricKey) = dec(symk_1_enc_2,h_2) in
    {159}let (g_sa'_2: G,g_sa_signed_2: bitstring) = dec(diddoc_sa_signed_enc_2,symk_4) in
    {160}if check(hash((sig_gsa,pk(sku_3),g_sa_2)),g_sa_signed_2,pka_2) then
    {163}in(c_3, (=msg7,m_10: bitstring));
    {164}let (symk6_enc_2: bitstring,m7_enc_2: bitstring) = m_10 in
    {162}let symk_ua_dec_2: SymmetricKey = hash_fork((K_2,h_2,keyEncStoC)) in
    {165}let (=symk6,symk_5: SymmetricKey) = dec(symk6_enc_2,symk_ua_dec_2) in
    {166}let (=tag7,n_r_2: bitstring,v'_2: bitstring,vpr_signed_2: bitstring) = dec(m7_enc_2,symk_5) in
    {141}let v_3: bitstring = e in
    {167}if (v_3 = v'_2) then
    {168}let (=dec_vpr_2_msg,vpr_rec_2: bitstring,sig_vpr_1: bitstring) = vpr_signed_2 in
    {169}if check(vpr_rec_2,sig_vpr_1,pka_2) then
    {170}let (=dec_vpr_msg,v''_2: bitstring,rule'_2: bitstring,n_c_2: bitstring) = vpr_rec_2 in
    {171}let (u'_2: bitstring,i'_2: bitstring,uri'_2: bitstring,a'_2: bitstring) = rule'_2 in
    {144}let uri_2: bitstring = euri in
    {138}let a_3: bitstring = a in
    {135}let u_3: bitstring = u in
    {172}if ((u'_2,uri'_2,a'_2,v''_2) = (u_3,uri_2,a_3,v_3)) then
    {174}new symk_8: SymmetricKey;
    {161}let symk_ua_enc_2: SymmetricKey = hash_fork((K_2,h_2,keyEncCtoS)) in
    {175}let symk7_enc_2: bitstring = enc((symk7,symk_8),symk_ua_enc_2) in
    {173}let vp_2: bitstring = (vp_msg,(vpr_rec_2,vc),sig((vpr_rec_2,vc),sku_3)) in
    {176}let m_11: bitstring = (symk7_enc_2,enc((tag8,n_r_2,vp_2),symk_ua_enc_2)) in
    {177}event auth_UserSendsLastMessageToApp(m_6,m_9,m_10,m_11);
    {178}out(c_3, (msg8,m_11));
    {133}let talksOnlyToHonest_2: bool = false in
    {179}if talksOnlyToHonest_2 then
    (
        {180}event auth_UserCompletesProtocol(m_6,m_9,m_10,m_11)
    ) | (
        {181}out(ch(vp_2), vp_fromProver)
    )
) | (
    {182}!
    {195}new su_3: exponent;
    {199}new symk_0_3: SymmetricKey;
    {196}let g_su_3: G = exp(g,su_3) in
    {189}let pka_3: PublicKey = pk(sk_E) in
    {187}let sku_4: SecretKey = sku in
    {200}let diddoc_su_signed_3: bitstring = (g_su_3,sig(hash((sig_gsu,pka_3,g_su_3)),sku_4)) in
    {190}let exp_a_4: G = exp(g,exp_E) in
    {197}let K0_3: G = exp(exp_a_4,su_3) in
    {198}let h0_3: SymmetricKey = hash_fork(((g_su_3,exp_a_4,K0_3),keyEncCtoSTemp)) in
    {201}let m_12: bitstring = (KEXDHINIT,aenc((gsu,g_su_3),pka_3),enc((symk0,symk_0_3),h0_3),enc(diddoc_su_signed_3,symk_0_3)) in
    {184}let c_4: channel = c in
    {202}out(c_4, (msg1,m_12));
    {203}in(c_4, (=msg2,m_13: bitstring));
    {204}let (=KEXDHREPLY,g_sa_enc_3: bitstring,symk_1_enc_3: bitstring,diddoc_sa_signed_enc_3: bitstring) = m_13 in
    {205}let (=gsa,g_sa_3: G) = adec(g_sa_enc_3,sku_4) in
    {206}let K_3: G = exp(g_sa_3,su_3) in
    {207}let h_3: SymmetricKey = hash_fork(((g_su_3,g_sa_3,K_3),keyEncStoCTemp)) in
    {208}let (=symk1,symk_9: SymmetricKey) = dec(symk_1_enc_3,h_3) in
    {209}let (g_sa'_3: G,g_sa_signed_3: bitstring) = dec(diddoc_sa_signed_enc_3,symk_9) in
    {210}if check(hash((sig_gsa,pk(sku_4),g_sa_3)),g_sa_signed_3,pka_3) then
    {213}in(c_4, (=msg7,m_14: bitstring));
    {214}let (symk6_enc_3: bitstring,m7_enc_3: bitstring) = m_14 in
    {212}let symk_ua_dec_3: SymmetricKey = hash_fork((K_3,h_3,keyEncStoC)) in
    {215}let (=symk6,symk_10: SymmetricKey) = dec(symk6_enc_3,symk_ua_dec_3) in
    {216}let (=tag7,n_r_3: bitstring,v'_3: bitstring,vpr_signed_3: bitstring) = dec(m7_enc_3,symk_10) in
    {191}let v_4: bitstring = e in
    {217}if (v_4 = v'_3) then
    {218}let (=dec_vpr_2_msg,vpr_rec_3: bitstring,sig_vpr_3: bitstring) = vpr_signed_3 in
    {219}if check(vpr_rec_3,sig_vpr_3,pka_3) then
    {220}let (=dec_vpr_msg,v''_3: bitstring,rule'_3: bitstring,n_c_3: bitstring) = vpr_rec_3 in
    {221}let (u'_3: bitstring,i'_3: bitstring,uri'_3: bitstring,a'_3: bitstring) = rule'_3 in
    {194}let uri_3: bitstring = euri in
    {188}let a_4: bitstring = e in
    {185}let u_4: bitstring = u in
    {222}if ((u'_3,uri'_3,a'_3,v''_3) = (u_4,uri_3,a_4,v_4)) then
    {224}new symk_11: SymmetricKey;
    {211}let symk_ua_enc_3: SymmetricKey = hash_fork((K_3,h_3,keyEncCtoS)) in
    {225}let symk7_enc_3: bitstring = enc((symk7,symk_11),symk_ua_enc_3) in
    {223}let vp_3: bitstring = (vp_msg,(vpr_rec_3,vc),sig((vpr_rec_3,vc),sku_4)) in
    {226}let m_15: bitstring = (symk7_enc_3,enc((tag8,n_r_3,vp_3),symk_ua_enc_3)) in
    {227}event auth_UserSendsLastMessageToApp(m_12,m_13,m_14,m_15);
    {228}out(c_4, (msg8,m_15));
    {183}let talksOnlyToHonest_3: bool = false in
    {229}if talksOnlyToHonest_3 then
    (
        {230}event auth_UserCompletesProtocol(m_12,m_13,m_14,m_15)
    ) | (
        {231}out(ch(vp_3), vp_fromProver)
    )
) | (
    {232}!
    {234}let c_5: channel = c in
    {248}in(c_5, (=msg1,m_16: bitstring));
    {249}let (=KEXDHINIT,g_su_enc: bitstring,symk0_enc: bitstring,g_su_signed_enc: bitstring) = m_16 in
    {238}let ska_1: SecretKey = ska in
    {250}let (=gsu,g_su_4: G) = adec(g_su_enc,ska_1) in
    {237}let exp_a_5: exponent = exp_a in
    {251}let K_temp: G = exp(g_su_4,exp_a_5) in
    {252}let h_temp: SymmetricKey = hash_fork(((g_su_4,exp(g,exp_a_5),K_temp),keyEncCtoSTemp)) in
    {253}let (=symk0,symk_0_4: SymmetricKey) = dec(symk0_enc,h_temp) in
    {254}let (g_su': G,g_su_sign: bitstring) = dec(g_su_signed_enc,symk_0_4) in
    {240}let pku: PublicKey = pk(sku) in
    {255}if check(hash((sig_gsu,pk(ska_1),g_su_4)),g_su_sign,pku) then
    {256}new sa: exponent;
    {260}new symk_12: SymmetricKey;
    {257}let g_sa_4: G = exp(g,sa) in
    {261}let diddoc_sa_enc: bitstring = (g_sa_4,sig(hash((sig_gsa,pku,g_sa_4)),ska_1)) in
    {258}let K_4: G = exp(g_su_4,sa) in
    {259}let h_4: SymmetricKey = hash_fork(((g_su_4,g_sa_4,K_4),keyEncStoCTemp)) in
    {243}let pkv_4: PublicKey = pk(skv) in
    {262}let m_17: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_4),pkv_4),enc((symk1,symk_12),h_4),enc(diddoc_sa_enc,symk_12)) in
    {263}out(c_5, (msg2,m_17));
    {266}new sav: exponent;
    {270}new symk_13: SymmetricKey;
    {267}let g_sav: G = exp(g,sav) in
    {271}let diddoc_sav_signed: bitstring = (g_sav,sig(hash((sig_gsav,pkv_4,g_sav)),ska_1)) in
    {244}let exp_v_5: G = exp(g,exp_v) in
    {268}let KC_temp: G = exp(exp_v_5,sav) in
    {269}let hc_temp: SymmetricKey = hash_fork(((exp_v_5,g_sav,KC_temp),keyEncAtoCTemp)) in
    {272}let m_18: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav),pku),enc((symk2,symk_13),hc_temp),enc(diddoc_sav_signed,symk_13)) in
    {235}let c2_1: channel = c2 in
    {273}out(c2_1, (msg3,m_18));
    {274}in(c2_1, (=msg4,m_19: bitstring));
    {275}let (=KEXDHREPLYSERVER,g_sc_enc: bitstring,symk3_enc: bitstring,g_sc_signed_enc: bitstring) = m_19 in
    {276}let (=gsac,g_sc: G) = adec(g_sc_enc,ska_1) in
    {277}let KC: G = exp(g_sc,sav) in
    {278}let hc: SymmetricKey = hash_fork(((g_sc,g_sav,KC),keyEncCtoATemp)) in
    {279}let (=symk3,symk_14: SymmetricKey) = dec(symk3_enc,hc) in
    {280}let (g_sc': G,g_sc_sisn: bitstring) = dec(g_sc_signed_enc,symk_14) in
    {281}if check(hash((sig_gsac,pk(ska_1),g_sc)),g_sc_sisn,pkv_4) then
    {284}new symk_15: SymmetricKey;
    {282}let symk_av_enc: SymmetricKey = hash_fork((KC,hc,keyEncAtoC)) in
    {285}let symk4_enc: bitstring = enc((symk4,symk_15),symk_av_enc) in
    {247}let uri_4: bitstring = uri_req in
    {245}let i_1: bitstring = i in
    {242}let v_5: bitstring = v in
    {239}let u_5: bitstring = u in
    {236}let a_5: bitstring = a in
    {286}let m_20: bitstring = (symk4_enc,enc((tag5,(i_1,v_5,u_5,uri_4,a_5)),symk_15)) in
    {287}out(c2_1, (msg5,m_20));
    {288}in(c2_1, (=msg6,m_21: bitstring));
    {289}let (symk5_enc: bitstring,m6_enc: bitstring) = m_21 in
    {283}let symk_av_dec: SymmetricKey = hash_fork((KC,hc,keyEncCtoA)) in
    {290}let (=symk5,symk_16: SymmetricKey) = dec(symk5_enc,symk_av_dec) in
    {291}let (=tag6,dec_vpr: bitstring) = dec(m6_enc,symk_16) in
    {292}let (=dec_vpr_msg,v'_4: bitstring,rule'_4: bitstring,n_c': bitstring) = dec_vpr in
    {293}let (u'_4: bitstring,i'_4: bitstring,uri'_4: bitstring,a'_4: bitstring) = rule'_4 in
    {294}if ((v'_4,u'_4,i'_4,uri'_4,a'_4) = (v_5,u_5,i_1,uri_4,a_5)) then
    {295}new n_r_4: bitstring;
    {297}new symk_17: SymmetricKey;
    {264}let symk_ua_enc_4: SymmetricKey = hash_fork((K_4,h_4,keyEncStoC)) in
    {298}let symk6_enc_4: bitstring = enc((symk6,symk_17),symk_ua_enc_4) in
    {296}let vpr_signed_4: bitstring = (dec_vpr_2_msg,dec_vpr,sig(dec_vpr,ska_1)) in
    {299}let m_22: bitstring = (symk6_enc_4,enc((tag7,n_r_4,v_5,vpr_signed_4),symk_17)) in
    {300}event auth_AppSendsLastMessageToUser(m_16,m_17,m_18,m_19,m_20,m_21,m_22);
    {301}out(c_5, (msg7,m_22));
    {302}in(c_5, (=msg8,m_23: bitstring));
    {303}let (symk7_enc_4: bitstring,m8_enc: bitstring) = m_23 in
    {265}let symk_ua_dec_4: SymmetricKey = hash_fork((K_4,h_4,keyEncCtoS)) in
    {304}let (=symk7,symk_18: SymmetricKey) = dec(symk7_enc_4,symk_ua_dec_4) in
    {305}let (=tag8,n_r': bitstring,vp_signed: bitstring) = dec(m8_enc,symk_18) in
    {306}if (n_r_4 = n_r') then
    {307}let (=vp_msg,vp_4: bitstring,sign_on_vp: bitstring) = vp_signed in
    {308}if check(vp_4,sign_on_vp,pku) then
    {310}new symk_19: SymmetricKey;
    {311}let symk8_enc: bitstring = enc((symk8,symk_19),symk_av_enc) in
    {309}let vp_2_prev: bitstring = (vp_2_msg,vp_signed,sig(vp_signed,ska_1)) in
    {312}let m_24: bitstring = (symk8_enc,enc((tag9,vp_2_prev),symk_19)) in
    {313}out(c2_1, (msg9,m_24));
    {314}in(c2_1, (=msg13,m_25: bitstring));
    {315}let (symk13_enc: bitstring,m13_enc: bitstring) = m_25 in
    {316}let (=symk13,symk_20: SymmetricKey) = dec(symk13_enc,symk_av_dec) in
    {317}let (=tag13,m13_dec: bitstring) = dec(m13_enc,symk_20) in
    {318}let (encrypted_k12': bitstring,encrypted_resource': bitstring,hash_encrypted_resource': bitstring) = m13_dec in
    {319}new symk_k14: SymmetricKey;
    {321}let msg_sign: bitstring = (m13_dec,sig(m13_dec,ska_1)) in
    {320}let encrypted_k14: bitstring = enc((symk14,symk_k14),symk_av_enc) in
    {322}let m_26: bitstring = (encrypted_k14,(tag14,enc(msg_sign,symk_k14))) in
    {323}event auth_AppSendsLastMessageToVerifier(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24,m_25,m_26);
    {324}out(c2_1, (msg14,m_26));
    {325}in(c2_1, (=msg15,m_27: bitstring));
    {326}let (symk15_enc: bitstring,m15_enc: bitstring) = m_27 in
    {327}let (=symk15,symk_21: SymmetricKey) = dec(symk15_enc,symk_av_dec) in
    {328}let (=symkForResource,skForSkForRes: SymmetricKey) = dec(m15_enc,symk_21) in
    {329}let (=tag16,skForRes: SymmetricKey) = dec(m15_enc,skForSkForRes) in
    {330}let resource': bitstring = dec(encrypted_resource',skForRes) in
    {331}if (hash(resource') = hash_encrypted_resource') then
    {233}let talksOnlyToHonest_4: bool = true in
    {332}if talksOnlyToHonest_4 then
    {333}event auth_AppCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24,m_25,m_26,m_27);
    {334}out(ch(resource'), resource_fromApp)
) | (
    {335}!
    {337}let c_6: channel = c in
    {351}in(c_6, (=msg1,m_28: bitstring));
    {352}let (=KEXDHINIT,g_su_enc_1: bitstring,symk0_enc_1: bitstring,g_su_signed_enc_1: bitstring) = m_28 in
    {341}let ska_2: SecretKey = ska in
    {353}let (=gsu,g_su_5: G) = adec(g_su_enc_1,ska_2) in
    {340}let exp_a_6: exponent = exp_a in
    {354}let K_temp_1: G = exp(g_su_5,exp_a_6) in
    {355}let h_temp_1: SymmetricKey = hash_fork(((g_su_5,exp(g,exp_a_6),K_temp_1),keyEncCtoSTemp)) in
    {356}let (=symk0,symk_0_5: SymmetricKey) = dec(symk0_enc_1,h_temp_1) in
    {357}let (g_su'_1: G,g_su_sign_1: bitstring) = dec(g_su_signed_enc_1,symk_0_5) in
    {343}let pku_1: PublicKey = pk(sk_E) in
    {358}if check(hash((sig_gsu,pk(ska_2),g_su_5)),g_su_sign_1,pku_1) then
    {359}new sa_1: exponent;
    {363}new symk_22: SymmetricKey;
    {360}let g_sa_5: G = exp(g,sa_1) in
    {364}let diddoc_sa_enc_1: bitstring = (g_sa_5,sig(hash((sig_gsa,pku_1,g_sa_5)),ska_2)) in
    {361}let K_5: G = exp(g_su_5,sa_1) in
    {362}let h_5: SymmetricKey = hash_fork(((g_su_5,g_sa_5,K_5),keyEncStoCTemp)) in
    {346}let pkv_5: PublicKey = pk(skv) in
    {365}let m_29: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_5),pkv_5),enc((symk1,symk_22),h_5),enc(diddoc_sa_enc_1,symk_22)) in
    {366}out(c_6, (msg2,m_29));
    {369}new sav_1: exponent;
    {373}new symk_23: SymmetricKey;
    {370}let g_sav_1: G = exp(g,sav_1) in
    {374}let diddoc_sav_signed_1: bitstring = (g_sav_1,sig(hash((sig_gsav,pkv_5,g_sav_1)),ska_2)) in
    {347}let exp_v_6: G = exp(g,exp_v) in
    {371}let KC_temp_1: G = exp(exp_v_6,sav_1) in
    {372}let hc_temp_1: SymmetricKey = hash_fork(((exp_v_6,g_sav_1,KC_temp_1),keyEncAtoCTemp)) in
    {375}let m_30: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_1),pku_1),enc((symk2,symk_23),hc_temp_1),enc(diddoc_sav_signed_1,symk_23)) in
    {338}let c2_2: channel = c2 in
    {376}out(c2_2, (msg3,m_30));
    {377}in(c2_2, (=msg4,m_31: bitstring));
    {378}let (=KEXDHREPLYSERVER,g_sc_enc_1: bitstring,symk3_enc_1: bitstring,g_sc_signed_enc_1: bitstring) = m_31 in
    {379}let (=gsac,g_sc_1: G) = adec(g_sc_enc_1,ska_2) in
    {380}let KC_1: G = exp(g_sc_1,sav_1) in
    {381}let hc_1: SymmetricKey = hash_fork(((g_sc_1,g_sav_1,KC_1),keyEncCtoATemp)) in
    {382}let (=symk3,symk_24: SymmetricKey) = dec(symk3_enc_1,hc_1) in
    {383}let (g_sc'_1: G,g_sc_sisn_1: bitstring) = dec(g_sc_signed_enc_1,symk_24) in
    {384}if check(hash((sig_gsac,pk(ska_2),g_sc_1)),g_sc_sisn_1,pkv_5) then
    {387}new symk_25: SymmetricKey;
    {385}let symk_av_enc_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncAtoC)) in
    {388}let symk4_enc_1: bitstring = enc((symk4,symk_25),symk_av_enc_1) in
    {350}let uri_5: bitstring = uri_req in
    {348}let i_2: bitstring = i in
    {345}let v_6: bitstring = v in
    {342}let u_6: bitstring = e in
    {339}let a_6: bitstring = a in
    {389}let m_32: bitstring = (symk4_enc_1,enc((tag5,(i_2,v_6,u_6,uri_5,a_6)),symk_25)) in
    {390}out(c2_2, (msg5,m_32));
    {391}in(c2_2, (=msg6,m_33: bitstring));
    {392}let (symk5_enc_1: bitstring,m6_enc_1: bitstring) = m_33 in
    {386}let symk_av_dec_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncCtoA)) in
    {393}let (=symk5,symk_26: SymmetricKey) = dec(symk5_enc_1,symk_av_dec_1) in
    {394}let (=tag6,dec_vpr_1: bitstring) = dec(m6_enc_1,symk_26) in
    {395}let (=dec_vpr_msg,v'_5: bitstring,rule'_5: bitstring,n_c'_1: bitstring) = dec_vpr_1 in
    {396}let (u'_5: bitstring,i'_5: bitstring,uri'_5: bitstring,a'_5: bitstring) = rule'_5 in
    {397}if ((v'_5,u'_5,i'_5,uri'_5,a'_5) = (v_6,u_6,i_2,uri_5,a_6)) then
    {398}new n_r_5: bitstring;
    {400}new symk_27: SymmetricKey;
    {367}let symk_ua_enc_5: SymmetricKey = hash_fork((K_5,h_5,keyEncStoC)) in
    {401}let symk6_enc_5: bitstring = enc((symk6,symk_27),symk_ua_enc_5) in
    {399}let vpr_signed_5: bitstring = (dec_vpr_2_msg,dec_vpr_1,sig(dec_vpr_1,ska_2)) in
    {402}let m_34: bitstring = (symk6_enc_5,enc((tag7,n_r_5,v_6,vpr_signed_5),symk_27)) in
    {403}event auth_AppSendsLastMessageToUser(m_28,m_29,m_30,m_31,m_32,m_33,m_34);
    {404}out(c_6, (msg7,m_34));
    {405}in(c_6, (=msg8,m_35: bitstring));
    {406}let (symk7_enc_5: bitstring,m8_enc_1: bitstring) = m_35 in
    {368}let symk_ua_dec_5: SymmetricKey = hash_fork((K_5,h_5,keyEncCtoS)) in
    {407}let (=symk7,symk_28: SymmetricKey) = dec(symk7_enc_5,symk_ua_dec_5) in
    {408}let (=tag8,n_r'_1: bitstring,vp_signed_1: bitstring) = dec(m8_enc_1,symk_28) in
    {409}if (n_r_5 = n_r'_1) then
    {410}let (=vp_msg,vp_5: bitstring,sign_on_vp_1: bitstring) = vp_signed_1 in
    {411}if check(vp_5,sign_on_vp_1,pku_1) then
    {413}new symk_29: SymmetricKey;
    {414}let symk8_enc_1: bitstring = enc((symk8,symk_29),symk_av_enc_1) in
    {412}let vp_2_prev_1: bitstring = (vp_2_msg,vp_signed_1,sig(vp_signed_1,ska_2)) in
    {415}let m_36: bitstring = (symk8_enc_1,enc((tag9,vp_2_prev_1),symk_29)) in
    {416}out(c2_2, (msg9,m_36));
    {417}in(c2_2, (=msg13,m_37: bitstring));
    {418}let (symk13_enc_1: bitstring,m13_enc_1: bitstring) = m_37 in
    {419}let (=symk13,symk_30: SymmetricKey) = dec(symk13_enc_1,symk_av_dec_1) in
    {420}let (=tag13,m13_dec_1: bitstring) = dec(m13_enc_1,symk_30) in
    {421}let (encrypted_k12'_1: bitstring,encrypted_resource'_1: bitstring,hash_encrypted_resource'_1: bitstring) = m13_dec_1 in
    {422}new symk_k14_1: SymmetricKey;
    {424}let msg_sign_1: bitstring = (m13_dec_1,sig(m13_dec_1,ska_2)) in
    {423}let encrypted_k14_1: bitstring = enc((symk14,symk_k14_1),symk_av_enc_1) in
    {425}let m_38: bitstring = (encrypted_k14_1,(tag14,enc(msg_sign_1,symk_k14_1))) in
    {426}event auth_AppSendsLastMessageToVerifier(m_28,m_29,m_30,m_31,m_32,m_33,m_34,m_35,m_36,m_37,m_38);
    {427}out(c2_2, (msg14,m_38));
    {428}in(c2_2, (=msg15,m_39: bitstring));
    {429}let (symk15_enc_1: bitstring,m15_enc_1: bitstring) = m_39 in
    {430}let (=symk15,symk_31: SymmetricKey) = dec(symk15_enc_1,symk_av_dec_1) in
    {431}let (=symkForResource,skForSkForRes_1: SymmetricKey) = dec(m15_enc_1,symk_31) in
    {432}let (=tag16,skForRes_1: SymmetricKey) = dec(m15_enc_1,skForSkForRes_1) in
    {433}let resource'_1: bitstring = dec(encrypted_resource'_1,skForRes_1) in
    {434}if (hash(resource'_1) = hash_encrypted_resource'_1) then
    {336}let talksOnlyToHonest_5: bool = false in
    {435}if talksOnlyToHonest_5 then
    {436}event auth_AppCompletesProtocol(m_28,m_29,m_30,m_31,m_32,m_33,m_34,m_35,m_36,m_37,m_38,m_39);
    {437}out(ch(resource'_1), resource_fromApp)
) | (
    {438}!
    {440}let c_7: channel = c in
    {454}in(c_7, (=msg1,m_40: bitstring));
    {455}let (=KEXDHINIT,g_su_enc_2: bitstring,symk0_enc_2: bitstring,g_su_signed_enc_2: bitstring) = m_40 in
    {444}let ska_3: SecretKey = ska in
    {456}let (=gsu,g_su_6: G) = adec(g_su_enc_2,ska_3) in
    {443}let exp_a_7: exponent = exp_a in
    {457}let K_temp_2: G = exp(g_su_6,exp_a_7) in
    {458}let h_temp_2: SymmetricKey = hash_fork(((g_su_6,exp(g,exp_a_7),K_temp_2),keyEncCtoSTemp)) in
    {459}let (=symk0,symk_0_6: SymmetricKey) = dec(symk0_enc_2,h_temp_2) in
    {460}let (g_su'_2: G,g_su_sign_2: bitstring) = dec(g_su_signed_enc_2,symk_0_6) in
    {446}let pku_2: PublicKey = pk(sku) in
    {461}if check(hash((sig_gsu,pk(ska_3),g_su_6)),g_su_sign_2,pku_2) then
    {462}new sa_2: exponent;
    {466}new symk_32: SymmetricKey;
    {463}let g_sa_6: G = exp(g,sa_2) in
    {467}let diddoc_sa_enc_2: bitstring = (g_sa_6,sig(hash((sig_gsa,pku_2,g_sa_6)),ska_3)) in
    {464}let K_6: G = exp(g_su_6,sa_2) in
    {465}let h_6: SymmetricKey = hash_fork(((g_su_6,g_sa_6,K_6),keyEncStoCTemp)) in
    {449}let pkv_6: PublicKey = pk(sk_E) in
    {468}let m_41: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_6),pkv_6),enc((symk1,symk_32),h_6),enc(diddoc_sa_enc_2,symk_32)) in
    {469}out(c_7, (msg2,m_41));
    {472}new sav_2: exponent;
    {476}new symk_33: SymmetricKey;
    {473}let g_sav_2: G = exp(g,sav_2) in
    {477}let diddoc_sav_signed_2: bitstring = (g_sav_2,sig(hash((sig_gsav,pkv_6,g_sav_2)),ska_3)) in
    {450}let exp_v_7: G = exp(g,exp_E) in
    {474}let KC_temp_2: G = exp(exp_v_7,sav_2) in
    {475}let hc_temp_2: SymmetricKey = hash_fork(((exp_v_7,g_sav_2,KC_temp_2),keyEncAtoCTemp)) in
    {478}let m_42: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_2),pku_2),enc((symk2,symk_33),hc_temp_2),enc(diddoc_sav_signed_2,symk_33)) in
    {441}let c2_3: channel = c2 in
    {479}out(c2_3, (msg3,m_42));
    {480}in(c2_3, (=msg4,m_43: bitstring));
    {481}let (=KEXDHREPLYSERVER,g_sc_enc_2: bitstring,symk3_enc_2: bitstring,g_sc_signed_enc_2: bitstring) = m_43 in
    {482}let (=gsac,g_sc_2: G) = adec(g_sc_enc_2,ska_3) in
    {483}let KC_2: G = exp(g_sc_2,sav_2) in
    {484}let hc_2: SymmetricKey = hash_fork(((g_sc_2,g_sav_2,KC_2),keyEncCtoATemp)) in
    {485}let (=symk3,symk_34: SymmetricKey) = dec(symk3_enc_2,hc_2) in
    {486}let (g_sc'_2: G,g_sc_sisn_2: bitstring) = dec(g_sc_signed_enc_2,symk_34) in
    {487}if check(hash((sig_gsac,pk(ska_3),g_sc_2)),g_sc_sisn_2,pkv_6) then
    {490}new symk_35: SymmetricKey;
    {488}let symk_av_enc_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncAtoC)) in
    {491}let symk4_enc_2: bitstring = enc((symk4,symk_35),symk_av_enc_2) in
    {453}let uri_6: bitstring = euri in
    {451}let i_3: bitstring = i in
    {448}let v_7: bitstring = e in
    {445}let u_7: bitstring = u in
    {442}let a_7: bitstring = a in
    {492}let m_44: bitstring = (symk4_enc_2,enc((tag5,(i_3,v_7,u_7,uri_6,a_7)),symk_35)) in
    {493}out(c2_3, (msg5,m_44));
    {494}in(c2_3, (=msg6,m_45: bitstring));
    {495}let (symk5_enc_2: bitstring,m6_enc_2: bitstring) = m_45 in
    {489}let symk_av_dec_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncCtoA)) in
    {496}let (=symk5,symk_36: SymmetricKey) = dec(symk5_enc_2,symk_av_dec_2) in
    {497}let (=tag6,dec_vpr_2: bitstring) = dec(m6_enc_2,symk_36) in
    {498}let (=dec_vpr_msg,v'_6: bitstring,rule'_6: bitstring,n_c'_2: bitstring) = dec_vpr_2 in
    {499}let (u'_6: bitstring,i'_6: bitstring,uri'_6: bitstring,a'_6: bitstring) = rule'_6 in
    {500}if ((v'_6,u'_6,i'_6,uri'_6,a'_6) = (v_7,u_7,i_3,uri_6,a_7)) then
    {501}new n_r_6: bitstring;
    {503}new symk_37: SymmetricKey;
    {470}let symk_ua_enc_6: SymmetricKey = hash_fork((K_6,h_6,keyEncStoC)) in
    {504}let symk6_enc_6: bitstring = enc((symk6,symk_37),symk_ua_enc_6) in
    {502}let vpr_signed_6: bitstring = (dec_vpr_2_msg,dec_vpr_2,sig(dec_vpr_2,ska_3)) in
    {505}let m_46: bitstring = (symk6_enc_6,enc((tag7,n_r_6,v_7,vpr_signed_6),symk_37)) in
    {506}event auth_AppSendsLastMessageToUser(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
    {507}out(c_7, (msg7,m_46));
    {508}in(c_7, (=msg8,m_47: bitstring));
    {509}let (symk7_enc_6: bitstring,m8_enc_2: bitstring) = m_47 in
    {471}let symk_ua_dec_6: SymmetricKey = hash_fork((K_6,h_6,keyEncCtoS)) in
    {510}let (=symk7,symk_38: SymmetricKey) = dec(symk7_enc_6,symk_ua_dec_6) in
    {511}let (=tag8,n_r'_2: bitstring,vp_signed_2: bitstring) = dec(m8_enc_2,symk_38) in
    {512}if (n_r_6 = n_r'_2) then
    {513}let (=vp_msg,vp_6: bitstring,sign_on_vp_2: bitstring) = vp_signed_2 in
    {514}if check(vp_6,sign_on_vp_2,pku_2) then
    {516}new symk_39: SymmetricKey;
    {517}let symk8_enc_2: bitstring = enc((symk8,symk_39),symk_av_enc_2) in
    {515}let vp_2_prev_2: bitstring = (vp_2_msg,vp_signed_2,sig(vp_signed_2,ska_3)) in
    {518}let m_48: bitstring = (symk8_enc_2,enc((tag9,vp_2_prev_2),symk_39)) in
    {519}out(c2_3, (msg9,m_48));
    {520}in(c2_3, (=msg13,m_49: bitstring));
    {521}let (symk13_enc_2: bitstring,m13_enc_2: bitstring) = m_49 in
    {522}let (=symk13,symk_40: SymmetricKey) = dec(symk13_enc_2,symk_av_dec_2) in
    {523}let (=tag13,m13_dec_2: bitstring) = dec(m13_enc_2,symk_40) in
    {524}let (encrypted_k12'_2: bitstring,encrypted_resource'_2: bitstring,hash_encrypted_resource'_2: bitstring) = m13_dec_2 in
    {525}new symk_k14_2: SymmetricKey;
    {527}let msg_sign_2: bitstring = (m13_dec_2,sig(m13_dec_2,ska_3)) in
    {526}let encrypted_k14_2: bitstring = enc((symk14,symk_k14_2),symk_av_enc_2) in
    {528}let m_50: bitstring = (encrypted_k14_2,(tag14,enc(msg_sign_2,symk_k14_2))) in
    {529}event auth_AppSendsLastMessageToVerifier(m_40,m_41,m_42,m_43,m_44,m_45,m_46,m_47,m_48,m_49,m_50);
    {530}out(c2_3, (msg14,m_50));
    {531}in(c2_3, (=msg15,m_51: bitstring));
    {532}let (symk15_enc_2: bitstring,m15_enc_2: bitstring) = m_51 in
    {533}let (=symk15,symk_41: SymmetricKey) = dec(symk15_enc_2,symk_av_dec_2) in
    {534}let (=symkForResource,skForSkForRes_2: SymmetricKey) = dec(m15_enc_2,symk_41) in
    {535}let (=tag16,skForRes_2: SymmetricKey) = dec(m15_enc_2,skForSkForRes_2) in
    {536}let resource'_2: bitstring = dec(encrypted_resource'_2,skForRes_2) in
    {537}if (hash(resource'_2) = hash_encrypted_resource'_2) then
    {439}let talksOnlyToHonest_6: bool = false in
    {538}if talksOnlyToHonest_6 then
    {539}event auth_AppCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46,m_47,m_48,m_49,m_50,m_51);
    {540}out(ch(resource'_2), resource_fromApp)
) | (
    {541}!
    {543}let c_8: channel = c in
    {557}in(c_8, (=msg1,m_52: bitstring));
    {558}let (=KEXDHINIT,g_su_enc_3: bitstring,symk0_enc_3: bitstring,g_su_signed_enc_3: bitstring) = m_52 in
    {547}let ska_4: SecretKey = ska in
    {559}let (=gsu,g_su_7: G) = adec(g_su_enc_3,ska_4) in
    {546}let exp_a_8: exponent = exp_a in
    {560}let K_temp_3: G = exp(g_su_7,exp_a_8) in
    {561}let h_temp_3: SymmetricKey = hash_fork(((g_su_7,exp(g,exp_a_8),K_temp_3),keyEncCtoSTemp)) in
    {562}let (=symk0,symk_0_7: SymmetricKey) = dec(symk0_enc_3,h_temp_3) in
    {563}let (g_su'_3: G,g_su_sign_3: bitstring) = dec(g_su_signed_enc_3,symk_0_7) in
    {549}let pku_3: PublicKey = pk(sk_E) in
    {564}if check(hash((sig_gsu,pk(ska_4),g_su_7)),g_su_sign_3,pku_3) then
    {565}new sa_3: exponent;
    {569}new symk_42: SymmetricKey;
    {566}let g_sa_7: G = exp(g,sa_3) in
    {570}let diddoc_sa_enc_3: bitstring = (g_sa_7,sig(hash((sig_gsa,pku_3,g_sa_7)),ska_4)) in
    {567}let K_7: G = exp(g_su_7,sa_3) in
    {568}let h_7: SymmetricKey = hash_fork(((g_su_7,g_sa_7,K_7),keyEncStoCTemp)) in
    {552}let pkv_7: PublicKey = pk(sk_E) in
    {571}let m_53: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_7),pkv_7),enc((symk1,symk_42),h_7),enc(diddoc_sa_enc_3,symk_42)) in
    {572}out(c_8, (msg2,m_53));
    {575}new sav_3: exponent;
    {579}new symk_43: SymmetricKey;
    {576}let g_sav_3: G = exp(g,sav_3) in
    {580}let diddoc_sav_signed_3: bitstring = (g_sav_3,sig(hash((sig_gsav,pkv_7,g_sav_3)),ska_4)) in
    {553}let exp_v_8: G = exp(g,exp_E) in
    {577}let KC_temp_3: G = exp(exp_v_8,sav_3) in
    {578}let hc_temp_3: SymmetricKey = hash_fork(((exp_v_8,g_sav_3,KC_temp_3),keyEncAtoCTemp)) in
    {581}let m_54: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_3),pku_3),enc((symk2,symk_43),hc_temp_3),enc(diddoc_sav_signed_3,symk_43)) in
    {544}let c2_4: channel = c2 in
    {582}out(c2_4, (msg3,m_54));
    {583}in(c2_4, (=msg4,m_55: bitstring));
    {584}let (=KEXDHREPLYSERVER,g_sc_enc_3: bitstring,symk3_enc_3: bitstring,g_sc_signed_enc_3: bitstring) = m_55 in
    {585}let (=gsac,g_sc_3: G) = adec(g_sc_enc_3,ska_4) in
    {586}let KC_3: G = exp(g_sc_3,sav_3) in
    {587}let hc_3: SymmetricKey = hash_fork(((g_sc_3,g_sav_3,KC_3),keyEncCtoATemp)) in
    {588}let (=symk3,symk_44: SymmetricKey) = dec(symk3_enc_3,hc_3) in
    {589}let (g_sc'_3: G,g_sc_sisn_3: bitstring) = dec(g_sc_signed_enc_3,symk_44) in
    {590}if check(hash((sig_gsac,pk(ska_4),g_sc_3)),g_sc_sisn_3,pkv_7) then
    {593}new symk_45: SymmetricKey;
    {591}let symk_av_enc_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncAtoC)) in
    {594}let symk4_enc_3: bitstring = enc((symk4,symk_45),symk_av_enc_3) in
    {556}let uri_7: bitstring = euri in
    {554}let i_4: bitstring = i in
    {551}let v_8: bitstring = e in
    {548}let u_8: bitstring = e in
    {545}let a_8: bitstring = a in
    {595}let m_56: bitstring = (symk4_enc_3,enc((tag5,(i_4,v_8,u_8,uri_7,a_8)),symk_45)) in
    {596}out(c2_4, (msg5,m_56));
    {597}in(c2_4, (=msg6,m_57: bitstring));
    {598}let (symk5_enc_3: bitstring,m6_enc_3: bitstring) = m_57 in
    {592}let symk_av_dec_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncCtoA)) in
    {599}let (=symk5,symk_46: SymmetricKey) = dec(symk5_enc_3,symk_av_dec_3) in
    {600}let (=tag6,dec_vpr_3: bitstring) = dec(m6_enc_3,symk_46) in
    {601}let (=dec_vpr_msg,v'_7: bitstring,rule'_7: bitstring,n_c'_3: bitstring) = dec_vpr_3 in
    {602}let (u'_7: bitstring,i'_7: bitstring,uri'_7: bitstring,a'_7: bitstring) = rule'_7 in
    {603}if ((v'_7,u'_7,i'_7,uri'_7,a'_7) = (v_8,u_8,i_4,uri_7,a_8)) then
    {604}new n_r_7: bitstring;
    {606}new symk_47: SymmetricKey;
    {573}let symk_ua_enc_7: SymmetricKey = hash_fork((K_7,h_7,keyEncStoC)) in
    {607}let symk6_enc_7: bitstring = enc((symk6,symk_47),symk_ua_enc_7) in
    {605}let vpr_signed_7: bitstring = (dec_vpr_2_msg,dec_vpr_3,sig(dec_vpr_3,ska_4)) in
    {608}let m_58: bitstring = (symk6_enc_7,enc((tag7,n_r_7,v_8,vpr_signed_7),symk_47)) in
    {609}event auth_AppSendsLastMessageToUser(m_52,m_53,m_54,m_55,m_56,m_57,m_58);
    {610}out(c_8, (msg7,m_58));
    {611}in(c_8, (=msg8,m_59: bitstring));
    {612}let (symk7_enc_7: bitstring,m8_enc_3: bitstring) = m_59 in
    {574}let symk_ua_dec_7: SymmetricKey = hash_fork((K_7,h_7,keyEncCtoS)) in
    {613}let (=symk7,symk_48: SymmetricKey) = dec(symk7_enc_7,symk_ua_dec_7) in
    {614}let (=tag8,n_r'_3: bitstring,vp_signed_3: bitstring) = dec(m8_enc_3,symk_48) in
    {615}if (n_r_7 = n_r'_3) then
    {616}let (=vp_msg,vp_7: bitstring,sign_on_vp_3: bitstring) = vp_signed_3 in
    {617}if check(vp_7,sign_on_vp_3,pku_3) then
    {619}new symk_49: SymmetricKey;
    {620}let symk8_enc_3: bitstring = enc((symk8,symk_49),symk_av_enc_3) in
    {618}let vp_2_prev_3: bitstring = (vp_2_msg,vp_signed_3,sig(vp_signed_3,ska_4)) in
    {621}let m_60: bitstring = (symk8_enc_3,enc((tag9,vp_2_prev_3),symk_49)) in
    {622}out(c2_4, (msg9,m_60));
    {623}in(c2_4, (=msg13,m_61: bitstring));
    {624}let (symk13_enc_3: bitstring,m13_enc_3: bitstring) = m_61 in
    {625}let (=symk13,symk_50: SymmetricKey) = dec(symk13_enc_3,symk_av_dec_3) in
    {626}let (=tag13,m13_dec_3: bitstring) = dec(m13_enc_3,symk_50) in
    {627}let (encrypted_k12'_3: bitstring,encrypted_resource'_3: bitstring,hash_encrypted_resource'_3: bitstring) = m13_dec_3 in
    {628}new symk_k14_3: SymmetricKey;
    {630}let msg_sign_3: bitstring = (m13_dec_3,sig(m13_dec_3,ska_4)) in
    {629}let encrypted_k14_3: bitstring = enc((symk14,symk_k14_3),symk_av_enc_3) in
    {631}let m_62: bitstring = (encrypted_k14_3,(tag14,enc(msg_sign_3,symk_k14_3))) in
    {632}event auth_AppSendsLastMessageToVerifier(m_52,m_53,m_54,m_55,m_56,m_57,m_58,m_59,m_60,m_61,m_62);
    {633}out(c2_4, (msg14,m_62));
    {634}in(c2_4, (=msg15,m_63: bitstring));
    {635}let (symk15_enc_3: bitstring,m15_enc_3: bitstring) = m_63 in
    {636}let (=symk15,symk_51: SymmetricKey) = dec(symk15_enc_3,symk_av_dec_3) in
    {637}let (=symkForResource,skForSkForRes_3: SymmetricKey) = dec(m15_enc_3,symk_51) in
    {638}let (=tag16,skForRes_3: SymmetricKey) = dec(m15_enc_3,skForSkForRes_3) in
    {639}let resource'_3: bitstring = dec(encrypted_resource'_3,skForRes_3) in
    {640}if (hash(resource'_3) = hash_encrypted_resource'_3) then
    {542}let talksOnlyToHonest_7: bool = false in
    {641}if talksOnlyToHonest_7 then
    {642}event auth_AppCompletesProtocol(m_52,m_53,m_54,m_55,m_56,m_57,m_58,m_59,m_60,m_61,m_62,m_63);
    {643}out(ch(resource'_3), resource_fromApp)
) | (
    {644}!
    {646}let c_9: channel = c2 in
    {663}in(c_9, (=msg3,m_64: bitstring));
    {664}let (=KEXDHINITSERVER,g_sav_enc: bitstring,symk2_enc: bitstring,g_sav_enc_signed: bitstring) = m_64 in
    {650}let skv_1: SecretKey = skv in
    {665}let (=gsav,g_sav_4: G) = adec(g_sav_enc,skv_1) in
    {649}let exp_v_9: exponent = exp_v in
    {666}let K0_4: G = exp(g_sav_4,exp_v_9) in
    {667}let h_8: SymmetricKey = hash_fork(((exp(g,exp_v_9),g_sav_4,K0_4),keyEncAtoCTemp)) in
    {668}let (=symk2,symk_52: SymmetricKey) = dec(symk2_enc,h_8) in
    {669}let (g_sav': G,sign_g_sav: bitstring) = dec(g_sav_enc_signed,symk_52) in
    {655}let pka_4: PublicKey = pk(ska) in
    {670}if check(hash((sig_gsav,pk(skv_1),g_sav_4)),sign_g_sav,pka_4) then
    {671}new sc: exponent;
    {675}new symk_k3: SymmetricKey;
    {672}let g_sc_4: G = exp(g,sc) in
    {676}let diddoc_sc_signed: bitstring = (g_sc_4,sig(hash((sig_gsac,pka_4,g_sc_4)),skv_1)) in
    {673}let K_8: G = exp(g_sav_4,sc) in
    {674}let h_9: SymmetricKey = hash_fork(((g_sc_4,g_sav_4,K_8),keyEncCtoATemp)) in
    {677}let m_65: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_4),pka_4),enc((symk3,symk_k3),h_9),enc(diddoc_sc_signed,symk_k3)) in
    {678}out(c_9, (msg4,m_65));
    {681}in(c_9, (=msg5,m_66: bitstring));
    {682}let (symk4_enc_4: bitstring,m5_enc: bitstring) = m_66 in
    {680}let symk_av_dec_4: SymmetricKey = hash_fork((K_8,h_9,keyEncAtoC)) in
    {683}let (=symk4,symk_53: SymmetricKey) = dec(symk4_enc_4,symk_av_dec_4) in
    {684}let (=tag5,(i'_8: bitstring,v'_8: bitstring,u'_8: bitstring,uri'_8: bitstring,a'_8: bitstring)) = dec(m5_enc,symk_53) in
    {662}let uri_8: bitstring = uri_req in
    {657}let i_5: bitstring = i in
    {654}let a_9: bitstring = a in
    {651}let u_9: bitstring = u in
    {648}let v_9: bitstring = v in
    {685}if ((i'_8,v'_8,u'_8,uri'_8,a'_8) = (i_5,v_9,u_9,uri_8,a_9)) then
    {686}new n_c_4: bitstring;
    {689}new symk_54: SymmetricKey;
    {679}let symk_av_enc_4: SymmetricKey = hash_fork((K_8,h_9,keyEncCtoA)) in
    {690}let enc_symk5: bitstring = enc((symk5,symk_54),symk_av_enc_4) in
    {687}let rule: bitstring = (u_9,i_5,uri_8,a_9) in
    {688}let vpr_send_prev: bitstring = (dec_vpr_msg,v_9,rule,n_c_4) in
    {691}let m_67: bitstring = (enc_symk5,enc((tag6,vpr_send_prev),symk_54)) in
    {692}event verifierInConeOfUser(m_64,m_65,m_66,m_67);
    {693}out(c_9, (msg6,m_67));
    {694}in(c_9, (=msg9,m_68: bitstring));
    {695}let (symk8_enc_4: bitstring,m9_enc: bitstring) = m_68 in
    {696}let (=symk8,symk_55: SymmetricKey) = dec(symk8_enc_4,symk_av_dec_4) in
    {697}let (=tag9,vp_signed_4: bitstring) = dec(m9_enc,symk_55) in
    {698}let (=vp_2_msg,vp_signed_5: bitstring,vp_sign_2: bitstring) = vp_signed_4 in
    {699}if check(vp_signed_5,vp_sign_2,pka_4) then
    {700}let (=vp_msg,vp_8: bitstring,sign_vp: bitstring) = vp_signed_5 in
    {652}let pku_4: PublicKey = pk(sku) in
    {701}if check(vp_8,sign_vp,pku_4) then
    {702}let (vpr_rec_4: bitstring,vc_rec_signed: bitstring) = vp_8 in
    {703}let (vc_rec: bitstring,sign_vc_rec: bitstring) = vc_rec_signed in
    {658}let pki_4: PublicKey = pk(ski) in
    {704}if check(vc_rec,sign_vc_rec,pki_4) then
    {705}let (iss'': bitstring,u'': bitstring) = vc_rec in
    {706}if ((iss'',u'') = (i_5,u_9)) then
    {707}let (=dec_vpr_msg,v''_4: bitstring,rule'': bitstring,n_c'': bitstring) = vpr_rec_4 in
    {708}if ((v''_4,rule'',n_c'') = (c_9,rule,n_c_4)) then
    {709}let (u''': bitstring,i''': bitstring,uri''': bitstring,a''': bitstring) = rule'' in
    {710}if ((u''',i''',uri''',a''') = (u_9,i_5,uri_8,a_9)) then
    {711}new sv: exponent;
    {715}new symk_56: SymmetricKey;
    {712}let g_sv: G = exp(g,sv) in
    {660}let pkttp: PublicKey = pk(sk_ttp) in
    {716}let diddoc_sv_signed: bitstring = (g_sv,sig(hash((sig_gsttp,pkttp,g_sv)),skv_1)) in
    {661}let exp_ttp_1: G = exp(g,exp_ttp) in
    {713}let K3_temp: G = exp(exp_ttp_1,sv) in
    {714}let h3_temp: SymmetricKey = hash_fork((exp_ttp_1,g_sv,K3_temp,keyEncVertoTTPTemp)) in
    {717}let m_69: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv),pkttp),enc((symk10,symk_56),h3_temp),enc(diddoc_sv_signed,symk_56)) in
    {647}let c2_5: channel = c3 in
    {718}out(c2_5, (msg10,m_69));
    {719}in(c2_5, (=msg11,m_70: bitstring));
    {720}let (=KEXDHREPLYTTP,g_sttp_enc: bitstring,symk11_enc: bitstring,g_sttp_enc_signed: bitstring) = m_69 in
    {721}let (=gsttp,g_sttp: G) = adec(g_sttp_enc,skv_1) in
    {724}let (=symk11,symk_57: SymmetricKey) = dec(symk11_enc,h3_temp) in
    {725}let (g_sttp': G,sign_g_sttp: bitstring) = dec(g_sttp_enc_signed,symk_57) in
    {726}if check(hash((sig_gsttp,pk(skv_1),g_sttp)),sign_g_sttp,pkttp) then
    {729}new symk_k12: SymmetricKey;
    {731}new resource: bitstring;
    {733}new symk_k13: SymmetricKey;
    {734}let encrypted_k13: bitstring = enc((symk13,symk_k13),symk_av_enc_4) in
    {722}let K3: G = exp(g_sttp,sv) in
    {723}let h3: SymmetricKey = hash_fork((g_sttp,g_sv,K3,keyEncTTPtoVerTemp)) in
    {727}let symk_ttpv_enc: SymmetricKey = hash_fork((K3,h3,keyEncVertoTTP)) in
    {730}let encrypted_k12: bitstring = enc((symk12,symk_k12),symk_ttpv_enc) in
    {732}let m_71: bitstring = (encrypted_k12,enc(resource,symk_k12),hash(resource)) in
    {735}let m_72: bitstring = (encrypted_k13,enc((tag13,m_71),symk_k13)) in
    {736}out(c_9, (msg13,m_72));
    {737}in(c_9, (=msg14,m_73: bitstring));
    {738}let (symk14_enc: bitstring,m14_enc: bitstring) = m_73 in
    {739}let (=symk14,symk_58: SymmetricKey) = dec(symk14_enc,symk_av_dec_4) in
    {740}let (=tag14,m14_dec: bitstring) = dec(m14_enc,symk_58) in
    {741}let (m14_received: bitstring,m14_signature: bitstring) = m14_dec in
    {742}if check(m14_received,m14_signature,pka_4) then
    {743}new symk_k15: SymmetricKey;
    {744}let encrypted_k15: bitstring = enc((symk15,symk_k15),symk_av_enc_4) in
    {745}let m_74: bitstring = (encrypted_k15,enc((tag16,symk_k12),symk_k15)) in
    {746}event auth_VerifierSendsLastMessageToApp(m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73,m_74);
    {747}out(c_9, (msg15,m_74));
    {645}let talksOnlyToHonest_8: bool = true in
    {748}if talksOnlyToHonest_8 then
    (
        {749}event auth_VerifierCompletesProtocol(m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73,m_74)
    ) | (
        {750}out(ch(resource), resource_fromVerifier)
    )
) | (
    {751}!
    {753}let c_10: channel = c2 in
    {770}in(c_10, (=msg3,m_75: bitstring));
    {771}let (=KEXDHINITSERVER,g_sav_enc_1: bitstring,symk2_enc_1: bitstring,g_sav_enc_signed_1: bitstring) = m_75 in
    {757}let skv_2: SecretKey = skv in
    {772}let (=gsav,g_sav_5: G) = adec(g_sav_enc_1,skv_2) in
    {756}let exp_v_10: exponent = exp_v in
    {773}let K0_5: G = exp(g_sav_5,exp_v_10) in
    {774}let h_10: SymmetricKey = hash_fork(((exp(g,exp_v_10),g_sav_5,K0_5),keyEncAtoCTemp)) in
    {775}let (=symk2,symk_59: SymmetricKey) = dec(symk2_enc_1,h_10) in
    {776}let (g_sav'_1: G,sign_g_sav_1: bitstring) = dec(g_sav_enc_signed_1,symk_59) in
    {762}let pka_5: PublicKey = pk(ska) in
    {777}if check(hash((sig_gsav,pk(skv_2),g_sav_5)),sign_g_sav_1,pka_5) then
    {778}new sc_1: exponent;
    {782}new symk_k3_1: SymmetricKey;
    {779}let g_sc_5: G = exp(g,sc_1) in
    {783}let diddoc_sc_signed_1: bitstring = (g_sc_5,sig(hash((sig_gsac,pka_5,g_sc_5)),skv_2)) in
    {780}let K_9: G = exp(g_sav_5,sc_1) in
    {781}let h_11: SymmetricKey = hash_fork(((g_sc_5,g_sav_5,K_9),keyEncCtoATemp)) in
    {784}let m_76: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_5),pka_5),enc((symk3,symk_k3_1),h_11),enc(diddoc_sc_signed_1,symk_k3_1)) in
    {785}out(c_10, (msg4,m_76));
    {788}in(c_10, (=msg5,m_77: bitstring));
    {789}let (symk4_enc_5: bitstring,m5_enc_1: bitstring) = m_77 in
    {787}let symk_av_dec_5: SymmetricKey = hash_fork((K_9,h_11,keyEncAtoC)) in
    {790}let (=symk4,symk_60: SymmetricKey) = dec(symk4_enc_5,symk_av_dec_5) in
    {791}let (=tag5,(i'_9: bitstring,v'_9: bitstring,u'_9: bitstring,uri'_9: bitstring,a'_9: bitstring)) = dec(m5_enc_1,symk_60) in
    {769}let uri_9: bitstring = uri_req in
    {764}let i_6: bitstring = i in
    {761}let a_10: bitstring = a in
    {758}let u_10: bitstring = e in
    {755}let v_10: bitstring = v in
    {792}if ((i'_9,v'_9,u'_9,uri'_9,a'_9) = (i_6,v_10,u_10,uri_9,a_10)) then
    {793}new n_c_5: bitstring;
    {796}new symk_61: SymmetricKey;
    {786}let symk_av_enc_5: SymmetricKey = hash_fork((K_9,h_11,keyEncCtoA)) in
    {797}let enc_symk5_1: bitstring = enc((symk5,symk_61),symk_av_enc_5) in
    {794}let rule_1: bitstring = (u_10,i_6,uri_9,a_10) in
    {795}let vpr_send_prev_1: bitstring = (dec_vpr_msg,v_10,rule_1,n_c_5) in
    {798}let m_78: bitstring = (enc_symk5_1,enc((tag6,vpr_send_prev_1),symk_61)) in
    {799}event verifierInConeOfUser(m_75,m_76,m_77,m_78);
    {800}out(c_10, (msg6,m_78));
    {801}in(c_10, (=msg9,m_79: bitstring));
    {802}let (symk8_enc_5: bitstring,m9_enc_1: bitstring) = m_79 in
    {803}let (=symk8,symk_62: SymmetricKey) = dec(symk8_enc_5,symk_av_dec_5) in
    {804}let (=tag9,vp_signed_6: bitstring) = dec(m9_enc_1,symk_62) in
    {805}let (=vp_2_msg,vp_signed_7: bitstring,vp_sign: bitstring) = vp_signed_6 in
    {806}if check(vp_signed_7,vp_sign,pka_5) then
    {807}let (=vp_msg,vp_9: bitstring,sign_vp_1: bitstring) = vp_signed_7 in
    {759}let pku_5: PublicKey = pk(sk_E) in
    {808}if check(vp_9,sign_vp_1,pku_5) then
    {809}let (vpr_rec_5: bitstring,vc_rec_signed_1: bitstring) = vp_9 in
    {810}let (vc_rec_1: bitstring,sign_vc_rec_1: bitstring) = vc_rec_signed_1 in
    {765}let pki_5: PublicKey = pk(ski) in
    {811}if check(vc_rec_1,sign_vc_rec_1,pki_5) then
    {812}let (iss''_1: bitstring,u''_1: bitstring) = vc_rec_1 in
    {813}if ((iss''_1,u''_1) = (i_6,u_10)) then
    {814}let (=dec_vpr_msg,v''_5: bitstring,rule''_1: bitstring,n_c''_1: bitstring) = vpr_rec_5 in
    {815}if ((v''_5,rule''_1,n_c''_1) = (c_10,rule_1,n_c_5)) then
    {816}let (u'''_1: bitstring,i'''_1: bitstring,uri'''_1: bitstring,a'''_1: bitstring) = rule''_1 in
    {817}if ((u'''_1,i'''_1,uri'''_1,a'''_1) = (u_10,i_6,uri_9,a_10)) then
    {818}new sv_1: exponent;
    {822}new symk_63: SymmetricKey;
    {819}let g_sv_1: G = exp(g,sv_1) in
    {767}let pkttp_1: PublicKey = pk(sk_ttp) in
    {823}let diddoc_sv_signed_1: bitstring = (g_sv_1,sig(hash((sig_gsttp,pkttp_1,g_sv_1)),skv_2)) in
    {768}let exp_ttp_2: G = exp(g,exp_ttp) in
    {820}let K3_temp_1: G = exp(exp_ttp_2,sv_1) in
    {821}let h3_temp_1: SymmetricKey = hash_fork((exp_ttp_2,g_sv_1,K3_temp_1,keyEncVertoTTPTemp)) in
    {824}let m_80: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_1),pkttp_1),enc((symk10,symk_63),h3_temp_1),enc(diddoc_sv_signed_1,symk_63)) in
    {754}let c2_6: channel = c3 in
    {825}out(c2_6, (msg10,m_80));
    {826}in(c2_6, (=msg11,m_81: bitstring));
    {827}let (=KEXDHREPLYTTP,g_sttp_enc_1: bitstring,symk11_enc_1: bitstring,g_sttp_enc_signed_1: bitstring) = m_80 in
    {828}let (=gsttp,g_sttp_1: G) = adec(g_sttp_enc_1,skv_2) in
    {831}let (=symk11,symk_64: SymmetricKey) = dec(symk11_enc_1,h3_temp_1) in
    {832}let (g_sttp'_1: G,sign_g_sttp_1: bitstring) = dec(g_sttp_enc_signed_1,symk_64) in
    {833}if check(hash((sig_gsttp,pk(skv_2),g_sttp_1)),sign_g_sttp_1,pkttp_1) then
    {836}new symk_k12_1: SymmetricKey;
    {838}new resource_1: bitstring;
    {840}new symk_k13_1: SymmetricKey;
    {841}let encrypted_k13_1: bitstring = enc((symk13,symk_k13_1),symk_av_enc_5) in
    {829}let K3_1: G = exp(g_sttp_1,sv_1) in
    {830}let h3_1: SymmetricKey = hash_fork((g_sttp_1,g_sv_1,K3_1,keyEncTTPtoVerTemp)) in
    {834}let symk_ttpv_enc_1: SymmetricKey = hash_fork((K3_1,h3_1,keyEncVertoTTP)) in
    {837}let encrypted_k12_1: bitstring = enc((symk12,symk_k12_1),symk_ttpv_enc_1) in
    {839}let m_82: bitstring = (encrypted_k12_1,enc(resource_1,symk_k12_1),hash(resource_1)) in
    {842}let m_83: bitstring = (encrypted_k13_1,enc((tag13,m_82),symk_k13_1)) in
    {843}out(c_10, (msg13,m_83));
    {844}in(c_10, (=msg14,m_84: bitstring));
    {845}let (symk14_enc_1: bitstring,m14_enc_1: bitstring) = m_84 in
    {846}let (=symk14,symk_65: SymmetricKey) = dec(symk14_enc_1,symk_av_dec_5) in
    {847}let (=tag14,m14_dec_1: bitstring) = dec(m14_enc_1,symk_65) in
    {848}let (m14_received_1: bitstring,m14_signature_1: bitstring) = m14_dec_1 in
    {849}if check(m14_received_1,m14_signature_1,pka_5) then
    {850}new symk_k15_1: SymmetricKey;
    {851}let encrypted_k15_1: bitstring = enc((symk15,symk_k15_1),symk_av_enc_5) in
    {852}let m_85: bitstring = (encrypted_k15_1,enc((tag16,symk_k12_1),symk_k15_1)) in
    {853}event auth_VerifierSendsLastMessageToApp(m_75,m_76,m_77,m_78,m_79,m_80,m_81,m_82,m_83,m_84,m_85);
    {854}out(c_10, (msg15,m_85));
    {752}let talksOnlyToHonest_9: bool = false in
    {855}if talksOnlyToHonest_9 then
    (
        {856}event auth_VerifierCompletesProtocol(m_75,m_76,m_77,m_78,m_79,m_80,m_81,m_82,m_83,m_84,m_85)
    ) | (
        {857}out(ch(resource_1), resource_fromVerifier)
    )
) | (
    {858}!
    {860}let c_11: channel = c2 in
    {877}in(c_11, (=msg3,m_86: bitstring));
    {878}let (=KEXDHINITSERVER,g_sav_enc_2: bitstring,symk2_enc_2: bitstring,g_sav_enc_signed_2: bitstring) = m_86 in
    {864}let skv_3: SecretKey = skv in
    {879}let (=gsav,g_sav_6: G) = adec(g_sav_enc_2,skv_3) in
    {863}let exp_v_11: exponent = exp_v in
    {880}let K0_6: G = exp(g_sav_6,exp_v_11) in
    {881}let h_12: SymmetricKey = hash_fork(((exp(g,exp_v_11),g_sav_6,K0_6),keyEncAtoCTemp)) in
    {882}let (=symk2,symk_66: SymmetricKey) = dec(symk2_enc_2,h_12) in
    {883}let (g_sav'_2: G,sign_g_sav_2: bitstring) = dec(g_sav_enc_signed_2,symk_66) in
    {869}let pka_6: PublicKey = pk(sk_E) in
    {884}if check(hash((sig_gsav,pk(skv_3),g_sav_6)),sign_g_sav_2,pka_6) then
    {885}new sc_2: exponent;
    {889}new symk_k3_2: SymmetricKey;
    {886}let g_sc_6: G = exp(g,sc_2) in
    {890}let diddoc_sc_signed_2: bitstring = (g_sc_6,sig(hash((sig_gsac,pka_6,g_sc_6)),skv_3)) in
    {887}let K_10: G = exp(g_sav_6,sc_2) in
    {888}let h_13: SymmetricKey = hash_fork(((g_sc_6,g_sav_6,K_10),keyEncCtoATemp)) in
    {891}let m_87: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_6),pka_6),enc((symk3,symk_k3_2),h_13),enc(diddoc_sc_signed_2,symk_k3_2)) in
    {892}out(c_11, (msg4,m_87));
    {895}in(c_11, (=msg5,m_88: bitstring));
    {896}let (symk4_enc_6: bitstring,m5_enc_2: bitstring) = m_88 in
    {894}let symk_av_dec_6: SymmetricKey = hash_fork((K_10,h_13,keyEncAtoC)) in
    {897}let (=symk4,symk_67: SymmetricKey) = dec(symk4_enc_6,symk_av_dec_6) in
    {898}let (=tag5,(i'_10: bitstring,v'_10: bitstring,u'_10: bitstring,uri'_10: bitstring,a'_10: bitstring)) = dec(m5_enc_2,symk_67) in
    {876}let uri_10: bitstring = uri_req in
    {871}let i_7: bitstring = i in
    {868}let a_11: bitstring = e in
    {865}let u_11: bitstring = u in
    {862}let v_11: bitstring = v in
    {899}if ((i'_10,v'_10,u'_10,uri'_10,a'_10) = (i_7,v_11,u_11,uri_10,a_11)) then
    {900}new n_c_6: bitstring;
    {903}new symk_68: SymmetricKey;
    {893}let symk_av_enc_6: SymmetricKey = hash_fork((K_10,h_13,keyEncCtoA)) in
    {904}let enc_symk5_2: bitstring = enc((symk5,symk_68),symk_av_enc_6) in
    {901}let rule_2: bitstring = (u_11,i_7,uri_10,a_11) in
    {902}let vpr_send_prev_2: bitstring = (dec_vpr_msg,v_11,rule_2,n_c_6) in
    {905}let m_89: bitstring = (enc_symk5_2,enc((tag6,vpr_send_prev_2),symk_68)) in
    {906}event verifierInConeOfUser(m_86,m_87,m_88,m_89);
    {907}out(c_11, (msg6,m_89));
    {908}in(c_11, (=msg9,m_90: bitstring));
    {909}let (symk8_enc_6: bitstring,m9_enc_2: bitstring) = m_90 in
    {910}let (=symk8,symk_69: SymmetricKey) = dec(symk8_enc_6,symk_av_dec_6) in
    {911}let (=tag9,vp_signed_8: bitstring) = dec(m9_enc_2,symk_69) in
    {912}let (=vp_2_msg,vp_signed_9: bitstring,vp_sign_1: bitstring) = vp_signed_8 in
    {913}if check(vp_signed_9,vp_sign_1,pka_6) then
    {914}let (=vp_msg,vp_10: bitstring,sign_vp_2: bitstring) = vp_signed_9 in
    {866}let pku_6: PublicKey = pk(sku) in
    {915}if check(vp_10,sign_vp_2,pku_6) then
    {916}let (vpr_rec_6: bitstring,vc_rec_signed_2: bitstring) = vp_10 in
    {917}let (vc_rec_2: bitstring,sign_vc_rec_2: bitstring) = vc_rec_signed_2 in
    {872}let pki_6: PublicKey = pk(ski) in
    {918}if check(vc_rec_2,sign_vc_rec_2,pki_6) then
    {919}let (iss''_2: bitstring,u''_2: bitstring) = vc_rec_2 in
    {920}if ((iss''_2,u''_2) = (i_7,u_11)) then
    {921}let (=dec_vpr_msg,v''_6: bitstring,rule''_2: bitstring,n_c''_2: bitstring) = vpr_rec_6 in
    {922}if ((v''_6,rule''_2,n_c''_2) = (c_11,rule_2,n_c_6)) then
    {923}let (u'''_2: bitstring,i'''_2: bitstring,uri'''_2: bitstring,a'''_2: bitstring) = rule''_2 in
    {924}if ((u'''_2,i'''_2,uri'''_2,a'''_2) = (u_11,i_7,uri_10,a_11)) then
    {925}new sv_2: exponent;
    {929}new symk_70: SymmetricKey;
    {926}let g_sv_2: G = exp(g,sv_2) in
    {874}let pkttp_2: PublicKey = pk(sk_ttp) in
    {930}let diddoc_sv_signed_2: bitstring = (g_sv_2,sig(hash((sig_gsttp,pkttp_2,g_sv_2)),skv_3)) in
    {875}let exp_ttp_3: G = exp(g,exp_ttp) in
    {927}let K3_temp_2: G = exp(exp_ttp_3,sv_2) in
    {928}let h3_temp_2: SymmetricKey = hash_fork((exp_ttp_3,g_sv_2,K3_temp_2,keyEncVertoTTPTemp)) in
    {931}let m_91: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_2),pkttp_2),enc((symk10,symk_70),h3_temp_2),enc(diddoc_sv_signed_2,symk_70)) in
    {861}let c2_7: channel = c3 in
    {932}out(c2_7, (msg10,m_91));
    {933}in(c2_7, (=msg11,m_92: bitstring));
    {934}let (=KEXDHREPLYTTP,g_sttp_enc_2: bitstring,symk11_enc_2: bitstring,g_sttp_enc_signed_2: bitstring) = m_91 in
    {935}let (=gsttp,g_sttp_2: G) = adec(g_sttp_enc_2,skv_3) in
    {938}let (=symk11,symk_71: SymmetricKey) = dec(symk11_enc_2,h3_temp_2) in
    {939}let (g_sttp'_2: G,sign_g_sttp_2: bitstring) = dec(g_sttp_enc_signed_2,symk_71) in
    {940}if check(hash((sig_gsttp,pk(skv_3),g_sttp_2)),sign_g_sttp_2,pkttp_2) then
    {943}new symk_k12_2: SymmetricKey;
    {945}new resource_2: bitstring;
    {947}new symk_k13_2: SymmetricKey;
    {948}let encrypted_k13_2: bitstring = enc((symk13,symk_k13_2),symk_av_enc_6) in
    {936}let K3_2: G = exp(g_sttp_2,sv_2) in
    {937}let h3_2: SymmetricKey = hash_fork((g_sttp_2,g_sv_2,K3_2,keyEncTTPtoVerTemp)) in
    {941}let symk_ttpv_enc_2: SymmetricKey = hash_fork((K3_2,h3_2,keyEncVertoTTP)) in
    {944}let encrypted_k12_2: bitstring = enc((symk12,symk_k12_2),symk_ttpv_enc_2) in
    {946}let m_93: bitstring = (encrypted_k12_2,enc(resource_2,symk_k12_2),hash(resource_2)) in
    {949}let m_94: bitstring = (encrypted_k13_2,enc((tag13,m_93),symk_k13_2)) in
    {950}out(c_11, (msg13,m_94));
    {951}in(c_11, (=msg14,m_95: bitstring));
    {952}let (symk14_enc_2: bitstring,m14_enc_2: bitstring) = m_95 in
    {953}let (=symk14,symk_72: SymmetricKey) = dec(symk14_enc_2,symk_av_dec_6) in
    {954}let (=tag14,m14_dec_2: bitstring) = dec(m14_enc_2,symk_72) in
    {955}let (m14_received_2: bitstring,m14_signature_2: bitstring) = m14_dec_2 in
    {956}if check(m14_received_2,m14_signature_2,pka_6) then
    {957}new symk_k15_2: SymmetricKey;
    {958}let encrypted_k15_2: bitstring = enc((symk15,symk_k15_2),symk_av_enc_6) in
    {959}let m_96: bitstring = (encrypted_k15_2,enc((tag16,symk_k12_2),symk_k15_2)) in
    {960}event auth_VerifierSendsLastMessageToApp(m_86,m_87,m_88,m_89,m_90,m_91,m_92,m_93,m_94,m_95,m_96);
    {961}out(c_11, (msg15,m_96));
    {859}let talksOnlyToHonest_10: bool = false in
    {962}if talksOnlyToHonest_10 then
    (
        {963}event auth_VerifierCompletesProtocol(m_86,m_87,m_88,m_89,m_90,m_91,m_92,m_93,m_94,m_95,m_96)
    ) | (
        {964}out(ch(resource_2), resource_fromVerifier)
    )
) | (
    {965}!
    {967}let c_12: channel = c2 in
    {984}in(c_12, (=msg3,m_97: bitstring));
    {985}let (=KEXDHINITSERVER,g_sav_enc_3: bitstring,symk2_enc_3: bitstring,g_sav_enc_signed_3: bitstring) = m_97 in
    {971}let skv_4: SecretKey = skv in
    {986}let (=gsav,g_sav_7: G) = adec(g_sav_enc_3,skv_4) in
    {970}let exp_v_12: exponent = exp_v in
    {987}let K0_7: G = exp(g_sav_7,exp_v_12) in
    {988}let h_14: SymmetricKey = hash_fork(((exp(g,exp_v_12),g_sav_7,K0_7),keyEncAtoCTemp)) in
    {989}let (=symk2,symk_73: SymmetricKey) = dec(symk2_enc_3,h_14) in
    {990}let (g_sav'_3: G,sign_g_sav_3: bitstring) = dec(g_sav_enc_signed_3,symk_73) in
    {976}let pka_7: PublicKey = pk(sk_E) in
    {991}if check(hash((sig_gsav,pk(skv_4),g_sav_7)),sign_g_sav_3,pka_7) then
    {992}new sc_3: exponent;
    {996}new symk_k3_3: SymmetricKey;
    {993}let g_sc_7: G = exp(g,sc_3) in
    {997}let diddoc_sc_signed_3: bitstring = (g_sc_7,sig(hash((sig_gsac,pka_7,g_sc_7)),skv_4)) in
    {994}let K_11: G = exp(g_sav_7,sc_3) in
    {995}let h_15: SymmetricKey = hash_fork(((g_sc_7,g_sav_7,K_11),keyEncCtoATemp)) in
    {998}let m_98: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_7),pka_7),enc((symk3,symk_k3_3),h_15),enc(diddoc_sc_signed_3,symk_k3_3)) in
    {999}out(c_12, (msg4,m_98));
    {1002}in(c_12, (=msg5,m_99: bitstring));
    {1003}let (symk4_enc_7: bitstring,m5_enc_3: bitstring) = m_99 in
    {1001}let symk_av_dec_7: SymmetricKey = hash_fork((K_11,h_15,keyEncAtoC)) in
    {1004}let (=symk4,symk_74: SymmetricKey) = dec(symk4_enc_7,symk_av_dec_7) in
    {1005}let (=tag5,(i'_11: bitstring,v'_11: bitstring,u'_11: bitstring,uri'_11: bitstring,a'_11: bitstring)) = dec(m5_enc_3,symk_74) in
    {983}let uri_11: bitstring = uri_req in
    {978}let i_8: bitstring = i in
    {975}let a_12: bitstring = e in
    {972}let u_12: bitstring = e in
    {969}let v_12: bitstring = v in
    {1006}if ((i'_11,v'_11,u'_11,uri'_11,a'_11) = (i_8,v_12,u_12,uri_11,a_12)) then
    {1007}new n_c_7: bitstring;
    {1010}new symk_75: SymmetricKey;
    {1000}let symk_av_enc_7: SymmetricKey = hash_fork((K_11,h_15,keyEncCtoA)) in
    {1011}let enc_symk5_3: bitstring = enc((symk5,symk_75),symk_av_enc_7) in
    {1008}let rule_3: bitstring = (u_12,i_8,uri_11,a_12) in
    {1009}let vpr_send_prev_3: bitstring = (dec_vpr_msg,v_12,rule_3,n_c_7) in
    {1012}let m_100: bitstring = (enc_symk5_3,enc((tag6,vpr_send_prev_3),symk_75)) in
    {1013}event verifierInConeOfUser(m_97,m_98,m_99,m_100);
    {1014}out(c_12, (msg6,m_100));
    {1015}in(c_12, (=msg9,m_101: bitstring));
    {1016}let (symk8_enc_7: bitstring,m9_enc_3: bitstring) = m_101 in
    {1017}let (=symk8,symk_76: SymmetricKey) = dec(symk8_enc_7,symk_av_dec_7) in
    {1018}let (=tag9,vp_signed_10: bitstring) = dec(m9_enc_3,symk_76) in
    {1019}let (=vp_2_msg,vp_signed_11: bitstring,vp_sign_3: bitstring) = vp_signed_10 in
    {1020}if check(vp_signed_11,vp_sign_3,pka_7) then
    {1021}let (=vp_msg,vp_11: bitstring,sign_vp_3: bitstring) = vp_signed_11 in
    {973}let pku_7: PublicKey = pk(sk_E) in
    {1022}if check(vp_11,sign_vp_3,pku_7) then
    {1023}let (vpr_rec_7: bitstring,vc_rec_signed_3: bitstring) = vp_11 in
    {1024}let (vc_rec_3: bitstring,sign_vc_rec_3: bitstring) = vc_rec_signed_3 in
    {979}let pki_7: PublicKey = pk(ski) in
    {1025}if check(vc_rec_3,sign_vc_rec_3,pki_7) then
    {1026}let (iss''_3: bitstring,u''_3: bitstring) = vc_rec_3 in
    {1027}if ((iss''_3,u''_3) = (i_8,u_12)) then
    {1028}let (=dec_vpr_msg,v''_7: bitstring,rule''_3: bitstring,n_c''_3: bitstring) = vpr_rec_7 in
    {1029}if ((v''_7,rule''_3,n_c''_3) = (c_12,rule_3,n_c_7)) then
    {1030}let (u'''_3: bitstring,i'''_3: bitstring,uri'''_3: bitstring,a'''_3: bitstring) = rule''_3 in
    {1031}if ((u'''_3,i'''_3,uri'''_3,a'''_3) = (u_12,i_8,uri_11,a_12)) then
    {1032}new sv_3: exponent;
    {1036}new symk_77: SymmetricKey;
    {1033}let g_sv_3: G = exp(g,sv_3) in
    {981}let pkttp_3: PublicKey = pk(sk_ttp) in
    {1037}let diddoc_sv_signed_3: bitstring = (g_sv_3,sig(hash((sig_gsttp,pkttp_3,g_sv_3)),skv_4)) in
    {982}let exp_ttp_4: G = exp(g,exp_ttp) in
    {1034}let K3_temp_3: G = exp(exp_ttp_4,sv_3) in
    {1035}let h3_temp_3: SymmetricKey = hash_fork((exp_ttp_4,g_sv_3,K3_temp_3,keyEncVertoTTPTemp)) in
    {1038}let m_102: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_3),pkttp_3),enc((symk10,symk_77),h3_temp_3),enc(diddoc_sv_signed_3,symk_77)) in
    {968}let c2_8: channel = c3 in
    {1039}out(c2_8, (msg10,m_102));
    {1040}in(c2_8, (=msg11,m_103: bitstring));
    {1041}let (=KEXDHREPLYTTP,g_sttp_enc_3: bitstring,symk11_enc_3: bitstring,g_sttp_enc_signed_3: bitstring) = m_102 in
    {1042}let (=gsttp,g_sttp_3: G) = adec(g_sttp_enc_3,skv_4) in
    {1045}let (=symk11,symk_78: SymmetricKey) = dec(symk11_enc_3,h3_temp_3) in
    {1046}let (g_sttp'_3: G,sign_g_sttp_3: bitstring) = dec(g_sttp_enc_signed_3,symk_78) in
    {1047}if check(hash((sig_gsttp,pk(skv_4),g_sttp_3)),sign_g_sttp_3,pkttp_3) then
    {1050}new symk_k12_3: SymmetricKey;
    {1052}new resource_3: bitstring;
    {1054}new symk_k13_3: SymmetricKey;
    {1055}let encrypted_k13_3: bitstring = enc((symk13,symk_k13_3),symk_av_enc_7) in
    {1043}let K3_3: G = exp(g_sttp_3,sv_3) in
    {1044}let h3_3: SymmetricKey = hash_fork((g_sttp_3,g_sv_3,K3_3,keyEncTTPtoVerTemp)) in
    {1048}let symk_ttpv_enc_3: SymmetricKey = hash_fork((K3_3,h3_3,keyEncVertoTTP)) in
    {1051}let encrypted_k12_3: bitstring = enc((symk12,symk_k12_3),symk_ttpv_enc_3) in
    {1053}let m_104: bitstring = (encrypted_k12_3,enc(resource_3,symk_k12_3),hash(resource_3)) in
    {1056}let m_105: bitstring = (encrypted_k13_3,enc((tag13,m_104),symk_k13_3)) in
    {1057}out(c_12, (msg13,m_105));
    {1058}in(c_12, (=msg14,m_106: bitstring));
    {1059}let (symk14_enc_3: bitstring,m14_enc_3: bitstring) = m_106 in
    {1060}let (=symk14,symk_79: SymmetricKey) = dec(symk14_enc_3,symk_av_dec_7) in
    {1061}let (=tag14,m14_dec_3: bitstring) = dec(m14_enc_3,symk_79) in
    {1062}let (m14_received_3: bitstring,m14_signature_3: bitstring) = m14_dec_3 in
    {1063}if check(m14_received_3,m14_signature_3,pka_7) then
    {1064}new symk_k15_3: SymmetricKey;
    {1065}let encrypted_k15_3: bitstring = enc((symk15,symk_k15_3),symk_av_enc_7) in
    {1066}let m_107: bitstring = (encrypted_k15_3,enc((tag16,symk_k12_3),symk_k15_3)) in
    {1067}event auth_VerifierSendsLastMessageToApp(m_97,m_98,m_99,m_100,m_101,m_102,m_103,m_104,m_105,m_106,m_107);
    {1068}out(c_12, (msg15,m_107));
    {966}let talksOnlyToHonest_11: bool = false in
    {1069}if talksOnlyToHonest_11 then
    (
        {1070}event auth_VerifierCompletesProtocol(m_97,m_98,m_99,m_100,m_101,m_102,m_103,m_104,m_105,m_106,m_107)
    ) | (
        {1071}out(ch(resource_3), resource_fromVerifier)
    )
) | (
    {1072}!
    {1074}let c_13: channel = c2 in
    {1091}in(c_13, (=msg3,m_108: bitstring));
    {1092}let (=KEXDHINITSERVER,g_sav_enc_4: bitstring,symk2_enc_4: bitstring,g_sav_enc_signed_4: bitstring) = m_108 in
    {1078}let skv_5: SecretKey = skv in
    {1093}let (=gsav,g_sav_8: G) = adec(g_sav_enc_4,skv_5) in
    {1077}let exp_v_13: exponent = exp_v in
    {1094}let K0_8: G = exp(g_sav_8,exp_v_13) in
    {1095}let h_16: SymmetricKey = hash_fork(((exp(g,exp_v_13),g_sav_8,K0_8),keyEncAtoCTemp)) in
    {1096}let (=symk2,symk_80: SymmetricKey) = dec(symk2_enc_4,h_16) in
    {1097}let (g_sav'_4: G,sign_g_sav_4: bitstring) = dec(g_sav_enc_signed_4,symk_80) in
    {1083}let pka_8: PublicKey = pk(ska) in
    {1098}if check(hash((sig_gsav,pk(skv_5),g_sav_8)),sign_g_sav_4,pka_8) then
    {1099}new sc_4: exponent;
    {1103}new symk_k3_4: SymmetricKey;
    {1100}let g_sc_8: G = exp(g,sc_4) in
    {1104}let diddoc_sc_signed_4: bitstring = (g_sc_8,sig(hash((sig_gsac,pka_8,g_sc_8)),skv_5)) in
    {1101}let K_12: G = exp(g_sav_8,sc_4) in
    {1102}let h_17: SymmetricKey = hash_fork(((g_sc_8,g_sav_8,K_12),keyEncCtoATemp)) in
    {1105}let m_109: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_8),pka_8),enc((symk3,symk_k3_4),h_17),enc(diddoc_sc_signed_4,symk_k3_4)) in
    {1106}out(c_13, (msg4,m_109));
    {1109}in(c_13, (=msg5,m_110: bitstring));
    {1110}let (symk4_enc_8: bitstring,m5_enc_4: bitstring) = m_110 in
    {1108}let symk_av_dec_8: SymmetricKey = hash_fork((K_12,h_17,keyEncAtoC)) in
    {1111}let (=symk4,symk_81: SymmetricKey) = dec(symk4_enc_8,symk_av_dec_8) in
    {1112}let (=tag5,(i'_12: bitstring,v'_12: bitstring,u'_12: bitstring,uri'_12: bitstring,a'_12: bitstring)) = dec(m5_enc_4,symk_81) in
    {1090}let uri_12: bitstring = uri_req in
    {1085}let i_9: bitstring = e in
    {1082}let a_13: bitstring = a in
    {1079}let u_13: bitstring = u in
    {1076}let v_13: bitstring = v in
    {1113}if ((i'_12,v'_12,u'_12,uri'_12,a'_12) = (i_9,v_13,u_13,uri_12,a_13)) then
    {1114}new n_c_8: bitstring;
    {1117}new symk_82: SymmetricKey;
    {1107}let symk_av_enc_8: SymmetricKey = hash_fork((K_12,h_17,keyEncCtoA)) in
    {1118}let enc_symk5_4: bitstring = enc((symk5,symk_82),symk_av_enc_8) in
    {1115}let rule_4: bitstring = (u_13,i_9,uri_12,a_13) in
    {1116}let vpr_send_prev_4: bitstring = (dec_vpr_msg,v_13,rule_4,n_c_8) in
    {1119}let m_111: bitstring = (enc_symk5_4,enc((tag6,vpr_send_prev_4),symk_82)) in
    {1120}event verifierInConeOfUser(m_108,m_109,m_110,m_111);
    {1121}out(c_13, (msg6,m_111));
    {1122}in(c_13, (=msg9,m_112: bitstring));
    {1123}let (symk8_enc_8: bitstring,m9_enc_4: bitstring) = m_112 in
    {1124}let (=symk8,symk_83: SymmetricKey) = dec(symk8_enc_8,symk_av_dec_8) in
    {1125}let (=tag9,vp_signed_12: bitstring) = dec(m9_enc_4,symk_83) in
    {1126}let (=vp_2_msg,vp_signed_13: bitstring,vp_sign_4: bitstring) = vp_signed_12 in
    {1127}if check(vp_signed_13,vp_sign_4,pka_8) then
    {1128}let (=vp_msg,vp_12: bitstring,sign_vp_4: bitstring) = vp_signed_13 in
    {1080}let pku_8: PublicKey = pk(sku) in
    {1129}if check(vp_12,sign_vp_4,pku_8) then
    {1130}let (vpr_rec_8: bitstring,vc_rec_signed_4: bitstring) = vp_12 in
    {1131}let (vc_rec_4: bitstring,sign_vc_rec_4: bitstring) = vc_rec_signed_4 in
    {1086}let pki_8: PublicKey = pk(sk_E) in
    {1132}if check(vc_rec_4,sign_vc_rec_4,pki_8) then
    {1133}let (iss''_4: bitstring,u''_4: bitstring) = vc_rec_4 in
    {1134}if ((iss''_4,u''_4) = (i_9,u_13)) then
    {1135}let (=dec_vpr_msg,v''_8: bitstring,rule''_4: bitstring,n_c''_4: bitstring) = vpr_rec_8 in
    {1136}if ((v''_8,rule''_4,n_c''_4) = (c_13,rule_4,n_c_8)) then
    {1137}let (u'''_4: bitstring,i'''_4: bitstring,uri'''_4: bitstring,a'''_4: bitstring) = rule''_4 in
    {1138}if ((u'''_4,i'''_4,uri'''_4,a'''_4) = (u_13,i_9,uri_12,a_13)) then
    {1139}new sv_4: exponent;
    {1143}new symk_84: SymmetricKey;
    {1140}let g_sv_4: G = exp(g,sv_4) in
    {1088}let pkttp_4: PublicKey = pk(sk_ttp) in
    {1144}let diddoc_sv_signed_4: bitstring = (g_sv_4,sig(hash((sig_gsttp,pkttp_4,g_sv_4)),skv_5)) in
    {1089}let exp_ttp_5: G = exp(g,exp_ttp) in
    {1141}let K3_temp_4: G = exp(exp_ttp_5,sv_4) in
    {1142}let h3_temp_4: SymmetricKey = hash_fork((exp_ttp_5,g_sv_4,K3_temp_4,keyEncVertoTTPTemp)) in
    {1145}let m_113: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_4),pkttp_4),enc((symk10,symk_84),h3_temp_4),enc(diddoc_sv_signed_4,symk_84)) in
    {1075}let c2_9: channel = c3 in
    {1146}out(c2_9, (msg10,m_113));
    {1147}in(c2_9, (=msg11,m_114: bitstring));
    {1148}let (=KEXDHREPLYTTP,g_sttp_enc_4: bitstring,symk11_enc_4: bitstring,g_sttp_enc_signed_4: bitstring) = m_113 in
    {1149}let (=gsttp,g_sttp_4: G) = adec(g_sttp_enc_4,skv_5) in
    {1152}let (=symk11,symk_85: SymmetricKey) = dec(symk11_enc_4,h3_temp_4) in
    {1153}let (g_sttp'_4: G,sign_g_sttp_4: bitstring) = dec(g_sttp_enc_signed_4,symk_85) in
    {1154}if check(hash((sig_gsttp,pk(skv_5),g_sttp_4)),sign_g_sttp_4,pkttp_4) then
    {1157}new symk_k12_4: SymmetricKey;
    {1159}new resource_4: bitstring;
    {1161}new symk_k13_4: SymmetricKey;
    {1162}let encrypted_k13_4: bitstring = enc((symk13,symk_k13_4),symk_av_enc_8) in
    {1150}let K3_4: G = exp(g_sttp_4,sv_4) in
    {1151}let h3_4: SymmetricKey = hash_fork((g_sttp_4,g_sv_4,K3_4,keyEncTTPtoVerTemp)) in
    {1155}let symk_ttpv_enc_4: SymmetricKey = hash_fork((K3_4,h3_4,keyEncVertoTTP)) in
    {1158}let encrypted_k12_4: bitstring = enc((symk12,symk_k12_4),symk_ttpv_enc_4) in
    {1160}let m_115: bitstring = (encrypted_k12_4,enc(resource_4,symk_k12_4),hash(resource_4)) in
    {1163}let m_116: bitstring = (encrypted_k13_4,enc((tag13,m_115),symk_k13_4)) in
    {1164}out(c_13, (msg13,m_116));
    {1165}in(c_13, (=msg14,m_117: bitstring));
    {1166}let (symk14_enc_4: bitstring,m14_enc_4: bitstring) = m_117 in
    {1167}let (=symk14,symk_86: SymmetricKey) = dec(symk14_enc_4,symk_av_dec_8) in
    {1168}let (=tag14,m14_dec_4: bitstring) = dec(m14_enc_4,symk_86) in
    {1169}let (m14_received_4: bitstring,m14_signature_4: bitstring) = m14_dec_4 in
    {1170}if check(m14_received_4,m14_signature_4,pka_8) then
    {1171}new symk_k15_4: SymmetricKey;
    {1172}let encrypted_k15_4: bitstring = enc((symk15,symk_k15_4),symk_av_enc_8) in
    {1173}let m_118: bitstring = (encrypted_k15_4,enc((tag16,symk_k12_4),symk_k15_4)) in
    {1174}event auth_VerifierSendsLastMessageToApp(m_108,m_109,m_110,m_111,m_112,m_113,m_114,m_115,m_116,m_117,m_118);
    {1175}out(c_13, (msg15,m_118));
    {1073}let talksOnlyToHonest_12: bool = false in
    {1176}if talksOnlyToHonest_12 then
    (
        {1177}event auth_VerifierCompletesProtocol(m_108,m_109,m_110,m_111,m_112,m_113,m_114,m_115,m_116,m_117,m_118)
    ) | (
        {1178}out(ch(resource_4), resource_fromVerifier)
    )
) | (
    {1179}!
    {1181}let c_14: channel = c2 in
    {1198}in(c_14, (=msg3,m_119: bitstring));
    {1199}let (=KEXDHINITSERVER,g_sav_enc_5: bitstring,symk2_enc_5: bitstring,g_sav_enc_signed_5: bitstring) = m_119 in
    {1185}let skv_6: SecretKey = skv in
    {1200}let (=gsav,g_sav_9: G) = adec(g_sav_enc_5,skv_6) in
    {1184}let exp_v_14: exponent = exp_v in
    {1201}let K0_9: G = exp(g_sav_9,exp_v_14) in
    {1202}let h_18: SymmetricKey = hash_fork(((exp(g,exp_v_14),g_sav_9,K0_9),keyEncAtoCTemp)) in
    {1203}let (=symk2,symk_87: SymmetricKey) = dec(symk2_enc_5,h_18) in
    {1204}let (g_sav'_5: G,sign_g_sav_5: bitstring) = dec(g_sav_enc_signed_5,symk_87) in
    {1190}let pka_9: PublicKey = pk(ska) in
    {1205}if check(hash((sig_gsav,pk(skv_6),g_sav_9)),sign_g_sav_5,pka_9) then
    {1206}new sc_5: exponent;
    {1210}new symk_k3_5: SymmetricKey;
    {1207}let g_sc_9: G = exp(g,sc_5) in
    {1211}let diddoc_sc_signed_5: bitstring = (g_sc_9,sig(hash((sig_gsac,pka_9,g_sc_9)),skv_6)) in
    {1208}let K_13: G = exp(g_sav_9,sc_5) in
    {1209}let h_19: SymmetricKey = hash_fork(((g_sc_9,g_sav_9,K_13),keyEncCtoATemp)) in
    {1212}let m_120: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_9),pka_9),enc((symk3,symk_k3_5),h_19),enc(diddoc_sc_signed_5,symk_k3_5)) in
    {1213}out(c_14, (msg4,m_120));
    {1216}in(c_14, (=msg5,m_121: bitstring));
    {1217}let (symk4_enc_9: bitstring,m5_enc_5: bitstring) = m_121 in
    {1215}let symk_av_dec_9: SymmetricKey = hash_fork((K_13,h_19,keyEncAtoC)) in
    {1218}let (=symk4,symk_88: SymmetricKey) = dec(symk4_enc_9,symk_av_dec_9) in
    {1219}let (=tag5,(i'_13: bitstring,v'_13: bitstring,u'_13: bitstring,uri'_13: bitstring,a'_13: bitstring)) = dec(m5_enc_5,symk_88) in
    {1197}let uri_13: bitstring = uri_req in
    {1192}let i_10: bitstring = e in
    {1189}let a_14: bitstring = a in
    {1186}let u_14: bitstring = e in
    {1183}let v_14: bitstring = v in
    {1220}if ((i'_13,v'_13,u'_13,uri'_13,a'_13) = (i_10,v_14,u_14,uri_13,a_14)) then
    {1221}new n_c_9: bitstring;
    {1224}new symk_89: SymmetricKey;
    {1214}let symk_av_enc_9: SymmetricKey = hash_fork((K_13,h_19,keyEncCtoA)) in
    {1225}let enc_symk5_5: bitstring = enc((symk5,symk_89),symk_av_enc_9) in
    {1222}let rule_5: bitstring = (u_14,i_10,uri_13,a_14) in
    {1223}let vpr_send_prev_5: bitstring = (dec_vpr_msg,v_14,rule_5,n_c_9) in
    {1226}let m_122: bitstring = (enc_symk5_5,enc((tag6,vpr_send_prev_5),symk_89)) in
    {1227}event verifierInConeOfUser(m_119,m_120,m_121,m_122);
    {1228}out(c_14, (msg6,m_122));
    {1229}in(c_14, (=msg9,m_123: bitstring));
    {1230}let (symk8_enc_9: bitstring,m9_enc_5: bitstring) = m_123 in
    {1231}let (=symk8,symk_90: SymmetricKey) = dec(symk8_enc_9,symk_av_dec_9) in
    {1232}let (=tag9,vp_signed_14: bitstring) = dec(m9_enc_5,symk_90) in
    {1233}let (=vp_2_msg,vp_signed_15: bitstring,vp_sign_5: bitstring) = vp_signed_14 in
    {1234}if check(vp_signed_15,vp_sign_5,pka_9) then
    {1235}let (=vp_msg,vp_13: bitstring,sign_vp_5: bitstring) = vp_signed_15 in
    {1187}let pku_9: PublicKey = pk(sk_E) in
    {1236}if check(vp_13,sign_vp_5,pku_9) then
    {1237}let (vpr_rec_9: bitstring,vc_rec_signed_5: bitstring) = vp_13 in
    {1238}let (vc_rec_5: bitstring,sign_vc_rec_5: bitstring) = vc_rec_signed_5 in
    {1193}let pki_9: PublicKey = pk(sk_E) in
    {1239}if check(vc_rec_5,sign_vc_rec_5,pki_9) then
    {1240}let (iss''_5: bitstring,u''_5: bitstring) = vc_rec_5 in
    {1241}if ((iss''_5,u''_5) = (i_10,u_14)) then
    {1242}let (=dec_vpr_msg,v''_9: bitstring,rule''_5: bitstring,n_c''_5: bitstring) = vpr_rec_9 in
    {1243}if ((v''_9,rule''_5,n_c''_5) = (c_14,rule_5,n_c_9)) then
    {1244}let (u'''_5: bitstring,i'''_5: bitstring,uri'''_5: bitstring,a'''_5: bitstring) = rule''_5 in
    {1245}if ((u'''_5,i'''_5,uri'''_5,a'''_5) = (u_14,i_10,uri_13,a_14)) then
    {1246}new sv_5: exponent;
    {1250}new symk_91: SymmetricKey;
    {1247}let g_sv_5: G = exp(g,sv_5) in
    {1195}let pkttp_5: PublicKey = pk(sk_ttp) in
    {1251}let diddoc_sv_signed_5: bitstring = (g_sv_5,sig(hash((sig_gsttp,pkttp_5,g_sv_5)),skv_6)) in
    {1196}let exp_ttp_6: G = exp(g,exp_ttp) in
    {1248}let K3_temp_5: G = exp(exp_ttp_6,sv_5) in
    {1249}let h3_temp_5: SymmetricKey = hash_fork((exp_ttp_6,g_sv_5,K3_temp_5,keyEncVertoTTPTemp)) in
    {1252}let m_124: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_5),pkttp_5),enc((symk10,symk_91),h3_temp_5),enc(diddoc_sv_signed_5,symk_91)) in
    {1182}let c2_10: channel = c3 in
    {1253}out(c2_10, (msg10,m_124));
    {1254}in(c2_10, (=msg11,m_125: bitstring));
    {1255}let (=KEXDHREPLYTTP,g_sttp_enc_5: bitstring,symk11_enc_5: bitstring,g_sttp_enc_signed_5: bitstring) = m_124 in
    {1256}let (=gsttp,g_sttp_5: G) = adec(g_sttp_enc_5,skv_6) in
    {1259}let (=symk11,symk_92: SymmetricKey) = dec(symk11_enc_5,h3_temp_5) in
    {1260}let (g_sttp'_5: G,sign_g_sttp_5: bitstring) = dec(g_sttp_enc_signed_5,symk_92) in
    {1261}if check(hash((sig_gsttp,pk(skv_6),g_sttp_5)),sign_g_sttp_5,pkttp_5) then
    {1264}new symk_k12_5: SymmetricKey;
    {1266}new resource_5: bitstring;
    {1268}new symk_k13_5: SymmetricKey;
    {1269}let encrypted_k13_5: bitstring = enc((symk13,symk_k13_5),symk_av_enc_9) in
    {1257}let K3_5: G = exp(g_sttp_5,sv_5) in
    {1258}let h3_5: SymmetricKey = hash_fork((g_sttp_5,g_sv_5,K3_5,keyEncTTPtoVerTemp)) in
    {1262}let symk_ttpv_enc_5: SymmetricKey = hash_fork((K3_5,h3_5,keyEncVertoTTP)) in
    {1265}let encrypted_k12_5: bitstring = enc((symk12,symk_k12_5),symk_ttpv_enc_5) in
    {1267}let m_126: bitstring = (encrypted_k12_5,enc(resource_5,symk_k12_5),hash(resource_5)) in
    {1270}let m_127: bitstring = (encrypted_k13_5,enc((tag13,m_126),symk_k13_5)) in
    {1271}out(c_14, (msg13,m_127));
    {1272}in(c_14, (=msg14,m_128: bitstring));
    {1273}let (symk14_enc_5: bitstring,m14_enc_5: bitstring) = m_128 in
    {1274}let (=symk14,symk_93: SymmetricKey) = dec(symk14_enc_5,symk_av_dec_9) in
    {1275}let (=tag14,m14_dec_5: bitstring) = dec(m14_enc_5,symk_93) in
    {1276}let (m14_received_5: bitstring,m14_signature_5: bitstring) = m14_dec_5 in
    {1277}if check(m14_received_5,m14_signature_5,pka_9) then
    {1278}new symk_k15_5: SymmetricKey;
    {1279}let encrypted_k15_5: bitstring = enc((symk15,symk_k15_5),symk_av_enc_9) in
    {1280}let m_129: bitstring = (encrypted_k15_5,enc((tag16,symk_k12_5),symk_k15_5)) in
    {1281}event auth_VerifierSendsLastMessageToApp(m_119,m_120,m_121,m_122,m_123,m_124,m_125,m_126,m_127,m_128,m_129);
    {1282}out(c_14, (msg15,m_129));
    {1180}let talksOnlyToHonest_13: bool = false in
    {1283}if talksOnlyToHonest_13 then
    (
        {1284}event auth_VerifierCompletesProtocol(m_119,m_120,m_121,m_122,m_123,m_124,m_125,m_126,m_127,m_128,m_129)
    ) | (
        {1285}out(ch(resource_5), resource_fromVerifier)
    )
) | (
    {1286}!
    {1288}let c_15: channel = c2 in
    {1305}in(c_15, (=msg3,m_130: bitstring));
    {1306}let (=KEXDHINITSERVER,g_sav_enc_6: bitstring,symk2_enc_6: bitstring,g_sav_enc_signed_6: bitstring) = m_130 in
    {1292}let skv_7: SecretKey = skv in
    {1307}let (=gsav,g_sav_10: G) = adec(g_sav_enc_6,skv_7) in
    {1291}let exp_v_15: exponent = exp_v in
    {1308}let K0_10: G = exp(g_sav_10,exp_v_15) in
    {1309}let h_20: SymmetricKey = hash_fork(((exp(g,exp_v_15),g_sav_10,K0_10),keyEncAtoCTemp)) in
    {1310}let (=symk2,symk_94: SymmetricKey) = dec(symk2_enc_6,h_20) in
    {1311}let (g_sav'_6: G,sign_g_sav_6: bitstring) = dec(g_sav_enc_signed_6,symk_94) in
    {1297}let pka_10: PublicKey = pk(sk_E) in
    {1312}if check(hash((sig_gsav,pk(skv_7),g_sav_10)),sign_g_sav_6,pka_10) then
    {1313}new sc_6: exponent;
    {1317}new symk_k3_6: SymmetricKey;
    {1314}let g_sc_10: G = exp(g,sc_6) in
    {1318}let diddoc_sc_signed_6: bitstring = (g_sc_10,sig(hash((sig_gsac,pka_10,g_sc_10)),skv_7)) in
    {1315}let K_14: G = exp(g_sav_10,sc_6) in
    {1316}let h_21: SymmetricKey = hash_fork(((g_sc_10,g_sav_10,K_14),keyEncCtoATemp)) in
    {1319}let m_131: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_10),pka_10),enc((symk3,symk_k3_6),h_21),enc(diddoc_sc_signed_6,symk_k3_6)) in
    {1320}out(c_15, (msg4,m_131));
    {1323}in(c_15, (=msg5,m_132: bitstring));
    {1324}let (symk4_enc_10: bitstring,m5_enc_6: bitstring) = m_132 in
    {1322}let symk_av_dec_10: SymmetricKey = hash_fork((K_14,h_21,keyEncAtoC)) in
    {1325}let (=symk4,symk_95: SymmetricKey) = dec(symk4_enc_10,symk_av_dec_10) in
    {1326}let (=tag5,(i'_14: bitstring,v'_14: bitstring,u'_14: bitstring,uri'_14: bitstring,a'_14: bitstring)) = dec(m5_enc_6,symk_95) in
    {1304}let uri_14: bitstring = uri_req in
    {1299}let i_11: bitstring = e in
    {1296}let a_15: bitstring = e in
    {1293}let u_15: bitstring = u in
    {1290}let v_15: bitstring = v in
    {1327}if ((i'_14,v'_14,u'_14,uri'_14,a'_14) = (i_11,v_15,u_15,uri_14,a_15)) then
    {1328}new n_c_10: bitstring;
    {1331}new symk_96: SymmetricKey;
    {1321}let symk_av_enc_10: SymmetricKey = hash_fork((K_14,h_21,keyEncCtoA)) in
    {1332}let enc_symk5_6: bitstring = enc((symk5,symk_96),symk_av_enc_10) in
    {1329}let rule_6: bitstring = (u_15,i_11,uri_14,a_15) in
    {1330}let vpr_send_prev_6: bitstring = (dec_vpr_msg,v_15,rule_6,n_c_10) in
    {1333}let m_133: bitstring = (enc_symk5_6,enc((tag6,vpr_send_prev_6),symk_96)) in
    {1334}event verifierInConeOfUser(m_130,m_131,m_132,m_133);
    {1335}out(c_15, (msg6,m_133));
    {1336}in(c_15, (=msg9,m_134: bitstring));
    {1337}let (symk8_enc_10: bitstring,m9_enc_6: bitstring) = m_134 in
    {1338}let (=symk8,symk_97: SymmetricKey) = dec(symk8_enc_10,symk_av_dec_10) in
    {1339}let (=tag9,vp_signed_16: bitstring) = dec(m9_enc_6,symk_97) in
    {1340}let (=vp_2_msg,vp_signed_17: bitstring,vp_sign_6: bitstring) = vp_signed_16 in
    {1341}if check(vp_signed_17,vp_sign_6,pka_10) then
    {1342}let (=vp_msg,vp_14: bitstring,sign_vp_6: bitstring) = vp_signed_17 in
    {1294}let pku_10: PublicKey = pk(sku) in
    {1343}if check(vp_14,sign_vp_6,pku_10) then
    {1344}let (vpr_rec_10: bitstring,vc_rec_signed_6: bitstring) = vp_14 in
    {1345}let (vc_rec_6: bitstring,sign_vc_rec_6: bitstring) = vc_rec_signed_6 in
    {1300}let pki_10: PublicKey = pk(sk_E) in
    {1346}if check(vc_rec_6,sign_vc_rec_6,pki_10) then
    {1347}let (iss''_6: bitstring,u''_6: bitstring) = vc_rec_6 in
    {1348}if ((iss''_6,u''_6) = (i_11,u_15)) then
    {1349}let (=dec_vpr_msg,v''_10: bitstring,rule''_6: bitstring,n_c''_6: bitstring) = vpr_rec_10 in
    {1350}if ((v''_10,rule''_6,n_c''_6) = (c_15,rule_6,n_c_10)) then
    {1351}let (u'''_6: bitstring,i'''_6: bitstring,uri'''_6: bitstring,a'''_6: bitstring) = rule''_6 in
    {1352}if ((u'''_6,i'''_6,uri'''_6,a'''_6) = (u_15,i_11,uri_14,a_15)) then
    {1353}new sv_6: exponent;
    {1357}new symk_98: SymmetricKey;
    {1354}let g_sv_6: G = exp(g,sv_6) in
    {1302}let pkttp_6: PublicKey = pk(sk_ttp) in
    {1358}let diddoc_sv_signed_6: bitstring = (g_sv_6,sig(hash((sig_gsttp,pkttp_6,g_sv_6)),skv_7)) in
    {1303}let exp_ttp_7: G = exp(g,exp_ttp) in
    {1355}let K3_temp_6: G = exp(exp_ttp_7,sv_6) in
    {1356}let h3_temp_6: SymmetricKey = hash_fork((exp_ttp_7,g_sv_6,K3_temp_6,keyEncVertoTTPTemp)) in
    {1359}let m_135: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_6),pkttp_6),enc((symk10,symk_98),h3_temp_6),enc(diddoc_sv_signed_6,symk_98)) in
    {1289}let c2_11: channel = c3 in
    {1360}out(c2_11, (msg10,m_135));
    {1361}in(c2_11, (=msg11,m_136: bitstring));
    {1362}let (=KEXDHREPLYTTP,g_sttp_enc_6: bitstring,symk11_enc_6: bitstring,g_sttp_enc_signed_6: bitstring) = m_135 in
    {1363}let (=gsttp,g_sttp_6: G) = adec(g_sttp_enc_6,skv_7) in
    {1366}let (=symk11,symk_99: SymmetricKey) = dec(symk11_enc_6,h3_temp_6) in
    {1367}let (g_sttp'_6: G,sign_g_sttp_6: bitstring) = dec(g_sttp_enc_signed_6,symk_99) in
    {1368}if check(hash((sig_gsttp,pk(skv_7),g_sttp_6)),sign_g_sttp_6,pkttp_6) then
    {1371}new symk_k12_6: SymmetricKey;
    {1373}new resource_6: bitstring;
    {1375}new symk_k13_6: SymmetricKey;
    {1376}let encrypted_k13_6: bitstring = enc((symk13,symk_k13_6),symk_av_enc_10) in
    {1364}let K3_6: G = exp(g_sttp_6,sv_6) in
    {1365}let h3_6: SymmetricKey = hash_fork((g_sttp_6,g_sv_6,K3_6,keyEncTTPtoVerTemp)) in
    {1369}let symk_ttpv_enc_6: SymmetricKey = hash_fork((K3_6,h3_6,keyEncVertoTTP)) in
    {1372}let encrypted_k12_6: bitstring = enc((symk12,symk_k12_6),symk_ttpv_enc_6) in
    {1374}let m_137: bitstring = (encrypted_k12_6,enc(resource_6,symk_k12_6),hash(resource_6)) in
    {1377}let m_138: bitstring = (encrypted_k13_6,enc((tag13,m_137),symk_k13_6)) in
    {1378}out(c_15, (msg13,m_138));
    {1379}in(c_15, (=msg14,m_139: bitstring));
    {1380}let (symk14_enc_6: bitstring,m14_enc_6: bitstring) = m_139 in
    {1381}let (=symk14,symk_100: SymmetricKey) = dec(symk14_enc_6,symk_av_dec_10) in
    {1382}let (=tag14,m14_dec_6: bitstring) = dec(m14_enc_6,symk_100) in
    {1383}let (m14_received_6: bitstring,m14_signature_6: bitstring) = m14_dec_6 in
    {1384}if check(m14_received_6,m14_signature_6,pka_10) then
    {1385}new symk_k15_6: SymmetricKey;
    {1386}let encrypted_k15_6: bitstring = enc((symk15,symk_k15_6),symk_av_enc_10) in
    {1387}let m_140: bitstring = (encrypted_k15_6,enc((tag16,symk_k12_6),symk_k15_6)) in
    {1388}event auth_VerifierSendsLastMessageToApp(m_130,m_131,m_132,m_133,m_134,m_135,m_136,m_137,m_138,m_139,m_140);
    {1389}out(c_15, (msg15,m_140));
    {1287}let talksOnlyToHonest_14: bool = false in
    {1390}if talksOnlyToHonest_14 then
    (
        {1391}event auth_VerifierCompletesProtocol(m_130,m_131,m_132,m_133,m_134,m_135,m_136,m_137,m_138,m_139,m_140)
    ) | (
        {1392}out(ch(resource_6), resource_fromVerifier)
    )
) | (
    {1393}!
    {1395}let c_16: channel = c2 in
    {1412}in(c_16, (=msg3,m_141: bitstring));
    {1413}let (=KEXDHINITSERVER,g_sav_enc_7: bitstring,symk2_enc_7: bitstring,g_sav_enc_signed_7: bitstring) = m_141 in
    {1399}let skv_8: SecretKey = skv in
    {1414}let (=gsav,g_sav_11: G) = adec(g_sav_enc_7,skv_8) in
    {1398}let exp_v_16: exponent = exp_v in
    {1415}let K0_11: G = exp(g_sav_11,exp_v_16) in
    {1416}let h_22: SymmetricKey = hash_fork(((exp(g,exp_v_16),g_sav_11,K0_11),keyEncAtoCTemp)) in
    {1417}let (=symk2,symk_101: SymmetricKey) = dec(symk2_enc_7,h_22) in
    {1418}let (g_sav'_7: G,sign_g_sav_7: bitstring) = dec(g_sav_enc_signed_7,symk_101) in
    {1404}let pka_11: PublicKey = pk(sk_E) in
    {1419}if check(hash((sig_gsav,pk(skv_8),g_sav_11)),sign_g_sav_7,pka_11) then
    {1420}new sc_7: exponent;
    {1424}new symk_k3_7: SymmetricKey;
    {1421}let g_sc_11: G = exp(g,sc_7) in
    {1425}let diddoc_sc_signed_7: bitstring = (g_sc_11,sig(hash((sig_gsac,pka_11,g_sc_11)),skv_8)) in
    {1422}let K_15: G = exp(g_sav_11,sc_7) in
    {1423}let h_23: SymmetricKey = hash_fork(((g_sc_11,g_sav_11,K_15),keyEncCtoATemp)) in
    {1426}let m_142: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_11),pka_11),enc((symk3,symk_k3_7),h_23),enc(diddoc_sc_signed_7,symk_k3_7)) in
    {1427}out(c_16, (msg4,m_142));
    {1430}in(c_16, (=msg5,m_143: bitstring));
    {1431}let (symk4_enc_11: bitstring,m5_enc_7: bitstring) = m_143 in
    {1429}let symk_av_dec_11: SymmetricKey = hash_fork((K_15,h_23,keyEncAtoC)) in
    {1432}let (=symk4,symk_102: SymmetricKey) = dec(symk4_enc_11,symk_av_dec_11) in
    {1433}let (=tag5,(i'_15: bitstring,v'_15: bitstring,u'_15: bitstring,uri'_15: bitstring,a'_15: bitstring)) = dec(m5_enc_7,symk_102) in
    {1411}let uri_15: bitstring = uri_req in
    {1406}let i_12: bitstring = e in
    {1403}let a_16: bitstring = e in
    {1400}let u_16: bitstring = e in
    {1397}let v_16: bitstring = v in
    {1434}if ((i'_15,v'_15,u'_15,uri'_15,a'_15) = (i_12,v_16,u_16,uri_15,a_16)) then
    {1435}new n_c_11: bitstring;
    {1438}new symk_103: SymmetricKey;
    {1428}let symk_av_enc_11: SymmetricKey = hash_fork((K_15,h_23,keyEncCtoA)) in
    {1439}let enc_symk5_7: bitstring = enc((symk5,symk_103),symk_av_enc_11) in
    {1436}let rule_7: bitstring = (u_16,i_12,uri_15,a_16) in
    {1437}let vpr_send_prev_7: bitstring = (dec_vpr_msg,v_16,rule_7,n_c_11) in
    {1440}let m_144: bitstring = (enc_symk5_7,enc((tag6,vpr_send_prev_7),symk_103)) in
    {1441}event verifierInConeOfUser(m_141,m_142,m_143,m_144);
    {1442}out(c_16, (msg6,m_144));
    {1443}in(c_16, (=msg9,m_145: bitstring));
    {1444}let (symk8_enc_11: bitstring,m9_enc_7: bitstring) = m_145 in
    {1445}let (=symk8,symk_104: SymmetricKey) = dec(symk8_enc_11,symk_av_dec_11) in
    {1446}let (=tag9,vp_signed_18: bitstring) = dec(m9_enc_7,symk_104) in
    {1447}let (=vp_2_msg,vp_signed_19: bitstring,vp_sign_7: bitstring) = vp_signed_18 in
    {1448}if check(vp_signed_19,vp_sign_7,pka_11) then
    {1449}let (=vp_msg,vp_15: bitstring,sign_vp_7: bitstring) = vp_signed_19 in
    {1401}let pku_11: PublicKey = pk(sk_E) in
    {1450}if check(vp_15,sign_vp_7,pku_11) then
    {1451}let (vpr_rec_11: bitstring,vc_rec_signed_7: bitstring) = vp_15 in
    {1452}let (vc_rec_7: bitstring,sign_vc_rec_7: bitstring) = vc_rec_signed_7 in
    {1407}let pki_11: PublicKey = pk(sk_E) in
    {1453}if check(vc_rec_7,sign_vc_rec_7,pki_11) then
    {1454}let (iss''_7: bitstring,u''_7: bitstring) = vc_rec_7 in
    {1455}if ((iss''_7,u''_7) = (i_12,u_16)) then
    {1456}let (=dec_vpr_msg,v''_11: bitstring,rule''_7: bitstring,n_c''_7: bitstring) = vpr_rec_11 in
    {1457}if ((v''_11,rule''_7,n_c''_7) = (c_16,rule_7,n_c_11)) then
    {1458}let (u'''_7: bitstring,i'''_7: bitstring,uri'''_7: bitstring,a'''_7: bitstring) = rule''_7 in
    {1459}if ((u'''_7,i'''_7,uri'''_7,a'''_7) = (u_16,i_12,uri_15,a_16)) then
    {1460}new sv_7: exponent;
    {1464}new symk_105: SymmetricKey;
    {1461}let g_sv_7: G = exp(g,sv_7) in
    {1409}let pkttp_7: PublicKey = pk(sk_ttp) in
    {1465}let diddoc_sv_signed_7: bitstring = (g_sv_7,sig(hash((sig_gsttp,pkttp_7,g_sv_7)),skv_8)) in
    {1410}let exp_ttp_8: G = exp(g,exp_ttp) in
    {1462}let K3_temp_7: G = exp(exp_ttp_8,sv_7) in
    {1463}let h3_temp_7: SymmetricKey = hash_fork((exp_ttp_8,g_sv_7,K3_temp_7,keyEncVertoTTPTemp)) in
    {1466}let m_146: bitstring = (KEXDHINITTTP,aenc((gsv,g_sv_7),pkttp_7),enc((symk10,symk_105),h3_temp_7),enc(diddoc_sv_signed_7,symk_105)) in
    {1396}let c2_12: channel = c3 in
    {1467}out(c2_12, (msg10,m_146));
    {1468}in(c2_12, (=msg11,m_147: bitstring));
    {1469}let (=KEXDHREPLYTTP,g_sttp_enc_7: bitstring,symk11_enc_7: bitstring,g_sttp_enc_signed_7: bitstring) = m_146 in
    {1470}let (=gsttp,g_sttp_7: G) = adec(g_sttp_enc_7,skv_8) in
    {1473}let (=symk11,symk_106: SymmetricKey) = dec(symk11_enc_7,h3_temp_7) in
    {1474}let (g_sttp'_7: G,sign_g_sttp_7: bitstring) = dec(g_sttp_enc_signed_7,symk_106) in
    {1475}if check(hash((sig_gsttp,pk(skv_8),g_sttp_7)),sign_g_sttp_7,pkttp_7) then
    {1478}new symk_k12_7: SymmetricKey;
    {1480}new resource_7: bitstring;
    {1482}new symk_k13_7: SymmetricKey;
    {1483}let encrypted_k13_7: bitstring = enc((symk13,symk_k13_7),symk_av_enc_11) in
    {1471}let K3_7: G = exp(g_sttp_7,sv_7) in
    {1472}let h3_7: SymmetricKey = hash_fork((g_sttp_7,g_sv_7,K3_7,keyEncTTPtoVerTemp)) in
    {1476}let symk_ttpv_enc_7: SymmetricKey = hash_fork((K3_7,h3_7,keyEncVertoTTP)) in
    {1479}let encrypted_k12_7: bitstring = enc((symk12,symk_k12_7),symk_ttpv_enc_7) in
    {1481}let m_148: bitstring = (encrypted_k12_7,enc(resource_7,symk_k12_7),hash(resource_7)) in
    {1484}let m_149: bitstring = (encrypted_k13_7,enc((tag13,m_148),symk_k13_7)) in
    {1485}out(c_16, (msg13,m_149));
    {1486}in(c_16, (=msg14,m_150: bitstring));
    {1487}let (symk14_enc_7: bitstring,m14_enc_7: bitstring) = m_150 in
    {1488}let (=symk14,symk_107: SymmetricKey) = dec(symk14_enc_7,symk_av_dec_11) in
    {1489}let (=tag14,m14_dec_7: bitstring) = dec(m14_enc_7,symk_107) in
    {1490}let (m14_received_7: bitstring,m14_signature_7: bitstring) = m14_dec_7 in
    {1491}if check(m14_received_7,m14_signature_7,pka_11) then
    {1492}new symk_k15_7: SymmetricKey;
    {1493}let encrypted_k15_7: bitstring = enc((symk15,symk_k15_7),symk_av_enc_11) in
    {1494}let m_151: bitstring = (encrypted_k15_7,enc((tag16,symk_k12_7),symk_k15_7)) in
    {1495}event auth_VerifierSendsLastMessageToApp(m_141,m_142,m_143,m_144,m_145,m_146,m_147,m_148,m_149,m_150,m_151);
    {1496}out(c_16, (msg15,m_151));
    {1394}let talksOnlyToHonest_15: bool = false in
    {1497}if talksOnlyToHonest_15 then
    (
        {1498}event auth_VerifierCompletesProtocol(m_141,m_142,m_143,m_144,m_145,m_146,m_147,m_148,m_149,m_150,m_151)
    ) | (
        {1499}out(ch(resource_7), resource_fromVerifier)
    )
) | (
    {1500}!
    {1502}let c_17: channel = c3 in
    {1512}in(c_17, (=msg10,m_152: bitstring));
    {1513}let (=KEXDHINITTTP,g_sv_enc: bitstring,symk_11_enc: bitstring,diddoc_sv_signed_enc: bitstring) = m_152 in
    {1505}let sk_ttp_1: SecretKey = sk_ttp in
    {1514}let (=gsv,g_sv_8: G) = adec(g_sv_enc,sk_ttp_1) in
    {1504}let exp_ttp_9: exponent = exp_ttp in
    {1515}let K_16: G = exp(g_sv_8,exp_ttp_9) in
    {1516}let h_24: SymmetricKey = hash_fork((exp(g,exp_ttp_9),g_sv_8,K_16,keyEncVertoTTPTemp)) in
    {1517}let (=symk10,symk_108: SymmetricKey) = dec(symk_11_enc,h_24) in
    {1518}let (g_sv': G,g_sv_signed: bitstring) = dec(diddoc_sv_signed_enc,symk_108) in
    {1510}let pkv_8: PublicKey = pk(skv) in
    {1519}if check((gsv,pk(sk_ttp_1),g_sv_8),g_sv_signed,pkv_8) then
    {1520}new sttp: exponent;
    {1524}new symk_109: SymmetricKey;
    {1521}let g_sttp_8: G = exp(g,sttp) in
    {1525}let diddoc_sttp_signed: bitstring = (g_sttp_8,sig((sig_gsttp,pkv_8,g_sttp_8),sk_ttp_1)) in
    {1522}let K0_12: G = exp(g_sv_8,sttp) in
    {1523}let h0_4: SymmetricKey = hash_fork((g_sttp_8,g_sv_8,K0_12,keyEncTTPtoVerTemp)) in
    {1526}let m_153: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_8),pkv_8),enc((symk11,symk_109),h0_4),enc(diddoc_sttp_signed,symk_109)) in
    {1527}event auth_TTPInConeOfApp(m_152,m_153);
    {1528}out(c_17, (msg11,m_153))
) | (
    {1531}!
    {1533}let c_18: channel = c3 in
    {1543}in(c_18, (=msg10,m_154: bitstring));
    {1544}let (=KEXDHINITTTP,g_sv_enc_1: bitstring,symk_11_enc_1: bitstring,diddoc_sv_signed_enc_1: bitstring) = m_154 in
    {1536}let sk_ttp_2: SecretKey = sk_ttp in
    {1545}let (=gsv,g_sv_9: G) = adec(g_sv_enc_1,sk_ttp_2) in
    {1535}let exp_ttp_10: exponent = exp_ttp in
    {1546}let K_17: G = exp(g_sv_9,exp_ttp_10) in
    {1547}let h_25: SymmetricKey = hash_fork((exp(g,exp_ttp_10),g_sv_9,K_17,keyEncVertoTTPTemp)) in
    {1548}let (=symk10,symk_110: SymmetricKey) = dec(symk_11_enc_1,h_25) in
    {1549}let (g_sv'_1: G,g_sv_signed_1: bitstring) = dec(diddoc_sv_signed_enc_1,symk_110) in
    {1541}let pkv_9: PublicKey = pk(skv) in
    {1550}if check((gsv,pk(sk_ttp_2),g_sv_9),g_sv_signed_1,pkv_9) then
    {1551}new sttp_1: exponent;
    {1555}new symk_111: SymmetricKey;
    {1552}let g_sttp_9: G = exp(g,sttp_1) in
    {1556}let diddoc_sttp_signed_1: bitstring = (g_sttp_9,sig((sig_gsttp,pkv_9,g_sttp_9),sk_ttp_2)) in
    {1553}let K0_13: G = exp(g_sv_9,sttp_1) in
    {1554}let h0_5: SymmetricKey = hash_fork((g_sttp_9,g_sv_9,K0_13,keyEncTTPtoVerTemp)) in
    {1557}let m_155: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_9),pkv_9),enc((symk11,symk_111),h0_5),enc(diddoc_sttp_signed_1,symk_111)) in
    {1558}event auth_TTPInConeOfApp(m_154,m_155);
    {1559}out(c_18, (msg11,m_155))
) | (
    {1562}!
    {1564}let c_19: channel = c3 in
    {1574}in(c_19, (=msg10,m_156: bitstring));
    {1575}let (=KEXDHINITTTP,g_sv_enc_2: bitstring,symk_11_enc_2: bitstring,diddoc_sv_signed_enc_2: bitstring) = m_156 in
    {1567}let sk_ttp_3: SecretKey = sk_ttp in
    {1576}let (=gsv,g_sv_10: G) = adec(g_sv_enc_2,sk_ttp_3) in
    {1566}let exp_ttp_11: exponent = exp_ttp in
    {1577}let K_18: G = exp(g_sv_10,exp_ttp_11) in
    {1578}let h_26: SymmetricKey = hash_fork((exp(g,exp_ttp_11),g_sv_10,K_18,keyEncVertoTTPTemp)) in
    {1579}let (=symk10,symk_112: SymmetricKey) = dec(symk_11_enc_2,h_26) in
    {1580}let (g_sv'_2: G,g_sv_signed_2: bitstring) = dec(diddoc_sv_signed_enc_2,symk_112) in
    {1572}let pkv_10: PublicKey = pk(sk_E) in
    {1581}if check((gsv,pk(sk_ttp_3),g_sv_10),g_sv_signed_2,pkv_10) then
    {1582}new sttp_2: exponent;
    {1586}new symk_113: SymmetricKey;
    {1583}let g_sttp_10: G = exp(g,sttp_2) in
    {1587}let diddoc_sttp_signed_2: bitstring = (g_sttp_10,sig((sig_gsttp,pkv_10,g_sttp_10),sk_ttp_3)) in
    {1584}let K0_14: G = exp(g_sv_10,sttp_2) in
    {1585}let h0_6: SymmetricKey = hash_fork((g_sttp_10,g_sv_10,K0_14,keyEncTTPtoVerTemp)) in
    {1588}let m_157: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_10),pkv_10),enc((symk11,symk_113),h0_6),enc(diddoc_sttp_signed_2,symk_113)) in
    {1589}event auth_TTPInConeOfApp(m_156,m_157);
    {1590}out(c_19, (msg11,m_157))
) | (
    {1593}!
    {1595}let c_20: channel = c3 in
    {1605}in(c_20, (=msg10,m_158: bitstring));
    {1606}let (=KEXDHINITTTP,g_sv_enc_3: bitstring,symk_11_enc_3: bitstring,diddoc_sv_signed_enc_3: bitstring) = m_158 in
    {1598}let sk_ttp_4: SecretKey = sk_ttp in
    {1607}let (=gsv,g_sv_11: G) = adec(g_sv_enc_3,sk_ttp_4) in
    {1597}let exp_ttp_12: exponent = exp_ttp in
    {1608}let K_19: G = exp(g_sv_11,exp_ttp_12) in
    {1609}let h_27: SymmetricKey = hash_fork((exp(g,exp_ttp_12),g_sv_11,K_19,keyEncVertoTTPTemp)) in
    {1610}let (=symk10,symk_114: SymmetricKey) = dec(symk_11_enc_3,h_27) in
    {1611}let (g_sv'_3: G,g_sv_signed_3: bitstring) = dec(diddoc_sv_signed_enc_3,symk_114) in
    {1603}let pkv_11: PublicKey = pk(sk_E) in
    {1612}if check((gsv,pk(sk_ttp_4),g_sv_11),g_sv_signed_3,pkv_11) then
    {1613}new sttp_3: exponent;
    {1617}new symk_115: SymmetricKey;
    {1614}let g_sttp_11: G = exp(g,sttp_3) in
    {1618}let diddoc_sttp_signed_3: bitstring = (g_sttp_11,sig((sig_gsttp,pkv_11,g_sttp_11),sk_ttp_4)) in
    {1615}let K0_15: G = exp(g_sv_11,sttp_3) in
    {1616}let h0_7: SymmetricKey = hash_fork((g_sttp_11,g_sv_11,K0_15,keyEncTTPtoVerTemp)) in
    {1619}let m_159: bitstring = (KEXDHREPLYTTP,aenc((gsttp,g_sttp_11),pkv_11),enc((symk11,symk_115),h0_7),enc(diddoc_sttp_signed_3,symk_115)) in
    {1620}event auth_TTPInConeOfApp(m_158,m_159);
    {1621}out(c_20, (msg11,m_159))
)

-- Query inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_160,m_161,m_162,m_163,m_vpr)) && inj-event(verifierInConeOfUser(m_160,m_161,m_162,m_163)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (152 with conclusion selected). Queue: 826 rules.
400 rules inserted. Base: 400 rules (152 with conclusion selected). Queue: 868 rules.
600 rules inserted. Base: 600 rules (152 with conclusion selected). Queue: 926 rules.
800 rules inserted. Base: 800 rules (152 with conclusion selected). Queue: 942 rules.
1000 rules inserted. Base: 999 rules (159 with conclusion selected). Queue: 929 rules.
1200 rules inserted. Base: 1199 rules (159 with conclusion selected). Queue: 886 rules.
1400 rules inserted. Base: 1399 rules (159 with conclusion selected). Queue: 812 rules.
1600 rules inserted. Base: 1599 rules (159 with conclusion selected). Queue: 744 rules.
1800 rules inserted. Base: 1767 rules (159 with conclusion selected). Queue: 736 rules.
2000 rules inserted. Base: 1915 rules (161 with conclusion selected). Queue: 746 rules.
2200 rules inserted. Base: 2085 rules (161 with conclusion selected). Queue: 802 rules.
2400 rules inserted. Base: 2261 rules (161 with conclusion selected). Queue: 844 rules.
2600 rules inserted. Base: 2409 rules (161 with conclusion selected). Queue: 844 rules.
2800 rules inserted. Base: 2535 rules (191 with conclusion selected). Queue: 1200 rules.
3000 rules inserted. Base: 2635 rules (209 with conclusion selected). Queue: 1280 rules.
3200 rules inserted. Base: 2739 rules (225 with conclusion selected). Queue: 1308 rules.
3400 rules inserted. Base: 2939 rules (225 with conclusion selected). Queue: 1363 rules.
3600 rules inserted. Base: 3131 rules (227 with conclusion selected). Queue: 1374 rules.
3800 rules inserted. Base: 3299 rules (227 with conclusion selected). Queue: 1478 rules.
4000 rules inserted. Base: 3473 rules (227 with conclusion selected). Queue: 1500 rules.
4200 rules inserted. Base: 3667 rules (229 with conclusion selected). Queue: 1646 rules.
4400 rules inserted. Base: 3867 rules (231 with conclusion selected). Queue: 1814 rules.
4600 rules inserted. Base: 3943 rules (231 with conclusion selected). Queue: 1830 rules.
4800 rules inserted. Base: 3995 rules (231 with conclusion selected). Queue: 1861 rules.
5000 rules inserted. Base: 4175 rules (233 with conclusion selected). Queue: 1876 rules.
5200 rules inserted. Base: 4273 rules (233 with conclusion selected). Queue: 1840 rules.
5400 rules inserted. Base: 4436 rules (233 with conclusion selected). Queue: 1830 rules.
5600 rules inserted. Base: 4541 rules (233 with conclusion selected). Queue: 1780 rules.
5800 rules inserted. Base: 4621 rules (235 with conclusion selected). Queue: 1976 rules.
6000 rules inserted. Base: 4691 rules (237 with conclusion selected). Queue: 2180 rules.
6200 rules inserted. Base: 4762 rules (237 with conclusion selected). Queue: 2152 rules.
6400 rules inserted. Base: 4898 rules (237 with conclusion selected). Queue: 2026 rules.
6600 rules inserted. Base: 5060 rules (237 with conclusion selected). Queue: 1964 rules.
6800 rules inserted. Base: 5237 rules (237 with conclusion selected). Queue: 2153 rules.
7000 rules inserted. Base: 5427 rules (237 with conclusion selected). Queue: 2133 rules.
7200 rules inserted. Base: 5603 rules (237 with conclusion selected). Queue: 2073 rules.
7400 rules inserted. Base: 5784 rules (237 with conclusion selected). Queue: 2084 rules.
7600 rules inserted. Base: 5929 rules (237 with conclusion selected). Queue: 1992 rules.
7800 rules inserted. Base: 6081 rules (237 with conclusion selected). Queue: 2046 rules.
8000 rules inserted. Base: 6241 rules (237 with conclusion selected). Queue: 1973 rules.
8200 rules inserted. Base: 6386 rules (237 with conclusion selected). Queue: 1942 rules.
8400 rules inserted. Base: 6547 rules (237 with conclusion selected). Queue: 1915 rules.
8600 rules inserted. Base: 6590 rules (237 with conclusion selected). Queue: 2254 rules.
8800 rules inserted. Base: 6723 rules (237 with conclusion selected). Queue: 2278 rules.
9000 rules inserted. Base: 6783 rules (237 with conclusion selected). Queue: 2232 rules.
9200 rules inserted. Base: 6870 rules (237 with conclusion selected). Queue: 2178 rules.
9400 rules inserted. Base: 6939 rules (237 with conclusion selected). Queue: 2118 rules.
9600 rules inserted. Base: 7071 rules (237 with conclusion selected). Queue: 2074 rules.
9800 rules inserted. Base: 7215 rules (237 with conclusion selected). Queue: 2030 rules.
10000 rules inserted. Base: 7369 rules (237 with conclusion selected). Queue: 1976 rules.
10200 rules inserted. Base: 7507 rules (237 with conclusion selected). Queue: 1952 rules.
10400 rules inserted. Base: 7540 rules (237 with conclusion selected). Queue: 1958 rules.
10600 rules inserted. Base: 7552 rules (237 with conclusion selected). Queue: 1982 rules.
10800 rules inserted. Base: 7558 rules (237 with conclusion selected). Queue: 1994 rules.
11000 rules inserted. Base: 7587 rules (237 with conclusion selected). Queue: 1994 rules.
11200 rules inserted. Base: 7703 rules (237 with conclusion selected). Queue: 1994 rules.
11400 rules inserted. Base: 7827 rules (237 with conclusion selected). Queue: 1992 rules.
11600 rules inserted. Base: 7906 rules (237 with conclusion selected). Queue: 1992 rules.
11800 rules inserted. Base: 8066 rules (237 with conclusion selected). Queue: 1985 rules.
12000 rules inserted. Base: 8173 rules (237 with conclusion selected). Queue: 1983 rules.
12200 rules inserted. Base: 8228 rules (237 with conclusion selected). Queue: 1983 rules.
12400 rules inserted. Base: 8228 rules (237 with conclusion selected). Queue: 1983 rules.
12600 rules inserted. Base: 8228 rules (237 with conclusion selected). Queue: 1983 rules.
12800 rules inserted. Base: 8242 rules (237 with conclusion selected). Queue: 1981 rules.
13000 rules inserted. Base: 8300 rules (243 with conclusion selected). Queue: 1941 rules.
13200 rules inserted. Base: 8402 rules (243 with conclusion selected). Queue: 1831 rules.
13400 rules inserted. Base: 8539 rules (243 with conclusion selected). Queue: 1682 rules.
13600 rules inserted. Base: 8588 rules (250 with conclusion selected). Queue: 1701 rules.
13800 rules inserted. Base: 8585 rules (250 with conclusion selected). Queue: 1690 rules.
14000 rules inserted. Base: 8593 rules (250 with conclusion selected). Queue: 1687 rules.
14200 rules inserted. Base: 8590 rules (257 with conclusion selected). Queue: 1659 rules.
14400 rules inserted. Base: 8506 rules (260 with conclusion selected). Queue: 1658 rules.
14600 rules inserted. Base: 8420 rules (265 with conclusion selected). Queue: 1663 rules.
14800 rules inserted. Base: 8526 rules (270 with conclusion selected). Queue: 1528 rules.
15000 rules inserted. Base: 8722 rules (287 with conclusion selected). Queue: 1511 rules.
15200 rules inserted. Base: 8922 rules (301 with conclusion selected). Queue: 1511 rules.
15400 rules inserted. Base: 8977 rules (304 with conclusion selected). Queue: 1622 rules.
15600 rules inserted. Base: 9076 rules (304 with conclusion selected). Queue: 1522 rules.
15800 rules inserted. Base: 9161 rules (311 with conclusion selected). Queue: 1455 rules.
16000 rules inserted. Base: 9361 rules (327 with conclusion selected). Queue: 1591 rules.
16200 rules inserted. Base: 9561 rules (341 with conclusion selected). Queue: 1843 rules.
16400 rules inserted. Base: 9724 rules (364 with conclusion selected). Queue: 2856 rules.
16600 rules inserted. Base: 9813 rules (365 with conclusion selected). Queue: 2912 rules.
16800 rules inserted. Base: 10006 rules (367 with conclusion selected). Queue: 3138 rules.
17000 rules inserted. Base: 10041 rules (367 with conclusion selected). Queue: 3135 rules.
17200 rules inserted. Base: 10041 rules (367 with conclusion selected). Queue: 3135 rules.
17400 rules inserted. Base: 10233 rules (374 with conclusion selected). Queue: 3629 rules.
17600 rules inserted. Base: 10429 rules (376 with conclusion selected). Queue: 3832 rules.
17800 rules inserted. Base: 10629 rules (377 with conclusion selected). Queue: 3850 rules.
18000 rules inserted. Base: 10825 rules (379 with conclusion selected). Queue: 4053 rules.
18200 rules inserted. Base: 11025 rules (380 with conclusion selected). Queue: 4071 rules.
18400 rules inserted. Base: 11221 rules (383 with conclusion selected). Queue: 4293 rules.
18600 rules inserted. Base: 11421 rules (383 with conclusion selected). Queue: 4292 rules.
18800 rules inserted. Base: 11583 rules (386 with conclusion selected). Queue: 4677 rules.
19000 rules inserted. Base: 11658 rules (389 with conclusion selected). Queue: 5045 rules.
19200 rules inserted. Base: 11750 rules (391 with conclusion selected). Queue: 5230 rules.
19400 rules inserted. Base: 11828 rules (392 with conclusion selected). Queue: 5434 rules.
19600 rules inserted. Base: 11979 rules (392 with conclusion selected). Queue: 5392 rules.
19800 rules inserted. Base: 12081 rules (393 with conclusion selected). Queue: 5607 rules.
20000 rules inserted. Base: 12239 rules (393 with conclusion selected). Queue: 5575 rules.
20200 rules inserted. Base: 12439 rules (393 with conclusion selected). Queue: 5375 rules.
20400 rules inserted. Base: 12637 rules (395 with conclusion selected). Queue: 5636 rules.
20600 rules inserted. Base: 12731 rules (395 with conclusion selected). Queue: 5628 rules.
20800 rules inserted. Base: 12851 rules (397 with conclusion selected). Queue: 5802 rules.
21000 rules inserted. Base: 12987 rules (399 with conclusion selected). Queue: 6217 rules.
21200 rules inserted. Base: 13153 rules (399 with conclusion selected). Queue: 6215 rules.
21400 rules inserted. Base: 13260 rules (401 with conclusion selected). Queue: 6414 rules.
21600 rules inserted. Base: 13459 rules (402 with conclusion selected). Queue: 6614 rules.
21800 rules inserted. Base: 13626 rules (402 with conclusion selected). Queue: 6613 rules.
22000 rules inserted. Base: 13733 rules (404 with conclusion selected). Queue: 6812 rules.
22200 rules inserted. Base: 13932 rules (405 with conclusion selected). Queue: 7012 rules.
22400 rules inserted. Base: 14099 rules (405 with conclusion selected). Queue: 7011 rules.
22600 rules inserted. Base: 14206 rules (407 with conclusion selected). Queue: 7210 rules.
22800 rules inserted. Base: 14405 rules (408 with conclusion selected). Queue: 7410 rules.
23000 rules inserted. Base: 14553 rules (408 with conclusion selected). Queue: 7409 rules.
23200 rules inserted. Base: 14652 rules (410 with conclusion selected). Queue: 7608 rules.
23400 rules inserted. Base: 14755 rules (410 with conclusion selected). Queue: 7601 rules.
23600 rules inserted. Base: 14844 rules (410 with conclusion selected). Queue: 7592 rules.
23800 rules inserted. Base: 14925 rules (411 with conclusion selected). Queue: 7591 rules.
24000 rules inserted. Base: 15019 rules (411 with conclusion selected). Queue: 7593 rules.
24200 rules inserted. Base: 15117 rules (411 with conclusion selected). Queue: 7575 rules.
24400 rules inserted. Base: 15198 rules (412 with conclusion selected). Queue: 7574 rules.
24600 rules inserted. Base: 15242 rules (412 with conclusion selected). Queue: 7587 rules.
24800 rules inserted. Base: 15341 rules (412 with conclusion selected). Queue: 7639 rules.
25000 rules inserted. Base: 15509 rules (412 with conclusion selected). Queue: 7600 rules.
25200 rules inserted. Base: 15587 rules (412 with conclusion selected). Queue: 7620 rules.
25400 rules inserted. Base: 15655 rules (412 with conclusion selected). Queue: 7640 rules.
25600 rules inserted. Base: 15702 rules (412 with conclusion selected). Queue: 7639 rules.
25800 rules inserted. Base: 15811 rules (412 with conclusion selected). Queue: 7670 rules.
26000 rules inserted. Base: 15904 rules (412 with conclusion selected). Queue: 7701 rules.
26200 rules inserted. Base: 16031 rules (412 with conclusion selected). Queue: 7697 rules.
26400 rules inserted. Base: 16111 rules (412 with conclusion selected). Queue: 7697 rules.
26600 rules inserted. Base: 16236 rules (413 with conclusion selected). Queue: 7664 rules.
26800 rules inserted. Base: 16351 rules (413 with conclusion selected). Queue: 7684 rules.
27000 rules inserted. Base: 16423 rules (414 with conclusion selected). Queue: 7704 rules.
27200 rules inserted. Base: 16469 rules (414 with conclusion selected). Queue: 7736 rules.
27400 rules inserted. Base: 16539 rules (414 with conclusion selected). Queue: 7713 rules.
27600 rules inserted. Base: 16646 rules (414 with conclusion selected). Queue: 7718 rules.
27800 rules inserted. Base: 16727 rules (415 with conclusion selected). Queue: 7717 rules.
28000 rules inserted. Base: 16829 rules (415 with conclusion selected). Queue: 7717 rules.
28200 rules inserted. Base: 16855 rules (415 with conclusion selected). Queue: 7749 rules.
28400 rules inserted. Base: 16945 rules (415 with conclusion selected). Queue: 7717 rules.
28600 rules inserted. Base: 17023 rules (415 with conclusion selected). Queue: 7731 rules.
28800 rules inserted. Base: 17100 rules (416 with conclusion selected). Queue: 7730 rules.
29000 rules inserted. Base: 17212 rules (416 with conclusion selected). Queue: 7730 rules.
29200 rules inserted. Base: 17228 rules (416 with conclusion selected). Queue: 7762 rules.
29400 rules inserted. Base: 17351 rules (416 with conclusion selected). Queue: 7730 rules.
29600 rules inserted. Base: 17429 rules (416 with conclusion selected). Queue: 7744 rules.
29800 rules inserted. Base: 17475 rules (417 with conclusion selected). Queue: 7743 rules.
30000 rules inserted. Base: 17585 rules (417 with conclusion selected). Queue: 7773 rules.
30200 rules inserted. Base: 17617 rules (417 with conclusion selected). Queue: 7775 rules.
30400 rules inserted. Base: 17747 rules (417 with conclusion selected). Queue: 7743 rules.
30600 rules inserted. Base: 17835 rules (417 with conclusion selected). Queue: 7757 rules.
30800 rules inserted. Base: 17881 rules (418 with conclusion selected). Queue: 7737 rules.
31000 rules inserted. Base: 17972 rules (418 with conclusion selected). Queue: 7724 rules.
31200 rules inserted. Base: 18023 rules (418 with conclusion selected). Queue: 7695 rules.
31400 rules inserted. Base: 18133 rules (418 with conclusion selected). Queue: 7665 rules.
31600 rules inserted. Base: 18218 rules (418 with conclusion selected). Queue: 7660 rules.
31800 rules inserted. Base: 18275 rules (418 with conclusion selected). Queue: 7628 rules.
32000 rules inserted. Base: 18350 rules (418 with conclusion selected). Queue: 7628 rules.
32200 rules inserted. Base: 18451 rules (420 with conclusion selected). Queue: 7722 rules.
32400 rules inserted. Base: 18529 rules (420 with conclusion selected). Queue: 7722 rules.
32600 rules inserted. Base: 18600 rules (420 with conclusion selected). Queue: 7720 rules.
32800 rules inserted. Base: 18710 rules (420 with conclusion selected). Queue: 7695 rules.
33000 rules inserted. Base: 18820 rules (420 with conclusion selected). Queue: 7688 rules.
33200 rules inserted. Base: 18830 rules (452 with conclusion selected). Queue: 7982 rules.
33400 rules inserted. Base: 18941 rules (452 with conclusion selected). Queue: 7950 rules.
33600 rules inserted. Base: 19102 rules (452 with conclusion selected). Queue: 7918 rules.
33800 rules inserted. Base: 19176 rules (453 with conclusion selected). Queue: 7918 rules.
34000 rules inserted. Base: 19286 rules (453 with conclusion selected). Queue: 7886 rules.
34200 rules inserted. Base: 19396 rules (453 with conclusion selected). Queue: 7886 rules.
34400 rules inserted. Base: 19506 rules (453 with conclusion selected). Queue: 7869 rules.
34600 rules inserted. Base: 19616 rules (453 with conclusion selected). Queue: 7854 rules.
34800 rules inserted. Base: 19762 rules (455 with conclusion selected). Queue: 7835 rules.
35000 rules inserted. Base: 19874 rules (455 with conclusion selected). Queue: 7835 rules.
35200 rules inserted. Base: 20032 rules (455 with conclusion selected). Queue: 7835 rules.
35400 rules inserted. Base: 20149 rules (455 with conclusion selected). Queue: 7803 rules.
35600 rules inserted. Base: 20243 rules (455 with conclusion selected). Queue: 7803 rules.
35800 rules inserted. Base: 20370 rules (455 with conclusion selected). Queue: 7785 rules.
36000 rules inserted. Base: 20496 rules (455 with conclusion selected). Queue: 7785 rules.
36200 rules inserted. Base: 20640 rules (455 with conclusion selected). Queue: 7785 rules.
36400 rules inserted. Base: 20777 rules (455 with conclusion selected). Queue: 7753 rules.
36600 rules inserted. Base: 20871 rules (455 with conclusion selected). Queue: 7762 rules.
36800 rules inserted. Base: 20978 rules (455 with conclusion selected). Queue: 7735 rules.
37000 rules inserted. Base: 21114 rules (455 with conclusion selected). Queue: 7735 rules.
37200 rules inserted. Base: 21248 rules (455 with conclusion selected). Queue: 7735 rules.
37400 rules inserted. Base: 21392 rules (455 with conclusion selected). Queue: 7703 rules.
37600 rules inserted. Base: 21499 rules (455 with conclusion selected). Queue: 7692 rules.
37800 rules inserted. Base: 21586 rules (455 with conclusion selected). Queue: 7685 rules.
38000 rules inserted. Base: 21742 rules (455 with conclusion selected). Queue: 7685 rules.
38200 rules inserted. Base: 21856 rules (455 with conclusion selected). Queue: 7685 rules.
38400 rules inserted. Base: 22000 rules (455 with conclusion selected). Queue: 7653 rules.
38600 rules inserted. Base: 22127 rules (455 with conclusion selected). Queue: 7653 rules.
38800 rules inserted. Base: 22197 rules (457 with conclusion selected). Queue: 7653 rules.
39000 rules inserted. Base: 22360 rules (457 with conclusion selected). Queue: 7573 rules.
39200 rules inserted. Base: 22440 rules (457 with conclusion selected). Queue: 7573 rules.
39400 rules inserted. Base: 22553 rules (459 with conclusion selected). Queue: 7516 rules.
39600 rules inserted. Base: 22656 rules (459 with conclusion selected). Queue: 7493 rules.
39800 rules inserted. Base: 22761 rules (464 with conclusion selected). Queue: 7652 rules.
40000 rules inserted. Base: 22959 rules (465 with conclusion selected). Queue: 7918 rules.
40200 rules inserted. Base: 23006 rules (481 with conclusion selected). Queue: 8265 rules.
40400 rules inserted. Base: 23085 rules (497 with conclusion selected). Queue: 8514 rules.
40600 rules inserted. Base: 23260 rules (497 with conclusion selected). Queue: 8869 rules.
40800 rules inserted. Base: 23347 rules (497 with conclusion selected). Queue: 8944 rules.
41000 rules inserted. Base: 23443 rules (513 with conclusion selected). Queue: 9347 rules.
41200 rules inserted. Base: 23539 rules (529 with conclusion selected). Queue: 9748 rules.
41400 rules inserted. Base: 23616 rules (530 with conclusion selected). Queue: 9748 rules.
41600 rules inserted. Base: 23743 rules (530 with conclusion selected). Queue: 9748 rules.
41800 rules inserted. Base: 23803 rules (532 with conclusion selected). Queue: 9718 rules.
42000 rules inserted. Base: 23934 rules (532 with conclusion selected). Queue: 9667 rules.
42200 rules inserted. Base: 24023 rules (532 with conclusion selected). Queue: 9590 rules.
42400 rules inserted. Base: 24172 rules (532 with conclusion selected). Queue: 9587 rules.
42600 rules inserted. Base: 24315 rules (533 with conclusion selected). Queue: 9586 rules.
42800 rules inserted. Base: 24394 rules (534 with conclusion selected). Queue: 9586 rules.
43000 rules inserted. Base: 24509 rules (535 with conclusion selected). Queue: 9586 rules.
43200 rules inserted. Base: 24671 rules (535 with conclusion selected). Queue: 9506 rules.
43400 rules inserted. Base: 24765 rules (535 with conclusion selected). Queue: 9506 rules.
43600 rules inserted. Base: 24877 rules (535 with conclusion selected). Queue: 9506 rules.
43800 rules inserted. Base: 25010 rules (536 with conclusion selected). Queue: 9506 rules.
44000 rules inserted. Base: 25103 rules (537 with conclusion selected). Queue: 9474 rules.
44200 rules inserted. Base: 25263 rules (537 with conclusion selected). Queue: 9426 rules.
44400 rules inserted. Base: 25397 rules (537 with conclusion selected). Queue: 9426 rules.
44600 rules inserted. Base: 25475 rules (537 with conclusion selected). Queue: 9426 rules.
44800 rules inserted. Base: 25631 rules (538 with conclusion selected). Queue: 9426 rules.
45000 rules inserted. Base: 25735 rules (539 with conclusion selected). Queue: 9346 rules.
45200 rules inserted. Base: 25845 rules (539 with conclusion selected). Queue: 9346 rules.
45400 rules inserted. Base: 26001 rules (539 with conclusion selected). Queue: 9346 rules.
45600 rules inserted. Base: 26090 rules (540 with conclusion selected). Queue: 9346 rules.
45800 rules inserted. Base: 26195 rules (541 with conclusion selected). Queue: 9346 rules.
46000 rules inserted. Base: 26367 rules (541 with conclusion selected). Queue: 9266 rules.
46200 rules inserted. Base: 26451 rules (541 with conclusion selected). Queue: 9266 rules.
46400 rules inserted. Base: 26549 rules (543 with conclusion selected). Queue: 9168 rules.
46600 rules inserted. Base: 26593 rules (543 with conclusion selected). Queue: 9124 rules.
46800 rules inserted. Base: 26703 rules (543 with conclusion selected). Queue: 9014 rules.
47000 rules inserted. Base: 26731 rules (545 with conclusion selected). Queue: 8986 rules.
47200 rules inserted. Base: 26877 rules (548 with conclusion selected). Queue: 8973 rules.
47400 rules inserted. Base: 27077 rules (549 with conclusion selected). Queue: 8906 rules.
47600 rules inserted. Base: 27259 rules (549 with conclusion selected). Queue: 8730 rules.
47800 rules inserted. Base: 27282 rules (549 with conclusion selected). Queue: 8730 rules.
48000 rules inserted. Base: 27392 rules (549 with conclusion selected). Queue: 8656 rules.
48200 rules inserted. Base: 27490 rules (549 with conclusion selected). Queue: 9182 rules.
48400 rules inserted. Base: 27563 rules (549 with conclusion selected). Queue: 9169 rules.
48600 rules inserted. Base: 27641 rules (549 with conclusion selected). Queue: 9156 rules.
48800 rules inserted. Base: 27712 rules (549 with conclusion selected). Queue: 9139 rules.
49000 rules inserted. Base: 27748 rules (549 with conclusion selected). Queue: 9136 rules.
49200 rules inserted. Base: 27760 rules (549 with conclusion selected). Queue: 9136 rules.
49400 rules inserted. Base: 27804 rules (549 with conclusion selected). Queue: 9136 rules.
49600 rules inserted. Base: 27887 rules (549 with conclusion selected). Queue: 9056 rules.
49800 rules inserted. Base: 27956 rules (549 with conclusion selected). Queue: 9656 rules.
50000 rules inserted. Base: 28007 rules (549 with conclusion selected). Queue: 9653 rules.
50200 rules inserted. Base: 28073 rules (549 with conclusion selected). Queue: 9639 rules.
50400 rules inserted. Base: 28137 rules (549 with conclusion selected). Queue: 9656 rules.
50600 rules inserted. Base: 28207 rules (549 with conclusion selected). Queue: 9658 rules.
50800 rules inserted. Base: 28244 rules (549 with conclusion selected). Queue: 9647 rules.
51000 rules inserted. Base: 28290 rules (549 with conclusion selected). Queue: 9640 rules.
51200 rules inserted. Base: 28463 rules (550 with conclusion selected). Queue: 9527 rules.
51400 rules inserted. Base: 28578 rules (550 with conclusion selected). Queue: 9415 rules.
51600 rules inserted. Base: 28608 rules (551 with conclusion selected). Queue: 9412 rules.
51800 rules inserted. Base: 28712 rules (551 with conclusion selected). Queue: 9330 rules.
52000 rules inserted. Base: 28822 rules (551 with conclusion selected). Queue: 9276 rules.
52200 rules inserted. Base: 28918 rules (551 with conclusion selected). Queue: 9228 rules.
52400 rules inserted. Base: 29009 rules (552 with conclusion selected). Queue: 9137 rules.
52600 rules inserted. Base: 29012 rules (553 with conclusion selected). Queue: 9136 rules.
52800 rules inserted. Base: 29086 rules (553 with conclusion selected). Queue: 9080 rules.
53000 rules inserted. Base: 29130 rules (553 with conclusion selected). Queue: 9054 rules.
53200 rules inserted. Base: 29242 rules (553 with conclusion selected). Queue: 8942 rules.
53400 rules inserted. Base: 29246 rules (555 with conclusion selected). Queue: 8940 rules.
53600 rules inserted. Base: 29270 rules (555 with conclusion selected). Queue: 8934 rules.
53800 rules inserted. Base: 29364 rules (555 with conclusion selected). Queue: 8858 rules.
54000 rules inserted. Base: 29476 rules (555 with conclusion selected). Queue: 8746 rules.
54200 rules inserted. Base: 29477 rules (556 with conclusion selected). Queue: 8745 rules.
54400 rules inserted. Base: 29500 rules (557 with conclusion selected). Queue: 8742 rules.
54600 rules inserted. Base: 29580 rules (557 with conclusion selected). Queue: 8662 rules.
54800 rules inserted. Base: 29670 rules (557 with conclusion selected). Queue: 8590 rules.
55000 rules inserted. Base: 29711 rules (558 with conclusion selected). Queue: 8549 rules.
55200 rules inserted. Base: 29728 rules (559 with conclusion selected). Queue: 8546 rules.
55400 rules inserted. Base: 29814 rules (559 with conclusion selected). Queue: 8466 rules.
55600 rules inserted. Base: 29854 rules (559 with conclusion selected). Queue: 8426 rules.
55800 rules inserted. Base: 29878 rules (559 with conclusion selected). Queue: 8402 rules.
56000 rules inserted. Base: 29950 rules (559 with conclusion selected). Queue: 8330 rules.
56200 rules inserted. Base: 30147 rules (559 with conclusion selected). Queue: 8137 rules.
56400 rules inserted. Base: 30253 rules (559 with conclusion selected). Queue: 8027 rules.
56600 rules inserted. Base: 30300 rules (559 with conclusion selected). Queue: 8027 rules.
56800 rules inserted. Base: 30311 rules (559 with conclusion selected). Queue: 8025 rules.
57000 rules inserted. Base: 30319 rules (559 with conclusion selected). Queue: 8025 rules.
57200 rules inserted. Base: 30327 rules (559 with conclusion selected). Queue: 8025 rules.
57400 rules inserted. Base: 30354 rules (559 with conclusion selected). Queue: 8041 rules.
57600 rules inserted. Base: 30398 rules (559 with conclusion selected). Queue: 8073 rules.
57800 rules inserted. Base: 30474 rules (559 with conclusion selected). Queue: 8129 rules.
58000 rules inserted. Base: 30548 rules (559 with conclusion selected). Queue: 8173 rules.
58200 rules inserted. Base: 30594 rules (559 with conclusion selected). Queue: 8141 rules.
58400 rules inserted. Base: 30606 rules (559 with conclusion selected). Queue: 8141 rules.
58600 rules inserted. Base: 30644 rules (559 with conclusion selected). Queue: 8139 rules.
58800 rules inserted. Base: 30654 rules (559 with conclusion selected). Queue: 8139 rules.
59000 rules inserted. Base: 30662 rules (559 with conclusion selected). Queue: 8139 rules.
59200 rules inserted. Base: 30670 rules (559 with conclusion selected). Queue: 8139 rules.
59400 rules inserted. Base: 30774 rules (559 with conclusion selected). Queue: 8095 rules.
59600 rules inserted. Base: 30876 rules (559 with conclusion selected). Queue: 8087 rules.
59800 rules inserted. Base: 30904 rules (559 with conclusion selected). Queue: 8109 rules.
60000 rules inserted. Base: 31004 rules (559 with conclusion selected). Queue: 8111 rules.
60200 rules inserted. Base: 31133 rules (559 with conclusion selected). Queue: 8075 rules.
60400 rules inserted. Base: 31177 rules (559 with conclusion selected). Queue: 8107 rules.
60600 rules inserted. Base: 31210 rules (559 with conclusion selected). Queue: 8131 rules.
60800 rules inserted. Base: 31268 rules (559 with conclusion selected). Queue: 8129 rules.
61000 rules inserted. Base: 31360 rules (559 with conclusion selected). Queue: 8067 rules.
61200 rules inserted. Base: 31496 rules (559 with conclusion selected). Queue: 8053 rules.
61400 rules inserted. Base: 31546 rules (559 with conclusion selected). Queue: 8051 rules.
61600 rules inserted. Base: 31580 rules (559 with conclusion selected). Queue: 8017 rules.
61800 rules inserted. Base: 31662 rules (559 with conclusion selected). Queue: 7941 rules.
62000 rules inserted. Base: 31698 rules (559 with conclusion selected). Queue: 7923 rules.
62200 rules inserted. Base: 31716 rules (559 with conclusion selected). Queue: 7905 rules.
62400 rules inserted. Base: 31804 rules (559 with conclusion selected). Queue: 7819 rules.
62600 rules inserted. Base: 31820 rules (559 with conclusion selected). Queue: 7807 rules.
62800 rules inserted. Base: 31854 rules (559 with conclusion selected). Queue: 7791 rules.
63000 rules inserted. Base: 31916 rules (559 with conclusion selected). Queue: 7731 rules.
63200 rules inserted. Base: 31968 rules (559 with conclusion selected). Queue: 7683 rules.
63400 rules inserted. Base: 32004 rules (559 with conclusion selected). Queue: 7665 rules.
63600 rules inserted. Base: 32036 rules (559 with conclusion selected). Queue: 7633 rules.
63800 rules inserted. Base: 32118 rules (559 with conclusion selected). Queue: 7557 rules.
64000 rules inserted. Base: 32192 rules (559 with conclusion selected). Queue: 7483 rules.
64200 rules inserted. Base: 32338 rules (559 with conclusion selected). Queue: 7337 rules.
64400 rules inserted. Base: 32491 rules (562 with conclusion selected). Queue: 7182 rules.
64600 rules inserted. Base: 32665 rules (562 with conclusion selected). Queue: 7094 rules.
64800 rules inserted. Base: 32721 rules (562 with conclusion selected). Queue: 7042 rules.
65000 rules inserted. Base: 32729 rules (562 with conclusion selected). Queue: 7042 rules.
65200 rules inserted. Base: 32737 rules (562 with conclusion selected). Queue: 7042 rules.
65400 rules inserted. Base: 32811 rules (562 with conclusion selected). Queue: 6988 rules.
65600 rules inserted. Base: 32998 rules (562 with conclusion selected). Queue: 6931 rules.
65800 rules inserted. Base: 33188 rules (562 with conclusion selected). Queue: 6877 rules.
66000 rules inserted. Base: 33378 rules (562 with conclusion selected). Queue: 6824 rules.
66200 rules inserted. Base: 33569 rules (562 with conclusion selected). Queue: 6856 rules.
66400 rules inserted. Base: 33761 rules (562 with conclusion selected). Queue: 6668 rules.
66600 rules inserted. Base: 33953 rules (562 with conclusion selected). Queue: 6479 rules.
66800 rules inserted. Base: 34062 rules (562 with conclusion selected). Queue: 6452 rules.
67000 rules inserted. Base: 34095 rules (562 with conclusion selected). Queue: 6426 rules.
67200 rules inserted. Base: 34103 rules (562 with conclusion selected). Queue: 6426 rules.
67400 rules inserted. Base: 34111 rules (562 with conclusion selected). Queue: 6426 rules.
67600 rules inserted. Base: 34237 rules (562 with conclusion selected). Queue: 6382 rules.
67800 rules inserted. Base: 34429 rules (562 with conclusion selected). Queue: 6290 rules.
68000 rules inserted. Base: 34622 rules (562 with conclusion selected). Queue: 6177 rules.
68200 rules inserted. Base: 34769 rules (562 with conclusion selected). Queue: 6174 rules.
68400 rules inserted. Base: 34961 rules (562 with conclusion selected). Queue: 6060 rules.
68600 rules inserted. Base: 35151 rules (562 with conclusion selected). Queue: 5990 rules.
68800 rules inserted. Base: 35257 rules (562 with conclusion selected). Queue: 5926 rules.
69000 rules inserted. Base: 35351 rules (562 with conclusion selected). Queue: 5942 rules.
69200 rules inserted. Base: 35455 rules (562 with conclusion selected). Queue: 6006 rules.
69400 rules inserted. Base: 35533 rules (562 with conclusion selected). Queue: 6036 rules.
69600 rules inserted. Base: 35537 rules (562 with conclusion selected). Queue: 6032 rules.
69800 rules inserted. Base: 35581 rules (562 with conclusion selected). Queue: 5990 rules.
70000 rules inserted. Base: 35605 rules (562 with conclusion selected). Queue: 5968 rules.
70200 rules inserted. Base: 35611 rules (562 with conclusion selected). Queue: 5962 rules.
70400 rules inserted. Base: 35653 rules (562 with conclusion selected). Queue: 5922 rules.
70600 rules inserted. Base: 35673 rules (562 with conclusion selected). Queue: 5904 rules.
70800 rules inserted. Base: 35717 rules (562 with conclusion selected). Queue: 5862 rules.
71000 rules inserted. Base: 35737 rules (562 with conclusion selected). Queue: 5844 rules.
71200 rules inserted. Base: 35741 rules (562 with conclusion selected). Queue: 5840 rules.
71400 rules inserted. Base: 35789 rules (562 with conclusion selected). Queue: 5794 rules.
71600 rules inserted. Base: 35927 rules (564 with conclusion selected). Queue: 5872 rules.
71800 rules inserted. Base: 36104 rules (564 with conclusion selected). Queue: 5767 rules.
72000 rules inserted. Base: 36299 rules (564 with conclusion selected). Queue: 5575 rules.
72200 rules inserted. Base: 36493 rules (564 with conclusion selected). Queue: 5383 rules.
72400 rules inserted. Base: 36680 rules (564 with conclusion selected). Queue: 5215 rules.
72600 rules inserted. Base: 36805 rules (564 with conclusion selected). Queue: 5212 rules.
72800 rules inserted. Base: 36931 rules (564 with conclusion selected). Queue: 5209 rules.
73000 rules inserted. Base: 37091 rules (564 with conclusion selected). Queue: 5112 rules.
73200 rules inserted. Base: 37265 rules (564 with conclusion selected). Queue: 5272 rules.
73400 rules inserted. Base: 37461 rules (564 with conclusion selected). Queue: 5131 rules.
73600 rules inserted. Base: 37656 rules (564 with conclusion selected). Queue: 4939 rules.
73800 rules inserted. Base: 37851 rules (564 with conclusion selected). Queue: 4747 rules.
74000 rules inserted. Base: 37961 rules (564 with conclusion selected). Queue: 4680 rules.
74200 rules inserted. Base: 38089 rules (564 with conclusion selected). Queue: 4677 rules.
74400 rules inserted. Base: 38182 rules (564 with conclusion selected). Queue: 4659 rules.
74600 rules inserted. Base: 38307 rules (564 with conclusion selected). Queue: 4656 rules.
74800 rules inserted. Base: 38476 rules (564 with conclusion selected). Queue: 4740 rules.
75000 rules inserted. Base: 38659 rules (564 with conclusion selected). Queue: 4620 rules.
75200 rules inserted. Base: 38849 rules (564 with conclusion selected). Queue: 4696 rules.
75400 rules inserted. Base: 39013 rules (564 with conclusion selected). Queue: 4664 rules.
75600 rules inserted. Base: 39101 rules (564 with conclusion selected). Queue: 4582 rules.
75800 rules inserted. Base: 39197 rules (564 with conclusion selected). Queue: 4486 rules.
76000 rules inserted. Base: 39285 rules (564 with conclusion selected). Queue: 4402 rules.
76200 rules inserted. Base: 39319 rules (564 with conclusion selected). Queue: 4368 rules.
76400 rules inserted. Base: 39439 rules (564 with conclusion selected). Queue: 4252 rules.
76600 rules inserted. Base: 39469 rules (564 with conclusion selected). Queue: 4222 rules.
76800 rules inserted. Base: 39568 rules (564 with conclusion selected). Queue: 4126 rules.
77000 rules inserted. Base: 39653 rules (564 with conclusion selected). Queue: 4042 rules.
77200 rules inserted. Base: 39751 rules (564 with conclusion selected). Queue: 3944 rules.
77400 rules inserted. Base: 39874 rules (564 with conclusion selected). Queue: 3824 rules.
77600 rules inserted. Base: 40039 rules (564 with conclusion selected). Queue: 3908 rules.
77800 rules inserted. Base: 40113 rules (564 with conclusion selected). Queue: 3884 rules.
78000 rules inserted. Base: 40192 rules (564 with conclusion selected). Queue: 3859 rules.
78200 rules inserted. Base: 40312 rules (564 with conclusion selected). Queue: 3772 rules.
78400 rules inserted. Base: 40491 rules (564 with conclusion selected). Queue: 3604 rules.
78600 rules inserted. Base: 40669 rules (564 with conclusion selected). Queue: 3690 rules.
78800 rules inserted. Base: 40779 rules (564 with conclusion selected). Queue: 3648 rules.
79000 rules inserted. Base: 40909 rules (564 with conclusion selected). Queue: 3597 rules.
79200 rules inserted. Base: 41000 rules (564 with conclusion selected). Queue: 3563 rules.
79400 rules inserted. Base: 41135 rules (564 with conclusion selected). Queue: 3456 rules.
79600 rules inserted. Base: 41307 rules (564 with conclusion selected). Queue: 3348 rules.
79800 rules inserted. Base: 41481 rules (564 with conclusion selected). Queue: 3372 rules.
80000 rules inserted. Base: 41651 rules (564 with conclusion selected). Queue: 3240 rules.
80200 rules inserted. Base: 41841 rules (564 with conclusion selected). Queue: 3258 rules.
80400 rules inserted. Base: 42025 rules (564 with conclusion selected). Queue: 3070 rules.
80600 rules inserted. Base: 42215 rules (564 with conclusion selected). Queue: 2876 rules.
80800 rules inserted. Base: 42409 rules (564 with conclusion selected). Queue: 2682 rules.
81000 rules inserted. Base: 42593 rules (564 with conclusion selected). Queue: 2494 rules.
81200 rules inserted. Base: 42777 rules (566 with conclusion selected). Queue: 2302 rules.
81400 rules inserted. Base: 42897 rules (566 with conclusion selected). Queue: 2190 rules.
81600 rules inserted. Base: 43075 rules (566 with conclusion selected). Queue: 2056 rules.
81800 rules inserted. Base: 43243 rules (566 with conclusion selected). Queue: 1985 rules.
82000 rules inserted. Base: 43373 rules (566 with conclusion selected). Queue: 1930 rules.
82200 rules inserted. Base: 43522 rules (566 with conclusion selected). Queue: 1798 rules.
82400 rules inserted. Base: 43673 rules (566 with conclusion selected). Queue: 1682 rules.
82600 rules inserted. Base: 43825 rules (566 with conclusion selected). Queue: 1618 rules.
82800 rules inserted. Base: 43993 rules (566 with conclusion selected). Queue: 1546 rules.
83000 rules inserted. Base: 44113 rules (566 with conclusion selected). Queue: 1470 rules.
83200 rules inserted. Base: 44241 rules (566 with conclusion selected). Queue: 1318 rules.
83400 rules inserted. Base: 44393 rules (566 with conclusion selected). Queue: 1166 rules.
83600 rules inserted. Base: 44403 rules (568 with conclusion selected). Queue: 1118 rules.
83800 rules inserted. Base: 44516 rules (568 with conclusion selected). Queue: 1115 rules.
84000 rules inserted. Base: 44555 rules (568 with conclusion selected). Queue: 1110 rules.
84200 rules inserted. Base: 44673 rules (568 with conclusion selected). Queue: 1072 rules.
84400 rules inserted. Base: 44771 rules (568 with conclusion selected). Queue: 1054 rules.
84600 rules inserted. Base: 44755 rules (568 with conclusion selected). Queue: 1056 rules.
84800 rules inserted. Base: 44793 rules (570 with conclusion selected). Queue: 1008 rules.
85000 rules inserted. Base: 44925 rules (570 with conclusion selected). Queue: 876 rules.
85200 rules inserted. Base: 44899 rules (570 with conclusion selected). Queue: 822 rules.
85400 rules inserted. Base: 45021 rules (570 with conclusion selected). Queue: 700 rules.
85600 rules inserted. Base: 44923 rules (570 with conclusion selected). Queue: 696 rules.
85800 rules inserted. Base: 44704 rules (574 with conclusion selected). Queue: 710 rules.
86000 rules inserted. Base: 44283 rules (574 with conclusion selected). Queue: 723 rules.
86200 rules inserted. Base: 43917 rules (574 with conclusion selected). Queue: 728 rules.
86400 rules inserted. Base: 43321 rules (584 with conclusion selected). Queue: 885 rules.
86600 rules inserted. Base: 43311 rules (584 with conclusion selected). Queue: 823 rules.
86800 rules inserted. Base: 43217 rules (616 with conclusion selected). Queue: 787 rules.
87000 rules inserted. Base: 43049 rules (618 with conclusion selected). Queue: 802 rules.
87200 rules inserted. Base: 42718 rules (626 with conclusion selected). Queue: 1049 rules.
87400 rules inserted. Base: 42366 rules (628 with conclusion selected). Queue: 1115 rules.
87600 rules inserted. Base: 41868 rules (628 with conclusion selected). Queue: 1115 rules.
87800 rules inserted. Base: 41580 rules (628 with conclusion selected). Queue: 1085 rules.
88000 rules inserted. Base: 41268 rules (632 with conclusion selected). Queue: 1211 rules.
88200 rules inserted. Base: 41400 rules (636 with conclusion selected). Queue: 1295 rules.
88400 rules inserted. Base: 41556 rules (639 with conclusion selected). Queue: 1272 rules.
88600 rules inserted. Base: 41206 rules (639 with conclusion selected). Queue: 1232 rules.
88800 rules inserted. Base: 40900 rules (643 with conclusion selected). Queue: 1198 rules.
89000 rules inserted. Base: 40592 rules (655 with conclusion selected). Queue: 1167 rules.
89200 rules inserted. Base: 40723 rules (660 with conclusion selected). Queue: 1195 rules.
89400 rules inserted. Base: 40922 rules (663 with conclusion selected). Queue: 1129 rules.
89600 rules inserted. Base: 41120 rules (664 with conclusion selected). Queue: 1066 rules.
89800 rules inserted. Base: 41232 rules (696 with conclusion selected). Queue: 1003 rules.
90000 rules inserted. Base: 41345 rules (730 with conclusion selected). Queue: 1029 rules.
90200 rules inserted. Base: 41497 rules (740 with conclusion selected). Queue: 1021 rules.
90400 rules inserted. Base: 41695 rules (741 with conclusion selected). Queue: 958 rules.
90600 rules inserted. Base: 41892 rules (742 with conclusion selected). Queue: 832 rules.
90800 rules inserted. Base: 42017 rules (742 with conclusion selected). Queue: 752 rules.
91000 rules inserted. Base: 42105 rules (742 with conclusion selected). Queue: 672 rules.
91200 rules inserted. Base: 42215 rules (742 with conclusion selected). Queue: 635 rules.
91400 rules inserted. Base: 42410 rules (743 with conclusion selected). Queue: 470 rules.
91600 rules inserted. Base: 42439 rules (743 with conclusion selected). Queue: 382 rules.
91800 rules inserted. Base: 42520 rules (776 with conclusion selected). Queue: 491 rules.
92000 rules inserted. Base: 42474 rules (778 with conclusion selected). Queue: 531 rules.
92200 rules inserted. Base: 42626 rules (792 with conclusion selected). Queue: 514 rules.
92400 rules inserted. Base: 42537 rules (806 with conclusion selected). Queue: 849 rules.
92600 rules inserted. Base: 42636 rules (816 with conclusion selected). Queue: 1520 rules.
92800 rules inserted. Base: 42828 rules (826 with conclusion selected). Queue: 1402 rules.
93000 rules inserted. Base: 42822 rules (831 with conclusion selected). Queue: 1784 rules.
93200 rules inserted. Base: 42950 rules (834 with conclusion selected). Queue: 1926 rules.
93400 rules inserted. Base: 43073 rules (835 with conclusion selected). Queue: 2041 rules.
93600 rules inserted. Base: 43265 rules (836 with conclusion selected). Queue: 1888 rules.
93800 rules inserted. Base: 43461 rules (836 with conclusion selected). Queue: 1701 rules.
94000 rules inserted. Base: 43661 rules (836 with conclusion selected). Queue: 1510 rules.
94200 rules inserted. Base: 43771 rules (842 with conclusion selected). Queue: 1468 rules.
94400 rules inserted. Base: 43899 rules (845 with conclusion selected). Queue: 1665 rules.
94600 rules inserted. Base: 44022 rules (846 with conclusion selected). Queue: 1729 rules.
94800 rules inserted. Base: 44222 rules (847 with conclusion selected). Queue: 1796 rules.
95000 rules inserted. Base: 44345 rules (848 with conclusion selected). Queue: 1919 rules.
95200 rules inserted. Base: 44477 rules (849 with conclusion selected). Queue: 1989 rules.
95400 rules inserted. Base: 44609 rules (850 with conclusion selected). Queue: 1994 rules.
95600 rules inserted. Base: 44729 rules (851 with conclusion selected). Queue: 1993 rules.
95800 rules inserted. Base: 44885 rules (852 with conclusion selected). Queue: 2024 rules.
96000 rules inserted. Base: 45008 rules (853 with conclusion selected). Queue: 2150 rules.
96200 rules inserted. Base: 45140 rules (855 with conclusion selected). Queue: 2222 rules.
96400 rules inserted. Base: 45272 rules (855 with conclusion selected). Queue: 2222 rules.
96600 rules inserted. Base: 45404 rules (855 with conclusion selected). Queue: 2222 rules.
96800 rules inserted. Base: 45537 rules (856 with conclusion selected). Queue: 2289 rules.
97000 rules inserted. Base: 45736 rules (856 with conclusion selected). Queue: 2289 rules.
97200 rules inserted. Base: 45936 rules (856 with conclusion selected). Queue: 2289 rules.
97400 rules inserted. Base: 46103 rules (856 with conclusion selected). Queue: 2289 rules.
97600 rules inserted. Base: 46208 rules (872 with conclusion selected). Queue: 3587 rules.
97800 rules inserted. Base: 46319 rules (872 with conclusion selected). Queue: 3555 rules.
98000 rules inserted. Base: 46451 rules (873 with conclusion selected). Queue: 3622 rules.
98200 rules inserted. Base: 46636 rules (873 with conclusion selected). Queue: 3622 rules.
98400 rules inserted. Base: 46836 rules (873 with conclusion selected). Queue: 3622 rules.
98600 rules inserted. Base: 47015 rules (873 with conclusion selected). Queue: 3622 rules.
98800 rules inserted. Base: 47168 rules (873 with conclusion selected). Queue: 3622 rules.
99000 rules inserted. Base: 47368 rules (873 with conclusion selected). Queue: 3622 rules.
99200 rules inserted. Base: 47513 rules (873 with conclusion selected). Queue: 3622 rules.
99400 rules inserted. Base: 47613 rules (873 with conclusion selected). Queue: 3622 rules.
99600 rules inserted. Base: 47713 rules (873 with conclusion selected). Queue: 3622 rules.
99800 rules inserted. Base: 47904 rules (873 with conclusion selected). Queue: 3576 rules.
100000 rules inserted. Base: 48104 rules (873 with conclusion selected). Queue: 3393 rules.
100200 rules inserted. Base: 48304 rules (873 with conclusion selected). Queue: 3210 rules.
100400 rules inserted. Base: 48504 rules (873 with conclusion selected). Queue: 3027 rules.
100600 rules inserted. Base: 48694 rules (873 with conclusion selected). Queue: 2874 rules.
100800 rules inserted. Base: 48885 rules (873 with conclusion selected). Queue: 2734 rules.
101000 rules inserted. Base: 49084 rules (873 with conclusion selected). Queue: 2555 rules.
101200 rules inserted. Base: 49166 rules (881 with conclusion selected). Queue: 2564 rules.
101400 rules inserted. Base: 49220 rules (889 with conclusion selected). Queue: 2660 rules.
101600 rules inserted. Base: 49420 rules (889 with conclusion selected). Queue: 2660 rules.
101800 rules inserted. Base: 49542 rules (889 with conclusion selected). Queue: 2660 rules.
102000 rules inserted. Base: 49644 rules (889 with conclusion selected). Queue: 2660 rules.
102200 rules inserted. Base: 49756 rules (889 with conclusion selected). Queue: 2660 rules.
102400 rules inserted. Base: 49912 rules (889 with conclusion selected). Queue: 2660 rules.
102600 rules inserted. Base: 50014 rules (889 with conclusion selected). Queue: 2660 rules.
102800 rules inserted. Base: 50160 rules (889 with conclusion selected). Queue: 2660 rules.
103000 rules inserted. Base: 50292 rules (889 with conclusion selected). Queue: 2660 rules.
103200 rules inserted. Base: 50448 rules (889 with conclusion selected). Queue: 2660 rules.
103400 rules inserted. Base: 50560 rules (889 with conclusion selected). Queue: 2661 rules.
103600 rules inserted. Base: 50744 rules (893 with conclusion selected). Queue: 2700 rules.
103800 rules inserted. Base: 50884 rules (909 with conclusion selected). Queue: 2840 rules.
104000 rules inserted. Base: 50986 rules (929 with conclusion selected). Queue: 2992 rules.
104200 rules inserted. Base: 51088 rules (929 with conclusion selected). Queue: 2992 rules.
104400 rules inserted. Base: 51236 rules (929 with conclusion selected). Queue: 2992 rules.
104600 rules inserted. Base: 51368 rules (929 with conclusion selected). Queue: 2992 rules.
104800 rules inserted. Base: 51522 rules (929 with conclusion selected). Queue: 2992 rules.
105000 rules inserted. Base: 51622 rules (929 with conclusion selected). Queue: 2992 rules.
105200 rules inserted. Base: 51768 rules (929 with conclusion selected). Queue: 2992 rules.
105400 rules inserted. Base: 51886 rules (929 with conclusion selected). Queue: 2992 rules.
105600 rules inserted. Base: 51940 rules (929 with conclusion selected). Queue: 2992 rules.
105800 rules inserted. Base: 52012 rules (929 with conclusion selected). Queue: 2992 rules.
106000 rules inserted. Base: 52060 rules (929 with conclusion selected). Queue: 2992 rules.
106200 rules inserted. Base: 52240 rules (929 with conclusion selected). Queue: 3046 rules.
106400 rules inserted. Base: 52440 rules (929 with conclusion selected). Queue: 3067 rules.
106600 rules inserted. Base: 52595 rules (937 with conclusion selected). Queue: 3132 rules.
106800 rules inserted. Base: 52792 rules (937 with conclusion selected). Queue: 3140 rules.
107000 rules inserted. Base: 52942 rules (945 with conclusion selected). Queue: 3204 rules.
107200 rules inserted. Base: 53108 rules (945 with conclusion selected). Queue: 3204 rules.
107400 rules inserted. Base: 53206 rules (945 with conclusion selected). Queue: 3204 rules.
107600 rules inserted. Base: 53242 rules (945 with conclusion selected). Queue: 3204 rules.
107800 rules inserted. Base: 53296 rules (945 with conclusion selected). Queue: 3204 rules.
108000 rules inserted. Base: 53360 rules (945 with conclusion selected). Queue: 3204 rules.
108200 rules inserted. Base: 53412 rules (945 with conclusion selected). Queue: 3204 rules.
108400 rules inserted. Base: 53450 rules (945 with conclusion selected). Queue: 3204 rules.
108600 rules inserted. Base: 53548 rules (945 with conclusion selected). Queue: 3152 rules.
108800 rules inserted. Base: 53650 rules (945 with conclusion selected). Queue: 3150 rules.
109000 rules inserted. Base: 53700 rules (945 with conclusion selected). Queue: 3132 rules.
109200 rules inserted. Base: 53809 rules (945 with conclusion selected). Queue: 3151 rules.
109400 rules inserted. Base: 53960 rules (945 with conclusion selected). Queue: 3235 rules.
109600 rules inserted. Base: 54128 rules (945 with conclusion selected). Queue: 3234 rules.
109800 rules inserted. Base: 54276 rules (945 with conclusion selected). Queue: 3253 rules.
110000 rules inserted. Base: 54432 rules (945 with conclusion selected). Queue: 3306 rules.
110200 rules inserted. Base: 54536 rules (945 with conclusion selected). Queue: 3308 rules.
110400 rules inserted. Base: 54608 rules (945 with conclusion selected). Queue: 3308 rules.
110600 rules inserted. Base: 54656 rules (945 with conclusion selected). Queue: 3308 rules.
110800 rules inserted. Base: 54756 rules (945 with conclusion selected). Queue: 3272 rules.
111000 rules inserted. Base: 54856 rules (945 with conclusion selected). Queue: 3224 rules.
111200 rules inserted. Base: 54892 rules (945 with conclusion selected). Queue: 3220 rules.
111400 rules inserted. Base: 54994 rules (945 with conclusion selected). Queue: 3200 rules.
111600 rules inserted. Base: 55080 rules (945 with conclusion selected). Queue: 3164 rules.
111800 rules inserted. Base: 55112 rules (945 with conclusion selected). Queue: 3164 rules.
112000 rules inserted. Base: 55116 rules (945 with conclusion selected). Queue: 3164 rules.
112200 rules inserted. Base: 55240 rules (945 with conclusion selected). Queue: 3151 rules.
112400 rules inserted. Base: 55401 rules (945 with conclusion selected). Queue: 3210 rules.
112600 rules inserted. Base: 55570 rules (945 with conclusion selected). Queue: 3315 rules.
112800 rules inserted. Base: 55756 rules (945 with conclusion selected). Queue: 3370 rules.
113000 rules inserted. Base: 55897 rules (945 with conclusion selected). Queue: 3408 rules.
113200 rules inserted. Base: 56072 rules (945 with conclusion selected). Queue: 3522 rules.
113400 rules inserted. Base: 56260 rules (945 with conclusion selected). Queue: 3564 rules.
113600 rules inserted. Base: 56364 rules (945 with conclusion selected). Queue: 3548 rules.
113800 rules inserted. Base: 56464 rules (945 with conclusion selected). Queue: 3488 rules.
114000 rules inserted. Base: 56472 rules (945 with conclusion selected). Queue: 3512 rules.
114200 rules inserted. Base: 56504 rules (945 with conclusion selected). Queue: 3512 rules.
114400 rules inserted. Base: 56600 rules (945 with conclusion selected). Queue: 3448 rules.
114600 rules inserted. Base: 56636 rules (945 with conclusion selected). Queue: 3476 rules.
114800 rules inserted. Base: 56702 rules (945 with conclusion selected). Queue: 3442 rules.
115000 rules inserted. Base: 56852 rules (945 with conclusion selected). Queue: 3356 rules.
115200 rules inserted. Base: 56996 rules (945 with conclusion selected). Queue: 3276 rules.
115400 rules inserted. Base: 57140 rules (945 with conclusion selected). Queue: 3276 rules.
115600 rules inserted. Base: 57324 rules (945 with conclusion selected). Queue: 3268 rules.
115800 rules inserted. Base: 57476 rules (945 with conclusion selected). Queue: 3268 rules.
116000 rules inserted. Base: 57596 rules (945 with conclusion selected). Queue: 3268 rules.
116200 rules inserted. Base: 57738 rules (945 with conclusion selected). Queue: 3334 rules.
116400 rules inserted. Base: 57835 rules (945 with conclusion selected). Queue: 3382 rules.
116600 rules inserted. Base: 57958 rules (945 with conclusion selected). Queue: 3382 rules.
116800 rules inserted. Base: 58067 rules (945 with conclusion selected). Queue: 3382 rules.
117000 rules inserted. Base: 58232 rules (945 with conclusion selected). Queue: 3496 rules.
117200 rules inserted. Base: 58264 rules (945 with conclusion selected). Queue: 3496 rules.
117400 rules inserted. Base: 58334 rules (945 with conclusion selected). Queue: 3458 rules.
117600 rules inserted. Base: 58484 rules (945 with conclusion selected). Queue: 3372 rules.
117800 rules inserted. Base: 58628 rules (945 with conclusion selected). Queue: 3296 rules.                                                                                                          118000 rules inserted. Base: 58768 rules (945 with conclusion selected). Queue: 3220 rules.
118200 rules inserted. Base: 58912 rules (945 with conclusion selected). Queue: 3132 rules.
118400 rules inserted. Base: 58984 rules (945 with conclusion selected). Queue: 3132 rules.
118600 rules inserted. Base: 59165 rules (945 with conclusion selected). Queue: 3068 rules.
118800 rules inserted. Base: 59308 rules (945 with conclusion selected). Queue: 3060 rules.
119000 rules inserted. Base: 59422 rules (945 with conclusion selected). Queue: 3060 rules.
119200 rules inserted. Base: 59480 rules (945 with conclusion selected). Queue: 3100 rules.
119400 rules inserted. Base: 59559 rules (945 with conclusion selected). Queue: 3116 rules.
119600 rules inserted. Base: 59676 rules (945 with conclusion selected). Queue: 3116 rules.
119800 rules inserted. Base: 59760 rules (945 with conclusion selected). Queue: 3084 rules.
120000 rules inserted. Base: 59818 rules (945 with conclusion selected). Queue: 3124 rules.
120200 rules inserted. Base: 59873 rules (945 with conclusion selected). Queue: 3148 rules.
120400 rules inserted. Base: 60002 rules (945 with conclusion selected). Queue: 3148 rules.
120600 rules inserted. Base: 60158 rules (945 with conclusion selected). Queue: 3078 rules.
120800 rules inserted. Base: 60296 rules (945 with conclusion selected). Queue: 2984 rules.
121000 rules inserted. Base: 60380 rules (945 with conclusion selected). Queue: 2984 rules.
121200 rules inserted. Base: 60564 rules (945 with conclusion selected). Queue: 2920 rules.
121400 rules inserted. Base: 60696 rules (945 with conclusion selected). Queue: 2860 rules.
121600 rules inserted. Base: 60820 rules (945 with conclusion selected). Queue: 2792 rules.
121800 rules inserted. Base: 60958 rules (945 with conclusion selected). Queue: 2761 rules.
122000 rules inserted. Base: 61076 rules (945 with conclusion selected). Queue: 2728 rules.
122200 rules inserted. Base: 61216 rules (945 with conclusion selected). Queue: 2792 rules.
122400 rules inserted. Base: 61358 rules (945 with conclusion selected). Queue: 2856 rules.
122600 rules inserted. Base: 61408 rules (945 with conclusion selected). Queue: 2888 rules.
122800 rules inserted. Base: 61456 rules (945 with conclusion selected). Queue: 2920 rules.
123000 rules inserted. Base: 61572 rules (945 with conclusion selected). Queue: 2926 rules.
123200 rules inserted. Base: 61736 rules (945 with conclusion selected). Queue: 3000 rules.
123400 rules inserted. Base: 61803 rules (945 with conclusion selected). Queue: 3029 rules.
123600 rules inserted. Base: 61856 rules (945 with conclusion selected). Queue: 3064 rules.
123800 rules inserted. Base: 61964 rules (945 with conclusion selected). Queue: 3080 rules.
124000 rules inserted. Base: 62136 rules (945 with conclusion selected). Queue: 2952 rules.
124200 rules inserted. Base: 62276 rules (945 with conclusion selected). Queue: 2888 rules.
124400 rules inserted. Base: 62373 rules (949 with conclusion selected). Queue: 2921 rules.
124600 rules inserted. Base: 62466 rules (949 with conclusion selected). Queue: 2981 rules.
124800 rules inserted. Base: 62566 rules (949 with conclusion selected). Queue: 3017 rules.
125000 rules inserted. Base: 62708 rules (949 with conclusion selected). Queue: 3017 rules.
125200 rules inserted. Base: 62864 rules (949 with conclusion selected). Queue: 3017 rules.
125400 rules inserted. Base: 62918 rules (949 with conclusion selected). Queue: 3049 rules.
125600 rules inserted. Base: 63058 rules (949 with conclusion selected). Queue: 3113 rules.
125800 rules inserted. Base: 63196 rules (949 with conclusion selected). Queue: 3113 rules.
126000 rules inserted. Base: 63348 rules (949 with conclusion selected). Queue: 3113 rules.
126200 rules inserted. Base: 63488 rules (949 with conclusion selected). Queue: 3113 rules.
126400 rules inserted. Base: 63542 rules (949 with conclusion selected). Queue: 3129 rules.
126600 rules inserted. Base: 63690 rules (949 with conclusion selected). Queue: 3200 rules.
126800 rules inserted. Base: 63840 rules (949 with conclusion selected). Queue: 3193 rules.
127000 rules inserted. Base: 63958 rules (949 with conclusion selected). Queue: 3173 rules.
127200 rules inserted. Base: 64030 rules (949 with conclusion selected). Queue: 3151 rules.
127400 rules inserted. Base: 64140 rules (949 with conclusion selected). Queue: 3083 rules.
127600 rules inserted. Base: 64244 rules (957 with conclusion selected). Queue: 2995 rules.
127800 rules inserted. Base: 64319 rules (965 with conclusion selected). Queue: 2934 rules.
128000 rules inserted. Base: 64408 rules (965 with conclusion selected). Queue: 2934 rules.
128200 rules inserted. Base: 64506 rules (965 with conclusion selected). Queue: 2934 rules.
128400 rules inserted. Base: 64526 rules (965 with conclusion selected). Queue: 2918 rules.
128600 rules inserted. Base: 64656 rules (965 with conclusion selected). Queue: 2918 rules.
128800 rules inserted. Base: 64809 rules (965 with conclusion selected). Queue: 2918 rules.
129000 rules inserted. Base: 64923 rules (965 with conclusion selected). Queue: 2886 rules.
129200 rules inserted. Base: 65000 rules (965 with conclusion selected). Queue: 2886 rules.
129400 rules inserted. Base: 65067 rules (965 with conclusion selected). Queue: 2882 rules.
129600 rules inserted. Base: 65128 rules (965 with conclusion selected). Queue: 2870 rules.
129800 rules inserted. Base: 65270 rules (965 with conclusion selected). Queue: 2870 rules.
130000 rules inserted. Base: 65396 rules (965 with conclusion selected). Queue: 2870 rules.
130200 rules inserted. Base: 65494 rules (965 with conclusion selected). Queue: 2810 rules.
130400 rules inserted. Base: 65580 rules (965 with conclusion selected). Queue: 2758 rules.
130600 rules inserted. Base: 65385 rules (965 with conclusion selected). Queue: 2750 rules.
130800 rules inserted. Base: 65358 rules (965 with conclusion selected). Queue: 2734 rules.
131000 rules inserted. Base: 65489 rules (965 with conclusion selected). Queue: 2728 rules.
131200 rules inserted. Base: 65615 rules (965 with conclusion selected). Queue: 2718 rules.
131400 rules inserted. Base: 65696 rules (965 with conclusion selected). Queue: 2706 rules.
131600 rules inserted. Base: 65773 rules (965 with conclusion selected). Queue: 2706 rules.
131800 rules inserted. Base: 65870 rules (965 with conclusion selected). Queue: 2706 rules.
132000 rules inserted. Base: 66020 rules (965 with conclusion selected). Queue: 2698 rules.
132200 rules inserted. Base: 66151 rules (965 with conclusion selected). Queue: 2692 rules.
132400 rules inserted. Base: 66245 rules (965 with conclusion selected). Queue: 2674 rules.
132600 rules inserted. Base: 66307 rules (965 with conclusion selected). Queue: 2674 rules.
132800 rules inserted. Base: 66397 rules (965 with conclusion selected). Queue: 2674 rules.
133000 rules inserted. Base: 66496 rules (965 with conclusion selected). Queue: 2617 rules.
133200 rules inserted. Base: 66592 rules (965 with conclusion selected). Queue: 2525 rules.
133400 rules inserted. Base: 66701 rules (965 with conclusion selected). Queue: 2416 rules.
133600 rules inserted. Base: 66776 rules (965 with conclusion selected). Queue: 2393 rules.
133800 rules inserted. Base: 66850 rules (965 with conclusion selected). Queue: 2383 rules.
134000 rules inserted. Base: 66901 rules (965 with conclusion selected). Queue: 2376 rules.
134200 rules inserted. Base: 67036 rules (965 with conclusion selected). Queue: 2369 rules.
134400 rules inserted. Base: 67164 rules (965 with conclusion selected). Queue: 2363 rules.
134600 rules inserted. Base: 67271 rules (965 with conclusion selected). Queue: 2355 rules.
134800 rules inserted. Base: 67351 rules (965 with conclusion selected). Queue: 2344 rules.
135000 rules inserted. Base: 67391 rules (965 with conclusion selected). Queue: 2334 rules.
135200 rules inserted. Base: 67516 rules (965 with conclusion selected). Queue: 2327 rules.
135400 rules inserted. Base: 67636 rules (965 with conclusion selected). Queue: 2321 rules.
135600 rules inserted. Base: 67769 rules (965 with conclusion selected). Queue: 2276 rules.
135800 rules inserted. Base: 67603 rules (965 with conclusion selected). Queue: 2208 rules.
136000 rules inserted. Base: 67597 rules (965 with conclusion selected). Queue: 2176 rules.
136200 rules inserted. Base: 67686 rules (965 with conclusion selected). Queue: 2148 rules.
136400 rules inserted. Base: 67772 rules (965 with conclusion selected). Queue: 2132 rules.
136600 rules inserted. Base: 67833 rules (965 with conclusion selected). Queue: 2120 rules.
136800 rules inserted. Base: 67918 rules (965 with conclusion selected). Queue: 2114 rules.
137000 rules inserted. Base: 68021 rules (965 with conclusion selected). Queue: 2088 rules.
137200 rules inserted. Base: 68110 rules (965 with conclusion selected). Queue: 2054 rules.
137400 rules inserted. Base: 68197 rules (965 with conclusion selected). Queue: 2038 rules.
137600 rules inserted. Base: 68257 rules (965 with conclusion selected). Queue: 2028 rules.
137800 rules inserted. Base: 68342 rules (965 with conclusion selected). Queue: 2020 rules.
138000 rules inserted. Base: 68229 rules (965 with conclusion selected). Queue: 1960 rules.
138200 rules inserted. Base: 68202 rules (965 with conclusion selected). Queue: 1892 rules.
138400 rules inserted. Base: 68282 rules (965 with conclusion selected). Queue: 1824 rules.
138600 rules inserted. Base: 68389 rules (965 with conclusion selected). Queue: 1806 rules.
138800 rules inserted. Base: 68481 rules (965 with conclusion selected). Queue: 1772 rules.
139000 rules inserted. Base: 68582 rules (965 with conclusion selected). Queue: 1727 rules.
139200 rules inserted. Base: 68666 rules (965 with conclusion selected). Queue: 1658 rules.
139400 rules inserted. Base: 68768 rules (965 with conclusion selected). Queue: 1616 rules.
139600 rules inserted. Base: 68862 rules (965 with conclusion selected). Queue: 1583 rules.
139800 rules inserted. Base: 68948 rules (965 with conclusion selected). Queue: 1548 rules.
140000 rules inserted. Base: 68733 rules (1029 with conclusion selected). Queue: 1954 rules.
140200 rules inserted. Base: 68819 rules (1029 with conclusion selected). Queue: 1904 rules.
140400 rules inserted. Base: 68931 rules (1029 with conclusion selected). Queue: 1852 rules.
140600 rules inserted. Base: 69014 rules (1029 with conclusion selected). Queue: 1781 rules.
140800 rules inserted. Base: 69104 rules (1029 with conclusion selected). Queue: 1834 rules.
141000 rules inserted. Base: 69215 rules (1029 with conclusion selected). Queue: 1790 rules.
141200 rules inserted. Base: 69303 rules (1029 with conclusion selected). Queue: 1722 rules.
141400 rules inserted. Base: 69361 rules (1029 with conclusion selected). Queue: 1662 rules.
141600 rules inserted. Base: 69363 rules (1037 with conclusion selected). Queue: 1644 rules.
141800 rules inserted. Base: 69563 rules (1037 with conclusion selected). Queue: 1530 rules.
142000 rules inserted. Base: 69763 rules (1037 with conclusion selected). Queue: 1402 rules.
142200 rules inserted. Base: 69951 rules (1037 with conclusion selected). Queue: 1298 rules.
142400 rules inserted. Base: 70039 rules (1037 with conclusion selected). Queue: 1246 rules.
142600 rules inserted. Base: 70211 rules (1037 with conclusion selected). Queue: 1296 rules.
142800 rules inserted. Base: 70411 rules (1037 with conclusion selected). Queue: 1186 rules.
143000 rules inserted. Base: 70491 rules (1037 with conclusion selected). Queue: 1142 rules.
143200 rules inserted. Base: 70475 rules (1041 with conclusion selected). Queue: 1111 rules.
143400 rules inserted. Base: 70675 rules (1041 with conclusion selected). Queue: 957 rules.
143600 rules inserted. Base: 70875 rules (1041 with conclusion selected). Queue: 868 rules.
143800 rules inserted. Base: 71059 rules (1041 with conclusion selected). Queue: 769 rules.
144000 rules inserted. Base: 71255 rules (1041 with conclusion selected). Queue: 707 rules.
144200 rules inserted. Base: 71431 rules (1041 with conclusion selected). Queue: 565 rules.
144400 rules inserted. Base: 71615 rules (1045 with conclusion selected). Queue: 595 rules.
144600 rules inserted. Base: 71794 rules (1045 with conclusion selected). Queue: 523 rules.
144800 rules inserted. Base: 71954 rules (1045 with conclusion selected). Queue: 486 rules.
145000 rules inserted. Base: 72101 rules (1045 with conclusion selected). Queue: 482 rules.
145200 rules inserted. Base: 72253 rules (1045 with conclusion selected). Queue: 482 rules.
145400 rules inserted. Base: 72420 rules (1045 with conclusion selected). Queue: 397 rules.
145600 rules inserted. Base: 72540 rules (1045 with conclusion selected). Queue: 395 rules.
145800 rules inserted. Base: 72677 rules (1045 with conclusion selected). Queue: 377 rules.
146000 rules inserted. Base: 72795 rules (1045 with conclusion selected). Queue: 617 rules.
146200 rules inserted. Base: 72945 rules (1045 with conclusion selected). Queue: 776 rules.
146400 rules inserted. Base: 73124 rules (1045 with conclusion selected). Queue: 752 rules.
146600 rules inserted. Base: 73102 rules (1045 with conclusion selected). Queue: 928 rules.
146800 rules inserted. Base: 73277 rules (1045 with conclusion selected). Queue: 900 rules.
147000 rules inserted. Base: 73402 rules (1045 with conclusion selected). Queue: 1008 rules.
147200 rules inserted. Base: 73521 rules (1045 with conclusion selected). Queue: 936 rules.
147400 rules inserted. Base: 73703 rules (1045 with conclusion selected). Queue: 936 rules.
147600 rules inserted. Base: 73733 rules (1049 with conclusion selected). Queue: 858 rules.
147800 rules inserted. Base: 73858 rules (1049 with conclusion selected). Queue: 786 rules.
148000 rules inserted. Base: 74021 rules (1049 with conclusion selected). Queue: 762 rules.
148200 rules inserted. Base: 74133 rules (1049 with conclusion selected). Queue: 674 rules.
148400 rules inserted. Base: 74239 rules (1049 with conclusion selected). Queue: 574 rules.
148600 rules inserted. Base: 74334 rules (1049 with conclusion selected). Queue: 502 rules.
148800 rules inserted. Base: 74457 rules (1049 with conclusion selected). Queue: 390 rules.
149000 rules inserted. Base: 74427 rules (1057 with conclusion selected). Queue: 440 rules.
149200 rules inserted. Base: 74387 rules (1057 with conclusion selected). Queue: 443 rules.
149400 rules inserted. Base: 74513 rules (1057 with conclusion selected). Queue: 443 rules.
149600 rules inserted. Base: 74519 rules (1061 with conclusion selected). Queue: 554 rules.
149800 rules inserted. Base: 74465 rules (1065 with conclusion selected). Queue: 503 rules.
150000 rules inserted. Base: 74529 rules (1067 with conclusion selected). Queue: 506 rules.
150200 rules inserted. Base: 74421 rules (1067 with conclusion selected). Queue: 510 rules.
150400 rules inserted. Base: 74463 rules (1071 with conclusion selected). Queue: 476 rules.
150600 rules inserted. Base: 74523 rules (1073 with conclusion selected). Queue: 388 rules.
150800 rules inserted. Base: 74227 rules (1073 with conclusion selected). Queue: 395 rules.
151000 rules inserted. Base: 73969 rules (1075 with conclusion selected). Queue: 394 rules.
151200 rules inserted. Base: 73657 rules (1075 with conclusion selected). Queue: 362 rules.
151400 rules inserted. Base: 73440 rules (1077 with conclusion selected). Queue: 392 rules.
151600 rules inserted. Base: 73351 rules (1087 with conclusion selected). Queue: 630 rules.
151800 rules inserted. Base: 73406 rules (1095 with conclusion selected). Queue: 743 rules.
152000 rules inserted. Base: 73385 rules (1095 with conclusion selected). Queue: 700 rules.
152200 rules inserted. Base: 73513 rules (1097 with conclusion selected). Queue: 738 rules.
152400 rules inserted. Base: 73415 rules (1099 with conclusion selected). Queue: 710 rules.
152600 rules inserted. Base: 73547 rules (1109 with conclusion selected). Queue: 906 rules.
152800 rules inserted. Base: 73550 rules (1116 with conclusion selected). Queue: 772 rules.
153000 rules inserted. Base: 73678 rules (1118 with conclusion selected). Queue: 792 rules.
153200 rules inserted. Base: 73866 rules (1135 with conclusion selected). Queue: 927 rules.
153400 rules inserted. Base: 73873 rules (1135 with conclusion selected). Queue: 880 rules.
153600 rules inserted. Base: 74009 rules (1144 with conclusion selected). Queue: 1128 rules.
153800 rules inserted. Base: 74151 rules (1147 with conclusion selected). Queue: 1130 rules.
154000 rules inserted. Base: 74301 rules (1147 with conclusion selected). Queue: 1114 rules.
154200 rules inserted. Base: 74479 rules (1159 with conclusion selected). Queue: 1263 rules.
154400 rules inserted. Base: 74531 rules (1167 with conclusion selected). Queue: 1260 rules.
154600 rules inserted. Base: 74707 rules (1167 with conclusion selected). Queue: 1213 rules.
154800 rules inserted. Base: 74815 rules (1167 with conclusion selected). Queue: 1170 rules.
155000 rules inserted. Base: 74947 rules (1169 with conclusion selected). Queue: 1214 rules.
155200 rules inserted. Base: 75147 rules (1177 with conclusion selected). Queue: 1025 rules.
155400 rules inserted. Base: 75183 rules (1181 with conclusion selected). Queue: 1122 rules.
155600 rules inserted. Base: 75368 rules (1184 with conclusion selected). Queue: 1078 rules.
155800 rules inserted. Base: 75567 rules (1193 with conclusion selected). Queue: 921 rules.
156000 rules inserted. Base: 75719 rules (1193 with conclusion selected). Queue: 780 rules.
156200 rules inserted. Base: 75814 rules (1193 with conclusion selected). Queue: 739 rules.
156400 rules inserted. Base: 75991 rules (1199 with conclusion selected). Queue: 688 rules.
156600 rules inserted. Base: 76165 rules (1206 with conclusion selected). Queue: 528 rules.
156800 rules inserted. Base: 76251 rules (1209 with conclusion selected). Queue: 446 rules.
157000 rules inserted. Base: 76353 rules (1211 with conclusion selected). Queue: 348 rules.
157200 rules inserted. Base: 76447 rules (1216 with conclusion selected). Queue: 442 rules.
157400 rules inserted. Base: 76627 rules (1220 with conclusion selected). Queue: 514 rules.
157600 rules inserted. Base: 76523 rules (1225 with conclusion selected). Queue: 772 rules.
157800 rules inserted. Base: 76375 rules (1229 with conclusion selected). Queue: 1000 rules.
158000 rules inserted. Base: 76460 rules (1229 with conclusion selected). Queue: 987 rules.
158200 rules inserted. Base: 76648 rules (1232 with conclusion selected). Queue: 1038 rules.
158400 rules inserted. Base: 76847 rules (1233 with conclusion selected). Queue: 910 rules.
158600 rules inserted. Base: 76804 rules (1238 with conclusion selected). Queue: 1072 rules.
158800 rules inserted. Base: 76995 rules (1241 with conclusion selected). Queue: 1070 rules.
159000 rules inserted. Base: 76958 rules (1246 with conclusion selected). Queue: 1120 rules.
159200 rules inserted. Base: 77089 rules (1248 with conclusion selected). Queue: 1120 rules.
159400 rules inserted. Base: 77220 rules (1250 with conclusion selected). Queue: 1112 rules.
159600 rules inserted. Base: 77405 rules (1254 with conclusion selected). Queue: 1208 rules.
159800 rules inserted. Base: 77511 rules (1257 with conclusion selected). Queue: 1208 rules.
160000 rules inserted. Base: 77668 rules (1259 with conclusion selected). Queue: 1241 rules.
160200 rules inserted. Base: 77833 rules (1263 with conclusion selected). Queue: 1390 rules.
160400 rules inserted. Base: 77967 rules (1265 with conclusion selected). Queue: 1450 rules.
160600 rules inserted. Base: 78100 rules (1268 with conclusion selected). Queue: 1420 rules.
160800 rules inserted. Base: 78212 rules (1270 with conclusion selected). Queue: 1483 rules.
161000 rules inserted. Base: 78362 rules (1273 with conclusion selected). Queue: 1576 rules.
161200 rules inserted. Base: 78505 rules (1275 with conclusion selected). Queue: 1544 rules.
161400 rules inserted. Base: 78609 rules (1277 with conclusion selected). Queue: 1544 rules.
161600 rules inserted. Base: 78708 rules (1277 with conclusion selected). Queue: 1509 rules.
161800 rules inserted. Base: 78809 rules (1277 with conclusion selected). Queue: 1472 rules.
162000 rules inserted. Base: 78935 rules (1279 with conclusion selected). Queue: 1522 rules.
162200 rules inserted. Base: 79087 rules (1281 with conclusion selected). Queue: 1572 rules.
162400 rules inserted. Base: 79175 rules (1281 with conclusion selected). Queue: 1524 rules.
162600 rules inserted. Base: 79274 rules (1281 with conclusion selected). Queue: 1487 rules.
162800 rules inserted. Base: 79407 rules (1284 with conclusion selected). Queue: 1601 rules.
163000 rules inserted. Base: 79567 rules (1285 with conclusion selected). Queue: 1546 rules.
163200 rules inserted. Base: 79705 rules (1285 with conclusion selected). Queue: 1408 rules.
163400 rules inserted. Base: 79820 rules (1285 with conclusion selected). Queue: 1325 rules.
163600 rules inserted. Base: 79920 rules (1285 with conclusion selected). Queue: 1289 rules.
163800 rules inserted. Base: 80047 rules (1285 with conclusion selected). Queue: 1194 rules.
164000 rules inserted. Base: 80185 rules (1285 with conclusion selected). Queue: 1056 rules.
164200 rules inserted. Base: 80300 rules (1285 with conclusion selected). Queue: 973 rules.
164400 rules inserted. Base: 80400 rules (1285 with conclusion selected). Queue: 937 rules.
164600 rules inserted. Base: 80527 rules (1285 with conclusion selected). Queue: 842 rules.
164800 rules inserted. Base: 80697 rules (1285 with conclusion selected). Queue: 672 rules.
165000 rules inserted. Base: 80831 rules (1285 with conclusion selected). Queue: 538 rules.
165200 rules inserted. Base: 81007 rules (1285 with conclusion selected). Queue: 362 rules.
165400 rules inserted. Base: 81159 rules (1285 with conclusion selected). Queue: 210 rules.
165600 rules inserted. Base: 81335 rules (1285 with conclusion selected). Queue: 34 rules.
Starting query inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_160,m_161,m_162,m_163,m_vpr)) && inj-event(verifierInConeOfUser(m_160,m_161,m_162,m_163))
RESULT inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_160,m_161,m_162,m_163,m_vpr)) && inj-event(verifierInConeOfUser(m_160,m_161,m_162,m_163)) is true.
-- Query inj-event(auth_AppCompletesProtocol(m_160,m_161,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_162,m_163,m_164,m_165,m_166,m_167)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_164,m_168,m_169,m_170,m_165,m_166,m_167)) && inj-event(auth_UserSendsLastMessageToApp(m_160,m_161,m_162,m_163)) && inj-event(auth_TTPInConeOfApp(m_168,m_169)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (151 with conclusion selected). Queue: 636 rules.
400 rules inserted. Base: 400 rules (152 with conclusion selected). Queue: 730 rules.
600 rules inserted. Base: 600 rules (152 with conclusion selected). Queue: 764 rules.
800 rules inserted. Base: 799 rules (157 with conclusion selected). Queue: 755 rules.
1000 rules inserted. Base: 999 rules (159 with conclusion selected). Queue: 731 rules.
1200 rules inserted. Base: 1199 rules (159 with conclusion selected). Queue: 699 rules.
1400 rules inserted. Base: 1367 rules (159 with conclusion selected). Queue: 686 rules.
1600 rules inserted. Base: 1529 rules (161 with conclusion selected). Queue: 682 rules.
1800 rules inserted. Base: 1687 rules (161 with conclusion selected). Queue: 752 rules.
2000 rules inserted. Base: 1853 rules (161 with conclusion selected). Queue: 794 rules.
2200 rules inserted. Base: 2005 rules (161 with conclusion selected). Queue: 794 rules.
2400 rules inserted. Base: 2131 rules (193 with conclusion selected). Queue: 1226 rules.
2600 rules inserted. Base: 2219 rules (223 with conclusion selected). Queue: 1270 rules.
2800 rules inserted. Base: 2339 rules (225 with conclusion selected). Queue: 1297 rules.
3000 rules inserted. Base: 2539 rules (225 with conclusion selected). Queue: 1350 rules.
3200 rules inserted. Base: 2727 rules (227 with conclusion selected). Queue: 1348 rules.
3400 rules inserted. Base: 2895 rules (227 with conclusion selected). Queue: 1396 rules.
3600 rules inserted. Base: 3063 rules (227 with conclusion selected). Queue: 1435 rules.
3800 rules inserted. Base: 3263 rules (231 with conclusion selected). Queue: 1488 rules.
4000 rules inserted. Base: 3410 rules (231 with conclusion selected). Queue: 1524 rules.
4200 rules inserted. Base: 3468 rules (231 with conclusion selected). Queue: 1524 rules.
4400 rules inserted. Base: 3571 rules (233 with conclusion selected). Queue: 1602 rules.
4600 rules inserted. Base: 3736 rules (233 with conclusion selected). Queue: 1582 rules.
4800 rules inserted. Base: 3898 rules (233 with conclusion selected). Queue: 1563 rules.
5000 rules inserted. Base: 4045 rules (233 with conclusion selected). Queue: 1520 rules.
5200 rules inserted. Base: 4158 rules (235 with conclusion selected). Queue: 1628 rules.
5400 rules inserted. Base: 4273 rules (237 with conclusion selected). Queue: 1740 rules.
5600 rules inserted. Base: 4422 rules (237 with conclusion selected). Queue: 1604 rules.
5800 rules inserted. Base: 4584 rules (237 with conclusion selected). Queue: 1580 rules.
6000 rules inserted. Base: 4759 rules (237 with conclusion selected). Queue: 1856 rules.
6200 rules inserted. Base: 4952 rules (237 with conclusion selected). Queue: 1858 rules.
6400 rules inserted. Base: 5123 rules (237 with conclusion selected). Queue: 1849 rules.
6600 rules inserted. Base: 5284 rules (237 with conclusion selected). Queue: 1882 rules.
6800 rules inserted. Base: 5403 rules (237 with conclusion selected). Queue: 1937 rules.
7000 rules inserted. Base: 5528 rules (237 with conclusion selected). Queue: 1927 rules.
7200 rules inserted. Base: 5658 rules (237 with conclusion selected). Queue: 2090 rules.
7400 rules inserted. Base: 5687 rules (237 with conclusion selected). Queue: 2314 rules.
7600 rules inserted. Base: 5731 rules (237 with conclusion selected). Queue: 2336 rules.
7800 rules inserted. Base: 5906 rules (237 with conclusion selected). Queue: 2322 rules.
8000 rules inserted. Base: 5963 rules (237 with conclusion selected). Queue: 2265 rules.
8200 rules inserted. Base: 6056 rules (237 with conclusion selected). Queue: 2214 rules.
8400 rules inserted. Base: 6117 rules (237 with conclusion selected). Queue: 2162 rules.
8600 rules inserted. Base: 6279 rules (237 with conclusion selected). Queue: 2091 rules.
8800 rules inserted. Base: 6377 rules (237 with conclusion selected). Queue: 2048 rules.
9000 rules inserted. Base: 6529 rules (237 with conclusion selected). Queue: 2012 rules.
9200 rules inserted. Base: 6564 rules (237 with conclusion selected). Queue: 2016 rules.
9400 rules inserted. Base: 6576 rules (237 with conclusion selected). Queue: 2040 rules.
9600 rules inserted. Base: 6582 rules (237 with conclusion selected). Queue: 2052 rules.
9800 rules inserted. Base: 6582 rules (237 with conclusion selected). Queue: 2052 rules.
10000 rules inserted. Base: 6650 rules (237 with conclusion selected). Queue: 2052 rules.
10200 rules inserted. Base: 6763 rules (237 with conclusion selected). Queue: 2052 rules.
10400 rules inserted. Base: 6881 rules (237 with conclusion selected). Queue: 2052 rules.
10600 rules inserted. Base: 6974 rules (237 with conclusion selected). Queue: 2052 rules.
10800 rules inserted. Base: 7056 rules (237 with conclusion selected). Queue: 2050 rules.
11000 rules inserted. Base: 7138 rules (237 with conclusion selected). Queue: 2048 rules.
11200 rules inserted. Base: 7138 rules (237 with conclusion selected). Queue: 2048 rules.
11400 rules inserted. Base: 7138 rules (237 with conclusion selected). Queue: 2048 rules.
11600 rules inserted. Base: 7139 rules (237 with conclusion selected). Queue: 2044 rules.
11800 rules inserted. Base: 7157 rules (237 with conclusion selected). Queue: 2072 rules.
12000 rules inserted. Base: 7251 rules (243 with conclusion selected). Queue: 2049 rules.
12200 rules inserted. Base: 7339 rules (243 with conclusion selected). Queue: 1977 rules.
12400 rules inserted. Base: 7477 rules (243 with conclusion selected). Queue: 1833 rules.
12600 rules inserted. Base: 7608 rules (243 with conclusion selected). Queue: 1681 rules.
12800 rules inserted. Base: 7600 rules (250 with conclusion selected). Queue: 1773 rules.
13000 rules inserted. Base: 7639 rules (250 with conclusion selected). Queue: 1751 rules.
13200 rules inserted. Base: 7598 rules (257 with conclusion selected). Queue: 1735 rules.
13400 rules inserted. Base: 7515 rules (263 with conclusion selected). Queue: 1736 rules.
13600 rules inserted. Base: 7424 rules (268 with conclusion selected). Queue: 1742 rules.
13800 rules inserted. Base: 7619 rules (269 with conclusion selected). Queue: 1544 rules.
14000 rules inserted. Base: 7819 rules (290 with conclusion selected). Queue: 1390 rules.
14200 rules inserted. Base: 8011 rules (295 with conclusion selected). Queue: 1454 rules.
14400 rules inserted. Base: 8211 rules (311 with conclusion selected). Queue: 1587 rules.
14600 rules inserted. Base: 8305 rules (312 with conclusion selected). Queue: 1558 rules.
14800 rules inserted. Base: 8395 rules (317 with conclusion selected). Queue: 1491 rules.
15000 rules inserted. Base: 8595 rules (332 with conclusion selected). Queue: 1459 rules.
15200 rules inserted. Base: 8795 rules (348 with conclusion selected). Queue: 1609 rules.
15400 rules inserted. Base: 8993 rules (375 with conclusion selected). Queue: 2340 rules.
15600 rules inserted. Base: 9009 rules (376 with conclusion selected). Queue: 2371 rules.
15800 rules inserted. Base: 9159 rules (377 with conclusion selected). Queue: 2424 rules.
16000 rules inserted. Base: 9344 rules (379 with conclusion selected). Queue: 2599 rules.
16200 rules inserted. Base: 9363 rules (379 with conclusion selected). Queue: 2612 rules.
16400 rules inserted. Base: 9524 rules (386 with conclusion selected). Queue: 3061 rules.
16600 rules inserted. Base: 9720 rules (389 with conclusion selected). Queue: 3266 rules.
16800 rules inserted. Base: 9916 rules (392 with conclusion selected). Queue: 3471 rules.
17000 rules inserted. Base: 10112 rules (395 with conclusion selected). Queue: 3676 rules.
17200 rules inserted. Base: 10307 rules (398 with conclusion selected). Queue: 4000 rules.
17400 rules inserted. Base: 10391 rules (400 with conclusion selected). Queue: 4312 rules.
17600 rules inserted. Base: 10530 rules (405 with conclusion selected). Queue: 4924 rules.
17800 rules inserted. Base: 10556 rules (407 with conclusion selected). Queue: 5077 rules.
18000 rules inserted. Base: 10572 rules (407 with conclusion selected). Queue: 5069 rules.
18200 rules inserted. Base: 10754 rules (408 with conclusion selected). Queue: 5182 rules.
18400 rules inserted. Base: 10816 rules (408 with conclusion selected). Queue: 5178 rules.
18600 rules inserted. Base: 10982 rules (409 with conclusion selected). Queue: 5359 rules.
18800 rules inserted. Base: 11166 rules (409 with conclusion selected). Queue: 5171 rules.
19000 rules inserted. Base: 11331 rules (411 with conclusion selected). Queue: 5410 rules.
19200 rules inserted. Base: 11416 rules (413 with conclusion selected). Queue: 5545 rules.
19400 rules inserted. Base: 11486 rules (413 with conclusion selected). Queue: 5539 rules.
19600 rules inserted. Base: 11648 rules (415 with conclusion selected). Queue: 5879 rules.
19800 rules inserted. Base: 11739 rules (417 with conclusion selected). Queue: 6046 rules.
20000 rules inserted. Base: 11905 rules (418 with conclusion selected). Queue: 6213 rules.
20200 rules inserted. Base: 11996 rules (420 with conclusion selected). Queue: 6380 rules.
20400 rules inserted. Base: 12162 rules (421 with conclusion selected). Queue: 6547 rules.
20600 rules inserted. Base: 12253 rules (423 with conclusion selected). Queue: 6714 rules.
20800 rules inserted. Base: 12419 rules (424 with conclusion selected). Queue: 6881 rules.
21000 rules inserted. Base: 12510 rules (426 with conclusion selected). Queue: 7048 rules.
21200 rules inserted. Base: 12557 rules (426 with conclusion selected). Queue: 7072 rules.
21400 rules inserted. Base: 12600 rules (426 with conclusion selected). Queue: 7096 rules.
21600 rules inserted. Base: 12693 rules (426 with conclusion selected). Queue: 7064 rules.
21800 rules inserted. Base: 12749 rules (426 with conclusion selected). Queue: 7064 rules.
22000 rules inserted. Base: 12790 rules (427 with conclusion selected). Queue: 7071 rules.
22200 rules inserted. Base: 12830 rules (427 with conclusion selected). Queue: 7111 rules.
22400 rules inserted. Base: 12870 rules (427 with conclusion selected). Queue: 7111 rules.
22600 rules inserted. Base: 12942 rules (427 with conclusion selected). Queue: 7079 rules.
22800 rules inserted. Base: 12983 rules (428 with conclusion selected). Queue: 7078 rules.
23000 rules inserted. Base: 12983 rules (428 with conclusion selected). Queue: 7078 rules.
23200 rules inserted. Base: 13054 rules (428 with conclusion selected). Queue: 7078 rules.
23400 rules inserted. Base: 13164 rules (428 with conclusion selected). Queue: 7088 rules.
23600 rules inserted. Base: 13238 rules (428 with conclusion selected). Queue: 7088 rules.
23800 rules inserted. Base: 13272 rules (428 with conclusion selected). Queue: 7098 rules.
24000 rules inserted. Base: 13325 rules (428 with conclusion selected). Queue: 7097 rules.
24200 rules inserted. Base: 13386 rules (428 with conclusion selected). Queue: 7129 rules.
24400 rules inserted. Base: 13476 rules (428 with conclusion selected). Queue: 7129 rules.
24600 rules inserted. Base: 13538 rules (428 with conclusion selected). Queue: 7129 rules.
24800 rules inserted. Base: 13632 rules (429 with conclusion selected). Queue: 7096 rules.
25000 rules inserted. Base: 13694 rules (429 with conclusion selected). Queue: 7106 rules.
25200 rules inserted. Base: 13750 rules (430 with conclusion selected). Queue: 7116 rules.
25400 rules inserted. Base: 13787 rules (430 with conclusion selected). Queue: 7148 rules.
25600 rules inserted. Base: 13877 rules (430 with conclusion selected). Queue: 7116 rules.
25800 rules inserted. Base: 13935 rules (430 with conclusion selected). Queue: 7130 rules.
26000 rules inserted. Base: 14008 rules (431 with conclusion selected). Queue: 7147 rules.
26200 rules inserted. Base: 14088 rules (431 with conclusion selected). Queue: 7131 rules.
26400 rules inserted. Base: 14150 rules (431 with conclusion selected). Queue: 7143 rules.
26600 rules inserted. Base: 14220 rules (432 with conclusion selected). Queue: 7142 rules.
26800 rules inserted. Base: 14261 rules (432 with conclusion selected). Queue: 7174 rules.
27000 rules inserted. Base: 14383 rules (432 with conclusion selected). Queue: 7142 rules.
27200 rules inserted. Base: 14441 rules (432 with conclusion selected). Queue: 7156 rules.
27400 rules inserted. Base: 14504 rules (433 with conclusion selected). Queue: 7155 rules.
27600 rules inserted. Base: 14546 rules (433 with conclusion selected). Queue: 7187 rules.
27800 rules inserted. Base: 14636 rules (433 with conclusion selected). Queue: 7155 rules.
28000 rules inserted. Base: 14694 rules (433 with conclusion selected). Queue: 7169 rules.
28200 rules inserted. Base: 14783 rules (434 with conclusion selected). Queue: 7136 rules.
28400 rules inserted. Base: 14854 rules (434 with conclusion selected). Queue: 7104 rules.
28600 rules inserted. Base: 14925 rules (434 with conclusion selected). Queue: 7072 rules.
28800 rules inserted. Base: 14954 rules (434 with conclusion selected). Queue: 7058 rules.
29000 rules inserted. Base: 15046 rules (434 with conclusion selected). Queue: 7008 rules.
29200 rules inserted. Base: 15114 rules (434 with conclusion selected). Queue: 6976 rules.
29400 rules inserted. Base: 15182 rules (434 with conclusion selected). Queue: 6947 rules.
29600 rules inserted. Base: 15240 rules (434 with conclusion selected). Queue: 6944 rules.
29800 rules inserted. Base: 15312 rules (434 with conclusion selected). Queue: 6912 rules.
30000 rules inserted. Base: 15311 rules (434 with conclusion selected). Queue: 6912 rules.
30200 rules inserted. Base: 15394 rules (438 with conclusion selected). Queue: 7005 rules.
30400 rules inserted. Base: 15431 rules (438 with conclusion selected). Queue: 7005 rules.
30600 rules inserted. Base: 15455 rules (438 with conclusion selected). Queue: 7003 rules.
30800 rules inserted. Base: 15561 rules (438 with conclusion selected). Queue: 6971 rules.
31000 rules inserted. Base: 15590 rules (466 with conclusion selected). Queue: 7172 rules.
31200 rules inserted. Base: 15650 rules (470 with conclusion selected). Queue: 7169 rules.
31400 rules inserted. Base: 15750 rules (470 with conclusion selected). Queue: 7137 rules.
31600 rules inserted. Base: 15803 rules (471 with conclusion selected). Queue: 7137 rules.
31800 rules inserted. Base: 15875 rules (471 with conclusion selected). Queue: 7105 rules.
32000 rules inserted. Base: 15923 rules (471 with conclusion selected). Queue: 7105 rules.
32200 rules inserted. Base: 16029 rules (471 with conclusion selected). Queue: 7073 rules.
32400 rules inserted. Base: 16135 rules (473 with conclusion selected). Queue: 7054 rules.
32600 rules inserted. Base: 16222 rules (473 with conclusion selected). Queue: 7054 rules.
32800 rules inserted. Base: 16316 rules (473 with conclusion selected). Queue: 7022 rules.
33000 rules inserted. Base: 16394 rules (473 with conclusion selected). Queue: 7033 rules.
33200 rules inserted. Base: 16463 rules (473 with conclusion selected). Queue: 7004 rules.
33400 rules inserted. Base: 16573 rules (473 with conclusion selected). Queue: 7004 rules.
33600 rules inserted. Base: 16677 rules (473 with conclusion selected). Queue: 6972 rules.
33800 rules inserted. Base: 16774 rules (473 with conclusion selected). Queue: 6954 rules.
34000 rules inserted. Base: 16817 rules (473 with conclusion selected). Queue: 6954 rules.
34200 rules inserted. Base: 16901 rules (473 with conclusion selected). Queue: 6954 rules.
34400 rules inserted. Base: 17005 rules (473 with conclusion selected). Queue: 6922 rules.
34600 rules inserted. Base: 17119 rules (473 with conclusion selected). Queue: 6904 rules.
34800 rules inserted. Base: 17181 rules (473 with conclusion selected). Queue: 6904 rules.
35000 rules inserted. Base: 17256 rules (473 with conclusion selected). Queue: 6904 rules.
35200 rules inserted. Base: 17350 rules (473 with conclusion selected). Queue: 6872 rules.
35400 rules inserted. Base: 17403 rules (474 with conclusion selected). Queue: 6872 rules.
35600 rules inserted. Base: 17472 rules (475 with conclusion selected). Queue: 6872 rules.
35800 rules inserted. Base: 17531 rules (476 with conclusion selected). Queue: 6842 rules.
36000 rules inserted. Base: 17629 rules (476 with conclusion selected). Queue: 6784 rules.
36200 rules inserted. Base: 17693 rules (478 with conclusion selected). Queue: 6784 rules.
36400 rules inserted. Base: 17749 rules (479 with conclusion selected). Queue: 6784 rules.
36600 rules inserted. Base: 17821 rules (480 with conclusion selected). Queue: 6736 rules.
36800 rules inserted. Base: 17901 rules (481 with conclusion selected). Queue: 6696 rules.
37000 rules inserted. Base: 17936 rules (486 with conclusion selected). Queue: 6796 rules.
37200 rules inserted. Base: 18136 rules (493 with conclusion selected). Queue: 6978 rules.
37400 rules inserted. Base: 18187 rules (496 with conclusion selected). Queue: 7067 rules.
37600 rules inserted. Base: 18276 rules (525 with conclusion selected). Queue: 7342 rules.
37800 rules inserted. Base: 18387 rules (525 with conclusion selected). Queue: 7449 rules.
38000 rules inserted. Base: 18486 rules (525 with conclusion selected). Queue: 7517 rules.
38200 rules inserted. Base: 18578 rules (541 with conclusion selected). Queue: 7734 rules.
38400 rules inserted. Base: 18643 rules (557 with conclusion selected). Queue: 7976 rules.
38600 rules inserted. Base: 18713 rules (558 with conclusion selected). Queue: 7976 rules.
38800 rules inserted. Base: 18810 rules (560 with conclusion selected). Queue: 7894 rules.
39000 rules inserted. Base: 18865 rules (560 with conclusion selected). Queue: 7887 rules.
39200 rules inserted. Base: 19027 rules (560 with conclusion selected). Queue: 7799 rules.
39400 rules inserted. Base: 19115 rules (561 with conclusion selected). Queue: 7798 rules.
39600 rules inserted. Base: 19169 rules (562 with conclusion selected). Queue: 7798 rules.
39800 rules inserted. Base: 19294 rules (563 with conclusion selected). Queue: 7710 rules.
40000 rules inserted. Base: 19373 rules (563 with conclusion selected). Queue: 7710 rules.
40200 rules inserted. Base: 19445 rules (563 with conclusion selected). Queue: 7710 rules.
40400 rules inserted. Base: 19526 rules (565 with conclusion selected). Queue: 7703 rules.
40600 rules inserted. Base: 19679 rules (565 with conclusion selected). Queue: 7622 rules.
40800 rules inserted. Base: 19775 rules (565 with conclusion selected). Queue: 7622 rules.
41000 rules inserted. Base: 19833 rules (566 with conclusion selected). Queue: 7622 rules.
41200 rules inserted. Base: 19958 rules (567 with conclusion selected). Queue: 7534 rules.
41400 rules inserted. Base: 20036 rules (567 with conclusion selected). Queue: 7534 rules.
41600 rules inserted. Base: 20105 rules (567 with conclusion selected). Queue: 7534 rules.
41800 rules inserted. Base: 20190 rules (569 with conclusion selected). Queue: 7523 rules.
42000 rules inserted. Base: 20339 rules (569 with conclusion selected). Queue: 7446 rules.
42200 rules inserted. Base: 20410 rules (569 with conclusion selected). Queue: 7399 rules.
42400 rules inserted. Base: 20552 rules (570 with conclusion selected). Queue: 7257 rules.
42600 rules inserted. Base: 20678 rules (572 with conclusion selected). Queue: 7131 rules.
42800 rules inserted. Base: 20771 rules (573 with conclusion selected). Queue: 7038 rules.
43000 rules inserted. Base: 20884 rules (574 with conclusion selected). Queue: 6925 rules.
43200 rules inserted. Base: 21008 rules (575 with conclusion selected). Queue: 6801 rules.
43400 rules inserted. Base: 21096 rules (576 with conclusion selected). Queue: 6713 rules.
43600 rules inserted. Base: 21224 rules (580 with conclusion selected). Queue: 6654 rules.
43800 rules inserted. Base: 21424 rules (585 with conclusion selected). Queue: 6660 rules.
44000 rules inserted. Base: 21620 rules (585 with conclusion selected). Queue: 6472 rules.
44200 rules inserted. Base: 21717 rules (585 with conclusion selected). Queue: 6408 rules.
44400 rules inserted. Base: 21842 rules (585 with conclusion selected). Queue: 6288 rules.
44600 rules inserted. Base: 21925 rules (585 with conclusion selected). Queue: 6479 rules.
44800 rules inserted. Base: 22005 rules (585 with conclusion selected). Queue: 6455 rules.
45000 rules inserted. Base: 22055 rules (585 with conclusion selected). Queue: 6444 rules.
45200 rules inserted. Base: 22104 rules (585 with conclusion selected). Queue: 6422 rules.
45400 rules inserted. Base: 22187 rules (585 with conclusion selected). Queue: 6574 rules.
45600 rules inserted. Base: 22252 rules (585 with conclusion selected). Queue: 6577 rules.
45800 rules inserted. Base: 22312 rules (585 with conclusion selected). Queue: 6559 rules.
46000 rules inserted. Base: 22372 rules (585 with conclusion selected). Queue: 6569 rules.
46200 rules inserted. Base: 22437 rules (585 with conclusion selected). Queue: 6552 rules.
46400 rules inserted. Base: 22558 rules (585 with conclusion selected). Queue: 6439 rules.
46600 rules inserted. Base: 22700 rules (586 with conclusion selected). Queue: 6327 rules.
46800 rules inserted. Base: 22788 rules (587 with conclusion selected). Queue: 6254 rules.
47000 rules inserted. Base: 22876 rules (587 with conclusion selected). Queue: 6208 rules.
47200 rules inserted. Base: 23004 rules (587 with conclusion selected). Queue: 6113 rules.
47400 rules inserted. Base: 23116 rules (588 with conclusion selected). Queue: 6001 rules.
47600 rules inserted. Base: 23158 rules (589 with conclusion selected). Queue: 5979 rules.
47800 rules inserted. Base: 23247 rules (589 with conclusion selected). Queue: 5908 rules.
48000 rules inserted. Base: 23368 rules (590 with conclusion selected). Queue: 5787 rules.
48200 rules inserted. Base: 23400 rules (591 with conclusion selected). Queue: 5775 rules.
48400 rules inserted. Base: 23499 rules (591 with conclusion selected). Queue: 5694 rules.
48600 rules inserted. Base: 23620 rules (592 with conclusion selected). Queue: 5573 rules.
48800 rules inserted. Base: 23645 rules (593 with conclusion selected). Queue: 5568 rules.
49000 rules inserted. Base: 23751 rules (593 with conclusion selected). Queue: 5480 rules.
49200 rules inserted. Base: 23872 rules (594 with conclusion selected). Queue: 5359 rules.
49400 rules inserted. Base: 23897 rules (595 with conclusion selected). Queue: 5354 rules.
49600 rules inserted. Base: 23989 rules (595 with conclusion selected). Queue: 5262 rules.
49800 rules inserted. Base: 24029 rules (595 with conclusion selected). Queue: 5222 rules.
50000 rules inserted. Base: 24045 rules (595 with conclusion selected). Queue: 5206 rules.
50200 rules inserted. Base: 24168 rules (595 with conclusion selected). Queue: 5084 rules.
50400 rules inserted. Base: 24362 rules (595 with conclusion selected). Queue: 4899 rules.
50600 rules inserted. Base: 24453 rules (595 with conclusion selected). Queue: 4842 rules.
50800 rules inserted. Base: 24467 rules (595 with conclusion selected). Queue: 4838 rules.
51000 rules inserted. Base: 24484 rules (595 with conclusion selected). Queue: 4844 rules.
51200 rules inserted. Base: 24538 rules (595 with conclusion selected). Queue: 4871 rules.
51400 rules inserted. Base: 24612 rules (595 with conclusion selected). Queue: 4902 rules.
51600 rules inserted. Base: 24638 rules (595 with conclusion selected). Queue: 4902 rules.
51800 rules inserted. Base: 24651 rules (595 with conclusion selected). Queue: 4898 rules.
52000 rules inserted. Base: 24703 rules (595 with conclusion selected). Queue: 4868 rules.
52200 rules inserted. Base: 24801 rules (595 with conclusion selected). Queue: 4836 rules.
52400 rules inserted. Base: 24868 rules (595 with conclusion selected). Queue: 4838 rules.
52600 rules inserted. Base: 24987 rules (595 with conclusion selected). Queue: 4795 rules.
52800 rules inserted. Base: 25017 rules (595 with conclusion selected). Queue: 4810 rules.
53000 rules inserted. Base: 25098 rules (595 with conclusion selected). Queue: 4770 rules.
53200 rules inserted. Base: 25176 rules (595 with conclusion selected). Queue: 4778 rules.
53400 rules inserted. Base: 25245 rules (595 with conclusion selected). Queue: 4742 rules.
53600 rules inserted. Base: 25303 rules (595 with conclusion selected). Queue: 4690 rules.
53800 rules inserted. Base: 25373 rules (595 with conclusion selected). Queue: 4638 rules.
54000 rules inserted. Base: 25432 rules (595 with conclusion selected). Queue: 4585 rules.
54200 rules inserted. Base: 25501 rules (595 with conclusion selected). Queue: 4534 rules.
54400 rules inserted. Base: 25564 rules (595 with conclusion selected). Queue: 4477 rules.
54600 rules inserted. Base: 25629 rules (595 with conclusion selected). Queue: 4430 rules.
54800 rules inserted. Base: 25696 rules (595 with conclusion selected). Queue: 4369 rules.
55000 rules inserted. Base: 25826 rules (595 with conclusion selected). Queue: 4239 rules.
55200 rules inserted. Base: 25948 rules (595 with conclusion selected). Queue: 4117 rules.
55400 rules inserted. Base: 26090 rules (601 with conclusion selected). Queue: 3984 rules.
55600 rules inserted. Base: 26167 rules (601 with conclusion selected). Queue: 3976 rules.
55800 rules inserted. Base: 26217 rules (601 with conclusion selected). Queue: 3945 rules.
56000 rules inserted. Base: 26397 rules (601 with conclusion selected). Queue: 3885 rules.
56200 rules inserted. Base: 26582 rules (601 with conclusion selected). Queue: 3792 rules.
56400 rules inserted. Base: 26774 rules (601 with conclusion selected). Queue: 3724 rules.
56600 rules inserted. Base: 26919 rules (601 with conclusion selected). Queue: 3646 rules.
56800 rules inserted. Base: 26947 rules (601 with conclusion selected). Queue: 3626 rules.
57000 rules inserted. Base: 27074 rules (601 with conclusion selected). Queue: 3584 rules.
57200 rules inserted. Base: 27263 rules (601 with conclusion selected). Queue: 3461 rules.
57400 rules inserted. Base: 27426 rules (601 with conclusion selected). Queue: 3423 rules.
57600 rules inserted. Base: 27605 rules (601 with conclusion selected). Queue: 3322 rules.
57800 rules inserted. Base: 27674 rules (601 with conclusion selected). Queue: 3332 rules.
58000 rules inserted. Base: 27800 rules (601 with conclusion selected). Queue: 3390 rules.
58200 rules inserted. Base: 27861 rules (601 with conclusion selected). Queue: 3332 rules.
58400 rules inserted. Base: 27895 rules (601 with conclusion selected). Queue: 3302 rules.
58600 rules inserted. Base: 27955 rules (601 with conclusion selected). Queue: 3244 rules.
58800 rules inserted. Base: 28003 rules (601 with conclusion selected). Queue: 3200 rules.
59000 rules inserted. Base: 28035 rules (601 with conclusion selected). Queue: 3170 rules.
59200 rules inserted. Base: 28112 rules (601 with conclusion selected). Queue: 3095 rules.
59400 rules inserted. Base: 28280 rules (607 with conclusion selected). Queue: 3016 rules.
59600 rules inserted. Base: 28474 rules (607 with conclusion selected). Queue: 2882 rules.
59800 rules inserted. Base: 28652 rules (607 with conclusion selected). Queue: 2756 rules.
60000 rules inserted. Base: 28798 rules (607 with conclusion selected). Queue: 2750 rules.
60200 rules inserted. Base: 28978 rules (607 with conclusion selected). Queue: 2726 rules.
60400 rules inserted. Base: 29174 rules (607 with conclusion selected). Queue: 2586 rules.
60600 rules inserted. Base: 29320 rules (607 with conclusion selected). Queue: 2507 rules.
60800 rules inserted. Base: 29447 rules (607 with conclusion selected). Queue: 2495 rules.
61000 rules inserted. Base: 29612 rules (607 with conclusion selected). Queue: 2518 rules.
61200 rules inserted. Base: 29796 rules (607 with conclusion selected). Queue: 2382 rules.
61400 rules inserted. Base: 29967 rules (607 with conclusion selected). Queue: 2414 rules.
61600 rules inserted. Base: 30075 rules (607 with conclusion selected). Queue: 2308 rules.
61800 rules inserted. Base: 30164 rules (607 with conclusion selected). Queue: 2223 rules.
62000 rules inserted. Base: 30246 rules (607 with conclusion selected). Queue: 2145 rules.
62200 rules inserted. Base: 30339 rules (607 with conclusion selected). Queue: 2056 rules.
62400 rules inserted. Base: 30447 rules (607 with conclusion selected). Queue: 1924 rules.
62600 rules inserted. Base: 30578 rules (607 with conclusion selected). Queue: 1941 rules.
62800 rules inserted. Base: 30698 rules (607 with conclusion selected). Queue: 1902 rules.
63000 rules inserted. Base: 30870 rules (607 with conclusion selected). Queue: 1827 rules.
63200 rules inserted. Base: 31010 rules (607 with conclusion selected). Queue: 1786 rules.
63400 rules inserted. Base: 31150 rules (607 with conclusion selected). Queue: 1744 rules.
63600 rules inserted. Base: 31313 rules (607 with conclusion selected). Queue: 1698 rules.
63800 rules inserted. Base: 31484 rules (607 with conclusion selected). Queue: 1580 rules.
64000 rules inserted. Base: 31662 rules (607 with conclusion selected). Queue: 1425 rules.
64200 rules inserted. Base: 31830 rules (607 with conclusion selected). Queue: 1249 rules.
64400 rules inserted. Base: 31943 rules (619 with conclusion selected). Queue: 1122 rules.
64600 rules inserted. Base: 32098 rules (619 with conclusion selected). Queue: 1021 rules.
64800 rules inserted. Base: 32219 rules (619 with conclusion selected). Queue: 940 rules.
65000 rules inserted. Base: 32363 rules (619 with conclusion selected). Queue: 866 rules.
65200 rules inserted. Base: 32484 rules (619 with conclusion selected). Queue: 814 rules.
65400 rules inserted. Base: 32621 rules (619 with conclusion selected). Queue: 688 rules.
65600 rules inserted. Base: 32660 rules (631 with conclusion selected). Queue: 674 rules.
65800 rules inserted. Base: 32740 rules (631 with conclusion selected). Queue: 687 rules.
66000 rules inserted. Base: 32855 rules (631 with conclusion selected). Queue: 704 rules.
66200 rules inserted. Base: 32836 rules (633 with conclusion selected). Queue: 692 rules.
66400 rules inserted. Base: 32857 rules (633 with conclusion selected). Queue: 599 rules.
66600 rules inserted. Base: 32924 rules (633 with conclusion selected). Queue: 526 rules.
66800 rules inserted. Base: 32833 rules (635 with conclusion selected). Queue: 494 rules.
67000 rules inserted. Base: 32387 rules (637 with conclusion selected). Queue: 519 rules.
67200 rules inserted. Base: 32000 rules (637 with conclusion selected). Queue: 508 rules.
67400 rules inserted. Base: 31483 rules (647 with conclusion selected). Queue: 560 rules.
67600 rules inserted. Base: 31466 rules (663 with conclusion selected). Queue: 485 rules.
67800 rules inserted. Base: 31338 rules (681 with conclusion selected). Queue: 486 rules.
68000 rules inserted. Base: 30777 rules (691 with conclusion selected). Queue: 598 rules.
68200 rules inserted. Base: 30327 rules (691 with conclusion selected). Queue: 581 rules.
68400 rules inserted. Base: 30123 rules (697 with conclusion selected). Queue: 631 rules.
68600 rules inserted. Base: 30004 rules (702 with conclusion selected). Queue: 593 rules.
68800 rules inserted. Base: 29760 rules (710 with conclusion selected). Queue: 561 rules.
69000 rules inserted. Base: 29784 rules (719 with conclusion selected). Queue: 548 rules.
69200 rules inserted. Base: 29951 rules (755 with conclusion selected). Queue: 512 rules.
69400 rules inserted. Base: 30094 rules (792 with conclusion selected). Queue: 543 rules.
69600 rules inserted. Base: 30286 rules (799 with conclusion selected). Queue: 500 rules.
69800 rules inserted. Base: 30420 rules (799 with conclusion selected). Queue: 453 rules.
70000 rules inserted. Base: 30555 rules (799 with conclusion selected). Queue: 377 rules.
70200 rules inserted. Base: 30670 rules (800 with conclusion selected). Queue: 269 rules.
70400 rules inserted. Base: 30777 rules (813 with conclusion selected). Queue: 320 rules.
70600 rules inserted. Base: 30848 rules (821 with conclusion selected). Queue: 345 rules.
70800 rules inserted. Base: 30853 rules (833 with conclusion selected). Queue: 524 rules.
71000 rules inserted. Base: 31023 rules (845 with conclusion selected). Queue: 654 rules.
71200 rules inserted. Base: 31101 rules (853 with conclusion selected). Queue: 823 rules.
71400 rules inserted. Base: 31256 rules (855 with conclusion selected). Queue: 799 rules.
71600 rules inserted. Base: 31452 rules (855 with conclusion selected). Queue: 614 rules.
71800 rules inserted. Base: 31505 rules (862 with conclusion selected). Queue: 749 rules.
72000 rules inserted. Base: 31667 rules (865 with conclusion selected). Queue: 827 rules.
72200 rules inserted. Base: 31796 rules (866 with conclusion selected). Queue: 854 rules.
72400 rules inserted. Base: 31871 rules (869 with conclusion selected). Queue: 890 rules.
72600 rules inserted. Base: 32015 rules (871 with conclusion selected). Queue: 944 rules.
72800 rules inserted. Base: 32159 rules (872 with conclusion selected). Queue: 971 rules.
73000 rules inserted. Base: 32351 rules (872 with conclusion selected). Queue: 971 rules.
73200 rules inserted. Base: 32482 rules (888 with conclusion selected). Queue: 1421 rules.
73400 rules inserted. Base: 32633 rules (889 with conclusion selected). Queue: 1448 rules.
73600 rules inserted. Base: 32805 rules (889 with conclusion selected). Queue: 1448 rules.
73800 rules inserted. Base: 32974 rules (889 with conclusion selected). Queue: 1448 rules.
74000 rules inserted. Base: 33101 rules (889 with conclusion selected). Queue: 1448 rules.
74200 rules inserted. Base: 33301 rules (889 with conclusion selected). Queue: 1274 rules.
74400 rules inserted. Base: 33495 rules (889 with conclusion selected). Queue: 1105 rules.
74600 rules inserted. Base: 33596 rules (891 with conclusion selected). Queue: 1074 rules.
74800 rules inserted. Base: 33698 rules (893 with conclusion selected). Queue: 1146 rules.
75000 rules inserted. Base: 33811 rules (893 with conclusion selected). Queue: 1146 rules.
75200 rules inserted. Base: 33935 rules (893 with conclusion selected). Queue: 1146 rules.
75400 rules inserted. Base: 34081 rules (893 with conclusion selected). Queue: 1146 rules.
75600 rules inserted. Base: 34247 rules (894 with conclusion selected). Queue: 1206 rules.
75800 rules inserted. Base: 34345 rules (899 with conclusion selected). Queue: 1402 rules.
76000 rules inserted. Base: 34475 rules (899 with conclusion selected). Queue: 1402 rules.
76200 rules inserted. Base: 34601 rules (899 with conclusion selected). Queue: 1402 rules.
76400 rules inserted. Base: 34721 rules (899 with conclusion selected). Queue: 1402 rules.
76600 rules inserted. Base: 34777 rules (899 with conclusion selected). Queue: 1402 rules.
76800 rules inserted. Base: 34977 rules (899 with conclusion selected). Queue: 1446 rules.
77000 rules inserted. Base: 35153 rules (900 with conclusion selected). Queue: 1521 rules.
77200 rules inserted. Base: 35330 rules (901 with conclusion selected). Queue: 1612 rules.
77400 rules inserted. Base: 35439 rules (901 with conclusion selected). Queue: 1612 rules.
77600 rules inserted. Base: 35495 rules (901 with conclusion selected). Queue: 1612 rules.
77800 rules inserted. Base: 35556 rules (901 with conclusion selected). Queue: 1607 rules.
78000 rules inserted. Base: 35635 rules (901 with conclusion selected). Queue: 1620 rules.
78200 rules inserted. Base: 35781 rules (901 with conclusion selected). Queue: 1660 rules.
78400 rules inserted. Base: 35941 rules (901 with conclusion selected). Queue: 1692 rules.
78600 rules inserted. Base: 36101 rules (901 with conclusion selected). Queue: 1740 rules.
78800 rules inserted. Base: 36235 rules (901 with conclusion selected). Queue: 1756 rules.
79000 rules inserted. Base: 36302 rules (901 with conclusion selected). Queue: 1745 rules.
79200 rules inserted. Base: 36380 rules (901 with conclusion selected). Queue: 1759 rules.
79400 rules inserted. Base: 36459 rules (901 with conclusion selected). Queue: 1772 rules.
79600 rules inserted. Base: 36538 rules (901 with conclusion selected). Queue: 1757 rules.
79800 rules inserted. Base: 36705 rules (901 with conclusion selected). Queue: 1808 rules.
80000 rules inserted. Base: 36885 rules (901 with conclusion selected). Queue: 1936 rules.
80200 rules inserted. Base: 37043 rules (901 with conclusion selected). Queue: 1984 rules.
80400 rules inserted. Base: 37223 rules (901 with conclusion selected). Queue: 2112 rules.
80600 rules inserted. Base: 37370 rules (901 with conclusion selected). Queue: 2164 rules.
80800 rules inserted. Base: 37445 rules (901 with conclusion selected). Queue: 2168 rules.
81000 rules inserted. Base: 37527 rules (901 with conclusion selected). Queue: 2172 rules.
81200 rules inserted. Base: 37623 rules (901 with conclusion selected). Queue: 2152 rules.
81400 rules inserted. Base: 37771 rules (901 with conclusion selected). Queue: 2132 rules.
81600 rules inserted. Base: 37938 rules (901 with conclusion selected). Queue: 2128 rules.
81800 rules inserted. Base: 38087 rules (901 with conclusion selected). Queue: 2128 rules.
82000 rules inserted. Base: 38213 rules (901 with conclusion selected). Queue: 2192 rules.
82200 rules inserted. Base: 38328 rules (901 with conclusion selected). Queue: 2256 rules.
82400 rules inserted. Base: 38475 rules (901 with conclusion selected). Queue: 2256 rules.
82600 rules inserted. Base: 38601 rules (901 with conclusion selected). Queue: 2312 rules.
82800 rules inserted. Base: 38705 rules (901 with conclusion selected). Queue: 2384 rules.
83000 rules inserted. Base: 38842 rules (901 with conclusion selected). Queue: 2343 rules.
83200 rules inserted. Base: 39006 rules (901 with conclusion selected). Queue: 2311 rules.
83400 rules inserted. Base: 39145 rules (901 with conclusion selected). Queue: 2300 rules.
83600 rules inserted. Base: 39307 rules (901 with conclusion selected). Queue: 2274 rules.
83800 rules inserted. Base: 39375 rules (901 with conclusion selected). Queue: 2272 rules.
84000 rules inserted. Base: 39413 rules (901 with conclusion selected). Queue: 2300 rules.
84200 rules inserted. Base: 39527 rules (901 with conclusion selected). Queue: 2300 rules.
84400 rules inserted. Base: 39644 rules (901 with conclusion selected). Queue: 2284 rules.
84600 rules inserted. Base: 39685 rules (901 with conclusion selected). Queue: 2300 rules.
84800 rules inserted. Base: 39724 rules (901 with conclusion selected). Queue: 2316 rules.
85000 rules inserted. Base: 39869 rules (901 with conclusion selected). Queue: 2316 rules.
85200 rules inserted. Base: 40019 rules (901 with conclusion selected). Queue: 2322 rules.
85400 rules inserted. Base: 40167 rules (901 with conclusion selected). Queue: 2320 rules.
85600 rules inserted. Base: 40339 rules (901 with conclusion selected). Queue: 2290 rules.
85800 rules inserted. Base: 40463 rules (901 with conclusion selected). Queue: 2248 rules.
86000 rules inserted. Base: 40553 rules (901 with conclusion selected). Queue: 2224 rules.
86200 rules inserted. Base: 40715 rules (901 with conclusion selected). Queue: 2323 rules.
86400 rules inserted. Base: 40771 rules (901 with conclusion selected). Queue: 2352 rules.
86600 rules inserted. Base: 40821 rules (901 with conclusion selected). Queue: 2384 rules.
86800 rules inserted. Base: 40867 rules (901 with conclusion selected). Queue: 2390 rules.
87000 rules inserted. Base: 41055 rules (901 with conclusion selected). Queue: 2496 rules.
87200 rules inserted. Base: 41077 rules (901 with conclusion selected). Queue: 2504 rules.
87400 rules inserted. Base: 41129 rules (901 with conclusion selected). Queue: 2528 rules.
87600 rules inserted. Base: 41253 rules (901 with conclusion selected). Queue: 2504 rules.
87800 rules inserted. Base: 41365 rules (901 with conclusion selected). Queue: 2478 rules.
88000 rules inserted. Base: 41488 rules (905 with conclusion selected). Queue: 2505 rules.
88200 rules inserted. Base: 41539 rules (905 with conclusion selected). Queue: 2541 rules.
88400 rules inserted. Base: 41682 rules (905 with conclusion selected). Queue: 2541 rules.
88600 rules inserted. Base: 41850 rules (905 with conclusion selected). Queue: 2541 rules.
88800 rules inserted. Base: 41863 rules (905 with conclusion selected). Queue: 2573 rules.
89000 rules inserted. Base: 42035 rules (905 with conclusion selected). Queue: 2669 rules.
89200 rules inserted. Base: 42124 rules (905 with conclusion selected). Queue: 2653 rules.
89400 rules inserted. Base: 42295 rules (905 with conclusion selected). Queue: 2653 rules.
89600 rules inserted. Base: 42353 rules (905 with conclusion selected). Queue: 2653 rules.
89800 rules inserted. Base: 42483 rules (905 with conclusion selected). Queue: 2746 rules.
90000 rules inserted. Base: 42617 rules (905 with conclusion selected). Queue: 2757 rules.
90200 rules inserted. Base: 42695 rules (905 with conclusion selected). Queue: 2753 rules.
90400 rules inserted. Base: 42769 rules (905 with conclusion selected). Queue: 2729 rules.
90600 rules inserted. Base: 42886 rules (905 with conclusion selected). Queue: 2670 rules.
90800 rules inserted. Base: 42900 rules (913 with conclusion selected). Queue: 2626 rules.
91000 rules inserted. Base: 43007 rules (913 with conclusion selected). Queue: 2626 rules.
91200 rules inserted. Base: 43049 rules (913 with conclusion selected). Queue: 2626 rules.
91400 rules inserted. Base: 43135 rules (913 with conclusion selected). Queue: 2610 rules.
91600 rules inserted. Base: 43309 rules (913 with conclusion selected). Queue: 2610 rules.
91800 rules inserted. Base: 43330 rules (913 with conclusion selected). Queue: 2594 rules.
92000 rules inserted. Base: 43437 rules (913 with conclusion selected). Queue: 2594 rules.
92200 rules inserted. Base: 43484 rules (913 with conclusion selected). Queue: 2594 rules.
92400 rules inserted. Base: 43563 rules (913 with conclusion selected). Queue: 2578 rules.
92600 rules inserted. Base: 43738 rules (913 with conclusion selected). Queue: 2578 rules.
92800 rules inserted. Base: 43863 rules (913 with conclusion selected). Queue: 2533 rules.
93000 rules inserted. Base: 43943 rules (913 with conclusion selected). Queue: 2469 rules.
93200 rules inserted. Base: 44047 rules (913 with conclusion selected). Queue: 2418 rules.
93400 rules inserted. Base: 43960 rules (913 with conclusion selected). Queue: 2390 rules.
93600 rules inserted. Base: 44113 rules (913 with conclusion selected). Queue: 2382 rules.
93800 rules inserted. Base: 44264 rules (913 with conclusion selected). Queue: 2374 rules.
94000 rules inserted. Base: 44306 rules (913 with conclusion selected). Queue: 2358 rules.
94200 rules inserted. Base: 44414 rules (913 with conclusion selected). Queue: 2358 rules.
94400 rules inserted. Base: 44445 rules (913 with conclusion selected). Queue: 2358 rules.
94600 rules inserted. Base: 44617 rules (913 with conclusion selected). Queue: 2349 rules.
94800 rules inserted. Base: 44740 rules (913 with conclusion selected). Queue: 2342 rules.
95000 rules inserted. Base: 44796 rules (913 with conclusion selected). Queue: 2326 rules.
95200 rules inserted. Base: 44903 rules (913 with conclusion selected). Queue: 2326 rules.
95400 rules inserted. Base: 44967 rules (913 with conclusion selected). Queue: 2270 rules.
95600 rules inserted. Base: 45064 rules (913 with conclusion selected). Queue: 2186 rules.
95800 rules inserted. Base: 45070 rules (913 with conclusion selected). Queue: 2128 rules.
96000 rules inserted. Base: 45174 rules (913 with conclusion selected). Queue: 2113 rules.
96200 rules inserted. Base: 45209 rules (913 with conclusion selected). Queue: 2109 rules.
96400 rules inserted. Base: 45323 rules (913 with conclusion selected). Queue: 2099 rules.
96600 rules inserted. Base: 45495 rules (913 with conclusion selected). Queue: 2090 rules.
96800 rules inserted. Base: 45506 rules (913 with conclusion selected). Queue: 2073 rules.
97000 rules inserted. Base: 45608 rules (913 with conclusion selected). Queue: 2065 rules.
97200 rules inserted. Base: 45605 rules (913 with conclusion selected). Queue: 2057 rules.
97400 rules inserted. Base: 45768 rules (913 with conclusion selected). Queue: 2049 rules.
97600 rules inserted. Base: 45913 rules (913 with conclusion selected). Queue: 2089 rules.
97800 rules inserted. Base: 46034 rules (913 with conclusion selected). Queue: 2032 rules.
98000 rules inserted. Base: 45977 rules (913 with conclusion selected). Queue: 1993 rules.
98200 rules inserted. Base: 46074 rules (913 with conclusion selected). Queue: 1972 rules.
98400 rules inserted. Base: 46121 rules (913 with conclusion selected). Queue: 1944 rules.
98600 rules inserted. Base: 46223 rules (913 with conclusion selected). Queue: 1936 rules.
98800 rules inserted. Base: 46274 rules (913 with conclusion selected). Queue: 1924 rules.
99000 rules inserted. Base: 46369 rules (913 with conclusion selected). Queue: 1900 rules.
99200 rules inserted. Base: 46454 rules (913 with conclusion selected). Queue: 1872 rules.
99400 rules inserted. Base: 46514 rules (913 with conclusion selected). Queue: 1864 rules.
99600 rules inserted. Base: 46616 rules (913 with conclusion selected). Queue: 1856 rules.
99800 rules inserted. Base: 46630 rules (913 with conclusion selected). Queue: 1924 rules.
100000 rules inserted. Base: 46584 rules (913 with conclusion selected). Queue: 1857 rules.
100200 rules inserted. Base: 46676 rules (913 with conclusion selected). Queue: 1771 rules.
100400 rules inserted. Base: 46766 rules (913 with conclusion selected). Queue: 1740 rules.
100600 rules inserted. Base: 46864 rules (913 with conclusion selected). Queue: 1724 rules.
100800 rules inserted. Base: 46957 rules (913 with conclusion selected). Queue: 1657 rules.
101000 rules inserted. Base: 47046 rules (913 with conclusion selected). Queue: 1577 rules.
101200 rules inserted. Base: 47137 rules (913 with conclusion selected). Queue: 1545 rules.
101400 rules inserted. Base: 47234 rules (913 with conclusion selected). Queue: 1524 rules.
101600 rules inserted. Base: 47274 rules (913 with conclusion selected). Queue: 1556 rules.
101800 rules inserted. Base: 47002 rules (937 with conclusion selected). Queue: 1848 rules.
102000 rules inserted. Base: 47064 rules (937 with conclusion selected). Queue: 1810 rules.
102200 rules inserted. Base: 47172 rules (937 with conclusion selected). Queue: 1729 rules.
102400 rules inserted. Base: 47260 rules (937 with conclusion selected). Queue: 1708 rules.
102600 rules inserted. Base: 47324 rules (937 with conclusion selected). Queue: 1668 rules.
102800 rules inserted. Base: 47432 rules (937 with conclusion selected). Queue: 1587 rules.
103000 rules inserted. Base: 47516 rules (937 with conclusion selected). Queue: 1512 rules.
103200 rules inserted. Base: 47516 rules (937 with conclusion selected). Queue: 1564 rules.
103400 rules inserted. Base: 47464 rules (945 with conclusion selected). Queue: 1560 rules.
103600 rules inserted. Base: 47664 rules (945 with conclusion selected). Queue: 1454 rules.
103800 rules inserted. Base: 47864 rules (945 with conclusion selected). Queue: 1295 rules.
104000 rules inserted. Base: 47949 rules (945 with conclusion selected). Queue: 1258 rules.
104200 rules inserted. Base: 48118 rules (945 with conclusion selected). Queue: 1212 rules.
104400 rules inserted. Base: 48248 rules (945 with conclusion selected). Queue: 1121 rules.
104600 rules inserted. Base: 48286 rules (945 with conclusion selected). Queue: 1052 rules.
104800 rules inserted. Base: 48294 rules (945 with conclusion selected). Queue: 1030 rules.
105000 rules inserted. Base: 48350 rules (949 with conclusion selected). Queue: 995 rules.
105200 rules inserted. Base: 48550 rules (949 with conclusion selected). Queue: 860 rules.
105400 rules inserted. Base: 48740 rules (949 with conclusion selected). Queue: 741 rules.
105600 rules inserted. Base: 48940 rules (949 with conclusion selected). Queue: 607 rules.
105800 rules inserted. Base: 49050 rules (949 with conclusion selected). Queue: 497 rules.
106000 rules inserted. Base: 49216 rules (953 with conclusion selected). Queue: 529 rules.
106200 rules inserted. Base: 49400 rules (953 with conclusion selected). Queue: 479 rules.
106400 rules inserted. Base: 49499 rules (953 with conclusion selected). Queue: 416 rules.
106600 rules inserted. Base: 49642 rules (953 with conclusion selected). Queue: 414 rules.
106800 rules inserted. Base: 49824 rules (953 with conclusion selected). Queue: 313 rules.
107000 rules inserted. Base: 49959 rules (953 with conclusion selected). Queue: 263 rules.
107200 rules inserted. Base: 50071 rules (953 with conclusion selected). Queue: 221 rules.
107400 rules inserted. Base: 50206 rules (953 with conclusion selected). Queue: 384 rules.
107600 rules inserted. Base: 50298 rules (953 with conclusion selected). Queue: 452 rules.
107800 rules inserted. Base: 50440 rules (953 with conclusion selected). Queue: 540 rules.
108000 rules inserted. Base: 50586 rules (953 with conclusion selected). Queue: 492 rules.
108200 rules inserted. Base: 50668 rules (955 with conclusion selected). Queue: 381 rules.
108400 rules inserted. Base: 50808 rules (955 with conclusion selected). Queue: 361 rules.
108600 rules inserted. Base: 50906 rules (955 with conclusion selected). Queue: 287 rules.
108800 rules inserted. Base: 50986 rules (959 with conclusion selected). Queue: 239 rules.
109000 rules inserted. Base: 50989 rules (959 with conclusion selected). Queue: 240 rules.
109200 rules inserted. Base: 50969 rules (961 with conclusion selected). Queue: 278 rules.
109400 rules inserted. Base: 50970 rules (964 with conclusion selected). Queue: 254 rules.
109600 rules inserted. Base: 51000 rules (967 with conclusion selected). Queue: 201 rules.
109800 rules inserted. Base: 50680 rules (968 with conclusion selected). Queue: 197 rules.
110000 rules inserted. Base: 50485 rules (969 with conclusion selected). Queue: 167 rules.
110200 rules inserted. Base: 50305 rules (978 with conclusion selected). Queue: 333 rules.
110400 rules inserted. Base: 50361 rules (978 with conclusion selected). Queue: 297 rules.
110600 rules inserted. Base: 50379 rules (987 with conclusion selected). Queue: 379 rules.
110800 rules inserted. Base: 50474 rules (996 with conclusion selected). Queue: 416 rules.
111000 rules inserted. Base: 50555 rules (1000 with conclusion selected). Queue: 463 rules.
111200 rules inserted. Base: 50721 rules (1001 with conclusion selected). Queue: 456 rules.
111400 rules inserted. Base: 50823 rules (1011 with conclusion selected). Queue: 501 rules.
111600 rules inserted. Base: 50975 rules (1013 with conclusion selected). Queue: 423 rules.
111800 rules inserted. Base: 51093 rules (1017 with conclusion selected). Queue: 399 rules.
112000 rules inserted. Base: 51253 rules (1021 with conclusion selected). Queue: 241 rules.
112200 rules inserted. Base: 51434 rules (1027 with conclusion selected). Queue: 66 rules.
112400 rules inserted. Base: 51334 rules (1033 with conclusion selected). Queue: 204 rules.
112600 rules inserted. Base: 51300 rules (1038 with conclusion selected). Queue: 423 rules.
112800 rules inserted. Base: 51494 rules (1040 with conclusion selected). Queue: 405 rules.
113000 rules inserted. Base: 51677 rules (1041 with conclusion selected). Queue: 388 rules.
113200 rules inserted. Base: 51826 rules (1043 with conclusion selected). Queue: 386 rules.
113400 rules inserted. Base: 51975 rules (1045 with conclusion selected). Queue: 367 rules.
113600 rules inserted. Base: 52075 rules (1045 with conclusion selected). Queue: 315 rules.
113800 rules inserted. Base: 52151 rules (1045 with conclusion selected). Queue: 287 rules.
114000 rules inserted. Base: 52227 rules (1045 with conclusion selected). Queue: 211 rules.
114200 rules inserted. Base: 52342 rules (1045 with conclusion selected). Queue: 96 rules.
Starting query inj-event(auth_AppCompletesProtocol(m_160,m_161,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_162,m_163,m_164,m_165,m_166,m_167)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_164,m_168,m_169,m_170,m_165,m_166,m_167)) && inj-event(auth_UserSendsLastMessageToApp(m_160,m_161,m_162,m_163)) && inj-event(auth_TTPInConeOfApp(m_168,m_169))
RESULT inj-event(auth_AppCompletesProtocol(m_160,m_161,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_162,m_163,m_164,m_165,m_166,m_167)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_164,m_168,m_169,m_170,m_165,m_166,m_167)) && inj-event(auth_UserSendsLastMessageToApp(m_160,m_161,m_162,m_163)) && inj-event(auth_TTPInConeOfApp(m_168,m_169)) is true.
-- Query inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_160,m_161,m_162,m_163,m_164,m_165,m_166)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_167,m_168,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_169,m_170,m_160,m_164,m_165)) && inj-event(auth_UserSendsLastMessageToApp(m_167,m_168,m_169,m_170)) && inj-event(auth_TTPInConeOfApp(m_161,m_162)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (151 with conclusion selected). Queue: 700 rules.
400 rules inserted. Base: 400 rules (152 with conclusion selected). Queue: 778 rules.
600 rules inserted. Base: 600 rules (152 with conclusion selected). Queue: 828 rules.
800 rules inserted. Base: 800 rules (152 with conclusion selected). Queue: 828 rules.
1000 rules inserted. Base: 999 rules (159 with conclusion selected). Queue: 808 rules.
1200 rules inserted. Base: 1199 rules (159 with conclusion selected). Queue: 744 rules.
1400 rules inserted. Base: 1399 rules (159 with conclusion selected). Queue: 686 rules.
1600 rules inserted. Base: 1551 rules (159 with conclusion selected). Queue: 686 rules.
1800 rules inserted. Base: 1705 rules (161 with conclusion selected). Queue: 696 rules.
2000 rules inserted. Base: 1869 rules (161 with conclusion selected). Queue: 766 rules.
2200 rules inserted. Base: 2037 rules (161 with conclusion selected). Queue: 794 rules.
2400 rules inserted. Base: 2195 rules (161 with conclusion selected). Queue: 794 rules.
2600 rules inserted. Base: 2285 rules (193 with conclusion selected). Queue: 1226 rules.
2800 rules inserted. Base: 2371 rules (225 with conclusion selected). Queue: 1270 rules.
3000 rules inserted. Base: 2539 rules (225 with conclusion selected). Queue: 1324 rules.
3200 rules inserted. Base: 2727 rules (227 with conclusion selected). Queue: 1348 rules.
3400 rules inserted. Base: 2910 rules (227 with conclusion selected). Queue: 1361 rules.
3600 rules inserted. Base: 3095 rules (227 with conclusion selected). Queue: 1396 rules.
3800 rules inserted. Base: 3263 rules (229 with conclusion selected). Queue: 1466 rules.
4000 rules inserted. Base: 3463 rules (231 with conclusion selected). Queue: 1494 rules.
4200 rules inserted. Base: 3559 rules (231 with conclusion selected). Queue: 1524 rules.
4400 rules inserted. Base: 3614 rules (231 with conclusion selected). Queue: 1524 rules.
4600 rules inserted. Base: 3771 rules (233 with conclusion selected). Queue: 1603 rules.
4800 rules inserted. Base: 3911 rules (233 with conclusion selected). Queue: 1564 rules.
5000 rules inserted. Base: 4092 rules (233 with conclusion selected). Queue: 1560 rules.
5200 rules inserted. Base: 4206 rules (233 with conclusion selected). Queue: 1506 rules.
5400 rules inserted. Base: 4338 rules (237 with conclusion selected). Queue: 1772 rules.
5600 rules inserted. Base: 4446 rules (237 with conclusion selected). Queue: 1708 rules.
5800 rules inserted. Base: 4608 rules (237 with conclusion selected). Queue: 1546 rules.
6000 rules inserted. Base: 4775 rules (237 with conclusion selected). Queue: 1756 rules.
6200 rules inserted. Base: 4957 rules (237 with conclusion selected). Queue: 1855 rules.
6400 rules inserted. Base: 5140 rules (237 with conclusion selected). Queue: 1860 rules.
6600 rules inserted. Base: 5322 rules (237 with conclusion selected). Queue: 1839 rules.
6800 rules inserted. Base: 5449 rules (237 with conclusion selected). Queue: 1874 rules.
7000 rules inserted. Base: 5593 rules (237 with conclusion selected). Queue: 1931 rules.
7200 rules inserted. Base: 5707 rules (237 with conclusion selected). Queue: 1909 rules.
7400 rules inserted. Base: 5810 rules (237 with conclusion selected). Queue: 2304 rules.
7600 rules inserted. Base: 5816 rules (237 with conclusion selected). Queue: 2316 rules.
7800 rules inserted. Base: 5931 rules (237 with conclusion selected). Queue: 2328 rules.
8000 rules inserted. Base: 6052 rules (237 with conclusion selected). Queue: 2304 rules.
8200 rules inserted. Base: 6119 rules (237 with conclusion selected). Queue: 2246 rules.
8400 rules inserted. Base: 6212 rules (237 with conclusion selected). Queue: 2192 rules.
8600 rules inserted. Base: 6279 rules (237 with conclusion selected). Queue: 2149 rules.
8800 rules inserted. Base: 6434 rules (237 with conclusion selected). Queue: 2084 rules.
9000 rules inserted. Base: 6577 rules (237 with conclusion selected). Queue: 2015 rules.
9200 rules inserted. Base: 6679 rules (237 with conclusion selected). Queue: 2002 rules.
9400 rules inserted. Base: 6695 rules (237 with conclusion selected). Queue: 2022 rules.
9600 rules inserted. Base: 6707 rules (237 with conclusion selected). Queue: 2046 rules.
9800 rules inserted. Base: 6710 rules (237 with conclusion selected). Queue: 2052 rules.
10000 rules inserted. Base: 6711 rules (237 with conclusion selected). Queue: 2052 rules.
10200 rules inserted. Base: 6811 rules (237 with conclusion selected). Queue: 2052 rules.
10400 rules inserted. Base: 6939 rules (237 with conclusion selected). Queue: 2052 rules.
10600 rules inserted. Base: 7075 rules (237 with conclusion selected). Queue: 2052 rules.
10800 rules inserted. Base: 7153 rules (237 with conclusion selected). Queue: 2052 rules.
11000 rules inserted. Base: 7215 rules (237 with conclusion selected). Queue: 2048 rules.
11200 rules inserted. Base: 7266 rules (237 with conclusion selected). Queue: 2048 rules.
11400 rules inserted. Base: 7266 rules (237 with conclusion selected). Queue: 2048 rules.
11600 rules inserted. Base: 7266 rules (237 with conclusion selected). Queue: 2048 rules.
11800 rules inserted. Base: 7275 rules (237 with conclusion selected). Queue: 2061 rules.
12000 rules inserted. Base: 7294 rules (240 with conclusion selected). Queue: 2091 rules.
12200 rules inserted. Base: 7422 rules (243 with conclusion selected). Queue: 2018 rules.
12400 rules inserted. Base: 7529 rules (243 with conclusion selected). Queue: 1915 rules.
12600 rules inserted. Base: 7668 rules (243 with conclusion selected). Queue: 1764 rules.
12800 rules inserted. Base: 7726 rules (250 with conclusion selected). Queue: 1776 rules.
13000 rules inserted. Base: 7740 rules (250 with conclusion selected). Queue: 1759 rules.
13200 rules inserted. Base: 7757 rules (250 with conclusion selected). Queue: 1738 rules.
13400 rules inserted. Base: 7697 rules (257 with conclusion selected). Queue: 1733 rules.
13600 rules inserted. Base: 7614 rules (263 with conclusion selected). Queue: 1734 rules.
13800 rules inserted. Base: 7619 rules (269 with conclusion selected). Queue: 1672 rules.
14000 rules inserted. Base: 7819 rules (274 with conclusion selected). Queue: 1477 rules.
14200 rules inserted. Base: 8019 rules (295 with conclusion selected). Queue: 1425 rules.
14400 rules inserted. Base: 8211 rules (298 with conclusion selected). Queue: 1404 rules.
14600 rules inserted. Base: 8356 rules (312 with conclusion selected). Queue: 1635 rules.
14800 rules inserted. Base: 8455 rules (312 with conclusion selected). Queue: 1536 rules.
15000 rules inserted. Base: 8595 rules (330 with conclusion selected). Queue: 1545 rules.
15200 rules inserted. Base: 8795 rules (342 with conclusion selected). Queue: 1584 rules.
15400 rules inserted. Base: 8995 rules (357 with conclusion selected). Queue: 1733 rules.
15600 rules inserted. Base: 9128 rules (376 with conclusion selected). Queue: 2363 rules.
15800 rules inserted. Base: 9175 rules (377 with conclusion selected). Queue: 2410 rules.
16000 rules inserted. Base: 9359 rules (379 with conclusion selected). Queue: 2613 rules.
16200 rules inserted. Base: 9491 rules (379 with conclusion selected). Queue: 2612 rules.
16400 rules inserted. Base: 9527 rules (381 with conclusion selected). Queue: 2668 rules.
16600 rules inserted. Base: 9724 rules (386 with conclusion selected). Queue: 3060 rules.
16800 rules inserted. Base: 9920 rules (389 with conclusion selected). Queue: 3265 rules.
17000 rules inserted. Base: 10116 rules (392 with conclusion selected). Queue: 3470 rules.
17200 rules inserted. Base: 10312 rules (395 with conclusion selected). Queue: 3675 rules.
17400 rules inserted. Base: 10479 rules (400 with conclusion selected). Queue: 4312 rules.
17600 rules inserted. Base: 10565 rules (402 with conclusion selected). Queue: 4444 rules.
17800 rules inserted. Base: 10659 rules (405 with conclusion selected). Queue: 4924 rules.
18000 rules inserted. Base: 10684 rules (407 with conclusion selected). Queue: 5077 rules.
18200 rules inserted. Base: 10771 rules (408 with conclusion selected). Queue: 5236 rules.
18400 rules inserted. Base: 10922 rules (408 with conclusion selected). Queue: 5174 rules.
18600 rules inserted. Base: 11004 rules (409 with conclusion selected). Queue: 5342 rules.
18800 rules inserted. Base: 11166 rules (409 with conclusion selected). Queue: 5299 rules.
19000 rules inserted. Base: 11366 rules (410 with conclusion selected). Queue: 5277 rules.
19200 rules inserted. Base: 11493 rules (411 with conclusion selected). Queue: 5410 rules.
19400 rules inserted. Base: 11584 rules (413 with conclusion selected). Queue: 5545 rules.
19600 rules inserted. Base: 11682 rules (415 with conclusion selected). Queue: 5881 rules.
19800 rules inserted. Base: 11810 rules (415 with conclusion selected). Queue: 5879 rules.
20000 rules inserted. Base: 11939 rules (418 with conclusion selected). Queue: 6215 rules.
20200 rules inserted. Base: 12066 rules (418 with conclusion selected). Queue: 6213 rules.
20400 rules inserted. Base: 12196 rules (421 with conclusion selected). Queue: 6549 rules.
20600 rules inserted. Base: 12322 rules (421 with conclusion selected). Queue: 6547 rules.
20800 rules inserted. Base: 12453 rules (424 with conclusion selected). Queue: 6883 rules.
21000 rules inserted. Base: 12578 rules (424 with conclusion selected). Queue: 6881 rules.
21200 rules inserted. Base: 12678 rules (426 with conclusion selected). Queue: 7048 rules.
21400 rules inserted. Base: 12725 rules (426 with conclusion selected). Queue: 7072 rules.
21600 rules inserted. Base: 12765 rules (426 with conclusion selected). Queue: 7096 rules.
21800 rules inserted. Base: 12837 rules (426 with conclusion selected). Queue: 7064 rules.
22000 rules inserted. Base: 12877 rules (426 with conclusion selected). Queue: 7064 rules.
22200 rules inserted. Base: 12918 rules (427 with conclusion selected). Queue: 7087 rules.
22400 rules inserted. Base: 12958 rules (427 with conclusion selected). Queue: 7111 rules.
22600 rules inserted. Base: 13031 rules (427 with conclusion selected). Queue: 7079 rules.
22800 rules inserted. Base: 13093 rules (427 with conclusion selected). Queue: 7079 rules.
23000 rules inserted. Base: 13111 rules (428 with conclusion selected). Queue: 7078 rules.
23200 rules inserted. Base: 13136 rules (428 with conclusion selected). Queue: 7074 rules.
23400 rules inserted. Base: 13196 rules (428 with conclusion selected). Queue: 7120 rules.
23600 rules inserted. Base: 13342 rules (428 with conclusion selected). Queue: 7078 rules.
23800 rules inserted. Base: 13406 rules (428 with conclusion selected). Queue: 7088 rules.
24000 rules inserted. Base: 13427 rules (428 with conclusion selected). Queue: 7097 rules.
24200 rules inserted. Base: 13484 rules (428 with conclusion selected). Queue: 7097 rules.
24400 rules inserted. Base: 13554 rules (428 with conclusion selected). Queue: 7129 rules.
24600 rules inserted. Base: 13639 rules (428 with conclusion selected). Queue: 7129 rules.
24800 rules inserted. Base: 13679 rules (428 with conclusion selected). Queue: 7129 rules.
25000 rules inserted. Base: 13760 rules (429 with conclusion selected). Queue: 7096 rules.
25200 rules inserted. Base: 13824 rules (429 with conclusion selected). Queue: 7106 rules.
25400 rules inserted. Base: 13883 rules (430 with conclusion selected). Queue: 7141 rules.
25600 rules inserted. Base: 13970 rules (430 with conclusion selected). Queue: 7116 rules.
25800 rules inserted. Base: 14032 rules (430 with conclusion selected). Queue: 7130 rules.
26000 rules inserted. Base: 14096 rules (431 with conclusion selected). Queue: 7129 rules.
26200 rules inserted. Base: 14138 rules (431 with conclusion selected). Queue: 7161 rules.
26400 rules inserted. Base: 14258 rules (431 with conclusion selected). Queue: 7129 rules.
26600 rules inserted. Base: 14316 rules (431 with conclusion selected). Queue: 7143 rules.
26800 rules inserted. Base: 14386 rules (432 with conclusion selected). Queue: 7142 rules.
27000 rules inserted. Base: 14421 rules (432 with conclusion selected). Queue: 7174 rules.
27200 rules inserted. Base: 14511 rules (432 with conclusion selected). Queue: 7142 rules.
27400 rules inserted. Base: 14569 rules (432 with conclusion selected). Queue: 7156 rules.
27600 rules inserted. Base: 14642 rules (433 with conclusion selected). Queue: 7175 rules.
27800 rules inserted. Base: 14724 rules (433 with conclusion selected). Queue: 7155 rules.
28000 rules inserted. Base: 14786 rules (433 with conclusion selected). Queue: 7169 rules.
28200 rules inserted. Base: 14856 rules (434 with conclusion selected). Queue: 7151 rules.
28400 rules inserted. Base: 14924 rules (434 with conclusion selected). Queue: 7122 rules.
28600 rules inserted. Base: 14992 rules (434 with conclusion selected). Queue: 7093 rules.
28800 rules inserted. Base: 15066 rules (434 with conclusion selected). Queue: 7072 rules.
29000 rules inserted. Base: 15140 rules (434 with conclusion selected). Queue: 7040 rules.
29200 rules inserted. Base: 15211 rules (434 with conclusion selected). Queue: 7008 rules.
29400 rules inserted. Base: 15282 rules (434 with conclusion selected). Queue: 6976 rules.
29600 rules inserted. Base: 15353 rules (434 with conclusion selected). Queue: 6944 rules.
29800 rules inserted. Base: 15368 rules (434 with conclusion selected). Queue: 6944 rules.
30000 rules inserted. Base: 15440 rules (434 with conclusion selected). Queue: 6912 rules.
30200 rules inserted. Base: 15439 rules (434 with conclusion selected). Queue: 6912 rules.
30400 rules inserted. Base: 15550 rules (438 with conclusion selected). Queue: 7069 rules.
30600 rules inserted. Base: 15537 rules (438 with conclusion selected). Queue: 7068 rules.
30800 rules inserted. Base: 15621 rules (438 with conclusion selected). Queue: 7063 rules.
31000 rules inserted. Base: 15706 rules (440 with conclusion selected). Queue: 7060 rules.
31200 rules inserted. Base: 15722 rules (470 with conclusion selected). Queue: 7249 rules.
31400 rules inserted. Base: 15781 rules (470 with conclusion selected). Queue: 7233 rules.
31600 rules inserted. Base: 15878 rules (470 with conclusion selected). Queue: 7201 rules.
31800 rules inserted. Base: 15933 rules (471 with conclusion selected). Queue: 7199 rules.
32000 rules inserted. Base: 16027 rules (471 with conclusion selected). Queue: 7169 rules.
32200 rules inserted. Base: 16121 rules (471 with conclusion selected). Queue: 7137 rules.
32400 rules inserted. Base: 16214 rules (473 with conclusion selected). Queue: 7127 rules.
32600 rules inserted. Base: 16276 rules (473 with conclusion selected). Queue: 7118 rules.
32800 rules inserted. Base: 16373 rules (473 with conclusion selected). Queue: 7118 rules.
33000 rules inserted. Base: 16477 rules (473 with conclusion selected). Queue: 7086 rules.
33200 rules inserted. Base: 16591 rules (473 with conclusion selected). Queue: 7068 rules.
33400 rules inserted. Base: 16637 rules (473 with conclusion selected). Queue: 7068 rules.
33600 rules inserted. Base: 16701 rules (473 with conclusion selected). Queue: 7068 rules.
33800 rules inserted. Base: 16805 rules (473 with conclusion selected). Queue: 7036 rules.
34000 rules inserted. Base: 16919 rules (473 with conclusion selected). Queue: 7018 rules.
34200 rules inserted. Base: 16989 rules (473 with conclusion selected). Queue: 7018 rules.
34400 rules inserted. Base: 17076 rules (473 with conclusion selected). Queue: 7003 rules.
34600 rules inserted. Base: 17157 rules (473 with conclusion selected). Queue: 6986 rules.
34800 rules inserted. Base: 17247 rules (473 with conclusion selected). Queue: 6968 rules.
35000 rules inserted. Base: 17357 rules (473 with conclusion selected). Queue: 6968 rules.
35200 rules inserted. Base: 17456 rules (473 with conclusion selected). Queue: 6936 rules.
35400 rules inserted. Base: 17525 rules (473 with conclusion selected). Queue: 6936 rules.
35600 rules inserted. Base: 17565 rules (474 with conclusion selected). Queue: 6936 rules.
35800 rules inserted. Base: 17605 rules (475 with conclusion selected). Queue: 6936 rules.
36000 rules inserted. Base: 17731 rules (476 with conclusion selected). Queue: 6848 rules.
36200 rules inserted. Base: 17797 rules (477 with conclusion selected). Queue: 6848 rules.
36400 rules inserted. Base: 17837 rules (478 with conclusion selected). Queue: 6848 rules.
36600 rules inserted. Base: 17877 rules (479 with conclusion selected). Queue: 6848 rules.
36800 rules inserted. Base: 18021 rules (480 with conclusion selected). Queue: 6760 rules.
37000 rules inserted. Base: 18029 rules (481 with conclusion selected). Queue: 6760 rules.
37200 rules inserted. Base: 18136 rules (488 with conclusion selected). Queue: 6952 rules.
37400 rules inserted. Base: 18336 rules (493 with conclusion selected). Queue: 7170 rules.
37600 rules inserted. Base: 18383 rules (500 with conclusion selected). Queue: 7305 rules.
37800 rules inserted. Base: 18476 rules (525 with conclusion selected). Queue: 7526 rules.
38000 rules inserted. Base: 18579 rules (525 with conclusion selected). Queue: 7641 rules.
38200 rules inserted. Base: 18680 rules (527 with conclusion selected). Queue: 7765 rules.
38400 rules inserted. Base: 18778 rules (541 with conclusion selected). Queue: 7925 rules.
38600 rules inserted. Base: 18835 rules (557 with conclusion selected). Queue: 8168 rules.
38800 rules inserted. Base: 18905 rules (558 with conclusion selected). Queue: 8168 rules.
39000 rules inserted. Base: 19010 rules (560 with conclusion selected). Queue: 8079 rules.
39200 rules inserted. Base: 19057 rules (560 with conclusion selected). Queue: 8079 rules.
39400 rules inserted. Base: 19219 rules (560 with conclusion selected). Queue: 7991 rules.
39600 rules inserted. Base: 19307 rules (561 with conclusion selected). Queue: 7990 rules.
39800 rules inserted. Base: 19369 rules (562 with conclusion selected). Queue: 7990 rules.
40000 rules inserted. Base: 19494 rules (563 with conclusion selected). Queue: 7902 rules.
40200 rules inserted. Base: 19572 rules (563 with conclusion selected). Queue: 7902 rules.
40400 rules inserted. Base: 19637 rules (563 with conclusion selected). Queue: 7902 rules.
40600 rules inserted. Base: 19726 rules (565 with conclusion selected). Queue: 7887 rules.
40800 rules inserted. Base: 19871 rules (565 with conclusion selected). Queue: 7814 rules.
41000 rules inserted. Base: 19967 rules (565 with conclusion selected). Queue: 7814 rules.
41200 rules inserted. Base: 20033 rules (566 with conclusion selected). Queue: 7814 rules.
41400 rules inserted. Base: 20158 rules (567 with conclusion selected). Queue: 7726 rules.
41600 rules inserted. Base: 20236 rules (567 with conclusion selected). Queue: 7726 rules.
41800 rules inserted. Base: 20298 rules (567 with conclusion selected). Queue: 7726 rules.
42000 rules inserted. Base: 20390 rules (569 with conclusion selected). Queue: 7707 rules.
42200 rules inserted. Base: 20531 rules (569 with conclusion selected). Queue: 7638 rules.
42400 rules inserted. Base: 20610 rules (569 with conclusion selected). Queue: 7583 rules.
42600 rules inserted. Base: 20752 rules (570 with conclusion selected). Queue: 7441 rules.
42800 rules inserted. Base: 20870 rules (572 with conclusion selected). Queue: 7323 rules.
43000 rules inserted. Base: 20963 rules (573 with conclusion selected). Queue: 7230 rules.
43200 rules inserted. Base: 21076 rules (574 with conclusion selected). Queue: 7117 rules.
43400 rules inserted. Base: 21208 rules (575 with conclusion selected). Queue: 6985 rules.
43600 rules inserted. Base: 21296 rules (576 with conclusion selected). Queue: 6897 rules.
43800 rules inserted. Base: 21424 rules (580 with conclusion selected). Queue: 6870 rules.
44000 rules inserted. Base: 21624 rules (584 with conclusion selected). Queue: 6871 rules.
44200 rules inserted. Base: 21821 rules (585 with conclusion selected). Queue: 6778 rules.
44400 rules inserted. Base: 22018 rules (585 with conclusion selected). Queue: 6587 rules.
44600 rules inserted. Base: 22101 rules (585 with conclusion selected). Queue: 6536 rules.
44800 rules inserted. Base: 22240 rules (585 with conclusion selected). Queue: 6628 rules.
45000 rules inserted. Base: 22309 rules (585 with conclusion selected). Queue: 6607 rules.
45200 rules inserted. Base: 22395 rules (585 with conclusion selected). Queue: 6580 rules.
45400 rules inserted. Base: 22440 rules (585 with conclusion selected). Queue: 6572 rules.
45600 rules inserted. Base: 22504 rules (585 with conclusion selected). Queue: 6534 rules.
45800 rules inserted. Base: 22579 rules (585 with conclusion selected). Queue: 6704 rules.
46000 rules inserted. Base: 22636 rules (585 with conclusion selected). Queue: 6705 rules.
46200 rules inserted. Base: 22706 rules (585 with conclusion selected). Queue: 6690 rules.
46400 rules inserted. Base: 22766 rules (585 with conclusion selected). Queue: 6695 rules.
46600 rules inserted. Base: 22821 rules (585 with conclusion selected). Queue: 6680 rules.
46800 rules inserted. Base: 22958 rules (586 with conclusion selected). Queue: 6555 rules.
47000 rules inserted. Base: 23100 rules (586 with conclusion selected). Queue: 6439 rules.
47200 rules inserted. Base: 23188 rules (587 with conclusion selected). Queue: 6366 rules.
47400 rules inserted. Base: 23276 rules (587 with conclusion selected). Queue: 6320 rules.
47600 rules inserted. Base: 23404 rules (587 with conclusion selected). Queue: 6225 rules.
47800 rules inserted. Base: 23500 rules (588 with conclusion selected). Queue: 6129 rules.
48000 rules inserted. Base: 23558 rules (589 with conclusion selected). Queue: 6091 rules.
48200 rules inserted. Base: 23646 rules (589 with conclusion selected). Queue: 6021 rules.
48400 rules inserted. Base: 23752 rules (590 with conclusion selected). Queue: 5915 rules.
48600 rules inserted. Base: 23800 rules (591 with conclusion selected). Queue: 5887 rules.
48800 rules inserted. Base: 23888 rules (591 with conclusion selected). Queue: 5817 rules.
49000 rules inserted. Base: 24004 rules (592 with conclusion selected). Queue: 5701 rules.
49200 rules inserted. Base: 24042 rules (593 with conclusion selected). Queue: 5683 rules.
49400 rules inserted. Base: 24135 rules (593 with conclusion selected). Queue: 5608 rules.
49600 rules inserted. Base: 24256 rules (594 with conclusion selected). Queue: 5487 rules.
49800 rules inserted. Base: 24284 rules (595 with conclusion selected). Queue: 5479 rules.
50000 rules inserted. Base: 24373 rules (595 with conclusion selected). Queue: 5390 rules.
50200 rules inserted. Base: 24417 rules (595 with conclusion selected). Queue: 5346 rules.
50400 rules inserted. Base: 24438 rules (595 with conclusion selected). Queue: 5325 rules.
50600 rules inserted. Base: 24568 rules (595 with conclusion selected). Queue: 5196 rules.
50800 rules inserted. Base: 24765 rules (595 with conclusion selected). Queue: 5005 rules.
51000 rules inserted. Base: 24940 rules (595 with conclusion selected). Queue: 4842 rules.
51200 rules inserted. Base: 24974 rules (595 with conclusion selected). Queue: 4838 rules.
51400 rules inserted. Base: 24982 rules (595 with conclusion selected). Queue: 4838 rules.
51600 rules inserted. Base: 25020 rules (595 with conclusion selected). Queue: 4856 rules.
51800 rules inserted. Base: 25074 rules (595 with conclusion selected). Queue: 4883 rules.
52000 rules inserted. Base: 25129 rules (595 with conclusion selected). Queue: 4902 rules.
52200 rules inserted. Base: 25157 rules (595 with conclusion selected). Queue: 4898 rules.
52400 rules inserted. Base: 25166 rules (595 with conclusion selected). Queue: 4898 rules.
52600 rules inserted. Base: 25293 rules (595 with conclusion selected). Queue: 4827 rules.
52800 rules inserted. Base: 25329 rules (595 with conclusion selected). Queue: 4845 rules.
53000 rules inserted. Base: 25454 rules (595 with conclusion selected). Queue: 4803 rules.
53200 rules inserted. Base: 25511 rules (595 with conclusion selected). Queue: 4801 rules.
53400 rules inserted. Base: 25559 rules (595 with conclusion selected). Queue: 4806 rules.
53600 rules inserted. Base: 25638 rules (595 with conclusion selected). Queue: 4798 rules.
53800 rules inserted. Base: 25721 rules (595 with conclusion selected). Queue: 4778 rules.
54000 rules inserted. Base: 25807 rules (595 with conclusion selected). Queue: 4694 rules.
54200 rules inserted. Base: 25849 rules (595 with conclusion selected). Queue: 4674 rules.
54400 rules inserted. Base: 25935 rules (595 with conclusion selected). Queue: 4590 rules.
54600 rules inserted. Base: 25978 rules (595 with conclusion selected). Queue: 4569 rules.
54800 rules inserted. Base: 26063 rules (595 with conclusion selected). Queue: 4486 rules.
55000 rules inserted. Base: 26109 rules (595 with conclusion selected). Queue: 4462 rules.
55200 rules inserted. Base: 26192 rules (595 with conclusion selected). Queue: 4382 rules.
55400 rules inserted. Base: 26263 rules (595 with conclusion selected). Queue: 4314 rules.
55600 rules inserted. Base: 26392 rules (595 with conclusion selected). Queue: 4185 rules.
55800 rules inserted. Base: 26518 rules (595 with conclusion selected). Queue: 4062 rules.
56000 rules inserted. Base: 26639 rules (601 with conclusion selected). Queue: 4012 rules.
56200 rules inserted. Base: 26683 rules (601 with conclusion selected). Queue: 3976 rules.
56400 rules inserted. Base: 26810 rules (601 with conclusion selected). Queue: 3912 rules.
56600 rules inserted. Base: 26992 rules (601 with conclusion selected). Queue: 3838 rules.
56800 rules inserted. Base: 27178 rules (601 with conclusion selected). Queue: 3778 rules.
57000 rules inserted. Base: 27346 rules (601 with conclusion selected). Queue: 3730 rules.
57200 rules inserted. Base: 27454 rules (601 with conclusion selected). Queue: 3626 rules.
57400 rules inserted. Base: 27490 rules (601 with conclusion selected). Queue: 3624 rules.
57600 rules inserted. Base: 27668 rules (601 with conclusion selected). Queue: 3535 rules.
57800 rules inserted. Base: 27838 rules (601 with conclusion selected). Queue: 3471 rules.
58000 rules inserted. Base: 28021 rules (601 with conclusion selected). Queue: 3370 rules.
58200 rules inserted. Base: 28145 rules (601 with conclusion selected). Queue: 3362 rules.
58400 rules inserted. Base: 28260 rules (601 with conclusion selected). Queue: 3312 rules.
58600 rules inserted. Base: 28337 rules (601 with conclusion selected). Queue: 3368 rules.
58800 rules inserted. Base: 28383 rules (601 with conclusion selected). Queue: 3324 rules.
59000 rules inserted. Base: 28441 rules (601 with conclusion selected). Queue: 3268 rules.
59200 rules inserted. Base: 28477 rules (601 with conclusion selected). Queue: 3236 rules.
59400 rules inserted. Base: 28533 rules (601 with conclusion selected). Queue: 3182 rules.
59600 rules inserted. Base: 28584 rules (601 with conclusion selected). Queue: 3134 rules.
59800 rules inserted. Base: 28712 rules (601 with conclusion selected). Queue: 3007 rules.
60000 rules inserted. Base: 28876 rules (607 with conclusion selected). Queue: 2937 rules.
60200 rules inserted. Base: 29071 rules (607 with conclusion selected). Queue: 2798 rules.
60400 rules inserted. Base: 29229 rules (607 with conclusion selected). Queue: 2753 rules.
60600 rules inserted. Base: 29392 rules (607 with conclusion selected). Queue: 2702 rules.
60800 rules inserted. Base: 29577 rules (607 with conclusion selected). Queue: 2693 rules.
61000 rules inserted. Base: 29763 rules (607 with conclusion selected). Queue: 2514 rules.
61200 rules inserted. Base: 29896 rules (607 with conclusion selected). Queue: 2504 rules.
61400 rules inserted. Base: 30026 rules (607 with conclusion selected). Queue: 2493 rules.
61600 rules inserted. Base: 30208 rules (607 with conclusion selected). Queue: 2452 rules.
61800 rules inserted. Base: 30386 rules (607 with conclusion selected). Queue: 2454 rules.
62000 rules inserted. Base: 30527 rules (607 with conclusion selected). Queue: 2368 rules.
62200 rules inserted. Base: 30635 rules (607 with conclusion selected). Queue: 2264 rules.
62400 rules inserted. Base: 30724 rules (607 with conclusion selected). Queue: 2179 rules.
62600 rules inserted. Base: 30806 rules (607 with conclusion selected). Queue: 2101 rules.
62800 rules inserted. Base: 30911 rules (607 with conclusion selected). Queue: 1996 rules.
63000 rules inserted. Base: 31029 rules (607 with conclusion selected). Queue: 1950 rules.
63200 rules inserted. Base: 31139 rules (607 with conclusion selected). Queue: 1932 rules.
63400 rules inserted. Base: 31289 rules (607 with conclusion selected). Queue: 1830 rules.
63600 rules inserted. Base: 31455 rules (607 with conclusion selected). Queue: 1797 rules.
63800 rules inserted. Base: 31600 rules (607 with conclusion selected). Queue: 1755 rules.
64000 rules inserted. Base: 31741 rules (607 with conclusion selected). Queue: 1672 rules.
64200 rules inserted. Base: 31905 rules (607 with conclusion selected). Queue: 1602 rules.
64400 rules inserted. Base: 32078 rules (607 with conclusion selected). Queue: 1525 rules.
64600 rules inserted. Base: 32246 rules (607 with conclusion selected). Queue: 1349 rules.
64800 rules inserted. Base: 32420 rules (607 with conclusion selected). Queue: 1167 rules.
65000 rules inserted. Base: 32527 rules (619 with conclusion selected). Queue: 1057 rules.
65200 rules inserted. Base: 32673 rules (619 with conclusion selected). Queue: 994 rules.
65400 rules inserted. Base: 32796 rules (619 with conclusion selected). Queue: 899 rules.
65600 rules inserted. Base: 32938 rules (619 with conclusion selected). Queue: 839 rules.
65800 rules inserted. Base: 33061 rules (619 with conclusion selected). Queue: 742 rules.
66000 rules inserted. Base: 33111 rules (631 with conclusion selected). Queue: 653 rules.
66200 rules inserted. Base: 33215 rules (631 with conclusion selected). Queue: 694 rules.
66400 rules inserted. Base: 33307 rules (631 with conclusion selected). Queue: 682 rules.
66600 rules inserted. Base: 33363 rules (631 with conclusion selected). Queue: 704 rules.
66800 rules inserted. Base: 33395 rules (633 with conclusion selected). Queue: 645 rules.
67000 rules inserted. Base: 33384 rules (633 with conclusion selected). Queue: 576 rules.
67200 rules inserted. Base: 33473 rules (633 with conclusion selected). Queue: 490 rules.
67400 rules inserted. Base: 33181 rules (637 with conclusion selected). Queue: 494 rules.
67600 rules inserted. Base: 32737 rules (637 with conclusion selected). Queue: 511 rules.
67800 rules inserted. Base: 32288 rules (643 with conclusion selected). Queue: 530 rules.
68000 rules inserted. Base: 32039 rules (647 with conclusion selected). Queue: 516 rules.
68200 rules inserted. Base: 32029 rules (679 with conclusion selected). Queue: 461 rules.
68400 rules inserted. Base: 31589 rules (690 with conclusion selected). Queue: 601 rules.
68600 rules inserted. Base: 31047 rules (691 with conclusion selected). Queue: 598 rules.
68800 rules inserted. Base: 30728 rules (691 with conclusion selected). Queue: 563 rules.
69000 rules inserted. Base: 30722 rules (702 with conclusion selected). Queue: 631 rules.
69200 rules inserted. Base: 30369 rules (702 with conclusion selected). Queue: 572 rules.
69400 rules inserted. Base: 30185 rules (714 with conclusion selected). Queue: 562 rules.
69600 rules inserted. Base: 30382 rules (722 with conclusion selected). Queue: 535 rules.
69800 rules inserted. Base: 30525 rules (787 with conclusion selected). Queue: 522 rules.
70000 rules inserted. Base: 30690 rules (797 with conclusion selected). Queue: 544 rules.
70200 rules inserted. Base: 30855 rules (799 with conclusion selected). Queue: 469 rules.
70400 rules inserted. Base: 30993 rules (799 with conclusion selected). Queue: 412 rules.
70600 rules inserted. Base: 31150 rules (800 with conclusion selected). Queue: 314 rules.
70800 rules inserted. Base: 31255 rules (806 with conclusion selected). Queue: 291 rules.
71000 rules inserted. Base: 31261 rules (815 with conclusion selected). Queue: 363 rules.
71200 rules inserted. Base: 31414 rules (822 with conclusion selected). Queue: 329 rules.
71400 rules inserted. Base: 31428 rules (841 with conclusion selected). Queue: 731 rules.
71600 rules inserted. Base: 31565 rules (847 with conclusion selected). Queue: 692 rules.
71800 rules inserted. Base: 31664 rules (854 with conclusion selected). Queue: 851 rules.
72000 rules inserted. Base: 31852 rules (855 with conclusion selected). Queue: 725 rules.
72200 rules inserted. Base: 31974 rules (858 with conclusion selected). Queue: 663 rules.
72400 rules inserted. Base: 32105 rules (863 with conclusion selected). Queue: 782 rules.
72600 rules inserted. Base: 32238 rules (866 with conclusion selected). Queue: 860 rules.
72800 rules inserted. Base: 32341 rules (867 with conclusion selected). Queue: 858 rules.
73000 rules inserted. Base: 32457 rules (870 with conclusion selected). Queue: 923 rules.
73200 rules inserted. Base: 32593 rules (871 with conclusion selected). Queue: 950 rules.
73400 rules inserted. Base: 32757 rules (872 with conclusion selected). Queue: 977 rules.
73600 rules inserted. Base: 32919 rules (888 with conclusion selected). Queue: 1486 rules.
73800 rules inserted. Base: 33052 rules (889 with conclusion selected). Queue: 1454 rules.
74000 rules inserted. Base: 33227 rules (889 with conclusion selected). Queue: 1454 rules.
74200 rules inserted. Base: 33399 rules (889 with conclusion selected). Queue: 1454 rules.
74400 rules inserted. Base: 33534 rules (889 with conclusion selected). Queue: 1454 rules.
74600 rules inserted. Base: 33695 rules (889 with conclusion selected). Queue: 1395 rules.
74800 rules inserted. Base: 33893 rules (889 with conclusion selected). Queue: 1222 rules.
75000 rules inserted. Base: 34083 rules (889 with conclusion selected). Queue: 1062 rules.
75200 rules inserted. Base: 34109 rules (893 with conclusion selected). Queue: 1152 rules.
75400 rules inserted. Base: 34257 rules (893 with conclusion selected). Queue: 1152 rules.
75600 rules inserted. Base: 34387 rules (893 with conclusion selected). Queue: 1152 rules.
75800 rules inserted. Base: 34517 rules (893 with conclusion selected). Queue: 1152 rules.
76000 rules inserted. Base: 34649 rules (893 with conclusion selected). Queue: 1153 rules.
76200 rules inserted. Base: 34800 rules (896 with conclusion selected). Queue: 1279 rules.
76400 rules inserted. Base: 34911 rules (899 with conclusion selected). Queue: 1424 rules.
76600 rules inserted. Base: 35059 rules (899 with conclusion selected). Queue: 1424 rules.
76800 rules inserted. Base: 35179 rules (899 with conclusion selected). Queue: 1424 rules.
77000 rules inserted. Base: 35265 rules (899 with conclusion selected). Queue: 1424 rules.
77200 rules inserted. Base: 35371 rules (899 with conclusion selected). Queue: 1445 rules.
77400 rules inserted. Base: 35571 rules (899 with conclusion selected). Queue: 1524 rules.
77600 rules inserted. Base: 35743 rules (900 with conclusion selected). Queue: 1579 rules.
77800 rules inserted. Base: 35915 rules (901 with conclusion selected). Queue: 1674 rules.
78000 rules inserted. Base: 36001 rules (901 with conclusion selected). Queue: 1674 rules.
78200 rules inserted. Base: 36051 rules (901 with conclusion selected). Queue: 1674 rules.
78400 rules inserted. Base: 36127 rules (901 with conclusion selected). Queue: 1650 rules.
78600 rules inserted. Base: 36209 rules (901 with conclusion selected). Queue: 1685 rules.
78800 rules inserted. Base: 36363 rules (901 with conclusion selected). Queue: 1754 rules.
79000 rules inserted. Base: 36515 rules (901 with conclusion selected). Queue: 1770 rules.
79200 rules inserted. Base: 36671 rules (901 with conclusion selected). Queue: 1834 rules.
79400 rules inserted. Base: 36813 rules (901 with conclusion selected). Queue: 1850 rules.
79600 rules inserted. Base: 36869 rules (901 with conclusion selected). Queue: 1850 rules.
79800 rules inserted. Base: 36953 rules (901 with conclusion selected). Queue: 1858 rules.
80000 rules inserted. Base: 37037 rules (901 with conclusion selected). Queue: 1866 rules.
80200 rules inserted. Base: 37104 rules (901 with conclusion selected). Queue: 1863 rules.
80400 rules inserted. Base: 37259 rules (901 with conclusion selected). Queue: 1902 rules.
80600 rules inserted. Base: 37419 rules (901 with conclusion selected). Queue: 2030 rules.
80800 rules inserted. Base: 37581 rules (901 with conclusion selected). Queue: 2094 rules.
81000 rules inserted. Base: 37733 rules (901 with conclusion selected). Queue: 2222 rules.
81200 rules inserted. Base: 37920 rules (901 with conclusion selected). Queue: 2278 rules.
81400 rules inserted. Base: 38041 rules (901 with conclusion selected). Queue: 2294 rules.
81600 rules inserted. Base: 38085 rules (901 with conclusion selected). Queue: 2294 rules.
81800 rules inserted. Base: 38165 rules (901 with conclusion selected). Queue: 2298 rules.
82000 rules inserted. Base: 38309 rules (901 with conclusion selected). Queue: 2282 rules.
82200 rules inserted. Base: 38477 rules (901 with conclusion selected). Queue: 2256 rules.
82400 rules inserted. Base: 38617 rules (901 with conclusion selected). Queue: 2254 rules.
82600 rules inserted. Base: 38753 rules (901 with conclusion selected). Queue: 2254 rules.
82800 rules inserted. Base: 38857 rules (901 with conclusion selected). Queue: 2350 rules.
83000 rules inserted. Base: 38968 rules (901 with conclusion selected). Queue: 2382 rules.
83200 rules inserted. Base: 39107 rules (901 with conclusion selected). Queue: 2382 rules.
83400 rules inserted. Base: 39221 rules (901 with conclusion selected). Queue: 2382 rules.
83600 rules inserted. Base: 39341 rules (901 with conclusion selected). Queue: 2510 rules.
83800 rules inserted. Base: 39455 rules (901 with conclusion selected). Queue: 2490 rules.
84000 rules inserted. Base: 39607 rules (901 with conclusion selected). Queue: 2446 rules.
84200 rules inserted. Base: 39755 rules (901 with conclusion selected). Queue: 2426 rules.
84400 rules inserted. Base: 39913 rules (901 with conclusion selected). Queue: 2402 rules.
84600 rules inserted. Base: 40003 rules (901 with conclusion selected). Queue: 2394 rules.
84800 rules inserted. Base: 40061 rules (901 with conclusion selected). Queue: 2418 rules.
85000 rules inserted. Base: 40130 rules (901 with conclusion selected). Queue: 2426 rules.
85200 rules inserted. Base: 40282 rules (901 with conclusion selected). Queue: 2426 rules.
85400 rules inserted. Base: 40331 rules (901 with conclusion selected). Queue: 2410 rules.
85600 rules inserted. Base: 40387 rules (901 with conclusion selected). Queue: 2434 rules.
85800 rules inserted. Base: 40457 rules (901 with conclusion selected). Queue: 2442 rules.
86000 rules inserted. Base: 40609 rules (901 with conclusion selected). Queue: 2442 rules.
86200 rules inserted. Base: 40767 rules (901 with conclusion selected). Queue: 2446 rules.
86400 rules inserted. Base: 40915 rules (901 with conclusion selected). Queue: 2430 rules.
86600 rules inserted. Base: 41087 rules (901 with conclusion selected). Queue: 2398 rules.
86800 rules inserted. Base: 41201 rules (901 with conclusion selected). Queue: 2370 rules.
87000 rules inserted. Base: 41271 rules (901 with conclusion selected). Queue: 2350 rules.
87200 rules inserted. Base: 41443 rules (901 with conclusion selected). Queue: 2458 rules.
87400 rules inserted. Base: 41487 rules (901 with conclusion selected). Queue: 2478 rules.
87600 rules inserted. Base: 41551 rules (901 with conclusion selected). Queue: 2502 rules.
87800 rules inserted. Base: 41583 rules (901 with conclusion selected). Queue: 2494 rules.
88000 rules inserted. Base: 41741 rules (901 with conclusion selected). Queue: 2590 rules.
88200 rules inserted. Base: 41799 rules (901 with conclusion selected). Queue: 2622 rules.
88400 rules inserted. Base: 41863 rules (901 with conclusion selected). Queue: 2646 rules.
88600 rules inserted. Base: 41935 rules (901 with conclusion selected). Queue: 2654 rules.
88800 rules inserted. Base: 42083 rules (901 with conclusion selected). Queue: 2606 rules.
89000 rules inserted. Base: 42189 rules (901 with conclusion selected). Queue: 2582 rules.
89200 rules inserted. Base: 42294 rules (905 with conclusion selected). Queue: 2648 rules.
89400 rules inserted. Base: 42359 rules (905 with conclusion selected). Queue: 2667 rules.
89600 rules inserted. Base: 42534 rules (905 with conclusion selected). Queue: 2667 rules.
89800 rules inserted. Base: 42633 rules (905 with conclusion selected). Queue: 2667 rules.
90000 rules inserted. Base: 42701 rules (905 with conclusion selected). Queue: 2731 rules.
90200 rules inserted. Base: 42845 rules (905 with conclusion selected). Queue: 2779 rules.
90400 rules inserted. Base: 42941 rules (905 with conclusion selected). Queue: 2779 rules.
90600 rules inserted. Base: 43117 rules (905 with conclusion selected). Queue: 2779 rules.
90800 rules inserted. Base: 43169 rules (905 with conclusion selected). Queue: 2779 rules.
91000 rules inserted. Base: 43273 rules (905 with conclusion selected). Queue: 2852 rules.
91200 rules inserted. Base: 43409 rules (905 with conclusion selected). Queue: 2883 rules.
91400 rules inserted. Base: 43501 rules (905 with conclusion selected). Queue: 2883 rules.
91600 rules inserted. Base: 43561 rules (905 with conclusion selected). Queue: 2875 rules.
91800 rules inserted. Base: 43687 rules (905 with conclusion selected). Queue: 2807 rules.
92000 rules inserted. Base: 43710 rules (913 with conclusion selected). Queue: 2752 rules.
92200 rules inserted. Base: 43807 rules (913 with conclusion selected). Queue: 2752 rules.
92400 rules inserted. Base: 43896 rules (913 with conclusion selected). Queue: 2752 rules.
92600 rules inserted. Base: 43884 rules (913 with conclusion selected). Queue: 2736 rules.
92800 rules inserted. Base: 44059 rules (913 with conclusion selected). Queue: 2736 rules.
93000 rules inserted. Base: 44201 rules (913 with conclusion selected). Queue: 2722 rules.
93200 rules inserted. Base: 44214 rules (913 with conclusion selected). Queue: 2720 rules.
93400 rules inserted. Base: 44319 rules (913 with conclusion selected). Queue: 2720 rules.
93600 rules inserted. Base: 44284 rules (913 with conclusion selected). Queue: 2704 rules.
93800 rules inserted. Base: 44443 rules (913 with conclusion selected). Queue: 2704 rules.
94000 rules inserted. Base: 44614 rules (913 with conclusion selected). Queue: 2704 rules.
94200 rules inserted. Base: 44709 rules (913 with conclusion selected). Queue: 2652 rules.
94400 rules inserted. Base: 44806 rules (913 with conclusion selected). Queue: 2568 rules.
94600 rules inserted. Base: 44916 rules (913 with conclusion selected). Queue: 2517 rules.
94800 rules inserted. Base: 44817 rules (913 with conclusion selected). Queue: 2515 rules.
95000 rules inserted. Base: 44979 rules (913 with conclusion selected). Queue: 2507 rules.
95200 rules inserted. Base: 45098 rules (913 with conclusion selected). Queue: 2500 rules.
95400 rules inserted. Base: 45159 rules (913 with conclusion selected). Queue: 2468 rules.
95600 rules inserted. Base: 45264 rules (913 with conclusion selected). Queue: 2468 rules.
95800 rules inserted. Base: 45296 rules (913 with conclusion selected). Queue: 2468 rules.
96000 rules inserted. Base: 45448 rules (913 with conclusion selected). Queue: 2460 rules.
96200 rules inserted. Base: 45600 rules (913 with conclusion selected). Queue: 2452 rules.
96400 rules inserted. Base: 45635 rules (913 with conclusion selected). Queue: 2420 rules.
96600 rules inserted. Base: 45740 rules (913 with conclusion selected). Queue: 2420 rules.
96800 rules inserted. Base: 45811 rules (913 with conclusion selected). Queue: 2392 rules.
97000 rules inserted. Base: 45903 rules (913 with conclusion selected). Queue: 2321 rules.
97200 rules inserted. Base: 45993 rules (913 with conclusion selected). Queue: 2231 rules.
97400 rules inserted. Base: 46018 rules (913 with conclusion selected). Queue: 2207 rules.
97600 rules inserted. Base: 46123 rules (913 with conclusion selected). Queue: 2191 rules.
97800 rules inserted. Base: 46120 rules (913 with conclusion selected). Queue: 2182 rules.
98000 rules inserted. Base: 46282 rules (913 with conclusion selected). Queue: 2174 rules.
98200 rules inserted. Base: 46415 rules (913 with conclusion selected). Queue: 2167 rules.
98400 rules inserted. Base: 46449 rules (913 with conclusion selected). Queue: 2143 rules.
98600 rules inserted. Base: 46554 rules (913 with conclusion selected). Queue: 2127 rules.
98800 rules inserted. Base: 46556 rules (913 with conclusion selected). Queue: 2118 rules.
99000 rules inserted. Base: 46718 rules (913 with conclusion selected). Queue: 2109 rules.
99200 rules inserted. Base: 46836 rules (913 with conclusion selected). Queue: 2163 rules.
99400 rules inserted. Base: 46940 rules (913 with conclusion selected). Queue: 2074 rules.
99600 rules inserted. Base: 46909 rules (913 with conclusion selected). Queue: 2050 rules.
99800 rules inserted. Base: 47006 rules (913 with conclusion selected). Queue: 2034 rules.
100000 rules inserted. Base: 47054 rules (913 with conclusion selected). Queue: 1998 rules.
100200 rules inserted. Base: 47159 rules (913 with conclusion selected). Queue: 1982 rules.
100400 rules inserted. Base: 47214 rules (913 with conclusion selected). Queue: 1970 rules.
100600 rules inserted. Base: 47306 rules (913 with conclusion selected). Queue: 1946 rules.
100800 rules inserted. Base: 47391 rules (913 with conclusion selected). Queue: 1921 rules.
101000 rules inserted. Base: 47452 rules (913 with conclusion selected). Queue: 1902 rules.
101200 rules inserted. Base: 47557 rules (913 with conclusion selected). Queue: 1886 rules.
101400 rules inserted. Base: 47578 rules (913 with conclusion selected). Queue: 1906 rules.
101600 rules inserted. Base: 47527 rules (913 with conclusion selected). Queue: 1897 rules.
101800 rules inserted. Base: 47615 rules (913 with conclusion selected). Queue: 1818 rules.
102000 rules inserted. Base: 47707 rules (913 with conclusion selected). Queue: 1786 rules.
102200 rules inserted. Base: 47804 rules (913 with conclusion selected). Queue: 1764 rules.
102400 rules inserted. Base: 47898 rules (913 with conclusion selected). Queue: 1720 rules.
102600 rules inserted. Base: 47989 rules (913 with conclusion selected). Queue: 1635 rules.
102800 rules inserted. Base: 48078 rules (913 with conclusion selected). Queue: 1594 rules.
103000 rules inserted. Base: 48175 rules (913 with conclusion selected). Queue: 1578 rules.
103200 rules inserted. Base: 48240 rules (913 with conclusion selected). Queue: 1554 rules.
103400 rules inserted. Base: 48228 rules (913 with conclusion selected). Queue: 1602 rules.
103600 rules inserted. Base: 48012 rules (937 with conclusion selected). Queue: 1884 rules.
103800 rules inserted. Base: 48122 rules (937 with conclusion selected). Queue: 1816 rules.
104000 rules inserted. Base: 48210 rules (937 with conclusion selected). Queue: 1737 rules.
104200 rules inserted. Base: 48294 rules (937 with conclusion selected). Queue: 1738 rules.
104400 rules inserted. Base: 48391 rules (937 with conclusion selected). Queue: 1695 rules.
104600 rules inserted. Base: 48480 rules (937 with conclusion selected). Queue: 1612 rules.
104800 rules inserted. Base: 48524 rules (937 with conclusion selected). Queue: 1574 rules.
105000 rules inserted. Base: 48520 rules (937 with conclusion selected). Queue: 1566 rules.
105200 rules inserted. Base: 48566 rules (945 with conclusion selected). Queue: 1577 rules.
105400 rules inserted. Base: 48766 rules (945 with conclusion selected). Queue: 1454 rules.
105600 rules inserted. Base: 48948 rules (945 with conclusion selected). Queue: 1344 rules.
105800 rules inserted. Base: 49026 rules (945 with conclusion selected). Queue: 1408 rules.
106000 rules inserted. Base: 49218 rules (945 with conclusion selected). Queue: 1285 rules.
106200 rules inserted. Base: 49324 rules (945 with conclusion selected). Queue: 1248 rules.
106400 rules inserted. Base: 49354 rules (945 with conclusion selected). Queue: 1172 rules.
106600 rules inserted. Base: 49394 rules (945 with conclusion selected). Queue: 1154 rules.
106800 rules inserted. Base: 49450 rules (949 with conclusion selected). Queue: 1091 rules.
107000 rules inserted. Base: 49650 rules (949 with conclusion selected). Queue: 985 rules.
107200 rules inserted. Base: 49838 rules (949 with conclusion selected). Queue: 867 rules.
107400 rules inserted. Base: 50036 rules (949 with conclusion selected). Queue: 806 rules.
107600 rules inserted. Base: 50188 rules (949 with conclusion selected). Queue: 675 rules.
107800 rules inserted. Base: 50324 rules (953 with conclusion selected). Queue: 664 rules.
108000 rules inserted. Base: 50508 rules (953 with conclusion selected). Queue: 653 rules.
108200 rules inserted. Base: 50690 rules (953 with conclusion selected). Queue: 557 rules.
108400 rules inserted. Base: 50789 rules (953 with conclusion selected). Queue: 496 rules.
108600 rules inserted. Base: 50938 rules (953 with conclusion selected). Queue: 492 rules.
108800 rules inserted. Base: 51110 rules (953 with conclusion selected). Queue: 476 rules.
109000 rules inserted. Base: 51294 rules (953 with conclusion selected). Queue: 342 rules.
109200 rules inserted. Base: 51405 rules (953 with conclusion selected). Queue: 341 rules.
109400 rules inserted. Base: 51525 rules (953 with conclusion selected). Queue: 347 rules.
109600 rules inserted. Base: 51660 rules (953 with conclusion selected). Queue: 507 rules.
109800 rules inserted. Base: 51841 rules (953 with conclusion selected). Queue: 578 rules.
110000 rules inserted. Base: 51898 rules (953 with conclusion selected). Queue: 778 rules.
110200 rules inserted. Base: 52034 rules (953 with conclusion selected). Queue: 762 rules.
110400 rules inserted. Base: 52170 rules (953 with conclusion selected). Queue: 642 rules.
110600 rules inserted. Base: 52276 rules (955 with conclusion selected). Queue: 699 rules.
110800 rules inserted. Base: 52420 rules (955 with conclusion selected). Queue: 555 rules.
111000 rules inserted. Base: 52551 rules (955 with conclusion selected). Queue: 653 rules.
111200 rules inserted. Base: 52716 rules (955 with conclusion selected). Queue: 511 rules.
111400 rules inserted. Base: 52799 rules (955 with conclusion selected). Queue: 437 rules.
111600 rules inserted. Base: 52966 rules (955 with conclusion selected). Queue: 269 rules.
111800 rules inserted. Base: 52980 rules (961 with conclusion selected). Queue: 298 rules.
112000 rules inserted. Base: 52995 rules (961 with conclusion selected). Queue: 320 rules.
112200 rules inserted. Base: 53033 rules (963 with conclusion selected). Queue: 363 rules.
112400 rules inserted. Base: 53067 rules (968 with conclusion selected). Queue: 342 rules.
112600 rules inserted. Base: 53008 rules (968 with conclusion selected). Queue: 338 rules.
112800 rules inserted. Base: 53040 rules (973 with conclusion selected). Queue: 286 rules.
113000 rules inserted. Base: 52878 rules (975 with conclusion selected). Queue: 286 rules.
113200 rules inserted. Base: 52738 rules (975 with conclusion selected). Queue: 276 rules.
113400 rules inserted. Base: 52526 rules (977 with conclusion selected). Queue: 270 rules.
113600 rules inserted. Base: 52473 rules (982 with conclusion selected). Queue: 389 rules.
113800 rules inserted. Base: 52464 rules (986 with conclusion selected). Queue: 412 rules.
114000 rules inserted. Base: 52548 rules (987 with conclusion selected). Queue: 394 rules.
114200 rules inserted. Base: 52583 rules (998 with conclusion selected). Queue: 456 rules.
114400 rules inserted. Base: 52662 rules (1003 with conclusion selected). Queue: 448 rules.
114600 rules inserted. Base: 52736 rules (1013 with conclusion selected). Queue: 405 rules.
114800 rules inserted. Base: 52870 rules (1021 with conclusion selected). Queue: 566 rules.
115000 rules inserted. Base: 53046 rules (1033 with conclusion selected). Queue: 591 rules.
115200 rules inserted. Base: 53138 rules (1035 with conclusion selected). Queue: 581 rules.
115400 rules inserted. Base: 53290 rules (1044 with conclusion selected). Queue: 571 rules.
115600 rules inserted. Base: 53392 rules (1047 with conclusion selected). Queue: 555 rules.
115800 rules inserted. Base: 53587 rules (1055 with conclusion selected). Queue: 367 rules.
116000 rules inserted. Base: 53733 rules (1055 with conclusion selected). Queue: 287 rules.
116200 rules inserted. Base: 53921 rules (1067 with conclusion selected). Queue: 115 rules.
116400 rules inserted. Base: 53949 rules (1081 with conclusion selected). Queue: 390 rules.
116600 rules inserted. Base: 54023 rules (1083 with conclusion selected). Queue: 500 rules.
116800 rules inserted. Base: 54201 rules (1083 with conclusion selected). Queue: 435 rules.
117000 rules inserted. Base: 54273 rules (1085 with conclusion selected). Queue: 449 rules.
117200 rules inserted. Base: 54353 rules (1091 with conclusion selected). Queue: 432 rules.
117400 rules inserted. Base: 54539 rules (1093 with conclusion selected). Queue: 416 rules.
117600 rules inserted. Base: 54709 rules (1097 with conclusion selected). Queue: 462 rules.
117800 rules inserted. Base: 54857 rules (1105 with conclusion selected). Queue: 586 rules.
118000 rules inserted. Base: 55021 rules (1111 with conclusion selected). Queue: 648 rules.
118200 rules inserted. Base: 55169 rules (1113 with conclusion selected). Queue: 662 rules.
118400 rules inserted. Base: 55303 rules (1115 with conclusion selected). Queue: 701 rules.
118600 rules inserted. Base: 55436 rules (1119 with conclusion selected). Queue: 800 rules.
118800 rules inserted. Base: 55581 rules (1119 with conclusion selected). Queue: 672 rules.
119000 rules inserted. Base: 55741 rules (1119 with conclusion selected). Queue: 631 rules.
119200 rules inserted. Base: 55885 rules (1119 with conclusion selected). Queue: 496 rules.
119400 rules inserted. Base: 56045 rules (1119 with conclusion selected). Queue: 455 rules.
119600 rules inserted. Base: 56213 rules (1119 with conclusion selected). Queue: 287 rules.
119800 rules inserted. Base: 56365 rules (1119 with conclusion selected). Queue: 135 rules.
Starting query inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_160,m_161,m_162,m_163,m_164,m_165,m_166)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_167,m_168,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_169,m_170,m_160,m_164,m_165)) && inj-event(auth_UserSendsLastMessageToApp(m_167,m_168,m_169,m_170)) && inj-event(auth_TTPInConeOfApp(m_161,m_162))
RESULT inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_160,m_161,m_162,m_163,m_164,m_165,m_166)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_167,m_168,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_169,m_170,m_160,m_164,m_165)) && inj-event(auth_UserSendsLastMessageToApp(m_167,m_168,m_169,m_170)) && inj-event(auth_TTPInConeOfApp(m_161,m_162)) is true.

--------------------------------------------------------------
Verification summary:

Query inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_160,m_161,m_162,m_163,m_vpr)) && inj-event(verifierInConeOfUser(m_160,m_161,m_162,m_163)) is true.

Query inj-event(auth_AppCompletesProtocol(m_160,m_161,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_162,m_163,m_164,m_165,m_166,m_167)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_164,m_168,m_169,m_170,m_165,m_166,m_167)) && inj-event(auth_UserSendsLastMessageToApp(m_160,m_161,m_162,m_163)) && inj-event(auth_TTPInConeOfApp(m_168,m_169)) is true.

Query inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_160,m_161,m_162,m_163,m_164,m_165,m_166)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_167,m_168,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_169,m_170,m_160,m_164,m_165)) && inj-event(auth_UserSendsLastMessageToApp(m_167,m_168,m_169,m_170)) && inj-event(auth_TTPInConeOfApp(m_161,m_162)) is true.

--------------------------------------------------------------

biasi@habes:~/Documents/DKGNonRepudiation/formal_verification/didcomm$