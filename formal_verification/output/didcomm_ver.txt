File "didcomm_ver.pv", line 301, character 9:
Warning: identifier h rebound.
Linear part:
exp(exp(g,x),y) = exp(exp(g,y),x)
Completing equations...
Completed equations:
exp(exp(g,x),y) = exp(exp(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new u: bitstring;
{2}new a: bitstring;
{3}new v: bitstring;
{4}new i: bitstring;
{5}out(c, u);
{6}out(c, a);
{7}out(c, v);
{8}out(c, i);
{9}new sku: SecretKey;
{10}new ska: SecretKey;
{11}new skv: SecretKey;
{12}new ski: SecretKey;
{13}new exp_u: exponent;
{14}new exp_a: exponent;
{15}new exp_v: exponent;
{16}new exp_i: exponent;
{17}out(c, exp(g,exp_u));
{18}out(c, exp(g,exp_a));
{19}out(c, exp(g,exp_v));
{20}out(c, exp(g,exp_i));
{21}out(c, pk(sku));
{22}out(c, pk(ska));
{23}out(c, pk(skv));
{24}out(c, pk(ski));
{25}let vc: bitstring = ((i,u),sig((i,u),ski)) in
(
    {26}!
    {27}let talksOnlyToHonest: bool = true in
    {28}let c_1: channel = c in
    {29}let u_1: bitstring = u in
    {30}let exp_u_1: exponent = exp_u in
    {31}let sku_1: SecretKey = sku in
    {32}let a_1: bitstring = a in
    {33}let pka: PublicKey = pk(ska) in
    {34}let exp_a_1: G = exp(g,exp_a) in
    {35}let v_1: bitstring = v in
    {36}let pkv: PublicKey = pk(skv) in
    {37}let exp_v_1: G = exp(g,exp_v) in
    {38}let uri: bitstring = uri_req in
    {39}new su: exponent;
    {40}let g_su: G = exp(g,su) in
    {41}let K0: G = exp(exp_a_1,su) in
    {42}let h0: SymmetricKey = hash_fork(((g_su,exp_a_1,K0),keyEncCtoSTemp)) in
    {43}new symk_0: SymmetricKey;
    {44}let diddoc_su_signed: bitstring = (g_su,sig(hash((sig_gsu,pka,g_su)),sku_1)) in
    {45}let m_1: bitstring = (KEXDHINIT,aenc((gsu,g_su),pka),enc((symk0,symk_0),h0),enc(diddoc_su_signed,symk_0)) in
    {46}out(c_1, (msg1,m_1));
    {47}in(c_1, (=msg2,m_2: bitstring));
    {48}let (=KEXDHREPLY,g_sa_enc: bitstring,symk_1_enc: bitstring,diddoc_sa_signed_enc: bitstring) = m_2 in
    {49}let (=gsa,g_sa: G) = adec(g_sa_enc,sku_1) in
    {50}let K: G = exp(g_sa,su) in
    {51}let h: SymmetricKey = hash_fork(((g_su,g_sa,K),keyEncStoCTemp)) in
    {52}let (=symk1,symk_1: SymmetricKey) = dec(symk_1_enc,h) in
    {53}let (g_sa': G,g_sa_signed: bitstring) = dec(diddoc_sa_signed_enc,symk_1) in
    {54}if check(hash((sig_gsa,pk(sku_1),g_sa)),g_sa_signed,pka) then
    {55}let symk_ua_enc: SymmetricKey = hash_fork((K,h,keyEncCtoS)) in
    {56}let symk_ua_dec: SymmetricKey = hash_fork((K,h,keyEncStoC)) in
    {57}in(c_1, (=msg7,m_7: bitstring));
    {58}let (symk6_enc: bitstring,m7_enc: bitstring) = m_7 in
    {59}let (=symk6,symk_6: SymmetricKey) = dec(symk6_enc,symk_ua_dec) in
    {60}let (=tag7,n_r: bitstring,v': bitstring,vpr_signed: bitstring) = dec(m7_enc,symk_6) in
    {61}if (v_1 = v') then
    {62}let (=dec_vpr_2_msg,vpr_rec: bitstring,sig_vpr_2: bitstring) = vpr_signed in
    {63}if check(vpr_rec,sig_vpr_2,pka) then
    {64}let (=dec_vpr_msg,v'': bitstring,rule': bitstring,n_c: bitstring) = vpr_rec in
    {65}let (u': bitstring,i': bitstring,uri': bitstring,a': bitstring) = rule' in
    {66}if ((u',uri',a',v'') = (u_1,uri,a_1,v_1)) then
    {67}let vp: bitstring = (vp_msg,(vpr_rec,vc),sig((vpr_rec,vc),sku_1)) in
    {68}new symk_7: SymmetricKey;
    {69}let symk7_enc: bitstring = enc((symk7,symk_7),symk_ua_enc) in
    {70}let m_8: bitstring = (symk7_enc,enc((tag8,n_r,vp),symk_ua_enc)) in
    {71}event auth_UserSendsLastMessageToApp(m_1,m_2,m_7,m_8);
    {72}out(c_1, (msg8,m_8));
    {73}if talksOnlyToHonest then
    (
        {74}event auth_UserCompletesProtocol(m_1,m_2,m_7,m_8)
    ) | (
        {75}out(ch(vp), vp_fromProver)
    )
) | (
    {76}!
    {77}let talksOnlyToHonest_1: bool = false in
    {78}let c_2: channel = c in
    {79}let u_2: bitstring = u in
    {80}let exp_u_2: exponent = exp_u in
    {81}let sku_2: SecretKey = sku in
    {82}let a_2: bitstring = e in
    {83}let pka_1: PublicKey = pk(sk_E) in
    {84}let exp_a_2: G = exp(g,exp_E) in
    {85}let v_2: bitstring = v in
    {86}let pkv_1: PublicKey = pk(skv) in
    {87}let exp_v_2: G = exp(g,exp_v) in
    {88}let uri_1: bitstring = uri_req in
    {89}new su_1: exponent;
    {90}let g_su_1: G = exp(g,su_1) in
    {91}let K0_1: G = exp(exp_a_2,su_1) in
    {92}let h0_1: SymmetricKey = hash_fork(((g_su_1,exp_a_2,K0_1),keyEncCtoSTemp)) in
    {93}new symk_0_1: SymmetricKey;
    {94}let diddoc_su_signed_1: bitstring = (g_su_1,sig(hash((sig_gsu,pka_1,g_su_1)),sku_2)) in
    {95}let m: bitstring = (KEXDHINIT,aenc((gsu,g_su_1),pka_1),enc((symk0,symk_0_1),h0_1),enc(diddoc_su_signed_1,symk_0_1)) in
    {96}out(c_2, (msg1,m));
    {97}in(c_2, (=msg2,m_3: bitstring));
    {98}let (=KEXDHREPLY,g_sa_enc_1: bitstring,symk_1_enc_1: bitstring,diddoc_sa_signed_enc_1: bitstring) = m_3 in
    {99}let (=gsa,g_sa_1: G) = adec(g_sa_enc_1,sku_2) in
    {100}let K_1: G = exp(g_sa_1,su_1) in
    {101}let h_1: SymmetricKey = hash_fork(((g_su_1,g_sa_1,K_1),keyEncStoCTemp)) in
    {102}let (=symk1,symk: SymmetricKey) = dec(symk_1_enc_1,h_1) in
    {103}let (g_sa'_1: G,g_sa_signed_1: bitstring) = dec(diddoc_sa_signed_enc_1,symk) in
    {104}if check(hash((sig_gsa,pk(sku_2),g_sa_1)),g_sa_signed_1,pka_1) then
    {105}let symk_ua_enc_1: SymmetricKey = hash_fork((K_1,h_1,keyEncCtoS)) in
    {106}let symk_ua_dec_1: SymmetricKey = hash_fork((K_1,h_1,keyEncStoC)) in
    {107}in(c_2, (=msg7,m_4: bitstring));
    {108}let (symk6_enc_1: bitstring,m7_enc_1: bitstring) = m_4 in
    {109}let (=symk6,symk_2: SymmetricKey) = dec(symk6_enc_1,symk_ua_dec_1) in
    {110}let (=tag7,n_r_1: bitstring,v'_1: bitstring,vpr_signed_1: bitstring) = dec(m7_enc_1,symk_2) in
    {111}if (v_2 = v'_1) then
    {112}let (=dec_vpr_2_msg,vpr_rec_1: bitstring,sig_vpr: bitstring) = vpr_signed_1 in
    {113}if check(vpr_rec_1,sig_vpr,pka_1) then
    {114}let (=dec_vpr_msg,v''_1: bitstring,rule'_1: bitstring,n_c_1: bitstring) = vpr_rec_1 in
    {115}let (u'_1: bitstring,i'_1: bitstring,uri'_1: bitstring,a'_1: bitstring) = rule'_1 in
    {116}if ((u'_1,uri'_1,a'_1,v''_1) = (u_2,uri_1,a_2,v_2)) then
    {117}let vp_1: bitstring = (vp_msg,(vpr_rec_1,vc),sig((vpr_rec_1,vc),sku_2)) in
    {118}new symk_3: SymmetricKey;
    {119}let symk7_enc_1: bitstring = enc((symk7,symk_3),symk_ua_enc_1) in
    {120}let m_5: bitstring = (symk7_enc_1,enc((tag8,n_r_1,vp_1),symk_ua_enc_1)) in
    {121}event auth_UserSendsLastMessageToApp(m,m_3,m_4,m_5);
    {122}out(c_2, (msg8,m_5));
    {123}if talksOnlyToHonest_1 then
    (
        {124}event auth_UserCompletesProtocol(m,m_3,m_4,m_5)
    ) | (
        {125}out(ch(vp_1), vp_fromProver)
    )
) | (
    {126}!
    {127}let talksOnlyToHonest_2: bool = false in
    {128}let c_3: channel = c in
    {129}let u_3: bitstring = u in
    {130}let exp_u_3: exponent = exp_u in
    {131}let sku_3: SecretKey = sku in
    {132}let a_3: bitstring = a in
    {133}let pka_2: PublicKey = pk(ska) in
    {134}let exp_a_3: G = exp(g,exp_a) in
    {135}let v_3: bitstring = e in
    {136}let pkv_2: PublicKey = pk(sk_E) in
    {137}let exp_v_3: G = exp(g,exp_E) in
    {138}let uri_2: bitstring = euri in
    {139}new su_2: exponent;
    {140}let g_su_2: G = exp(g,su_2) in
    {141}let K0_2: G = exp(exp_a_3,su_2) in
    {142}let h0_2: SymmetricKey = hash_fork(((g_su_2,exp_a_3,K0_2),keyEncCtoSTemp)) in
    {143}new symk_0_2: SymmetricKey;
    {144}let diddoc_su_signed_2: bitstring = (g_su_2,sig(hash((sig_gsu,pka_2,g_su_2)),sku_3)) in
    {145}let m_6: bitstring = (KEXDHINIT,aenc((gsu,g_su_2),pka_2),enc((symk0,symk_0_2),h0_2),enc(diddoc_su_signed_2,symk_0_2)) in
    {146}out(c_3, (msg1,m_6));
    {147}in(c_3, (=msg2,m_9: bitstring));
    {148}let (=KEXDHREPLY,g_sa_enc_2: bitstring,symk_1_enc_2: bitstring,diddoc_sa_signed_enc_2: bitstring) = m_9 in
    {149}let (=gsa,g_sa_2: G) = adec(g_sa_enc_2,sku_3) in
    {150}let K_2: G = exp(g_sa_2,su_2) in
    {151}let h_2: SymmetricKey = hash_fork(((g_su_2,g_sa_2,K_2),keyEncStoCTemp)) in
    {152}let (=symk1,symk_4: SymmetricKey) = dec(symk_1_enc_2,h_2) in
    {153}let (g_sa'_2: G,g_sa_signed_2: bitstring) = dec(diddoc_sa_signed_enc_2,symk_4) in
    {154}if check(hash((sig_gsa,pk(sku_3),g_sa_2)),g_sa_signed_2,pka_2) then
    {155}let symk_ua_enc_2: SymmetricKey = hash_fork((K_2,h_2,keyEncCtoS)) in
    {156}let symk_ua_dec_2: SymmetricKey = hash_fork((K_2,h_2,keyEncStoC)) in
    {157}in(c_3, (=msg7,m_10: bitstring));
    {158}let (symk6_enc_2: bitstring,m7_enc_2: bitstring) = m_10 in
    {159}let (=symk6,symk_5: SymmetricKey) = dec(symk6_enc_2,symk_ua_dec_2) in
    {160}let (=tag7,n_r_2: bitstring,v'_2: bitstring,vpr_signed_2: bitstring) = dec(m7_enc_2,symk_5) in
    {161}if (v_3 = v'_2) then
    {162}let (=dec_vpr_2_msg,vpr_rec_2: bitstring,sig_vpr_1: bitstring) = vpr_signed_2 in
    {163}if check(vpr_rec_2,sig_vpr_1,pka_2) then
    {164}let (=dec_vpr_msg,v''_2: bitstring,rule'_2: bitstring,n_c_2: bitstring) = vpr_rec_2 in
    {165}let (u'_2: bitstring,i'_2: bitstring,uri'_2: bitstring,a'_2: bitstring) = rule'_2 in
    {166}if ((u'_2,uri'_2,a'_2,v''_2) = (u_3,uri_2,a_3,v_3)) then
    {167}let vp_2: bitstring = (vp_msg,(vpr_rec_2,vc),sig((vpr_rec_2,vc),sku_3)) in
    {168}new symk_8: SymmetricKey;
    {169}let symk7_enc_2: bitstring = enc((symk7,symk_8),symk_ua_enc_2) in
    {170}let m_11: bitstring = (symk7_enc_2,enc((tag8,n_r_2,vp_2),symk_ua_enc_2)) in
    {171}event auth_UserSendsLastMessageToApp(m_6,m_9,m_10,m_11);
    {172}out(c_3, (msg8,m_11));
    {173}if talksOnlyToHonest_2 then
    (
        {174}event auth_UserCompletesProtocol(m_6,m_9,m_10,m_11)
    ) | (
        {175}out(ch(vp_2), vp_fromProver)
    )
) | (
    {176}!
    {177}let talksOnlyToHonest_3: bool = false in
    {178}let c_4: channel = c in
    {179}let u_4: bitstring = u in
    {180}let exp_u_4: exponent = exp_u in
    {181}let sku_4: SecretKey = sku in
    {182}let a_4: bitstring = e in
    {183}let pka_3: PublicKey = pk(sk_E) in
    {184}let exp_a_4: G = exp(g,exp_E) in
    {185}let v_4: bitstring = e in
    {186}let pkv_3: PublicKey = pk(sk_E) in
    {187}let exp_v_4: G = exp(g,exp_E) in
    {188}let uri_3: bitstring = euri in
    {189}new su_3: exponent;
    {190}let g_su_3: G = exp(g,su_3) in
    {191}let K0_3: G = exp(exp_a_4,su_3) in
    {192}let h0_3: SymmetricKey = hash_fork(((g_su_3,exp_a_4,K0_3),keyEncCtoSTemp)) in
    {193}new symk_0_3: SymmetricKey;
    {194}let diddoc_su_signed_3: bitstring = (g_su_3,sig(hash((sig_gsu,pka_3,g_su_3)),sku_4)) in
    {195}let m_12: bitstring = (KEXDHINIT,aenc((gsu,g_su_3),pka_3),enc((symk0,symk_0_3),h0_3),enc(diddoc_su_signed_3,symk_0_3)) in
    {196}out(c_4, (msg1,m_12));
    {197}in(c_4, (=msg2,m_13: bitstring));
    {198}let (=KEXDHREPLY,g_sa_enc_3: bitstring,symk_1_enc_3: bitstring,diddoc_sa_signed_enc_3: bitstring) = m_13 in
    {199}let (=gsa,g_sa_3: G) = adec(g_sa_enc_3,sku_4) in
    {200}let K_3: G = exp(g_sa_3,su_3) in
    {201}let h_3: SymmetricKey = hash_fork(((g_su_3,g_sa_3,K_3),keyEncStoCTemp)) in
    {202}let (=symk1,symk_9: SymmetricKey) = dec(symk_1_enc_3,h_3) in
    {203}let (g_sa'_3: G,g_sa_signed_3: bitstring) = dec(diddoc_sa_signed_enc_3,symk_9) in
    {204}if check(hash((sig_gsa,pk(sku_4),g_sa_3)),g_sa_signed_3,pka_3) then
    {205}let symk_ua_enc_3: SymmetricKey = hash_fork((K_3,h_3,keyEncCtoS)) in
    {206}let symk_ua_dec_3: SymmetricKey = hash_fork((K_3,h_3,keyEncStoC)) in
    {207}in(c_4, (=msg7,m_14: bitstring));
    {208}let (symk6_enc_3: bitstring,m7_enc_3: bitstring) = m_14 in
    {209}let (=symk6,symk_10: SymmetricKey) = dec(symk6_enc_3,symk_ua_dec_3) in
    {210}let (=tag7,n_r_3: bitstring,v'_3: bitstring,vpr_signed_3: bitstring) = dec(m7_enc_3,symk_10) in
    {211}if (v_4 = v'_3) then
    {212}let (=dec_vpr_2_msg,vpr_rec_3: bitstring,sig_vpr_3: bitstring) = vpr_signed_3 in
    {213}if check(vpr_rec_3,sig_vpr_3,pka_3) then
    {214}let (=dec_vpr_msg,v''_3: bitstring,rule'_3: bitstring,n_c_3: bitstring) = vpr_rec_3 in
    {215}let (u'_3: bitstring,i'_3: bitstring,uri'_3: bitstring,a'_3: bitstring) = rule'_3 in
    {216}if ((u'_3,uri'_3,a'_3,v''_3) = (u_4,uri_3,a_4,v_4)) then
    {217}let vp_3: bitstring = (vp_msg,(vpr_rec_3,vc),sig((vpr_rec_3,vc),sku_4)) in
    {218}new symk_11: SymmetricKey;
    {219}let symk7_enc_3: bitstring = enc((symk7,symk_11),symk_ua_enc_3) in
    {220}let m_15: bitstring = (symk7_enc_3,enc((tag8,n_r_3,vp_3),symk_ua_enc_3)) in
    {221}event auth_UserSendsLastMessageToApp(m_12,m_13,m_14,m_15);
    {222}out(c_4, (msg8,m_15));
    {223}if talksOnlyToHonest_3 then
    (
        {224}event auth_UserCompletesProtocol(m_12,m_13,m_14,m_15)
    ) | (
        {225}out(ch(vp_3), vp_fromProver)
    )
) | (
    {226}!
    {227}let talksOnlyToHonest_4: bool = true in
    {228}let c_5: channel = c in
    {229}let c2_1: channel = c2 in
    {230}let a_5: bitstring = a in
    {231}let exp_a_5: exponent = exp_a in
    {232}let ska_1: SecretKey = ska in
    {233}let u_5: bitstring = u in
    {234}let pku: PublicKey = pk(sku) in
    {235}let exp_u_5: G = exp(g,exp_u) in
    {236}let v_5: bitstring = v in
    {237}let pkv_4: PublicKey = pk(skv) in
    {238}let exp_v_5: G = exp(g,exp_v) in
    {239}let i_1: bitstring = i in
    {240}let pki: PublicKey = pk(ski) in
    {241}let uri_4: bitstring = uri_req in
    {242}in(c_5, (=msg1,m_16: bitstring));
    {243}let (=KEXDHINIT,g_su_enc: bitstring,symk0_enc: bitstring,g_su_signed_enc: bitstring) = m_16 in
    {244}let (=gsu,g_su_4: G) = adec(g_su_enc,ska_1) in
    {245}let K_temp: G = exp(g_su_4,exp_a_5) in
    {246}let h_temp: SymmetricKey = hash_fork(((g_su_4,exp(g,exp_a_5),K_temp),keyEncCtoSTemp)) in
    {247}let (=symk0,symk_0_4: SymmetricKey) = dec(symk0_enc,h_temp) in
    {248}let (g_su': G,g_su_sign: bitstring) = dec(g_su_signed_enc,symk_0_4) in
    {249}if check(hash((sig_gsu,pk(ska_1),g_su_4)),g_su_sign,pku) then
    {250}new sa: exponent;
    {251}let g_sa_4: G = exp(g,sa) in
    {252}let K_4: G = exp(g_su_4,sa) in
    {253}let h_4: SymmetricKey = hash_fork(((g_su_4,g_sa_4,K_4),keyEncStoCTemp)) in
    {254}new symk_12: SymmetricKey;
    {255}let diddoc_sa_enc: bitstring = (g_sa_4,sig(hash((sig_gsa,pku,g_sa_4)),ska_1)) in
    {256}let m_17: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_4),pkv_4),enc((symk1,symk_12),h_4),enc(diddoc_sa_enc,symk_12)) in
    {257}out(c_5, (msg2,m_17));
    {258}let symk_ua_enc_4: SymmetricKey = hash_fork((K_4,h_4,keyEncStoC)) in
    {259}let symk_ua_dec_4: SymmetricKey = hash_fork((K_4,h_4,keyEncCtoS)) in
    {260}new sav: exponent;
    {261}let g_sav: G = exp(g,sav) in
    {262}let KC_temp: G = exp(exp_v_5,sav) in
    {263}let hc_temp: SymmetricKey = hash_fork(((exp_v_5,g_sav,KC_temp),keyEncAtoCTemp)) in
    {264}new symk_13: SymmetricKey;
    {265}let diddoc_sav_signed: bitstring = (g_sav,sig(hash((sig_gsav,pkv_4,g_sav)),ska_1)) in
    {266}let m_18: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav),pku),enc((symk2,symk_13),hc_temp),enc(diddoc_sav_signed,symk_13)) in
    {267}out(c2_1, (msg3,m_18));
    {268}in(c2_1, (=msg4,m_19: bitstring));
    {269}let (=KEXDHREPLYSERVER,g_sc_enc: bitstring,symk3_enc: bitstring,g_sc_signed_enc: bitstring) = m_19 in
    {270}let (=gsac,g_sc: G) = adec(g_sc_enc,ska_1) in
    {271}let KC: G = exp(g_sc,sav) in
    {272}let hc: SymmetricKey = hash_fork(((g_sc,g_sav,KC),keyEncCtoATemp)) in
    {273}let (=symk3,symk_14: SymmetricKey) = dec(symk3_enc,hc) in
    {274}let (g_sc': G,g_sc_sisn: bitstring) = dec(g_sc_signed_enc,symk_14) in
    {275}if check(hash((sig_gsac,pk(ska_1),g_sc)),g_sc_sisn,pkv_4) then
    {276}let symk_av_enc: SymmetricKey = hash_fork((KC,hc,keyEncAtoC)) in
    {277}let symk_av_dec: SymmetricKey = hash_fork((KC,hc,keyEncCtoA)) in
    {278}new symk_15: SymmetricKey;
    {279}let symk4_enc: bitstring = enc((symk4,symk_15),symk_av_enc) in
    {280}let m_20: bitstring = (symk4_enc,enc((tag5,(i_1,v_5,u_5,uri_4,a_5)),symk_15)) in
    {281}out(c2_1, (msg5,m_20));
    {282}in(c2_1, (=msg6,m_21: bitstring));
    {283}let (symk5_enc: bitstring,m6_enc: bitstring) = m_21 in
    {284}let (=symk5,symk_16: SymmetricKey) = dec(symk5_enc,symk_av_dec) in
    {285}let (=tag6,dec_vpr: bitstring) = dec(m6_enc,symk_16) in
    {286}let (=dec_vpr_msg,v'_4: bitstring,rule'_4: bitstring,n_c': bitstring) = dec_vpr in
    {287}let (u'_4: bitstring,i'_4: bitstring,uri'_4: bitstring,a'_4: bitstring) = rule'_4 in
    {288}if ((v'_4,u'_4,i'_4,uri'_4,a'_4) = (v_5,u_5,i_1,uri_4,a_5)) then
    {289}new n_r_4: bitstring;
    {290}let vpr_signed_4: bitstring = (dec_vpr_2_msg,dec_vpr,sig(dec_vpr,ska_1)) in
    {291}new symk_17: SymmetricKey;
    {292}let symk6_enc_4: bitstring = enc((symk6,symk_17),symk_ua_enc_4) in
    {293}let m_22: bitstring = (symk6_enc_4,enc((tag7,n_r_4,v_5,vpr_signed_4),symk_17)) in
    {294}event auth_AppSendsLastMessageToUser(m_16,m_17,m_18,m_19,m_20,m_21,m_22);
    {295}out(c_5, (msg7,m_22));
    {296}in(c_5, (=msg8,m_23: bitstring));
    {297}let (symk7_enc_4: bitstring,m8_enc: bitstring) = m_23 in
    {298}let (=symk7,symk_18: SymmetricKey) = dec(symk7_enc_4,symk_ua_dec_4) in
    {299}let (=tag8,n_r': bitstring,vp_signed: bitstring) = dec(m8_enc,symk_18) in
    {300}if (n_r_4 = n_r') then
    {301}let (=vp_msg,vp_4: bitstring,sign_on_vp: bitstring) = vp_signed in
    {302}if check(vp_4,sign_on_vp,pku) then
    {303}let vp_2_prev: bitstring = (vp_2_msg,vp_signed,sig(vp_signed,ska_1)) in
    {304}new symk_19: SymmetricKey;
    {305}let symk8_enc: bitstring = enc((symk8,symk_19),symk_av_enc) in
    {306}let m_24: bitstring = (symk8_enc,enc((tag9,vp_2_prev),symk_19)) in
    {307}event auth_AppSendsLastMessageToVerifier(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24);
    {308}out(c2_1, (msg9,m_24));
    {309}in(c2_1, (=msg10,m_25: bitstring));
    {310}let (symk9_enc: bitstring,m10_enc: bitstring) = m_25 in
    {311}let (=symk9,symk_20: SymmetricKey) = dec(symk9_enc,symk_av_dec) in
    {312}let (=tag10,res: bitstring) = dec(m10_enc,symk_20) in
    {313}if talksOnlyToHonest_4 then
    (
        {314}event auth_AppCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24,m_25)
    ) | (
        {315}out(ch(res), resource_fromApp)
    )
) | (
    {316}!
    {317}let talksOnlyToHonest_5: bool = false in
    {318}let c_6: channel = c in
    {319}let c2_2: channel = c2 in
    {320}let a_6: bitstring = a in
    {321}let exp_a_6: exponent = exp_a in
    {322}let ska_2: SecretKey = ska in
    {323}let u_6: bitstring = e in
    {324}let pku_1: PublicKey = pk(sk_E) in
    {325}let exp_u_6: G = exp(g,exp_E) in
    {326}let v_6: bitstring = v in
    {327}let pkv_5: PublicKey = pk(skv) in
    {328}let exp_v_6: G = exp(g,exp_v) in
    {329}let i_2: bitstring = i in
    {330}let pki_1: PublicKey = pk(ski) in
    {331}let uri_5: bitstring = uri_req in
    {332}in(c_6, (=msg1,m_26: bitstring));
    {333}let (=KEXDHINIT,g_su_enc_1: bitstring,symk0_enc_1: bitstring,g_su_signed_enc_1: bitstring) = m_26 in
    {334}let (=gsu,g_su_5: G) = adec(g_su_enc_1,ska_2) in
    {335}let K_temp_1: G = exp(g_su_5,exp_a_6) in
    {336}let h_temp_1: SymmetricKey = hash_fork(((g_su_5,exp(g,exp_a_6),K_temp_1),keyEncCtoSTemp)) in
    {337}let (=symk0,symk_0_5: SymmetricKey) = dec(symk0_enc_1,h_temp_1) in
    {338}let (g_su'_1: G,g_su_sign_1: bitstring) = dec(g_su_signed_enc_1,symk_0_5) in
    {339}if check(hash((sig_gsu,pk(ska_2),g_su_5)),g_su_sign_1,pku_1) then
    {340}new sa_1: exponent;
    {341}let g_sa_5: G = exp(g,sa_1) in
    {342}let K_5: G = exp(g_su_5,sa_1) in
    {343}let h_5: SymmetricKey = hash_fork(((g_su_5,g_sa_5,K_5),keyEncStoCTemp)) in
    {344}new symk_21: SymmetricKey;
    {345}let diddoc_sa_enc_1: bitstring = (g_sa_5,sig(hash((sig_gsa,pku_1,g_sa_5)),ska_2)) in
    {346}let m_27: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_5),pkv_5),enc((symk1,symk_21),h_5),enc(diddoc_sa_enc_1,symk_21)) in
    {347}out(c_6, (msg2,m_27));
    {348}let symk_ua_enc_5: SymmetricKey = hash_fork((K_5,h_5,keyEncStoC)) in
    {349}let symk_ua_dec_5: SymmetricKey = hash_fork((K_5,h_5,keyEncCtoS)) in
    {350}new sav_1: exponent;
    {351}let g_sav_1: G = exp(g,sav_1) in
    {352}let KC_temp_1: G = exp(exp_v_6,sav_1) in
    {353}let hc_temp_1: SymmetricKey = hash_fork(((exp_v_6,g_sav_1,KC_temp_1),keyEncAtoCTemp)) in
    {354}new symk_22: SymmetricKey;
    {355}let diddoc_sav_signed_1: bitstring = (g_sav_1,sig(hash((sig_gsav,pkv_5,g_sav_1)),ska_2)) in
    {356}let m_28: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_1),pku_1),enc((symk2,symk_22),hc_temp_1),enc(diddoc_sav_signed_1,symk_22)) in
    {357}out(c2_2, (msg3,m_28));
    {358}in(c2_2, (=msg4,m_29: bitstring));
    {359}let (=KEXDHREPLYSERVER,g_sc_enc_1: bitstring,symk3_enc_1: bitstring,g_sc_signed_enc_1: bitstring) = m_29 in
    {360}let (=gsac,g_sc_1: G) = adec(g_sc_enc_1,ska_2) in
    {361}let KC_1: G = exp(g_sc_1,sav_1) in
    {362}let hc_1: SymmetricKey = hash_fork(((g_sc_1,g_sav_1,KC_1),keyEncCtoATemp)) in
    {363}let (=symk3,symk_23: SymmetricKey) = dec(symk3_enc_1,hc_1) in
    {364}let (g_sc'_1: G,g_sc_sisn_1: bitstring) = dec(g_sc_signed_enc_1,symk_23) in
    {365}if check(hash((sig_gsac,pk(ska_2),g_sc_1)),g_sc_sisn_1,pkv_5) then
    {366}let symk_av_enc_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncAtoC)) in
    {367}let symk_av_dec_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncCtoA)) in
    {368}new symk_24: SymmetricKey;
    {369}let symk4_enc_1: bitstring = enc((symk4,symk_24),symk_av_enc_1) in
    {370}let m_30: bitstring = (symk4_enc_1,enc((tag5,(i_2,v_6,u_6,uri_5,a_6)),symk_24)) in
    {371}out(c2_2, (msg5,m_30));
    {372}in(c2_2, (=msg6,m_31: bitstring));
    {373}let (symk5_enc_1: bitstring,m6_enc_1: bitstring) = m_31 in
    {374}let (=symk5,symk_25: SymmetricKey) = dec(symk5_enc_1,symk_av_dec_1) in
    {375}let (=tag6,dec_vpr_1: bitstring) = dec(m6_enc_1,symk_25) in
    {376}let (=dec_vpr_msg,v'_5: bitstring,rule'_5: bitstring,n_c'_1: bitstring) = dec_vpr_1 in
    {377}let (u'_5: bitstring,i'_5: bitstring,uri'_5: bitstring,a'_5: bitstring) = rule'_5 in
    {378}if ((v'_5,u'_5,i'_5,uri'_5,a'_5) = (v_6,u_6,i_2,uri_5,a_6)) then
    {379}new n_r_5: bitstring;
    {380}let vpr_signed_5: bitstring = (dec_vpr_2_msg,dec_vpr_1,sig(dec_vpr_1,ska_2)) in
    {381}new symk_26: SymmetricKey;
    {382}let symk6_enc_5: bitstring = enc((symk6,symk_26),symk_ua_enc_5) in
    {383}let m_32: bitstring = (symk6_enc_5,enc((tag7,n_r_5,v_6,vpr_signed_5),symk_26)) in
    {384}event auth_AppSendsLastMessageToUser(m_26,m_27,m_28,m_29,m_30,m_31,m_32);
    {385}out(c_6, (msg7,m_32));
    {386}in(c_6, (=msg8,m_33: bitstring));
    {387}let (symk7_enc_5: bitstring,m8_enc_1: bitstring) = m_33 in
    {388}let (=symk7,symk_27: SymmetricKey) = dec(symk7_enc_5,symk_ua_dec_5) in
    {389}let (=tag8,n_r'_1: bitstring,vp_signed_1: bitstring) = dec(m8_enc_1,symk_27) in
    {390}if (n_r_5 = n_r'_1) then
    {391}let (=vp_msg,vp_5: bitstring,sign_on_vp_1: bitstring) = vp_signed_1 in
    {392}if check(vp_5,sign_on_vp_1,pku_1) then
    {393}let vp_2_prev_1: bitstring = (vp_2_msg,vp_signed_1,sig(vp_signed_1,ska_2)) in
    {394}new symk_28: SymmetricKey;
    {395}let symk8_enc_1: bitstring = enc((symk8,symk_28),symk_av_enc_1) in
    {396}let m_34: bitstring = (symk8_enc_1,enc((tag9,vp_2_prev_1),symk_28)) in
    {397}event auth_AppSendsLastMessageToVerifier(m_26,m_27,m_28,m_29,m_30,m_31,m_32,m_33,m_34);
    {398}out(c2_2, (msg9,m_34));
    {399}in(c2_2, (=msg10,m_35: bitstring));
    {400}let (symk9_enc_1: bitstring,m10_enc_1: bitstring) = m_35 in
    {401}let (=symk9,symk_29: SymmetricKey) = dec(symk9_enc_1,symk_av_dec_1) in
    {402}let (=tag10,res_1: bitstring) = dec(m10_enc_1,symk_29) in
    {403}if talksOnlyToHonest_5 then
    (
        {404}event auth_AppCompletesProtocol(m_26,m_27,m_28,m_29,m_30,m_31,m_32,m_33,m_34,m_35)
    ) | (
        {405}out(ch(res_1), resource_fromApp)
    )
) | (
    {406}!
    {407}let talksOnlyToHonest_6: bool = false in
    {408}let c_7: channel = c in
    {409}let c2_3: channel = c2 in
    {410}let a_7: bitstring = a in
    {411}let exp_a_7: exponent = exp_a in
    {412}let ska_3: SecretKey = ska in
    {413}let u_7: bitstring = u in
    {414}let pku_2: PublicKey = pk(sku) in
    {415}let exp_u_7: G = exp(g,exp_u) in
    {416}let v_7: bitstring = e in
    {417}let pkv_6: PublicKey = pk(sk_E) in
    {418}let exp_v_7: G = exp(g,exp_E) in
    {419}let i_3: bitstring = i in
    {420}let pki_2: PublicKey = pk(ski) in
    {421}let uri_6: bitstring = euri in
    {422}in(c_7, (=msg1,m_36: bitstring));
    {423}let (=KEXDHINIT,g_su_enc_2: bitstring,symk0_enc_2: bitstring,g_su_signed_enc_2: bitstring) = m_36 in
    {424}let (=gsu,g_su_6: G) = adec(g_su_enc_2,ska_3) in
    {425}let K_temp_2: G = exp(g_su_6,exp_a_7) in
    {426}let h_temp_2: SymmetricKey = hash_fork(((g_su_6,exp(g,exp_a_7),K_temp_2),keyEncCtoSTemp)) in
    {427}let (=symk0,symk_0_6: SymmetricKey) = dec(symk0_enc_2,h_temp_2) in
    {428}let (g_su'_2: G,g_su_sign_2: bitstring) = dec(g_su_signed_enc_2,symk_0_6) in
    {429}if check(hash((sig_gsu,pk(ska_3),g_su_6)),g_su_sign_2,pku_2) then
    {430}new sa_2: exponent;
    {431}let g_sa_6: G = exp(g,sa_2) in
    {432}let K_6: G = exp(g_su_6,sa_2) in
    {433}let h_6: SymmetricKey = hash_fork(((g_su_6,g_sa_6,K_6),keyEncStoCTemp)) in
    {434}new symk_30: SymmetricKey;
    {435}let diddoc_sa_enc_2: bitstring = (g_sa_6,sig(hash((sig_gsa,pku_2,g_sa_6)),ska_3)) in
    {436}let m_37: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_6),pkv_6),enc((symk1,symk_30),h_6),enc(diddoc_sa_enc_2,symk_30)) in
    {437}out(c_7, (msg2,m_37));
    {438}let symk_ua_enc_6: SymmetricKey = hash_fork((K_6,h_6,keyEncStoC)) in
    {439}let symk_ua_dec_6: SymmetricKey = hash_fork((K_6,h_6,keyEncCtoS)) in
    {440}new sav_2: exponent;
    {441}let g_sav_2: G = exp(g,sav_2) in
    {442}let KC_temp_2: G = exp(exp_v_7,sav_2) in
    {443}let hc_temp_2: SymmetricKey = hash_fork(((exp_v_7,g_sav_2,KC_temp_2),keyEncAtoCTemp)) in
    {444}new symk_31: SymmetricKey;
    {445}let diddoc_sav_signed_2: bitstring = (g_sav_2,sig(hash((sig_gsav,pkv_6,g_sav_2)),ska_3)) in
    {446}let m_38: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_2),pku_2),enc((symk2,symk_31),hc_temp_2),enc(diddoc_sav_signed_2,symk_31)) in
    {447}out(c2_3, (msg3,m_38));
    {448}in(c2_3, (=msg4,m_39: bitstring));
    {449}let (=KEXDHREPLYSERVER,g_sc_enc_2: bitstring,symk3_enc_2: bitstring,g_sc_signed_enc_2: bitstring) = m_39 in
    {450}let (=gsac,g_sc_2: G) = adec(g_sc_enc_2,ska_3) in
    {451}let KC_2: G = exp(g_sc_2,sav_2) in
    {452}let hc_2: SymmetricKey = hash_fork(((g_sc_2,g_sav_2,KC_2),keyEncCtoATemp)) in
    {453}let (=symk3,symk_32: SymmetricKey) = dec(symk3_enc_2,hc_2) in
    {454}let (g_sc'_2: G,g_sc_sisn_2: bitstring) = dec(g_sc_signed_enc_2,symk_32) in
    {455}if check(hash((sig_gsac,pk(ska_3),g_sc_2)),g_sc_sisn_2,pkv_6) then
    {456}let symk_av_enc_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncAtoC)) in
    {457}let symk_av_dec_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncCtoA)) in
    {458}new symk_33: SymmetricKey;
    {459}let symk4_enc_2: bitstring = enc((symk4,symk_33),symk_av_enc_2) in
    {460}let m_40: bitstring = (symk4_enc_2,enc((tag5,(i_3,v_7,u_7,uri_6,a_7)),symk_33)) in
    {461}out(c2_3, (msg5,m_40));
    {462}in(c2_3, (=msg6,m_41: bitstring));
    {463}let (symk5_enc_2: bitstring,m6_enc_2: bitstring) = m_41 in
    {464}let (=symk5,symk_34: SymmetricKey) = dec(symk5_enc_2,symk_av_dec_2) in
    {465}let (=tag6,dec_vpr_2: bitstring) = dec(m6_enc_2,symk_34) in
    {466}let (=dec_vpr_msg,v'_6: bitstring,rule'_6: bitstring,n_c'_2: bitstring) = dec_vpr_2 in
    {467}let (u'_6: bitstring,i'_6: bitstring,uri'_6: bitstring,a'_6: bitstring) = rule'_6 in
    {468}if ((v'_6,u'_6,i'_6,uri'_6,a'_6) = (v_7,u_7,i_3,uri_6,a_7)) then
    {469}new n_r_6: bitstring;
    {470}let vpr_signed_6: bitstring = (dec_vpr_2_msg,dec_vpr_2,sig(dec_vpr_2,ska_3)) in
    {471}new symk_35: SymmetricKey;
    {472}let symk6_enc_6: bitstring = enc((symk6,symk_35),symk_ua_enc_6) in
    {473}let m_42: bitstring = (symk6_enc_6,enc((tag7,n_r_6,v_7,vpr_signed_6),symk_35)) in
    {474}event auth_AppSendsLastMessageToUser(m_36,m_37,m_38,m_39,m_40,m_41,m_42);
    {475}out(c_7, (msg7,m_42));
    {476}in(c_7, (=msg8,m_43: bitstring));
    {477}let (symk7_enc_6: bitstring,m8_enc_2: bitstring) = m_43 in
    {478}let (=symk7,symk_36: SymmetricKey) = dec(symk7_enc_6,symk_ua_dec_6) in
    {479}let (=tag8,n_r'_2: bitstring,vp_signed_2: bitstring) = dec(m8_enc_2,symk_36) in
    {480}if (n_r_6 = n_r'_2) then
    {481}let (=vp_msg,vp_6: bitstring,sign_on_vp_2: bitstring) = vp_signed_2 in
    {482}if check(vp_6,sign_on_vp_2,pku_2) then
    {483}let vp_2_prev_2: bitstring = (vp_2_msg,vp_signed_2,sig(vp_signed_2,ska_3)) in
    {484}new symk_37: SymmetricKey;
    {485}let symk8_enc_2: bitstring = enc((symk8,symk_37),symk_av_enc_2) in
    {486}let m_44: bitstring = (symk8_enc_2,enc((tag9,vp_2_prev_2),symk_37)) in
    {487}event auth_AppSendsLastMessageToVerifier(m_36,m_37,m_38,m_39,m_40,m_41,m_42,m_43,m_44);
    {488}out(c2_3, (msg9,m_44));
    {489}in(c2_3, (=msg10,m_45: bitstring));
    {490}let (symk9_enc_2: bitstring,m10_enc_2: bitstring) = m_45 in
    {491}let (=symk9,symk_38: SymmetricKey) = dec(symk9_enc_2,symk_av_dec_2) in
    {492}let (=tag10,res_2: bitstring) = dec(m10_enc_2,symk_38) in
    {493}if talksOnlyToHonest_6 then
    (
        {494}event auth_AppCompletesProtocol(m_36,m_37,m_38,m_39,m_40,m_41,m_42,m_43,m_44,m_45)
    ) | (
        {495}out(ch(res_2), resource_fromApp)
    )
) | (
    {496}!
    {497}let talksOnlyToHonest_7: bool = false in
    {498}let c_8: channel = c in
    {499}let c2_4: channel = c2 in
    {500}let a_8: bitstring = a in
    {501}let exp_a_8: exponent = exp_a in
    {502}let ska_4: SecretKey = ska in
    {503}let u_8: bitstring = e in
    {504}let pku_3: PublicKey = pk(sk_E) in
    {505}let exp_u_8: G = exp(g,exp_E) in
    {506}let v_8: bitstring = e in
    {507}let pkv_7: PublicKey = pk(sk_E) in
    {508}let exp_v_8: G = exp(g,exp_E) in
    {509}let i_4: bitstring = i in
    {510}let pki_3: PublicKey = pk(ski) in
    {511}let uri_7: bitstring = euri in
    {512}in(c_8, (=msg1,m_46: bitstring));
    {513}let (=KEXDHINIT,g_su_enc_3: bitstring,symk0_enc_3: bitstring,g_su_signed_enc_3: bitstring) = m_46 in
    {514}let (=gsu,g_su_7: G) = adec(g_su_enc_3,ska_4) in
    {515}let K_temp_3: G = exp(g_su_7,exp_a_8) in
    {516}let h_temp_3: SymmetricKey = hash_fork(((g_su_7,exp(g,exp_a_8),K_temp_3),keyEncCtoSTemp)) in
    {517}let (=symk0,symk_0_7: SymmetricKey) = dec(symk0_enc_3,h_temp_3) in
    {518}let (g_su'_3: G,g_su_sign_3: bitstring) = dec(g_su_signed_enc_3,symk_0_7) in
    {519}if check(hash((sig_gsu,pk(ska_4),g_su_7)),g_su_sign_3,pku_3) then
    {520}new sa_3: exponent;
    {521}let g_sa_7: G = exp(g,sa_3) in
    {522}let K_7: G = exp(g_su_7,sa_3) in
    {523}let h_7: SymmetricKey = hash_fork(((g_su_7,g_sa_7,K_7),keyEncStoCTemp)) in
    {524}new symk_39: SymmetricKey;
    {525}let diddoc_sa_enc_3: bitstring = (g_sa_7,sig(hash((sig_gsa,pku_3,g_sa_7)),ska_4)) in
    {526}let m_47: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_7),pkv_7),enc((symk1,symk_39),h_7),enc(diddoc_sa_enc_3,symk_39)) in
    {527}out(c_8, (msg2,m_47));
    {528}let symk_ua_enc_7: SymmetricKey = hash_fork((K_7,h_7,keyEncStoC)) in
    {529}let symk_ua_dec_7: SymmetricKey = hash_fork((K_7,h_7,keyEncCtoS)) in
    {530}new sav_3: exponent;
    {531}let g_sav_3: G = exp(g,sav_3) in
    {532}let KC_temp_3: G = exp(exp_v_8,sav_3) in
    {533}let hc_temp_3: SymmetricKey = hash_fork(((exp_v_8,g_sav_3,KC_temp_3),keyEncAtoCTemp)) in
    {534}new symk_40: SymmetricKey;
    {535}let diddoc_sav_signed_3: bitstring = (g_sav_3,sig(hash((sig_gsav,pkv_7,g_sav_3)),ska_4)) in
    {536}let m_48: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_3),pku_3),enc((symk2,symk_40),hc_temp_3),enc(diddoc_sav_signed_3,symk_40)) in
    {537}out(c2_4, (msg3,m_48));
    {538}in(c2_4, (=msg4,m_49: bitstring));
    {539}let (=KEXDHREPLYSERVER,g_sc_enc_3: bitstring,symk3_enc_3: bitstring,g_sc_signed_enc_3: bitstring) = m_49 in
    {540}let (=gsac,g_sc_3: G) = adec(g_sc_enc_3,ska_4) in
    {541}let KC_3: G = exp(g_sc_3,sav_3) in
    {542}let hc_3: SymmetricKey = hash_fork(((g_sc_3,g_sav_3,KC_3),keyEncCtoATemp)) in
    {543}let (=symk3,symk_41: SymmetricKey) = dec(symk3_enc_3,hc_3) in
    {544}let (g_sc'_3: G,g_sc_sisn_3: bitstring) = dec(g_sc_signed_enc_3,symk_41) in
    {545}if check(hash((sig_gsac,pk(ska_4),g_sc_3)),g_sc_sisn_3,pkv_7) then
    {546}let symk_av_enc_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncAtoC)) in
    {547}let symk_av_dec_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncCtoA)) in
    {548}new symk_42: SymmetricKey;
    {549}let symk4_enc_3: bitstring = enc((symk4,symk_42),symk_av_enc_3) in
    {550}let m_50: bitstring = (symk4_enc_3,enc((tag5,(i_4,v_8,u_8,uri_7,a_8)),symk_42)) in
    {551}out(c2_4, (msg5,m_50));
    {552}in(c2_4, (=msg6,m_51: bitstring));
    {553}let (symk5_enc_3: bitstring,m6_enc_3: bitstring) = m_51 in
    {554}let (=symk5,symk_43: SymmetricKey) = dec(symk5_enc_3,symk_av_dec_3) in
    {555}let (=tag6,dec_vpr_3: bitstring) = dec(m6_enc_3,symk_43) in
    {556}let (=dec_vpr_msg,v'_7: bitstring,rule'_7: bitstring,n_c'_3: bitstring) = dec_vpr_3 in
    {557}let (u'_7: bitstring,i'_7: bitstring,uri'_7: bitstring,a'_7: bitstring) = rule'_7 in
    {558}if ((v'_7,u'_7,i'_7,uri'_7,a'_7) = (v_8,u_8,i_4,uri_7,a_8)) then
    {559}new n_r_7: bitstring;
    {560}let vpr_signed_7: bitstring = (dec_vpr_2_msg,dec_vpr_3,sig(dec_vpr_3,ska_4)) in
    {561}new symk_44: SymmetricKey;
    {562}let symk6_enc_7: bitstring = enc((symk6,symk_44),symk_ua_enc_7) in
    {563}let m_52: bitstring = (symk6_enc_7,enc((tag7,n_r_7,v_8,vpr_signed_7),symk_44)) in
    {564}event auth_AppSendsLastMessageToUser(m_46,m_47,m_48,m_49,m_50,m_51,m_52);
    {565}out(c_8, (msg7,m_52));
    {566}in(c_8, (=msg8,m_53: bitstring));
    {567}let (symk7_enc_7: bitstring,m8_enc_3: bitstring) = m_53 in
    {568}let (=symk7,symk_45: SymmetricKey) = dec(symk7_enc_7,symk_ua_dec_7) in
    {569}let (=tag8,n_r'_3: bitstring,vp_signed_3: bitstring) = dec(m8_enc_3,symk_45) in
    {570}if (n_r_7 = n_r'_3) then
    {571}let (=vp_msg,vp_7: bitstring,sign_on_vp_3: bitstring) = vp_signed_3 in
    {572}if check(vp_7,sign_on_vp_3,pku_3) then
    {573}let vp_2_prev_3: bitstring = (vp_2_msg,vp_signed_3,sig(vp_signed_3,ska_4)) in
    {574}new symk_46: SymmetricKey;
    {575}let symk8_enc_3: bitstring = enc((symk8,symk_46),symk_av_enc_3) in
    {576}let m_54: bitstring = (symk8_enc_3,enc((tag9,vp_2_prev_3),symk_46)) in
    {577}event auth_AppSendsLastMessageToVerifier(m_46,m_47,m_48,m_49,m_50,m_51,m_52,m_53,m_54);
    {578}out(c2_4, (msg9,m_54));
    {579}in(c2_4, (=msg10,m_55: bitstring));
    {580}let (symk9_enc_3: bitstring,m10_enc_3: bitstring) = m_55 in
    {581}let (=symk9,symk_47: SymmetricKey) = dec(symk9_enc_3,symk_av_dec_3) in
    {582}let (=tag10,res_3: bitstring) = dec(m10_enc_3,symk_47) in
    {583}if talksOnlyToHonest_7 then
    (
        {584}event auth_AppCompletesProtocol(m_46,m_47,m_48,m_49,m_50,m_51,m_52,m_53,m_54,m_55)
    ) | (
        {585}out(ch(res_3), resource_fromApp)
    )
) | (
    {586}!
    {587}let talksOnlyToHonest_8: bool = true in
    {588}let c_9: channel = c2 in
    {589}let v_9: bitstring = v in
    {590}let exp_v_9: exponent = exp_v in
    {591}let skv_1: SecretKey = skv in
    {592}let u_9: bitstring = u in
    {593}let pku_4: PublicKey = pk(sku) in
    {594}let exp_u_9: G = exp(g,exp_u) in
    {595}let a_9: bitstring = a in
    {596}let pka_4: PublicKey = pk(ska) in
    {597}let exp_a_9: G = exp(g,exp_a) in
    {598}let i_5: bitstring = i in
    {599}let pki_4: PublicKey = pk(ski) in
    {600}let uri_8: bitstring = uri_req in
    {601}in(c_9, (=msg3,m_56: bitstring));
    {602}let (=KEXDHINITSERVER,g_sav_enc: bitstring,symk2_enc: bitstring,g_sav_enc_signed: bitstring) = m_56 in
    {603}let (=gsav,g_sav_4: G) = adec(g_sav_enc,skv_1) in
    {604}let K0_4: G = exp(g_sav_4,exp_v_9) in
    {605}let h_8: SymmetricKey = hash_fork(((exp(g,exp_v_9),g_sav_4,K0_4),keyEncAtoCTemp)) in
    {606}let (=symk2,symk_48: SymmetricKey) = dec(symk2_enc,h_8) in
    {607}let (g_sav': G,sign_g_sav: bitstring) = dec(g_sav_enc_signed,symk_48) in
    {608}if check(hash((sig_gsav,pk(skv_1),g_sav_4)),sign_g_sav,pka_4) then
    {609}new sc: exponent;
    {610}let g_sc_4: G = exp(g,sc) in
    {611}let K_8: G = exp(g_sav_4,sc) in
    {612}let h_9: SymmetricKey = hash_fork(((g_sc_4,g_sav_4,K_8),keyEncCtoATemp)) in
    {613}new symk_k3: SymmetricKey;
    {614}let diddoc_sc_signed: bitstring = (g_sc_4,sig(hash((sig_gsac,pka_4,g_sc_4)),skv_1)) in
    {615}let m_57: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_4),pka_4),enc((symk3,symk_k3),h_9),enc(diddoc_sc_signed,symk_k3)) in
    {616}out(c_9, (msg4,m_57));
    {617}let symk_av_enc_4: SymmetricKey = hash_fork((K_8,h_9,keyEncCtoA)) in
    {618}let symk_av_dec_4: SymmetricKey = hash_fork((K_8,h_9,keyEncAtoC)) in
    {619}in(c_9, (=msg5,m_58: bitstring));
    {620}let (symk4_enc_4: bitstring,m5_enc: bitstring) = m_58 in
    {621}let (=symk4,symk_49: SymmetricKey) = dec(symk4_enc_4,symk_av_dec_4) in
    {622}let (=tag5,(i'_8: bitstring,v'_8: bitstring,u'_8: bitstring,uri'_8: bitstring,a'_8: bitstring)) = dec(m5_enc,symk_49) in
    {623}if ((i'_8,v'_8,u'_8,uri'_8,a'_8) = (i_5,v_9,u_9,uri_8,a_9)) then
    {624}new n_c_4: bitstring;
    {625}let rule: bitstring = (u_9,i_5,uri_8,a_9) in
    {626}let vpr_send_prev: bitstring = (dec_vpr_msg,v_9,rule,n_c_4) in
    {627}new symk_50: SymmetricKey;
    {628}let enc_symk5: bitstring = enc((symk5,symk_50),symk_av_enc_4) in
    {629}let m_59: bitstring = (enc_symk5,enc((tag6,vpr_send_prev),symk_50)) in
    {630}event verifierInConeOfUser(m_56,m_57,m_58,m_59);
    {631}out(c_9, (msg6,m_59));
    {632}in(c_9, (=msg9,m_60: bitstring));
    {633}let (symk8_enc_4: bitstring,m9_enc: bitstring) = m_60 in
    {634}let (=symk8,symk_51: SymmetricKey) = dec(symk8_enc_4,symk_av_dec_4) in
    {635}let (=tag9,vp_signed_4: bitstring) = dec(m9_enc,symk_51) in
    {636}let (=vp_2_msg,vp_signed_5: bitstring,vp_sign_2: bitstring) = vp_signed_4 in
    {637}if check(vp_signed_5,vp_sign_2,pka_4) then
    {638}let (=vp_msg,vp_8: bitstring,sign_vp: bitstring) = vp_signed_5 in
    {639}if check(vp_8,sign_vp,pku_4) then
    {640}let (vpr_rec_4: bitstring,vc_rec_signed: bitstring) = vp_8 in
    {641}let (vc_rec: bitstring,sign_vc_rec: bitstring) = vc_rec_signed in
    {642}if check(vc_rec,sign_vc_rec,pki_4) then
    {643}let (iss'': bitstring,u'': bitstring) = vc_rec in
    {644}if ((iss'',u'') = (i_5,u_9)) then
    {645}let (=dec_vpr_msg,v''_4: bitstring,rule'': bitstring,n_c'': bitstring) = vpr_rec_4 in
    {646}if ((v''_4,rule'',n_c'') = (c_9,rule,n_c_4)) then
    {647}let (u''': bitstring,i''': bitstring,uri''': bitstring,a''': bitstring) = rule'' in
    {648}if ((u''',i''',uri''',a''') = (u_9,i_5,uri_8,a_9)) then
    {649}new resource: bitstring;
    {650}new symk_52: SymmetricKey;
    {651}let symk9_enc_4: bitstring = enc((symk9,symk_52),symk_av_enc_4) in
    {652}let m_61: bitstring = (symk9_enc_4,enc((tag10,resource),symk_52)) in
    {653}event auth_VerifierSendsLastMessageToApp(m_56,m_57,m_58,m_59,m_60,m_61);
    {654}out(c_9, (msg10,m_61));
    {655}if talksOnlyToHonest_8 then
    (
        {656}event auth_VerifierCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61)
    ) | (
        {657}out(ch(resource), resource_fromVerifier)
    )
) | (
    {658}!
    {659}let talksOnlyToHonest_9: bool = false in
    {660}let c_10: channel = c2 in
    {661}let v_10: bitstring = v in
    {662}let exp_v_10: exponent = exp_v in
    {663}let skv_2: SecretKey = skv in
    {664}let u_10: bitstring = e in
    {665}let pku_5: PublicKey = pk(sk_E) in
    {666}let exp_u_10: G = exp(g,exp_E) in
    {667}let a_10: bitstring = a in
    {668}let pka_5: PublicKey = pk(ska) in
    {669}let exp_a_10: G = exp(g,exp_a) in
    {670}let i_6: bitstring = i in
    {671}let pki_5: PublicKey = pk(ski) in
    {672}let uri_9: bitstring = uri_req in
    {673}in(c_10, (=msg3,m_62: bitstring));
    {674}let (=KEXDHINITSERVER,g_sav_enc_1: bitstring,symk2_enc_1: bitstring,g_sav_enc_signed_1: bitstring) = m_62 in
    {675}let (=gsav,g_sav_5: G) = adec(g_sav_enc_1,skv_2) in
    {676}let K0_5: G = exp(g_sav_5,exp_v_10) in
    {677}let h_10: SymmetricKey = hash_fork(((exp(g,exp_v_10),g_sav_5,K0_5),keyEncAtoCTemp)) in
    {678}let (=symk2,symk_53: SymmetricKey) = dec(symk2_enc_1,h_10) in
    {679}let (g_sav'_1: G,sign_g_sav_1: bitstring) = dec(g_sav_enc_signed_1,symk_53) in
    {680}if check(hash((sig_gsav,pk(skv_2),g_sav_5)),sign_g_sav_1,pka_5) then
    {681}new sc_1: exponent;
    {682}let g_sc_5: G = exp(g,sc_1) in
    {683}let K_9: G = exp(g_sav_5,sc_1) in
    {684}let h_11: SymmetricKey = hash_fork(((g_sc_5,g_sav_5,K_9),keyEncCtoATemp)) in
    {685}new symk_k3_1: SymmetricKey;
    {686}let diddoc_sc_signed_1: bitstring = (g_sc_5,sig(hash((sig_gsac,pka_5,g_sc_5)),skv_2)) in
    {687}let m_63: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_5),pka_5),enc((symk3,symk_k3_1),h_11),enc(diddoc_sc_signed_1,symk_k3_1)) in
    {688}out(c_10, (msg4,m_63));
    {689}let symk_av_enc_5: SymmetricKey = hash_fork((K_9,h_11,keyEncCtoA)) in
    {690}let symk_av_dec_5: SymmetricKey = hash_fork((K_9,h_11,keyEncAtoC)) in
    {691}in(c_10, (=msg5,m_64: bitstring));
    {692}let (symk4_enc_5: bitstring,m5_enc_1: bitstring) = m_64 in
    {693}let (=symk4,symk_54: SymmetricKey) = dec(symk4_enc_5,symk_av_dec_5) in
    {694}let (=tag5,(i'_9: bitstring,v'_9: bitstring,u'_9: bitstring,uri'_9: bitstring,a'_9: bitstring)) = dec(m5_enc_1,symk_54) in
    {695}if ((i'_9,v'_9,u'_9,uri'_9,a'_9) = (i_6,v_10,u_10,uri_9,a_10)) then
    {696}new n_c_5: bitstring;
    {697}let rule_1: bitstring = (u_10,i_6,uri_9,a_10) in
    {698}let vpr_send_prev_1: bitstring = (dec_vpr_msg,v_10,rule_1,n_c_5) in
    {699}new symk_55: SymmetricKey;
    {700}let enc_symk5_1: bitstring = enc((symk5,symk_55),symk_av_enc_5) in
    {701}let m_65: bitstring = (enc_symk5_1,enc((tag6,vpr_send_prev_1),symk_55)) in
    {702}event verifierInConeOfUser(m_62,m_63,m_64,m_65);
    {703}out(c_10, (msg6,m_65));
    {704}in(c_10, (=msg9,m_66: bitstring));
    {705}let (symk8_enc_5: bitstring,m9_enc_1: bitstring) = m_66 in
    {706}let (=symk8,symk_56: SymmetricKey) = dec(symk8_enc_5,symk_av_dec_5) in
    {707}let (=tag9,vp_signed_6: bitstring) = dec(m9_enc_1,symk_56) in
    {708}let (=vp_2_msg,vp_signed_7: bitstring,vp_sign: bitstring) = vp_signed_6 in
    {709}if check(vp_signed_7,vp_sign,pka_5) then
    {710}let (=vp_msg,vp_9: bitstring,sign_vp_1: bitstring) = vp_signed_7 in
    {711}if check(vp_9,sign_vp_1,pku_5) then
    {712}let (vpr_rec_5: bitstring,vc_rec_signed_1: bitstring) = vp_9 in
    {713}let (vc_rec_1: bitstring,sign_vc_rec_1: bitstring) = vc_rec_signed_1 in
    {714}if check(vc_rec_1,sign_vc_rec_1,pki_5) then
    {715}let (iss''_1: bitstring,u''_1: bitstring) = vc_rec_1 in
    {716}if ((iss''_1,u''_1) = (i_6,u_10)) then
    {717}let (=dec_vpr_msg,v''_5: bitstring,rule''_1: bitstring,n_c''_1: bitstring) = vpr_rec_5 in
    {718}if ((v''_5,rule''_1,n_c''_1) = (c_10,rule_1,n_c_5)) then
    {719}let (u'''_1: bitstring,i'''_1: bitstring,uri'''_1: bitstring,a'''_1: bitstring) = rule''_1 in
    {720}if ((u'''_1,i'''_1,uri'''_1,a'''_1) = (u_10,i_6,uri_9,a_10)) then
    {721}new resource_1: bitstring;
    {722}new symk_57: SymmetricKey;
    {723}let symk9_enc_5: bitstring = enc((symk9,symk_57),symk_av_enc_5) in
    {724}let m_67: bitstring = (symk9_enc_5,enc((tag10,resource_1),symk_57)) in
    {725}event auth_VerifierSendsLastMessageToApp(m_62,m_63,m_64,m_65,m_66,m_67);
    {726}out(c_10, (msg10,m_67));
    {727}if talksOnlyToHonest_9 then
    (
        {728}event auth_VerifierCompletesProtocol(m_62,m_63,m_64,m_65,m_66,m_67)
    ) | (
        {729}out(ch(resource_1), resource_fromVerifier)
    )
) | (
    {730}!
    {731}let talksOnlyToHonest_10: bool = false in
    {732}let c_11: channel = c2 in
    {733}let v_11: bitstring = v in
    {734}let exp_v_11: exponent = exp_v in
    {735}let skv_3: SecretKey = skv in
    {736}let u_11: bitstring = u in
    {737}let pku_6: PublicKey = pk(sku) in
    {738}let exp_u_11: G = exp(g,exp_u) in
    {739}let a_11: bitstring = e in
    {740}let pka_6: PublicKey = pk(sk_E) in
    {741}let exp_a_11: G = exp(g,exp_E) in
    {742}let i_7: bitstring = i in
    {743}let pki_6: PublicKey = pk(ski) in
    {744}let uri_10: bitstring = uri_req in
    {745}in(c_11, (=msg3,m_68: bitstring));
    {746}let (=KEXDHINITSERVER,g_sav_enc_2: bitstring,symk2_enc_2: bitstring,g_sav_enc_signed_2: bitstring) = m_68 in
    {747}let (=gsav,g_sav_6: G) = adec(g_sav_enc_2,skv_3) in
    {748}let K0_6: G = exp(g_sav_6,exp_v_11) in
    {749}let h_12: SymmetricKey = hash_fork(((exp(g,exp_v_11),g_sav_6,K0_6),keyEncAtoCTemp)) in
    {750}let (=symk2,symk_58: SymmetricKey) = dec(symk2_enc_2,h_12) in
    {751}let (g_sav'_2: G,sign_g_sav_2: bitstring) = dec(g_sav_enc_signed_2,symk_58) in
    {752}if check(hash((sig_gsav,pk(skv_3),g_sav_6)),sign_g_sav_2,pka_6) then
    {753}new sc_2: exponent;
    {754}let g_sc_6: G = exp(g,sc_2) in
    {755}let K_10: G = exp(g_sav_6,sc_2) in
    {756}let h_13: SymmetricKey = hash_fork(((g_sc_6,g_sav_6,K_10),keyEncCtoATemp)) in
    {757}new symk_k3_2: SymmetricKey;
    {758}let diddoc_sc_signed_2: bitstring = (g_sc_6,sig(hash((sig_gsac,pka_6,g_sc_6)),skv_3)) in
    {759}let m_69: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_6),pka_6),enc((symk3,symk_k3_2),h_13),enc(diddoc_sc_signed_2,symk_k3_2)) in
    {760}out(c_11, (msg4,m_69));
    {761}let symk_av_enc_6: SymmetricKey = hash_fork((K_10,h_13,keyEncCtoA)) in
    {762}let symk_av_dec_6: SymmetricKey = hash_fork((K_10,h_13,keyEncAtoC)) in
    {763}in(c_11, (=msg5,m_70: bitstring));
    {764}let (symk4_enc_6: bitstring,m5_enc_2: bitstring) = m_70 in
    {765}let (=symk4,symk_59: SymmetricKey) = dec(symk4_enc_6,symk_av_dec_6) in
    {766}let (=tag5,(i'_10: bitstring,v'_10: bitstring,u'_10: bitstring,uri'_10: bitstring,a'_10: bitstring)) = dec(m5_enc_2,symk_59) in
    {767}if ((i'_10,v'_10,u'_10,uri'_10,a'_10) = (i_7,v_11,u_11,uri_10,a_11)) then
    {768}new n_c_6: bitstring;
    {769}let rule_2: bitstring = (u_11,i_7,uri_10,a_11) in
    {770}let vpr_send_prev_2: bitstring = (dec_vpr_msg,v_11,rule_2,n_c_6) in
    {771}new symk_60: SymmetricKey;
    {772}let enc_symk5_2: bitstring = enc((symk5,symk_60),symk_av_enc_6) in
    {773}let m_71: bitstring = (enc_symk5_2,enc((tag6,vpr_send_prev_2),symk_60)) in
    {774}event verifierInConeOfUser(m_68,m_69,m_70,m_71);
    {775}out(c_11, (msg6,m_71));
    {776}in(c_11, (=msg9,m_72: bitstring));
    {777}let (symk8_enc_6: bitstring,m9_enc_2: bitstring) = m_72 in
    {778}let (=symk8,symk_61: SymmetricKey) = dec(symk8_enc_6,symk_av_dec_6) in
    {779}let (=tag9,vp_signed_8: bitstring) = dec(m9_enc_2,symk_61) in
    {780}let (=vp_2_msg,vp_signed_9: bitstring,vp_sign_1: bitstring) = vp_signed_8 in
    {781}if check(vp_signed_9,vp_sign_1,pka_6) then
    {782}let (=vp_msg,vp_10: bitstring,sign_vp_2: bitstring) = vp_signed_9 in
    {783}if check(vp_10,sign_vp_2,pku_6) then
    {784}let (vpr_rec_6: bitstring,vc_rec_signed_2: bitstring) = vp_10 in
    {785}let (vc_rec_2: bitstring,sign_vc_rec_2: bitstring) = vc_rec_signed_2 in
    {786}if check(vc_rec_2,sign_vc_rec_2,pki_6) then
    {787}let (iss''_2: bitstring,u''_2: bitstring) = vc_rec_2 in
    {788}if ((iss''_2,u''_2) = (i_7,u_11)) then
    {789}let (=dec_vpr_msg,v''_6: bitstring,rule''_2: bitstring,n_c''_2: bitstring) = vpr_rec_6 in
    {790}if ((v''_6,rule''_2,n_c''_2) = (c_11,rule_2,n_c_6)) then
    {791}let (u'''_2: bitstring,i'''_2: bitstring,uri'''_2: bitstring,a'''_2: bitstring) = rule''_2 in
    {792}if ((u'''_2,i'''_2,uri'''_2,a'''_2) = (u_11,i_7,uri_10,a_11)) then
    {793}new resource_2: bitstring;
    {794}new symk_62: SymmetricKey;
    {795}let symk9_enc_6: bitstring = enc((symk9,symk_62),symk_av_enc_6) in
    {796}let m_73: bitstring = (symk9_enc_6,enc((tag10,resource_2),symk_62)) in
    {797}event auth_VerifierSendsLastMessageToApp(m_68,m_69,m_70,m_71,m_72,m_73);
    {798}out(c_11, (msg10,m_73));
    {799}if talksOnlyToHonest_10 then
    (
        {800}event auth_VerifierCompletesProtocol(m_68,m_69,m_70,m_71,m_72,m_73)
    ) | (
        {801}out(ch(resource_2), resource_fromVerifier)
    )
) | (
    {802}!
    {803}let talksOnlyToHonest_11: bool = false in
    {804}let c_12: channel = c2 in
    {805}let v_12: bitstring = v in
    {806}let exp_v_12: exponent = exp_v in
    {807}let skv_4: SecretKey = skv in
    {808}let u_12: bitstring = e in
    {809}let pku_7: PublicKey = pk(sk_E) in
    {810}let exp_u_12: G = exp(g,exp_E) in
    {811}let a_12: bitstring = e in
    {812}let pka_7: PublicKey = pk(sk_E) in
    {813}let exp_a_12: G = exp(g,exp_E) in
    {814}let i_8: bitstring = i in
    {815}let pki_7: PublicKey = pk(ski) in
    {816}let uri_11: bitstring = uri_req in
    {817}in(c_12, (=msg3,m_74: bitstring));
    {818}let (=KEXDHINITSERVER,g_sav_enc_3: bitstring,symk2_enc_3: bitstring,g_sav_enc_signed_3: bitstring) = m_74 in
    {819}let (=gsav,g_sav_7: G) = adec(g_sav_enc_3,skv_4) in
    {820}let K0_7: G = exp(g_sav_7,exp_v_12) in
    {821}let h_14: SymmetricKey = hash_fork(((exp(g,exp_v_12),g_sav_7,K0_7),keyEncAtoCTemp)) in
    {822}let (=symk2,symk_63: SymmetricKey) = dec(symk2_enc_3,h_14) in
    {823}let (g_sav'_3: G,sign_g_sav_3: bitstring) = dec(g_sav_enc_signed_3,symk_63) in
    {824}if check(hash((sig_gsav,pk(skv_4),g_sav_7)),sign_g_sav_3,pka_7) then
    {825}new sc_3: exponent;
    {826}let g_sc_7: G = exp(g,sc_3) in
    {827}let K_11: G = exp(g_sav_7,sc_3) in
    {828}let h_15: SymmetricKey = hash_fork(((g_sc_7,g_sav_7,K_11),keyEncCtoATemp)) in
    {829}new symk_k3_3: SymmetricKey;
    {830}let diddoc_sc_signed_3: bitstring = (g_sc_7,sig(hash((sig_gsac,pka_7,g_sc_7)),skv_4)) in
    {831}let m_75: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_7),pka_7),enc((symk3,symk_k3_3),h_15),enc(diddoc_sc_signed_3,symk_k3_3)) in
    {832}out(c_12, (msg4,m_75));
    {833}let symk_av_enc_7: SymmetricKey = hash_fork((K_11,h_15,keyEncCtoA)) in
    {834}let symk_av_dec_7: SymmetricKey = hash_fork((K_11,h_15,keyEncAtoC)) in
    {835}in(c_12, (=msg5,m_76: bitstring));
    {836}let (symk4_enc_7: bitstring,m5_enc_3: bitstring) = m_76 in
    {837}let (=symk4,symk_64: SymmetricKey) = dec(symk4_enc_7,symk_av_dec_7) in
    {838}let (=tag5,(i'_11: bitstring,v'_11: bitstring,u'_11: bitstring,uri'_11: bitstring,a'_11: bitstring)) = dec(m5_enc_3,symk_64) in
    {839}if ((i'_11,v'_11,u'_11,uri'_11,a'_11) = (i_8,v_12,u_12,uri_11,a_12)) then
    {840}new n_c_7: bitstring;
    {841}let rule_3: bitstring = (u_12,i_8,uri_11,a_12) in
    {842}let vpr_send_prev_3: bitstring = (dec_vpr_msg,v_12,rule_3,n_c_7) in
    {843}new symk_65: SymmetricKey;
    {844}let enc_symk5_3: bitstring = enc((symk5,symk_65),symk_av_enc_7) in
    {845}let m_77: bitstring = (enc_symk5_3,enc((tag6,vpr_send_prev_3),symk_65)) in
    {846}event verifierInConeOfUser(m_74,m_75,m_76,m_77);
    {847}out(c_12, (msg6,m_77));
    {848}in(c_12, (=msg9,m_78: bitstring));
    {849}let (symk8_enc_7: bitstring,m9_enc_3: bitstring) = m_78 in
    {850}let (=symk8,symk_66: SymmetricKey) = dec(symk8_enc_7,symk_av_dec_7) in
    {851}let (=tag9,vp_signed_10: bitstring) = dec(m9_enc_3,symk_66) in
    {852}let (=vp_2_msg,vp_signed_11: bitstring,vp_sign_3: bitstring) = vp_signed_10 in
    {853}if check(vp_signed_11,vp_sign_3,pka_7) then
    {854}let (=vp_msg,vp_11: bitstring,sign_vp_3: bitstring) = vp_signed_11 in
    {855}if check(vp_11,sign_vp_3,pku_7) then
    {856}let (vpr_rec_7: bitstring,vc_rec_signed_3: bitstring) = vp_11 in
    {857}let (vc_rec_3: bitstring,sign_vc_rec_3: bitstring) = vc_rec_signed_3 in
    {858}if check(vc_rec_3,sign_vc_rec_3,pki_7) then
    {859}let (iss''_3: bitstring,u''_3: bitstring) = vc_rec_3 in
    {860}if ((iss''_3,u''_3) = (i_8,u_12)) then
    {861}let (=dec_vpr_msg,v''_7: bitstring,rule''_3: bitstring,n_c''_3: bitstring) = vpr_rec_7 in
    {862}if ((v''_7,rule''_3,n_c''_3) = (c_12,rule_3,n_c_7)) then
    {863}let (u'''_3: bitstring,i'''_3: bitstring,uri'''_3: bitstring,a'''_3: bitstring) = rule''_3 in
    {864}if ((u'''_3,i'''_3,uri'''_3,a'''_3) = (u_12,i_8,uri_11,a_12)) then
    {865}new resource_3: bitstring;
    {866}new symk_67: SymmetricKey;
    {867}let symk9_enc_7: bitstring = enc((symk9,symk_67),symk_av_enc_7) in
    {868}let m_79: bitstring = (symk9_enc_7,enc((tag10,resource_3),symk_67)) in
    {869}event auth_VerifierSendsLastMessageToApp(m_74,m_75,m_76,m_77,m_78,m_79);
    {870}out(c_12, (msg10,m_79));
    {871}if talksOnlyToHonest_11 then
    (
        {872}event auth_VerifierCompletesProtocol(m_74,m_75,m_76,m_77,m_78,m_79)
    ) | (
        {873}out(ch(resource_3), resource_fromVerifier)
    )
) | (
    {874}!
    {875}let talksOnlyToHonest_12: bool = false in
    {876}let c_13: channel = c2 in
    {877}let v_13: bitstring = v in
    {878}let exp_v_13: exponent = exp_v in
    {879}let skv_5: SecretKey = skv in
    {880}let u_13: bitstring = u in
    {881}let pku_8: PublicKey = pk(sku) in
    {882}let exp_u_13: G = exp(g,exp_u) in
    {883}let a_13: bitstring = a in
    {884}let pka_8: PublicKey = pk(ska) in
    {885}let exp_a_13: G = exp(g,exp_a) in
    {886}let i_9: bitstring = e in
    {887}let pki_8: PublicKey = pk(sk_E) in
    {888}let uri_12: bitstring = uri_req in
    {889}in(c_13, (=msg3,m_80: bitstring));
    {890}let (=KEXDHINITSERVER,g_sav_enc_4: bitstring,symk2_enc_4: bitstring,g_sav_enc_signed_4: bitstring) = m_80 in
    {891}let (=gsav,g_sav_8: G) = adec(g_sav_enc_4,skv_5) in
    {892}let K0_8: G = exp(g_sav_8,exp_v_13) in
    {893}let h_16: SymmetricKey = hash_fork(((exp(g,exp_v_13),g_sav_8,K0_8),keyEncAtoCTemp)) in
    {894}let (=symk2,symk_68: SymmetricKey) = dec(symk2_enc_4,h_16) in
    {895}let (g_sav'_4: G,sign_g_sav_4: bitstring) = dec(g_sav_enc_signed_4,symk_68) in
    {896}if check(hash((sig_gsav,pk(skv_5),g_sav_8)),sign_g_sav_4,pka_8) then
    {897}new sc_4: exponent;
    {898}let g_sc_8: G = exp(g,sc_4) in
    {899}let K_12: G = exp(g_sav_8,sc_4) in
    {900}let h_17: SymmetricKey = hash_fork(((g_sc_8,g_sav_8,K_12),keyEncCtoATemp)) in
    {901}new symk_k3_4: SymmetricKey;
    {902}let diddoc_sc_signed_4: bitstring = (g_sc_8,sig(hash((sig_gsac,pka_8,g_sc_8)),skv_5)) in
    {903}let m_81: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_8),pka_8),enc((symk3,symk_k3_4),h_17),enc(diddoc_sc_signed_4,symk_k3_4)) in
    {904}out(c_13, (msg4,m_81));
    {905}let symk_av_enc_8: SymmetricKey = hash_fork((K_12,h_17,keyEncCtoA)) in
    {906}let symk_av_dec_8: SymmetricKey = hash_fork((K_12,h_17,keyEncAtoC)) in
    {907}in(c_13, (=msg5,m_82: bitstring));
    {908}let (symk4_enc_8: bitstring,m5_enc_4: bitstring) = m_82 in
    {909}let (=symk4,symk_69: SymmetricKey) = dec(symk4_enc_8,symk_av_dec_8) in
    {910}let (=tag5,(i'_12: bitstring,v'_12: bitstring,u'_12: bitstring,uri'_12: bitstring,a'_12: bitstring)) = dec(m5_enc_4,symk_69) in
    {911}if ((i'_12,v'_12,u'_12,uri'_12,a'_12) = (i_9,v_13,u_13,uri_12,a_13)) then
    {912}new n_c_8: bitstring;
    {913}let rule_4: bitstring = (u_13,i_9,uri_12,a_13) in
    {914}let vpr_send_prev_4: bitstring = (dec_vpr_msg,v_13,rule_4,n_c_8) in
    {915}new symk_70: SymmetricKey;
    {916}let enc_symk5_4: bitstring = enc((symk5,symk_70),symk_av_enc_8) in
    {917}let m_83: bitstring = (enc_symk5_4,enc((tag6,vpr_send_prev_4),symk_70)) in
    {918}event verifierInConeOfUser(m_80,m_81,m_82,m_83);
    {919}out(c_13, (msg6,m_83));
    {920}in(c_13, (=msg9,m_84: bitstring));
    {921}let (symk8_enc_8: bitstring,m9_enc_4: bitstring) = m_84 in
    {922}let (=symk8,symk_71: SymmetricKey) = dec(symk8_enc_8,symk_av_dec_8) in
    {923}let (=tag9,vp_signed_12: bitstring) = dec(m9_enc_4,symk_71) in
    {924}let (=vp_2_msg,vp_signed_13: bitstring,vp_sign_4: bitstring) = vp_signed_12 in
    {925}if check(vp_signed_13,vp_sign_4,pka_8) then
    {926}let (=vp_msg,vp_12: bitstring,sign_vp_4: bitstring) = vp_signed_13 in
    {927}if check(vp_12,sign_vp_4,pku_8) then
    {928}let (vpr_rec_8: bitstring,vc_rec_signed_4: bitstring) = vp_12 in
    {929}let (vc_rec_4: bitstring,sign_vc_rec_4: bitstring) = vc_rec_signed_4 in
    {930}if check(vc_rec_4,sign_vc_rec_4,pki_8) then
    {931}let (iss''_4: bitstring,u''_4: bitstring) = vc_rec_4 in
    {932}if ((iss''_4,u''_4) = (i_9,u_13)) then
    {933}let (=dec_vpr_msg,v''_8: bitstring,rule''_4: bitstring,n_c''_4: bitstring) = vpr_rec_8 in
    {934}if ((v''_8,rule''_4,n_c''_4) = (c_13,rule_4,n_c_8)) then
    {935}let (u'''_4: bitstring,i'''_4: bitstring,uri'''_4: bitstring,a'''_4: bitstring) = rule''_4 in
    {936}if ((u'''_4,i'''_4,uri'''_4,a'''_4) = (u_13,i_9,uri_12,a_13)) then
    {937}new resource_4: bitstring;
    {938}new symk_72: SymmetricKey;
    {939}let symk9_enc_8: bitstring = enc((symk9,symk_72),symk_av_enc_8) in
    {940}let m_85: bitstring = (symk9_enc_8,enc((tag10,resource_4),symk_72)) in
    {941}event auth_VerifierSendsLastMessageToApp(m_80,m_81,m_82,m_83,m_84,m_85);
    {942}out(c_13, (msg10,m_85));
    {943}if talksOnlyToHonest_12 then
    (
        {944}event auth_VerifierCompletesProtocol(m_80,m_81,m_82,m_83,m_84,m_85)
    ) | (
        {945}out(ch(resource_4), resource_fromVerifier)
    )
) | (
    {946}!
    {947}let talksOnlyToHonest_13: bool = false in
    {948}let c_14: channel = c2 in
    {949}let v_14: bitstring = v in
    {950}let exp_v_14: exponent = exp_v in
    {951}let skv_6: SecretKey = skv in
    {952}let u_14: bitstring = e in
    {953}let pku_9: PublicKey = pk(sk_E) in
    {954}let exp_u_14: G = exp(g,exp_E) in
    {955}let a_14: bitstring = a in
    {956}let pka_9: PublicKey = pk(ska) in
    {957}let exp_a_14: G = exp(g,exp_a) in
    {958}let i_10: bitstring = e in
    {959}let pki_9: PublicKey = pk(sk_E) in
    {960}let uri_13: bitstring = uri_req in
    {961}in(c_14, (=msg3,m_86: bitstring));
    {962}let (=KEXDHINITSERVER,g_sav_enc_5: bitstring,symk2_enc_5: bitstring,g_sav_enc_signed_5: bitstring) = m_86 in
    {963}let (=gsav,g_sav_9: G) = adec(g_sav_enc_5,skv_6) in
    {964}let K0_9: G = exp(g_sav_9,exp_v_14) in
    {965}let h_18: SymmetricKey = hash_fork(((exp(g,exp_v_14),g_sav_9,K0_9),keyEncAtoCTemp)) in
    {966}let (=symk2,symk_73: SymmetricKey) = dec(symk2_enc_5,h_18) in
    {967}let (g_sav'_5: G,sign_g_sav_5: bitstring) = dec(g_sav_enc_signed_5,symk_73) in
    {968}if check(hash((sig_gsav,pk(skv_6),g_sav_9)),sign_g_sav_5,pka_9) then
    {969}new sc_5: exponent;
    {970}let g_sc_9: G = exp(g,sc_5) in
    {971}let K_13: G = exp(g_sav_9,sc_5) in
    {972}let h_19: SymmetricKey = hash_fork(((g_sc_9,g_sav_9,K_13),keyEncCtoATemp)) in
    {973}new symk_k3_5: SymmetricKey;
    {974}let diddoc_sc_signed_5: bitstring = (g_sc_9,sig(hash((sig_gsac,pka_9,g_sc_9)),skv_6)) in
    {975}let m_87: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_9),pka_9),enc((symk3,symk_k3_5),h_19),enc(diddoc_sc_signed_5,symk_k3_5)) in
    {976}out(c_14, (msg4,m_87));
    {977}let symk_av_enc_9: SymmetricKey = hash_fork((K_13,h_19,keyEncCtoA)) in
    {978}let symk_av_dec_9: SymmetricKey = hash_fork((K_13,h_19,keyEncAtoC)) in
    {979}in(c_14, (=msg5,m_88: bitstring));
    {980}let (symk4_enc_9: bitstring,m5_enc_5: bitstring) = m_88 in
    {981}let (=symk4,symk_74: SymmetricKey) = dec(symk4_enc_9,symk_av_dec_9) in
    {982}let (=tag5,(i'_13: bitstring,v'_13: bitstring,u'_13: bitstring,uri'_13: bitstring,a'_13: bitstring)) = dec(m5_enc_5,symk_74) in
    {983}if ((i'_13,v'_13,u'_13,uri'_13,a'_13) = (i_10,v_14,u_14,uri_13,a_14)) then
    {984}new n_c_9: bitstring;
    {985}let rule_5: bitstring = (u_14,i_10,uri_13,a_14) in
    {986}let vpr_send_prev_5: bitstring = (dec_vpr_msg,v_14,rule_5,n_c_9) in
    {987}new symk_75: SymmetricKey;
    {988}let enc_symk5_5: bitstring = enc((symk5,symk_75),symk_av_enc_9) in
    {989}let m_89: bitstring = (enc_symk5_5,enc((tag6,vpr_send_prev_5),symk_75)) in
    {990}event verifierInConeOfUser(m_86,m_87,m_88,m_89);
    {991}out(c_14, (msg6,m_89));
    {992}in(c_14, (=msg9,m_90: bitstring));
    {993}let (symk8_enc_9: bitstring,m9_enc_5: bitstring) = m_90 in
    {994}let (=symk8,symk_76: SymmetricKey) = dec(symk8_enc_9,symk_av_dec_9) in
    {995}let (=tag9,vp_signed_14: bitstring) = dec(m9_enc_5,symk_76) in
    {996}let (=vp_2_msg,vp_signed_15: bitstring,vp_sign_5: bitstring) = vp_signed_14 in
    {997}if check(vp_signed_15,vp_sign_5,pka_9) then
    {998}let (=vp_msg,vp_13: bitstring,sign_vp_5: bitstring) = vp_signed_15 in
    {999}if check(vp_13,sign_vp_5,pku_9) then
    {1000}let (vpr_rec_9: bitstring,vc_rec_signed_5: bitstring) = vp_13 in
    {1001}let (vc_rec_5: bitstring,sign_vc_rec_5: bitstring) = vc_rec_signed_5 in
    {1002}if check(vc_rec_5,sign_vc_rec_5,pki_9) then
    {1003}let (iss''_5: bitstring,u''_5: bitstring) = vc_rec_5 in
    {1004}if ((iss''_5,u''_5) = (i_10,u_14)) then
    {1005}let (=dec_vpr_msg,v''_9: bitstring,rule''_5: bitstring,n_c''_5: bitstring) = vpr_rec_9 in
    {1006}if ((v''_9,rule''_5,n_c''_5) = (c_14,rule_5,n_c_9)) then
    {1007}let (u'''_5: bitstring,i'''_5: bitstring,uri'''_5: bitstring,a'''_5: bitstring) = rule''_5 in
    {1008}if ((u'''_5,i'''_5,uri'''_5,a'''_5) = (u_14,i_10,uri_13,a_14)) then
    {1009}new resource_5: bitstring;
    {1010}new symk_77: SymmetricKey;
    {1011}let symk9_enc_9: bitstring = enc((symk9,symk_77),symk_av_enc_9) in
    {1012}let m_91: bitstring = (symk9_enc_9,enc((tag10,resource_5),symk_77)) in
    {1013}event auth_VerifierSendsLastMessageToApp(m_86,m_87,m_88,m_89,m_90,m_91);
    {1014}out(c_14, (msg10,m_91));
    {1015}if talksOnlyToHonest_13 then
    (
        {1016}event auth_VerifierCompletesProtocol(m_86,m_87,m_88,m_89,m_90,m_91)
    ) | (
        {1017}out(ch(resource_5), resource_fromVerifier)
    )
) | (
    {1018}!
    {1019}let talksOnlyToHonest_14: bool = false in
    {1020}let c_15: channel = c2 in
    {1021}let v_15: bitstring = v in
    {1022}let exp_v_15: exponent = exp_v in
    {1023}let skv_7: SecretKey = skv in
    {1024}let u_15: bitstring = u in
    {1025}let pku_10: PublicKey = pk(sku) in
    {1026}let exp_u_15: G = exp(g,exp_u) in
    {1027}let a_15: bitstring = e in
    {1028}let pka_10: PublicKey = pk(sk_E) in
    {1029}let exp_a_15: G = exp(g,exp_E) in
    {1030}let i_11: bitstring = e in
    {1031}let pki_10: PublicKey = pk(sk_E) in
    {1032}let uri_14: bitstring = uri_req in
    {1033}in(c_15, (=msg3,m_92: bitstring));
    {1034}let (=KEXDHINITSERVER,g_sav_enc_6: bitstring,symk2_enc_6: bitstring,g_sav_enc_signed_6: bitstring) = m_92 in
    {1035}let (=gsav,g_sav_10: G) = adec(g_sav_enc_6,skv_7) in
    {1036}let K0_10: G = exp(g_sav_10,exp_v_15) in
    {1037}let h_20: SymmetricKey = hash_fork(((exp(g,exp_v_15),g_sav_10,K0_10),keyEncAtoCTemp)) in
    {1038}let (=symk2,symk_78: SymmetricKey) = dec(symk2_enc_6,h_20) in
    {1039}let (g_sav'_6: G,sign_g_sav_6: bitstring) = dec(g_sav_enc_signed_6,symk_78) in
    {1040}if check(hash((sig_gsav,pk(skv_7),g_sav_10)),sign_g_sav_6,pka_10) then
    {1041}new sc_6: exponent;
    {1042}let g_sc_10: G = exp(g,sc_6) in
    {1043}let K_14: G = exp(g_sav_10,sc_6) in
    {1044}let h_21: SymmetricKey = hash_fork(((g_sc_10,g_sav_10,K_14),keyEncCtoATemp)) in
    {1045}new symk_k3_6: SymmetricKey;
    {1046}let diddoc_sc_signed_6: bitstring = (g_sc_10,sig(hash((sig_gsac,pka_10,g_sc_10)),skv_7)) in
    {1047}let m_93: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_10),pka_10),enc((symk3,symk_k3_6),h_21),enc(diddoc_sc_signed_6,symk_k3_6)) in
    {1048}out(c_15, (msg4,m_93));
    {1049}let symk_av_enc_10: SymmetricKey = hash_fork((K_14,h_21,keyEncCtoA)) in
    {1050}let symk_av_dec_10: SymmetricKey = hash_fork((K_14,h_21,keyEncAtoC)) in
    {1051}in(c_15, (=msg5,m_94: bitstring));
    {1052}let (symk4_enc_10: bitstring,m5_enc_6: bitstring) = m_94 in
    {1053}let (=symk4,symk_79: SymmetricKey) = dec(symk4_enc_10,symk_av_dec_10) in
    {1054}let (=tag5,(i'_14: bitstring,v'_14: bitstring,u'_14: bitstring,uri'_14: bitstring,a'_14: bitstring)) = dec(m5_enc_6,symk_79) in
    {1055}if ((i'_14,v'_14,u'_14,uri'_14,a'_14) = (i_11,v_15,u_15,uri_14,a_15)) then
    {1056}new n_c_10: bitstring;
    {1057}let rule_6: bitstring = (u_15,i_11,uri_14,a_15) in
    {1058}let vpr_send_prev_6: bitstring = (dec_vpr_msg,v_15,rule_6,n_c_10) in
    {1059}new symk_80: SymmetricKey;
    {1060}let enc_symk5_6: bitstring = enc((symk5,symk_80),symk_av_enc_10) in
    {1061}let m_95: bitstring = (enc_symk5_6,enc((tag6,vpr_send_prev_6),symk_80)) in
    {1062}event verifierInConeOfUser(m_92,m_93,m_94,m_95);
    {1063}out(c_15, (msg6,m_95));
    {1064}in(c_15, (=msg9,m_96: bitstring));
    {1065}let (symk8_enc_10: bitstring,m9_enc_6: bitstring) = m_96 in
    {1066}let (=symk8,symk_81: SymmetricKey) = dec(symk8_enc_10,symk_av_dec_10) in
    {1067}let (=tag9,vp_signed_16: bitstring) = dec(m9_enc_6,symk_81) in
    {1068}let (=vp_2_msg,vp_signed_17: bitstring,vp_sign_6: bitstring) = vp_signed_16 in
    {1069}if check(vp_signed_17,vp_sign_6,pka_10) then
    {1070}let (=vp_msg,vp_14: bitstring,sign_vp_6: bitstring) = vp_signed_17 in
    {1071}if check(vp_14,sign_vp_6,pku_10) then
    {1072}let (vpr_rec_10: bitstring,vc_rec_signed_6: bitstring) = vp_14 in
    {1073}let (vc_rec_6: bitstring,sign_vc_rec_6: bitstring) = vc_rec_signed_6 in
    {1074}if check(vc_rec_6,sign_vc_rec_6,pki_10) then
    {1075}let (iss''_6: bitstring,u''_6: bitstring) = vc_rec_6 in
    {1076}if ((iss''_6,u''_6) = (i_11,u_15)) then
    {1077}let (=dec_vpr_msg,v''_10: bitstring,rule''_6: bitstring,n_c''_6: bitstring) = vpr_rec_10 in
    {1078}if ((v''_10,rule''_6,n_c''_6) = (c_15,rule_6,n_c_10)) then
    {1079}let (u'''_6: bitstring,i'''_6: bitstring,uri'''_6: bitstring,a'''_6: bitstring) = rule''_6 in
    {1080}if ((u'''_6,i'''_6,uri'''_6,a'''_6) = (u_15,i_11,uri_14,a_15)) then
    {1081}new resource_6: bitstring;
    {1082}new symk_82: SymmetricKey;
    {1083}let symk9_enc_10: bitstring = enc((symk9,symk_82),symk_av_enc_10) in
    {1084}let m_97: bitstring = (symk9_enc_10,enc((tag10,resource_6),symk_82)) in
    {1085}event auth_VerifierSendsLastMessageToApp(m_92,m_93,m_94,m_95,m_96,m_97);
    {1086}out(c_15, (msg10,m_97));
    {1087}if talksOnlyToHonest_14 then
    (
        {1088}event auth_VerifierCompletesProtocol(m_92,m_93,m_94,m_95,m_96,m_97)
    ) | (
        {1089}out(ch(resource_6), resource_fromVerifier)
    )
) | (
    {1090}!
    {1091}let talksOnlyToHonest_15: bool = false in
    {1092}let c_16: channel = c2 in
    {1093}let v_16: bitstring = v in
    {1094}let exp_v_16: exponent = exp_v in
    {1095}let skv_8: SecretKey = skv in
    {1096}let u_16: bitstring = e in
    {1097}let pku_11: PublicKey = pk(sk_E) in
    {1098}let exp_u_16: G = exp(g,exp_E) in
    {1099}let a_16: bitstring = e in
    {1100}let pka_11: PublicKey = pk(sk_E) in
    {1101}let exp_a_16: G = exp(g,exp_E) in
    {1102}let i_12: bitstring = e in
    {1103}let pki_11: PublicKey = pk(sk_E) in
    {1104}let uri_15: bitstring = uri_req in
    {1105}in(c_16, (=msg3,m_98: bitstring));
    {1106}let (=KEXDHINITSERVER,g_sav_enc_7: bitstring,symk2_enc_7: bitstring,g_sav_enc_signed_7: bitstring) = m_98 in
    {1107}let (=gsav,g_sav_11: G) = adec(g_sav_enc_7,skv_8) in
    {1108}let K0_11: G = exp(g_sav_11,exp_v_16) in
    {1109}let h_22: SymmetricKey = hash_fork(((exp(g,exp_v_16),g_sav_11,K0_11),keyEncAtoCTemp)) in
    {1110}let (=symk2,symk_83: SymmetricKey) = dec(symk2_enc_7,h_22) in
    {1111}let (g_sav'_7: G,sign_g_sav_7: bitstring) = dec(g_sav_enc_signed_7,symk_83) in
    {1112}if check(hash((sig_gsav,pk(skv_8),g_sav_11)),sign_g_sav_7,pka_11) then
    {1113}new sc_7: exponent;
    {1114}let g_sc_11: G = exp(g,sc_7) in
    {1115}let K_15: G = exp(g_sav_11,sc_7) in
    {1116}let h_23: SymmetricKey = hash_fork(((g_sc_11,g_sav_11,K_15),keyEncCtoATemp)) in
    {1117}new symk_k3_7: SymmetricKey;
    {1118}let diddoc_sc_signed_7: bitstring = (g_sc_11,sig(hash((sig_gsac,pka_11,g_sc_11)),skv_8)) in
    {1119}let m_99: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_11),pka_11),enc((symk3,symk_k3_7),h_23),enc(diddoc_sc_signed_7,symk_k3_7)) in
    {1120}out(c_16, (msg4,m_99));
    {1121}let symk_av_enc_11: SymmetricKey = hash_fork((K_15,h_23,keyEncCtoA)) in
    {1122}let symk_av_dec_11: SymmetricKey = hash_fork((K_15,h_23,keyEncAtoC)) in
    {1123}in(c_16, (=msg5,m_100: bitstring));
    {1124}let (symk4_enc_11: bitstring,m5_enc_7: bitstring) = m_100 in
    {1125}let (=symk4,symk_84: SymmetricKey) = dec(symk4_enc_11,symk_av_dec_11) in
    {1126}let (=tag5,(i'_15: bitstring,v'_15: bitstring,u'_15: bitstring,uri'_15: bitstring,a'_15: bitstring)) = dec(m5_enc_7,symk_84) in
    {1127}if ((i'_15,v'_15,u'_15,uri'_15,a'_15) = (i_12,v_16,u_16,uri_15,a_16)) then
    {1128}new n_c_11: bitstring;
    {1129}let rule_7: bitstring = (u_16,i_12,uri_15,a_16) in
    {1130}let vpr_send_prev_7: bitstring = (dec_vpr_msg,v_16,rule_7,n_c_11) in
    {1131}new symk_85: SymmetricKey;
    {1132}let enc_symk5_7: bitstring = enc((symk5,symk_85),symk_av_enc_11) in
    {1133}let m_101: bitstring = (enc_symk5_7,enc((tag6,vpr_send_prev_7),symk_85)) in
    {1134}event verifierInConeOfUser(m_98,m_99,m_100,m_101);
    {1135}out(c_16, (msg6,m_101));
    {1136}in(c_16, (=msg9,m_102: bitstring));
    {1137}let (symk8_enc_11: bitstring,m9_enc_7: bitstring) = m_102 in
    {1138}let (=symk8,symk_86: SymmetricKey) = dec(symk8_enc_11,symk_av_dec_11) in
    {1139}let (=tag9,vp_signed_18: bitstring) = dec(m9_enc_7,symk_86) in
    {1140}let (=vp_2_msg,vp_signed_19: bitstring,vp_sign_7: bitstring) = vp_signed_18 in
    {1141}if check(vp_signed_19,vp_sign_7,pka_11) then
    {1142}let (=vp_msg,vp_15: bitstring,sign_vp_7: bitstring) = vp_signed_19 in
    {1143}if check(vp_15,sign_vp_7,pku_11) then
    {1144}let (vpr_rec_11: bitstring,vc_rec_signed_7: bitstring) = vp_15 in
    {1145}let (vc_rec_7: bitstring,sign_vc_rec_7: bitstring) = vc_rec_signed_7 in
    {1146}if check(vc_rec_7,sign_vc_rec_7,pki_11) then
    {1147}let (iss''_7: bitstring,u''_7: bitstring) = vc_rec_7 in
    {1148}if ((iss''_7,u''_7) = (i_12,u_16)) then
    {1149}let (=dec_vpr_msg,v''_11: bitstring,rule''_7: bitstring,n_c''_7: bitstring) = vpr_rec_11 in
    {1150}if ((v''_11,rule''_7,n_c''_7) = (c_16,rule_7,n_c_11)) then
    {1151}let (u'''_7: bitstring,i'''_7: bitstring,uri'''_7: bitstring,a'''_7: bitstring) = rule''_7 in
    {1152}if ((u'''_7,i'''_7,uri'''_7,a'''_7) = (u_16,i_12,uri_15,a_16)) then
    {1153}new resource_7: bitstring;
    {1154}new symk_87: SymmetricKey;
    {1155}let symk9_enc_11: bitstring = enc((symk9,symk_87),symk_av_enc_11) in
    {1156}let m_103: bitstring = (symk9_enc_11,enc((tag10,resource_7),symk_87)) in
    {1157}event auth_VerifierSendsLastMessageToApp(m_98,m_99,m_100,m_101,m_102,m_103);
    {1158}out(c_16, (msg10,m_103));
    {1159}if talksOnlyToHonest_15 then
    (
        {1160}event auth_VerifierCompletesProtocol(m_98,m_99,m_100,m_101,m_102,m_103)
    ) | (
        {1161}out(ch(resource_7), resource_fromVerifier)
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new u: bitstring;
{2}new a: bitstring;
{3}new v: bitstring;
{4}new i: bitstring;
{5}out(c, u);
{6}out(c, a);
{7}out(c, v);
{8}out(c, i);
{9}new sku: SecretKey;
{10}new ska: SecretKey;
{11}new skv: SecretKey;
{12}new ski: SecretKey;
{13}new exp_u: exponent;
{14}new exp_a: exponent;
{15}new exp_v: exponent;
{16}new exp_i: exponent;
{17}out(c, exp(g,exp_u));
{18}out(c, exp(g,exp_a));
{19}out(c, exp(g,exp_v));
{20}out(c, exp(g,exp_i));
{21}out(c, pk(sku));
{22}out(c, pk(ska));
{23}out(c, pk(skv));
{24}out(c, pk(ski));
{25}let vc: bitstring = ((i,u),sig((i,u),ski)) in
(
    {26}!
    {39}new su: exponent;
    {43}new symk_0: SymmetricKey;
    {40}let g_su: G = exp(g,su) in
    {33}let pka: PublicKey = pk(ska) in
    {31}let sku_1: SecretKey = sku in
    {44}let diddoc_su_signed: bitstring = (g_su,sig(hash((sig_gsu,pka,g_su)),sku_1)) in
    {34}let exp_a_1: G = exp(g,exp_a) in
    {41}let K0: G = exp(exp_a_1,su) in
    {42}let h0: SymmetricKey = hash_fork(((g_su,exp_a_1,K0),keyEncCtoSTemp)) in
    {45}let m_1: bitstring = (KEXDHINIT,aenc((gsu,g_su),pka),enc((symk0,symk_0),h0),enc(diddoc_su_signed,symk_0)) in
    {28}let c_1: channel = c in
    {46}out(c_1, (msg1,m_1));
    {47}in(c_1, (=msg2,m_2: bitstring));
    {48}let (=KEXDHREPLY,g_sa_enc: bitstring,symk_1_enc: bitstring,diddoc_sa_signed_enc: bitstring) = m_2 in
    {49}let (=gsa,g_sa: G) = adec(g_sa_enc,sku_1) in
    {50}let K: G = exp(g_sa,su) in
    {51}let h: SymmetricKey = hash_fork(((g_su,g_sa,K),keyEncStoCTemp)) in
    {52}let (=symk1,symk_1: SymmetricKey) = dec(symk_1_enc,h) in
    {53}let (g_sa': G,g_sa_signed: bitstring) = dec(diddoc_sa_signed_enc,symk_1) in
    {54}if check(hash((sig_gsa,pk(sku_1),g_sa)),g_sa_signed,pka) then
    {57}in(c_1, (=msg7,m_7: bitstring));
    {58}let (symk6_enc: bitstring,m7_enc: bitstring) = m_7 in
    {56}let symk_ua_dec: SymmetricKey = hash_fork((K,h,keyEncStoC)) in
    {59}let (=symk6,symk_6: SymmetricKey) = dec(symk6_enc,symk_ua_dec) in
    {60}let (=tag7,n_r: bitstring,v': bitstring,vpr_signed: bitstring) = dec(m7_enc,symk_6) in
    {35}let v_1: bitstring = v in
    {61}if (v_1 = v') then
    {62}let (=dec_vpr_2_msg,vpr_rec: bitstring,sig_vpr_2: bitstring) = vpr_signed in
    {63}if check(vpr_rec,sig_vpr_2,pka) then
    {64}let (=dec_vpr_msg,v'': bitstring,rule': bitstring,n_c: bitstring) = vpr_rec in
    {65}let (u': bitstring,i': bitstring,uri': bitstring,a': bitstring) = rule' in
    {38}let uri: bitstring = uri_req in
    {32}let a_1: bitstring = a in
    {29}let u_1: bitstring = u in
    {66}if ((u',uri',a',v'') = (u_1,uri,a_1,v_1)) then
    {68}new symk_7: SymmetricKey;
    {55}let symk_ua_enc: SymmetricKey = hash_fork((K,h,keyEncCtoS)) in
    {69}let symk7_enc: bitstring = enc((symk7,symk_7),symk_ua_enc) in
    {67}let vp: bitstring = (vp_msg,(vpr_rec,vc),sig((vpr_rec,vc),sku_1)) in
    {70}let m_8: bitstring = (symk7_enc,enc((tag8,n_r,vp),symk_ua_enc)) in
    {71}event auth_UserSendsLastMessageToApp(m_1,m_2,m_7,m_8);
    {72}out(c_1, (msg8,m_8));
    {27}let talksOnlyToHonest: bool = true in
    {73}if talksOnlyToHonest then
    (
        {74}event auth_UserCompletesProtocol(m_1,m_2,m_7,m_8)
    ) | (
        {75}out(ch(vp), vp_fromProver)
    )
) | (
    {76}!
    {89}new su_1: exponent;
    {93}new symk_0_1: SymmetricKey;
    {90}let g_su_1: G = exp(g,su_1) in
    {83}let pka_1: PublicKey = pk(sk_E) in
    {81}let sku_2: SecretKey = sku in
    {94}let diddoc_su_signed_1: bitstring = (g_su_1,sig(hash((sig_gsu,pka_1,g_su_1)),sku_2)) in
    {84}let exp_a_2: G = exp(g,exp_E) in
    {91}let K0_1: G = exp(exp_a_2,su_1) in
    {92}let h0_1: SymmetricKey = hash_fork(((g_su_1,exp_a_2,K0_1),keyEncCtoSTemp)) in
    {95}let m: bitstring = (KEXDHINIT,aenc((gsu,g_su_1),pka_1),enc((symk0,symk_0_1),h0_1),enc(diddoc_su_signed_1,symk_0_1)) in
    {78}let c_2: channel = c in
    {96}out(c_2, (msg1,m));
    {97}in(c_2, (=msg2,m_3: bitstring));
    {98}let (=KEXDHREPLY,g_sa_enc_1: bitstring,symk_1_enc_1: bitstring,diddoc_sa_signed_enc_1: bitstring) = m_3 in
    {99}let (=gsa,g_sa_1: G) = adec(g_sa_enc_1,sku_2) in
    {100}let K_1: G = exp(g_sa_1,su_1) in
    {101}let h_1: SymmetricKey = hash_fork(((g_su_1,g_sa_1,K_1),keyEncStoCTemp)) in
    {102}let (=symk1,symk: SymmetricKey) = dec(symk_1_enc_1,h_1) in
    {103}let (g_sa'_1: G,g_sa_signed_1: bitstring) = dec(diddoc_sa_signed_enc_1,symk) in
    {104}if check(hash((sig_gsa,pk(sku_2),g_sa_1)),g_sa_signed_1,pka_1) then
    {107}in(c_2, (=msg7,m_4: bitstring));
    {108}let (symk6_enc_1: bitstring,m7_enc_1: bitstring) = m_4 in
    {106}let symk_ua_dec_1: SymmetricKey = hash_fork((K_1,h_1,keyEncStoC)) in
    {109}let (=symk6,symk_2: SymmetricKey) = dec(symk6_enc_1,symk_ua_dec_1) in
    {110}let (=tag7,n_r_1: bitstring,v'_1: bitstring,vpr_signed_1: bitstring) = dec(m7_enc_1,symk_2) in
    {85}let v_2: bitstring = v in
    {111}if (v_2 = v'_1) then
    {112}let (=dec_vpr_2_msg,vpr_rec_1: bitstring,sig_vpr: bitstring) = vpr_signed_1 in
    {113}if check(vpr_rec_1,sig_vpr,pka_1) then
    {114}let (=dec_vpr_msg,v''_1: bitstring,rule'_1: bitstring,n_c_1: bitstring) = vpr_rec_1 in
    {115}let (u'_1: bitstring,i'_1: bitstring,uri'_1: bitstring,a'_1: bitstring) = rule'_1 in
    {88}let uri_1: bitstring = uri_req in
    {82}let a_2: bitstring = e in
    {79}let u_2: bitstring = u in
    {116}if ((u'_1,uri'_1,a'_1,v''_1) = (u_2,uri_1,a_2,v_2)) then
    {118}new symk_3: SymmetricKey;
    {105}let symk_ua_enc_1: SymmetricKey = hash_fork((K_1,h_1,keyEncCtoS)) in
    {119}let symk7_enc_1: bitstring = enc((symk7,symk_3),symk_ua_enc_1) in
    {117}let vp_1: bitstring = (vp_msg,(vpr_rec_1,vc),sig((vpr_rec_1,vc),sku_2)) in
    {120}let m_5: bitstring = (symk7_enc_1,enc((tag8,n_r_1,vp_1),symk_ua_enc_1)) in
    {121}event auth_UserSendsLastMessageToApp(m,m_3,m_4,m_5);
    {122}out(c_2, (msg8,m_5));
    {77}let talksOnlyToHonest_1: bool = false in
    {123}if talksOnlyToHonest_1 then
    (
        {124}event auth_UserCompletesProtocol(m,m_3,m_4,m_5)
    ) | (
        {125}out(ch(vp_1), vp_fromProver)
    )
) | (
    {126}!
    {139}new su_2: exponent;
    {143}new symk_0_2: SymmetricKey;
    {140}let g_su_2: G = exp(g,su_2) in
    {133}let pka_2: PublicKey = pk(ska) in
    {131}let sku_3: SecretKey = sku in
    {144}let diddoc_su_signed_2: bitstring = (g_su_2,sig(hash((sig_gsu,pka_2,g_su_2)),sku_3)) in
    {134}let exp_a_3: G = exp(g,exp_a) in
    {141}let K0_2: G = exp(exp_a_3,su_2) in
    {142}let h0_2: SymmetricKey = hash_fork(((g_su_2,exp_a_3,K0_2),keyEncCtoSTemp)) in
    {145}let m_6: bitstring = (KEXDHINIT,aenc((gsu,g_su_2),pka_2),enc((symk0,symk_0_2),h0_2),enc(diddoc_su_signed_2,symk_0_2)) in
    {128}let c_3: channel = c in
    {146}out(c_3, (msg1,m_6));
    {147}in(c_3, (=msg2,m_9: bitstring));
    {148}let (=KEXDHREPLY,g_sa_enc_2: bitstring,symk_1_enc_2: bitstring,diddoc_sa_signed_enc_2: bitstring) = m_9 in
    {149}let (=gsa,g_sa_2: G) = adec(g_sa_enc_2,sku_3) in
    {150}let K_2: G = exp(g_sa_2,su_2) in
    {151}let h_2: SymmetricKey = hash_fork(((g_su_2,g_sa_2,K_2),keyEncStoCTemp)) in
    {152}let (=symk1,symk_4: SymmetricKey) = dec(symk_1_enc_2,h_2) in
    {153}let (g_sa'_2: G,g_sa_signed_2: bitstring) = dec(diddoc_sa_signed_enc_2,symk_4) in
    {154}if check(hash((sig_gsa,pk(sku_3),g_sa_2)),g_sa_signed_2,pka_2) then
    {157}in(c_3, (=msg7,m_10: bitstring));
    {158}let (symk6_enc_2: bitstring,m7_enc_2: bitstring) = m_10 in
    {156}let symk_ua_dec_2: SymmetricKey = hash_fork((K_2,h_2,keyEncStoC)) in
    {159}let (=symk6,symk_5: SymmetricKey) = dec(symk6_enc_2,symk_ua_dec_2) in
    {160}let (=tag7,n_r_2: bitstring,v'_2: bitstring,vpr_signed_2: bitstring) = dec(m7_enc_2,symk_5) in
    {135}let v_3: bitstring = e in
    {161}if (v_3 = v'_2) then
    {162}let (=dec_vpr_2_msg,vpr_rec_2: bitstring,sig_vpr_1: bitstring) = vpr_signed_2 in
    {163}if check(vpr_rec_2,sig_vpr_1,pka_2) then
    {164}let (=dec_vpr_msg,v''_2: bitstring,rule'_2: bitstring,n_c_2: bitstring) = vpr_rec_2 in
    {165}let (u'_2: bitstring,i'_2: bitstring,uri'_2: bitstring,a'_2: bitstring) = rule'_2 in
    {138}let uri_2: bitstring = euri in
    {132}let a_3: bitstring = a in
    {129}let u_3: bitstring = u in
    {166}if ((u'_2,uri'_2,a'_2,v''_2) = (u_3,uri_2,a_3,v_3)) then
    {168}new symk_8: SymmetricKey;
    {155}let symk_ua_enc_2: SymmetricKey = hash_fork((K_2,h_2,keyEncCtoS)) in
    {169}let symk7_enc_2: bitstring = enc((symk7,symk_8),symk_ua_enc_2) in
    {167}let vp_2: bitstring = (vp_msg,(vpr_rec_2,vc),sig((vpr_rec_2,vc),sku_3)) in
    {170}let m_11: bitstring = (symk7_enc_2,enc((tag8,n_r_2,vp_2),symk_ua_enc_2)) in
    {171}event auth_UserSendsLastMessageToApp(m_6,m_9,m_10,m_11);
    {172}out(c_3, (msg8,m_11));
    {127}let talksOnlyToHonest_2: bool = false in
    {173}if talksOnlyToHonest_2 then
    (
        {174}event auth_UserCompletesProtocol(m_6,m_9,m_10,m_11)
    ) | (
        {175}out(ch(vp_2), vp_fromProver)
    )
) | (
    {176}!
    {189}new su_3: exponent;
    {193}new symk_0_3: SymmetricKey;
    {190}let g_su_3: G = exp(g,su_3) in
    {183}let pka_3: PublicKey = pk(sk_E) in
    {181}let sku_4: SecretKey = sku in
    {194}let diddoc_su_signed_3: bitstring = (g_su_3,sig(hash((sig_gsu,pka_3,g_su_3)),sku_4)) in
    {184}let exp_a_4: G = exp(g,exp_E) in
    {191}let K0_3: G = exp(exp_a_4,su_3) in
    {192}let h0_3: SymmetricKey = hash_fork(((g_su_3,exp_a_4,K0_3),keyEncCtoSTemp)) in
    {195}let m_12: bitstring = (KEXDHINIT,aenc((gsu,g_su_3),pka_3),enc((symk0,symk_0_3),h0_3),enc(diddoc_su_signed_3,symk_0_3)) in
    {178}let c_4: channel = c in
    {196}out(c_4, (msg1,m_12));
    {197}in(c_4, (=msg2,m_13: bitstring));
    {198}let (=KEXDHREPLY,g_sa_enc_3: bitstring,symk_1_enc_3: bitstring,diddoc_sa_signed_enc_3: bitstring) = m_13 in
    {199}let (=gsa,g_sa_3: G) = adec(g_sa_enc_3,sku_4) in
    {200}let K_3: G = exp(g_sa_3,su_3) in
    {201}let h_3: SymmetricKey = hash_fork(((g_su_3,g_sa_3,K_3),keyEncStoCTemp)) in
    {202}let (=symk1,symk_9: SymmetricKey) = dec(symk_1_enc_3,h_3) in
    {203}let (g_sa'_3: G,g_sa_signed_3: bitstring) = dec(diddoc_sa_signed_enc_3,symk_9) in
    {204}if check(hash((sig_gsa,pk(sku_4),g_sa_3)),g_sa_signed_3,pka_3) then
    {207}in(c_4, (=msg7,m_14: bitstring));
    {208}let (symk6_enc_3: bitstring,m7_enc_3: bitstring) = m_14 in
    {206}let symk_ua_dec_3: SymmetricKey = hash_fork((K_3,h_3,keyEncStoC)) in
    {209}let (=symk6,symk_10: SymmetricKey) = dec(symk6_enc_3,symk_ua_dec_3) in
    {210}let (=tag7,n_r_3: bitstring,v'_3: bitstring,vpr_signed_3: bitstring) = dec(m7_enc_3,symk_10) in
    {185}let v_4: bitstring = e in
    {211}if (v_4 = v'_3) then
    {212}let (=dec_vpr_2_msg,vpr_rec_3: bitstring,sig_vpr_3: bitstring) = vpr_signed_3 in
    {213}if check(vpr_rec_3,sig_vpr_3,pka_3) then
    {214}let (=dec_vpr_msg,v''_3: bitstring,rule'_3: bitstring,n_c_3: bitstring) = vpr_rec_3 in
    {215}let (u'_3: bitstring,i'_3: bitstring,uri'_3: bitstring,a'_3: bitstring) = rule'_3 in
    {188}let uri_3: bitstring = euri in
    {182}let a_4: bitstring = e in
    {179}let u_4: bitstring = u in
    {216}if ((u'_3,uri'_3,a'_3,v''_3) = (u_4,uri_3,a_4,v_4)) then
    {218}new symk_11: SymmetricKey;
    {205}let symk_ua_enc_3: SymmetricKey = hash_fork((K_3,h_3,keyEncCtoS)) in
    {219}let symk7_enc_3: bitstring = enc((symk7,symk_11),symk_ua_enc_3) in
    {217}let vp_3: bitstring = (vp_msg,(vpr_rec_3,vc),sig((vpr_rec_3,vc),sku_4)) in
    {220}let m_15: bitstring = (symk7_enc_3,enc((tag8,n_r_3,vp_3),symk_ua_enc_3)) in
    {221}event auth_UserSendsLastMessageToApp(m_12,m_13,m_14,m_15);
    {222}out(c_4, (msg8,m_15));
    {177}let talksOnlyToHonest_3: bool = false in
    {223}if talksOnlyToHonest_3 then
    (
        {224}event auth_UserCompletesProtocol(m_12,m_13,m_14,m_15)
    ) | (
        {225}out(ch(vp_3), vp_fromProver)
    )
) | (
    {226}!
    {228}let c_5: channel = c in
    {242}in(c_5, (=msg1,m_16: bitstring));
    {243}let (=KEXDHINIT,g_su_enc: bitstring,symk0_enc: bitstring,g_su_signed_enc: bitstring) = m_16 in
    {232}let ska_1: SecretKey = ska in
    {244}let (=gsu,g_su_4: G) = adec(g_su_enc,ska_1) in
    {231}let exp_a_5: exponent = exp_a in
    {245}let K_temp: G = exp(g_su_4,exp_a_5) in
    {246}let h_temp: SymmetricKey = hash_fork(((g_su_4,exp(g,exp_a_5),K_temp),keyEncCtoSTemp)) in
    {247}let (=symk0,symk_0_4: SymmetricKey) = dec(symk0_enc,h_temp) in
    {248}let (g_su': G,g_su_sign: bitstring) = dec(g_su_signed_enc,symk_0_4) in
    {234}let pku: PublicKey = pk(sku) in
    {249}if check(hash((sig_gsu,pk(ska_1),g_su_4)),g_su_sign,pku) then
    {250}new sa: exponent;
    {254}new symk_12: SymmetricKey;
    {251}let g_sa_4: G = exp(g,sa) in
    {255}let diddoc_sa_enc: bitstring = (g_sa_4,sig(hash((sig_gsa,pku,g_sa_4)),ska_1)) in
    {252}let K_4: G = exp(g_su_4,sa) in
    {253}let h_4: SymmetricKey = hash_fork(((g_su_4,g_sa_4,K_4),keyEncStoCTemp)) in
    {237}let pkv_4: PublicKey = pk(skv) in
    {256}let m_17: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_4),pkv_4),enc((symk1,symk_12),h_4),enc(diddoc_sa_enc,symk_12)) in
    {257}out(c_5, (msg2,m_17));
    {260}new sav: exponent;
    {264}new symk_13: SymmetricKey;
    {261}let g_sav: G = exp(g,sav) in
    {265}let diddoc_sav_signed: bitstring = (g_sav,sig(hash((sig_gsav,pkv_4,g_sav)),ska_1)) in
    {238}let exp_v_5: G = exp(g,exp_v) in
    {262}let KC_temp: G = exp(exp_v_5,sav) in
    {263}let hc_temp: SymmetricKey = hash_fork(((exp_v_5,g_sav,KC_temp),keyEncAtoCTemp)) in
    {266}let m_18: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav),pku),enc((symk2,symk_13),hc_temp),enc(diddoc_sav_signed,symk_13)) in
    {229}let c2_1: channel = c2 in
    {267}out(c2_1, (msg3,m_18));
    {268}in(c2_1, (=msg4,m_19: bitstring));
    {269}let (=KEXDHREPLYSERVER,g_sc_enc: bitstring,symk3_enc: bitstring,g_sc_signed_enc: bitstring) = m_19 in
    {270}let (=gsac,g_sc: G) = adec(g_sc_enc,ska_1) in
    {271}let KC: G = exp(g_sc,sav) in
    {272}let hc: SymmetricKey = hash_fork(((g_sc,g_sav,KC),keyEncCtoATemp)) in
    {273}let (=symk3,symk_14: SymmetricKey) = dec(symk3_enc,hc) in
    {274}let (g_sc': G,g_sc_sisn: bitstring) = dec(g_sc_signed_enc,symk_14) in
    {275}if check(hash((sig_gsac,pk(ska_1),g_sc)),g_sc_sisn,pkv_4) then
    {278}new symk_15: SymmetricKey;
    {276}let symk_av_enc: SymmetricKey = hash_fork((KC,hc,keyEncAtoC)) in
    {279}let symk4_enc: bitstring = enc((symk4,symk_15),symk_av_enc) in
    {241}let uri_4: bitstring = uri_req in
    {239}let i_1: bitstring = i in
    {236}let v_5: bitstring = v in
    {233}let u_5: bitstring = u in
    {230}let a_5: bitstring = a in
    {280}let m_20: bitstring = (symk4_enc,enc((tag5,(i_1,v_5,u_5,uri_4,a_5)),symk_15)) in
    {281}out(c2_1, (msg5,m_20));
    {282}in(c2_1, (=msg6,m_21: bitstring));
    {283}let (symk5_enc: bitstring,m6_enc: bitstring) = m_21 in
    {277}let symk_av_dec: SymmetricKey = hash_fork((KC,hc,keyEncCtoA)) in
    {284}let (=symk5,symk_16: SymmetricKey) = dec(symk5_enc,symk_av_dec) in
    {285}let (=tag6,dec_vpr: bitstring) = dec(m6_enc,symk_16) in
    {286}let (=dec_vpr_msg,v'_4: bitstring,rule'_4: bitstring,n_c': bitstring) = dec_vpr in
    {287}let (u'_4: bitstring,i'_4: bitstring,uri'_4: bitstring,a'_4: bitstring) = rule'_4 in
    {288}if ((v'_4,u'_4,i'_4,uri'_4,a'_4) = (v_5,u_5,i_1,uri_4,a_5)) then
    {289}new n_r_4: bitstring;
    {291}new symk_17: SymmetricKey;
    {258}let symk_ua_enc_4: SymmetricKey = hash_fork((K_4,h_4,keyEncStoC)) in
    {292}let symk6_enc_4: bitstring = enc((symk6,symk_17),symk_ua_enc_4) in
    {290}let vpr_signed_4: bitstring = (dec_vpr_2_msg,dec_vpr,sig(dec_vpr,ska_1)) in
    {293}let m_22: bitstring = (symk6_enc_4,enc((tag7,n_r_4,v_5,vpr_signed_4),symk_17)) in
    {294}event auth_AppSendsLastMessageToUser(m_16,m_17,m_18,m_19,m_20,m_21,m_22);
    {295}out(c_5, (msg7,m_22));
    {296}in(c_5, (=msg8,m_23: bitstring));
    {297}let (symk7_enc_4: bitstring,m8_enc: bitstring) = m_23 in
    {259}let symk_ua_dec_4: SymmetricKey = hash_fork((K_4,h_4,keyEncCtoS)) in
    {298}let (=symk7,symk_18: SymmetricKey) = dec(symk7_enc_4,symk_ua_dec_4) in
    {299}let (=tag8,n_r': bitstring,vp_signed: bitstring) = dec(m8_enc,symk_18) in
    {300}if (n_r_4 = n_r') then
    {301}let (=vp_msg,vp_4: bitstring,sign_on_vp: bitstring) = vp_signed in
    {302}if check(vp_4,sign_on_vp,pku) then
    {304}new symk_19: SymmetricKey;
    {305}let symk8_enc: bitstring = enc((symk8,symk_19),symk_av_enc) in
    {303}let vp_2_prev: bitstring = (vp_2_msg,vp_signed,sig(vp_signed,ska_1)) in
    {306}let m_24: bitstring = (symk8_enc,enc((tag9,vp_2_prev),symk_19)) in
    {307}event auth_AppSendsLastMessageToVerifier(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24);
    {308}out(c2_1, (msg9,m_24));
    {309}in(c2_1, (=msg10,m_25: bitstring));
    {310}let (symk9_enc: bitstring,m10_enc: bitstring) = m_25 in
    {311}let (=symk9,symk_20: SymmetricKey) = dec(symk9_enc,symk_av_dec) in
    {312}let (=tag10,res: bitstring) = dec(m10_enc,symk_20) in
    {227}let talksOnlyToHonest_4: bool = true in
    {313}if talksOnlyToHonest_4 then
    (
        {314}event auth_AppCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23,m_24,m_25)
    ) | (
        {315}out(ch(res), resource_fromApp)
    )
) | (
    {316}!
    {318}let c_6: channel = c in
    {332}in(c_6, (=msg1,m_26: bitstring));
    {333}let (=KEXDHINIT,g_su_enc_1: bitstring,symk0_enc_1: bitstring,g_su_signed_enc_1: bitstring) = m_26 in
    {322}let ska_2: SecretKey = ska in
    {334}let (=gsu,g_su_5: G) = adec(g_su_enc_1,ska_2) in
    {321}let exp_a_6: exponent = exp_a in
    {335}let K_temp_1: G = exp(g_su_5,exp_a_6) in
    {336}let h_temp_1: SymmetricKey = hash_fork(((g_su_5,exp(g,exp_a_6),K_temp_1),keyEncCtoSTemp)) in
    {337}let (=symk0,symk_0_5: SymmetricKey) = dec(symk0_enc_1,h_temp_1) in
    {338}let (g_su'_1: G,g_su_sign_1: bitstring) = dec(g_su_signed_enc_1,symk_0_5) in
    {324}let pku_1: PublicKey = pk(sk_E) in
    {339}if check(hash((sig_gsu,pk(ska_2),g_su_5)),g_su_sign_1,pku_1) then
    {340}new sa_1: exponent;
    {344}new symk_21: SymmetricKey;
    {341}let g_sa_5: G = exp(g,sa_1) in
    {345}let diddoc_sa_enc_1: bitstring = (g_sa_5,sig(hash((sig_gsa,pku_1,g_sa_5)),ska_2)) in
    {342}let K_5: G = exp(g_su_5,sa_1) in
    {343}let h_5: SymmetricKey = hash_fork(((g_su_5,g_sa_5,K_5),keyEncStoCTemp)) in
    {327}let pkv_5: PublicKey = pk(skv) in
    {346}let m_27: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_5),pkv_5),enc((symk1,symk_21),h_5),enc(diddoc_sa_enc_1,symk_21)) in
    {347}out(c_6, (msg2,m_27));
    {350}new sav_1: exponent;
    {354}new symk_22: SymmetricKey;
    {351}let g_sav_1: G = exp(g,sav_1) in
    {355}let diddoc_sav_signed_1: bitstring = (g_sav_1,sig(hash((sig_gsav,pkv_5,g_sav_1)),ska_2)) in
    {328}let exp_v_6: G = exp(g,exp_v) in
    {352}let KC_temp_1: G = exp(exp_v_6,sav_1) in
    {353}let hc_temp_1: SymmetricKey = hash_fork(((exp_v_6,g_sav_1,KC_temp_1),keyEncAtoCTemp)) in
    {356}let m_28: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_1),pku_1),enc((symk2,symk_22),hc_temp_1),enc(diddoc_sav_signed_1,symk_22)) in
    {319}let c2_2: channel = c2 in
    {357}out(c2_2, (msg3,m_28));
    {358}in(c2_2, (=msg4,m_29: bitstring));
    {359}let (=KEXDHREPLYSERVER,g_sc_enc_1: bitstring,symk3_enc_1: bitstring,g_sc_signed_enc_1: bitstring) = m_29 in
    {360}let (=gsac,g_sc_1: G) = adec(g_sc_enc_1,ska_2) in
    {361}let KC_1: G = exp(g_sc_1,sav_1) in
    {362}let hc_1: SymmetricKey = hash_fork(((g_sc_1,g_sav_1,KC_1),keyEncCtoATemp)) in
    {363}let (=symk3,symk_23: SymmetricKey) = dec(symk3_enc_1,hc_1) in
    {364}let (g_sc'_1: G,g_sc_sisn_1: bitstring) = dec(g_sc_signed_enc_1,symk_23) in
    {365}if check(hash((sig_gsac,pk(ska_2),g_sc_1)),g_sc_sisn_1,pkv_5) then
    {368}new symk_24: SymmetricKey;
    {366}let symk_av_enc_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncAtoC)) in
    {369}let symk4_enc_1: bitstring = enc((symk4,symk_24),symk_av_enc_1) in
    {331}let uri_5: bitstring = uri_req in
    {329}let i_2: bitstring = i in
    {326}let v_6: bitstring = v in
    {323}let u_6: bitstring = e in
    {320}let a_6: bitstring = a in
    {370}let m_30: bitstring = (symk4_enc_1,enc((tag5,(i_2,v_6,u_6,uri_5,a_6)),symk_24)) in
    {371}out(c2_2, (msg5,m_30));
    {372}in(c2_2, (=msg6,m_31: bitstring));
    {373}let (symk5_enc_1: bitstring,m6_enc_1: bitstring) = m_31 in
    {367}let symk_av_dec_1: SymmetricKey = hash_fork((KC_1,hc_1,keyEncCtoA)) in
    {374}let (=symk5,symk_25: SymmetricKey) = dec(symk5_enc_1,symk_av_dec_1) in
    {375}let (=tag6,dec_vpr_1: bitstring) = dec(m6_enc_1,symk_25) in
    {376}let (=dec_vpr_msg,v'_5: bitstring,rule'_5: bitstring,n_c'_1: bitstring) = dec_vpr_1 in
    {377}let (u'_5: bitstring,i'_5: bitstring,uri'_5: bitstring,a'_5: bitstring) = rule'_5 in
    {378}if ((v'_5,u'_5,i'_5,uri'_5,a'_5) = (v_6,u_6,i_2,uri_5,a_6)) then
    {379}new n_r_5: bitstring;
    {381}new symk_26: SymmetricKey;
    {348}let symk_ua_enc_5: SymmetricKey = hash_fork((K_5,h_5,keyEncStoC)) in
    {382}let symk6_enc_5: bitstring = enc((symk6,symk_26),symk_ua_enc_5) in
    {380}let vpr_signed_5: bitstring = (dec_vpr_2_msg,dec_vpr_1,sig(dec_vpr_1,ska_2)) in
    {383}let m_32: bitstring = (symk6_enc_5,enc((tag7,n_r_5,v_6,vpr_signed_5),symk_26)) in
    {384}event auth_AppSendsLastMessageToUser(m_26,m_27,m_28,m_29,m_30,m_31,m_32);
    {385}out(c_6, (msg7,m_32));
    {386}in(c_6, (=msg8,m_33: bitstring));
    {387}let (symk7_enc_5: bitstring,m8_enc_1: bitstring) = m_33 in
    {349}let symk_ua_dec_5: SymmetricKey = hash_fork((K_5,h_5,keyEncCtoS)) in
    {388}let (=symk7,symk_27: SymmetricKey) = dec(symk7_enc_5,symk_ua_dec_5) in
    {389}let (=tag8,n_r'_1: bitstring,vp_signed_1: bitstring) = dec(m8_enc_1,symk_27) in
    {390}if (n_r_5 = n_r'_1) then
    {391}let (=vp_msg,vp_5: bitstring,sign_on_vp_1: bitstring) = vp_signed_1 in
    {392}if check(vp_5,sign_on_vp_1,pku_1) then
    {394}new symk_28: SymmetricKey;
    {395}let symk8_enc_1: bitstring = enc((symk8,symk_28),symk_av_enc_1) in
    {393}let vp_2_prev_1: bitstring = (vp_2_msg,vp_signed_1,sig(vp_signed_1,ska_2)) in
    {396}let m_34: bitstring = (symk8_enc_1,enc((tag9,vp_2_prev_1),symk_28)) in
    {397}event auth_AppSendsLastMessageToVerifier(m_26,m_27,m_28,m_29,m_30,m_31,m_32,m_33,m_34);
    {398}out(c2_2, (msg9,m_34));
    {399}in(c2_2, (=msg10,m_35: bitstring));
    {400}let (symk9_enc_1: bitstring,m10_enc_1: bitstring) = m_35 in
    {401}let (=symk9,symk_29: SymmetricKey) = dec(symk9_enc_1,symk_av_dec_1) in
    {402}let (=tag10,res_1: bitstring) = dec(m10_enc_1,symk_29) in
    {317}let talksOnlyToHonest_5: bool = false in
    {403}if talksOnlyToHonest_5 then
    (
        {404}event auth_AppCompletesProtocol(m_26,m_27,m_28,m_29,m_30,m_31,m_32,m_33,m_34,m_35)
    ) | (
        {405}out(ch(res_1), resource_fromApp)
    )
) | (
    {406}!
    {408}let c_7: channel = c in
    {422}in(c_7, (=msg1,m_36: bitstring));
    {423}let (=KEXDHINIT,g_su_enc_2: bitstring,symk0_enc_2: bitstring,g_su_signed_enc_2: bitstring) = m_36 in
    {412}let ska_3: SecretKey = ska in
    {424}let (=gsu,g_su_6: G) = adec(g_su_enc_2,ska_3) in
    {411}let exp_a_7: exponent = exp_a in
    {425}let K_temp_2: G = exp(g_su_6,exp_a_7) in
    {426}let h_temp_2: SymmetricKey = hash_fork(((g_su_6,exp(g,exp_a_7),K_temp_2),keyEncCtoSTemp)) in
    {427}let (=symk0,symk_0_6: SymmetricKey) = dec(symk0_enc_2,h_temp_2) in
    {428}let (g_su'_2: G,g_su_sign_2: bitstring) = dec(g_su_signed_enc_2,symk_0_6) in
    {414}let pku_2: PublicKey = pk(sku) in
    {429}if check(hash((sig_gsu,pk(ska_3),g_su_6)),g_su_sign_2,pku_2) then
    {430}new sa_2: exponent;
    {434}new symk_30: SymmetricKey;
    {431}let g_sa_6: G = exp(g,sa_2) in
    {435}let diddoc_sa_enc_2: bitstring = (g_sa_6,sig(hash((sig_gsa,pku_2,g_sa_6)),ska_3)) in
    {432}let K_6: G = exp(g_su_6,sa_2) in
    {433}let h_6: SymmetricKey = hash_fork(((g_su_6,g_sa_6,K_6),keyEncStoCTemp)) in
    {417}let pkv_6: PublicKey = pk(sk_E) in
    {436}let m_37: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_6),pkv_6),enc((symk1,symk_30),h_6),enc(diddoc_sa_enc_2,symk_30)) in
    {437}out(c_7, (msg2,m_37));
    {440}new sav_2: exponent;
    {444}new symk_31: SymmetricKey;
    {441}let g_sav_2: G = exp(g,sav_2) in
    {445}let diddoc_sav_signed_2: bitstring = (g_sav_2,sig(hash((sig_gsav,pkv_6,g_sav_2)),ska_3)) in
    {418}let exp_v_7: G = exp(g,exp_E) in
    {442}let KC_temp_2: G = exp(exp_v_7,sav_2) in
    {443}let hc_temp_2: SymmetricKey = hash_fork(((exp_v_7,g_sav_2,KC_temp_2),keyEncAtoCTemp)) in
    {446}let m_38: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_2),pku_2),enc((symk2,symk_31),hc_temp_2),enc(diddoc_sav_signed_2,symk_31)) in
    {409}let c2_3: channel = c2 in
    {447}out(c2_3, (msg3,m_38));
    {448}in(c2_3, (=msg4,m_39: bitstring));
    {449}let (=KEXDHREPLYSERVER,g_sc_enc_2: bitstring,symk3_enc_2: bitstring,g_sc_signed_enc_2: bitstring) = m_39 in
    {450}let (=gsac,g_sc_2: G) = adec(g_sc_enc_2,ska_3) in
    {451}let KC_2: G = exp(g_sc_2,sav_2) in
    {452}let hc_2: SymmetricKey = hash_fork(((g_sc_2,g_sav_2,KC_2),keyEncCtoATemp)) in
    {453}let (=symk3,symk_32: SymmetricKey) = dec(symk3_enc_2,hc_2) in
    {454}let (g_sc'_2: G,g_sc_sisn_2: bitstring) = dec(g_sc_signed_enc_2,symk_32) in
    {455}if check(hash((sig_gsac,pk(ska_3),g_sc_2)),g_sc_sisn_2,pkv_6) then
    {458}new symk_33: SymmetricKey;
    {456}let symk_av_enc_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncAtoC)) in
    {459}let symk4_enc_2: bitstring = enc((symk4,symk_33),symk_av_enc_2) in
    {421}let uri_6: bitstring = euri in
    {419}let i_3: bitstring = i in
    {416}let v_7: bitstring = e in
    {413}let u_7: bitstring = u in
    {410}let a_7: bitstring = a in
    {460}let m_40: bitstring = (symk4_enc_2,enc((tag5,(i_3,v_7,u_7,uri_6,a_7)),symk_33)) in
    {461}out(c2_3, (msg5,m_40));
    {462}in(c2_3, (=msg6,m_41: bitstring));
    {463}let (symk5_enc_2: bitstring,m6_enc_2: bitstring) = m_41 in
    {457}let symk_av_dec_2: SymmetricKey = hash_fork((KC_2,hc_2,keyEncCtoA)) in
    {464}let (=symk5,symk_34: SymmetricKey) = dec(symk5_enc_2,symk_av_dec_2) in
    {465}let (=tag6,dec_vpr_2: bitstring) = dec(m6_enc_2,symk_34) in
    {466}let (=dec_vpr_msg,v'_6: bitstring,rule'_6: bitstring,n_c'_2: bitstring) = dec_vpr_2 in
    {467}let (u'_6: bitstring,i'_6: bitstring,uri'_6: bitstring,a'_6: bitstring) = rule'_6 in
    {468}if ((v'_6,u'_6,i'_6,uri'_6,a'_6) = (v_7,u_7,i_3,uri_6,a_7)) then
    {469}new n_r_6: bitstring;
    {471}new symk_35: SymmetricKey;
    {438}let symk_ua_enc_6: SymmetricKey = hash_fork((K_6,h_6,keyEncStoC)) in
    {472}let symk6_enc_6: bitstring = enc((symk6,symk_35),symk_ua_enc_6) in
    {470}let vpr_signed_6: bitstring = (dec_vpr_2_msg,dec_vpr_2,sig(dec_vpr_2,ska_3)) in
    {473}let m_42: bitstring = (symk6_enc_6,enc((tag7,n_r_6,v_7,vpr_signed_6),symk_35)) in
    {474}event auth_AppSendsLastMessageToUser(m_36,m_37,m_38,m_39,m_40,m_41,m_42);
    {475}out(c_7, (msg7,m_42));
    {476}in(c_7, (=msg8,m_43: bitstring));
    {477}let (symk7_enc_6: bitstring,m8_enc_2: bitstring) = m_43 in
    {439}let symk_ua_dec_6: SymmetricKey = hash_fork((K_6,h_6,keyEncCtoS)) in
    {478}let (=symk7,symk_36: SymmetricKey) = dec(symk7_enc_6,symk_ua_dec_6) in
    {479}let (=tag8,n_r'_2: bitstring,vp_signed_2: bitstring) = dec(m8_enc_2,symk_36) in
    {480}if (n_r_6 = n_r'_2) then
    {481}let (=vp_msg,vp_6: bitstring,sign_on_vp_2: bitstring) = vp_signed_2 in
    {482}if check(vp_6,sign_on_vp_2,pku_2) then
    {484}new symk_37: SymmetricKey;
    {485}let symk8_enc_2: bitstring = enc((symk8,symk_37),symk_av_enc_2) in
    {483}let vp_2_prev_2: bitstring = (vp_2_msg,vp_signed_2,sig(vp_signed_2,ska_3)) in
    {486}let m_44: bitstring = (symk8_enc_2,enc((tag9,vp_2_prev_2),symk_37)) in
    {487}event auth_AppSendsLastMessageToVerifier(m_36,m_37,m_38,m_39,m_40,m_41,m_42,m_43,m_44);
    {488}out(c2_3, (msg9,m_44));
    {489}in(c2_3, (=msg10,m_45: bitstring));
    {490}let (symk9_enc_2: bitstring,m10_enc_2: bitstring) = m_45 in
    {491}let (=symk9,symk_38: SymmetricKey) = dec(symk9_enc_2,symk_av_dec_2) in
    {492}let (=tag10,res_2: bitstring) = dec(m10_enc_2,symk_38) in
    {407}let talksOnlyToHonest_6: bool = false in
    {493}if talksOnlyToHonest_6 then
    (
        {494}event auth_AppCompletesProtocol(m_36,m_37,m_38,m_39,m_40,m_41,m_42,m_43,m_44,m_45)
    ) | (
        {495}out(ch(res_2), resource_fromApp)
    )
) | (
    {496}!
    {498}let c_8: channel = c in
    {512}in(c_8, (=msg1,m_46: bitstring));
    {513}let (=KEXDHINIT,g_su_enc_3: bitstring,symk0_enc_3: bitstring,g_su_signed_enc_3: bitstring) = m_46 in
    {502}let ska_4: SecretKey = ska in
    {514}let (=gsu,g_su_7: G) = adec(g_su_enc_3,ska_4) in
    {501}let exp_a_8: exponent = exp_a in
    {515}let K_temp_3: G = exp(g_su_7,exp_a_8) in
    {516}let h_temp_3: SymmetricKey = hash_fork(((g_su_7,exp(g,exp_a_8),K_temp_3),keyEncCtoSTemp)) in
    {517}let (=symk0,symk_0_7: SymmetricKey) = dec(symk0_enc_3,h_temp_3) in
    {518}let (g_su'_3: G,g_su_sign_3: bitstring) = dec(g_su_signed_enc_3,symk_0_7) in
    {504}let pku_3: PublicKey = pk(sk_E) in
    {519}if check(hash((sig_gsu,pk(ska_4),g_su_7)),g_su_sign_3,pku_3) then
    {520}new sa_3: exponent;
    {524}new symk_39: SymmetricKey;
    {521}let g_sa_7: G = exp(g,sa_3) in
    {525}let diddoc_sa_enc_3: bitstring = (g_sa_7,sig(hash((sig_gsa,pku_3,g_sa_7)),ska_4)) in
    {522}let K_7: G = exp(g_su_7,sa_3) in
    {523}let h_7: SymmetricKey = hash_fork(((g_su_7,g_sa_7,K_7),keyEncStoCTemp)) in
    {507}let pkv_7: PublicKey = pk(sk_E) in
    {526}let m_47: bitstring = (KEXDHREPLY,aenc((gsa,g_sa_7),pkv_7),enc((symk1,symk_39),h_7),enc(diddoc_sa_enc_3,symk_39)) in
    {527}out(c_8, (msg2,m_47));
    {530}new sav_3: exponent;
    {534}new symk_40: SymmetricKey;
    {531}let g_sav_3: G = exp(g,sav_3) in
    {535}let diddoc_sav_signed_3: bitstring = (g_sav_3,sig(hash((sig_gsav,pkv_7,g_sav_3)),ska_4)) in
    {508}let exp_v_8: G = exp(g,exp_E) in
    {532}let KC_temp_3: G = exp(exp_v_8,sav_3) in
    {533}let hc_temp_3: SymmetricKey = hash_fork(((exp_v_8,g_sav_3,KC_temp_3),keyEncAtoCTemp)) in
    {536}let m_48: bitstring = (KEXDHINITSERVER,aenc((gsav,g_sav_3),pku_3),enc((symk2,symk_40),hc_temp_3),enc(diddoc_sav_signed_3,symk_40)) in
    {499}let c2_4: channel = c2 in
    {537}out(c2_4, (msg3,m_48));
    {538}in(c2_4, (=msg4,m_49: bitstring));
    {539}let (=KEXDHREPLYSERVER,g_sc_enc_3: bitstring,symk3_enc_3: bitstring,g_sc_signed_enc_3: bitstring) = m_49 in
    {540}let (=gsac,g_sc_3: G) = adec(g_sc_enc_3,ska_4) in
    {541}let KC_3: G = exp(g_sc_3,sav_3) in
    {542}let hc_3: SymmetricKey = hash_fork(((g_sc_3,g_sav_3,KC_3),keyEncCtoATemp)) in
    {543}let (=symk3,symk_41: SymmetricKey) = dec(symk3_enc_3,hc_3) in
    {544}let (g_sc'_3: G,g_sc_sisn_3: bitstring) = dec(g_sc_signed_enc_3,symk_41) in
    {545}if check(hash((sig_gsac,pk(ska_4),g_sc_3)),g_sc_sisn_3,pkv_7) then
    {548}new symk_42: SymmetricKey;
    {546}let symk_av_enc_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncAtoC)) in
    {549}let symk4_enc_3: bitstring = enc((symk4,symk_42),symk_av_enc_3) in
    {511}let uri_7: bitstring = euri in
    {509}let i_4: bitstring = i in
    {506}let v_8: bitstring = e in
    {503}let u_8: bitstring = e in
    {500}let a_8: bitstring = a in
    {550}let m_50: bitstring = (symk4_enc_3,enc((tag5,(i_4,v_8,u_8,uri_7,a_8)),symk_42)) in
    {551}out(c2_4, (msg5,m_50));
    {552}in(c2_4, (=msg6,m_51: bitstring));
    {553}let (symk5_enc_3: bitstring,m6_enc_3: bitstring) = m_51 in
    {547}let symk_av_dec_3: SymmetricKey = hash_fork((KC_3,hc_3,keyEncCtoA)) in
    {554}let (=symk5,symk_43: SymmetricKey) = dec(symk5_enc_3,symk_av_dec_3) in
    {555}let (=tag6,dec_vpr_3: bitstring) = dec(m6_enc_3,symk_43) in
    {556}let (=dec_vpr_msg,v'_7: bitstring,rule'_7: bitstring,n_c'_3: bitstring) = dec_vpr_3 in
    {557}let (u'_7: bitstring,i'_7: bitstring,uri'_7: bitstring,a'_7: bitstring) = rule'_7 in
    {558}if ((v'_7,u'_7,i'_7,uri'_7,a'_7) = (v_8,u_8,i_4,uri_7,a_8)) then
    {559}new n_r_7: bitstring;
    {561}new symk_44: SymmetricKey;
    {528}let symk_ua_enc_7: SymmetricKey = hash_fork((K_7,h_7,keyEncStoC)) in
    {562}let symk6_enc_7: bitstring = enc((symk6,symk_44),symk_ua_enc_7) in
    {560}let vpr_signed_7: bitstring = (dec_vpr_2_msg,dec_vpr_3,sig(dec_vpr_3,ska_4)) in
    {563}let m_52: bitstring = (symk6_enc_7,enc((tag7,n_r_7,v_8,vpr_signed_7),symk_44)) in
    {564}event auth_AppSendsLastMessageToUser(m_46,m_47,m_48,m_49,m_50,m_51,m_52);
    {565}out(c_8, (msg7,m_52));
    {566}in(c_8, (=msg8,m_53: bitstring));
    {567}let (symk7_enc_7: bitstring,m8_enc_3: bitstring) = m_53 in
    {529}let symk_ua_dec_7: SymmetricKey = hash_fork((K_7,h_7,keyEncCtoS)) in
    {568}let (=symk7,symk_45: SymmetricKey) = dec(symk7_enc_7,symk_ua_dec_7) in
    {569}let (=tag8,n_r'_3: bitstring,vp_signed_3: bitstring) = dec(m8_enc_3,symk_45) in
    {570}if (n_r_7 = n_r'_3) then
    {571}let (=vp_msg,vp_7: bitstring,sign_on_vp_3: bitstring) = vp_signed_3 in
    {572}if check(vp_7,sign_on_vp_3,pku_3) then
    {574}new symk_46: SymmetricKey;
    {575}let symk8_enc_3: bitstring = enc((symk8,symk_46),symk_av_enc_3) in
    {573}let vp_2_prev_3: bitstring = (vp_2_msg,vp_signed_3,sig(vp_signed_3,ska_4)) in
    {576}let m_54: bitstring = (symk8_enc_3,enc((tag9,vp_2_prev_3),symk_46)) in
    {577}event auth_AppSendsLastMessageToVerifier(m_46,m_47,m_48,m_49,m_50,m_51,m_52,m_53,m_54);
    {578}out(c2_4, (msg9,m_54));
    {579}in(c2_4, (=msg10,m_55: bitstring));
    {580}let (symk9_enc_3: bitstring,m10_enc_3: bitstring) = m_55 in
    {581}let (=symk9,symk_47: SymmetricKey) = dec(symk9_enc_3,symk_av_dec_3) in
    {582}let (=tag10,res_3: bitstring) = dec(m10_enc_3,symk_47) in
    {497}let talksOnlyToHonest_7: bool = false in
    {583}if talksOnlyToHonest_7 then
    (
        {584}event auth_AppCompletesProtocol(m_46,m_47,m_48,m_49,m_50,m_51,m_52,m_53,m_54,m_55)
    ) | (
        {585}out(ch(res_3), resource_fromApp)
    )
) | (
    {586}!
    {588}let c_9: channel = c2 in
    {601}in(c_9, (=msg3,m_56: bitstring));
    {602}let (=KEXDHINITSERVER,g_sav_enc: bitstring,symk2_enc: bitstring,g_sav_enc_signed: bitstring) = m_56 in
    {591}let skv_1: SecretKey = skv in
    {603}let (=gsav,g_sav_4: G) = adec(g_sav_enc,skv_1) in
    {590}let exp_v_9: exponent = exp_v in
    {604}let K0_4: G = exp(g_sav_4,exp_v_9) in
    {605}let h_8: SymmetricKey = hash_fork(((exp(g,exp_v_9),g_sav_4,K0_4),keyEncAtoCTemp)) in
    {606}let (=symk2,symk_48: SymmetricKey) = dec(symk2_enc,h_8) in
    {607}let (g_sav': G,sign_g_sav: bitstring) = dec(g_sav_enc_signed,symk_48) in
    {596}let pka_4: PublicKey = pk(ska) in
    {608}if check(hash((sig_gsav,pk(skv_1),g_sav_4)),sign_g_sav,pka_4) then
    {609}new sc: exponent;
    {613}new symk_k3: SymmetricKey;
    {610}let g_sc_4: G = exp(g,sc) in
    {614}let diddoc_sc_signed: bitstring = (g_sc_4,sig(hash((sig_gsac,pka_4,g_sc_4)),skv_1)) in
    {611}let K_8: G = exp(g_sav_4,sc) in
    {612}let h_9: SymmetricKey = hash_fork(((g_sc_4,g_sav_4,K_8),keyEncCtoATemp)) in
    {615}let m_57: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_4),pka_4),enc((symk3,symk_k3),h_9),enc(diddoc_sc_signed,symk_k3)) in
    {616}out(c_9, (msg4,m_57));
    {619}in(c_9, (=msg5,m_58: bitstring));
    {620}let (symk4_enc_4: bitstring,m5_enc: bitstring) = m_58 in
    {618}let symk_av_dec_4: SymmetricKey = hash_fork((K_8,h_9,keyEncAtoC)) in
    {621}let (=symk4,symk_49: SymmetricKey) = dec(symk4_enc_4,symk_av_dec_4) in
    {622}let (=tag5,(i'_8: bitstring,v'_8: bitstring,u'_8: bitstring,uri'_8: bitstring,a'_8: bitstring)) = dec(m5_enc,symk_49) in
    {600}let uri_8: bitstring = uri_req in
    {598}let i_5: bitstring = i in
    {595}let a_9: bitstring = a in
    {592}let u_9: bitstring = u in
    {589}let v_9: bitstring = v in
    {623}if ((i'_8,v'_8,u'_8,uri'_8,a'_8) = (i_5,v_9,u_9,uri_8,a_9)) then
    {624}new n_c_4: bitstring;
    {627}new symk_50: SymmetricKey;
    {617}let symk_av_enc_4: SymmetricKey = hash_fork((K_8,h_9,keyEncCtoA)) in
    {628}let enc_symk5: bitstring = enc((symk5,symk_50),symk_av_enc_4) in
    {625}let rule: bitstring = (u_9,i_5,uri_8,a_9) in
    {626}let vpr_send_prev: bitstring = (dec_vpr_msg,v_9,rule,n_c_4) in
    {629}let m_59: bitstring = (enc_symk5,enc((tag6,vpr_send_prev),symk_50)) in
    {630}event verifierInConeOfUser(m_56,m_57,m_58,m_59);
    {631}out(c_9, (msg6,m_59));
    {632}in(c_9, (=msg9,m_60: bitstring));
    {633}let (symk8_enc_4: bitstring,m9_enc: bitstring) = m_60 in
    {634}let (=symk8,symk_51: SymmetricKey) = dec(symk8_enc_4,symk_av_dec_4) in
    {635}let (=tag9,vp_signed_4: bitstring) = dec(m9_enc,symk_51) in
    {636}let (=vp_2_msg,vp_signed_5: bitstring,vp_sign_2: bitstring) = vp_signed_4 in
    {637}if check(vp_signed_5,vp_sign_2,pka_4) then
    {638}let (=vp_msg,vp_8: bitstring,sign_vp: bitstring) = vp_signed_5 in
    {593}let pku_4: PublicKey = pk(sku) in
    {639}if check(vp_8,sign_vp,pku_4) then
    {640}let (vpr_rec_4: bitstring,vc_rec_signed: bitstring) = vp_8 in
    {641}let (vc_rec: bitstring,sign_vc_rec: bitstring) = vc_rec_signed in
    {599}let pki_4: PublicKey = pk(ski) in
    {642}if check(vc_rec,sign_vc_rec,pki_4) then
    {643}let (iss'': bitstring,u'': bitstring) = vc_rec in
    {644}if ((iss'',u'') = (i_5,u_9)) then
    {645}let (=dec_vpr_msg,v''_4: bitstring,rule'': bitstring,n_c'': bitstring) = vpr_rec_4 in
    {646}if ((v''_4,rule'',n_c'') = (c_9,rule,n_c_4)) then
    {647}let (u''': bitstring,i''': bitstring,uri''': bitstring,a''': bitstring) = rule'' in
    {648}if ((u''',i''',uri''',a''') = (u_9,i_5,uri_8,a_9)) then
    {649}new resource: bitstring;
    {650}new symk_52: SymmetricKey;
    {651}let symk9_enc_4: bitstring = enc((symk9,symk_52),symk_av_enc_4) in
    {652}let m_61: bitstring = (symk9_enc_4,enc((tag10,resource),symk_52)) in
    {653}event auth_VerifierSendsLastMessageToApp(m_56,m_57,m_58,m_59,m_60,m_61);
    {654}out(c_9, (msg10,m_61));
    {587}let talksOnlyToHonest_8: bool = true in
    {655}if talksOnlyToHonest_8 then
    (
        {656}event auth_VerifierCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61)
    ) | (
        {657}out(ch(resource), resource_fromVerifier)
    )
) | (
    {658}!
    {660}let c_10: channel = c2 in
    {673}in(c_10, (=msg3,m_62: bitstring));
    {674}let (=KEXDHINITSERVER,g_sav_enc_1: bitstring,symk2_enc_1: bitstring,g_sav_enc_signed_1: bitstring) = m_62 in
    {663}let skv_2: SecretKey = skv in
    {675}let (=gsav,g_sav_5: G) = adec(g_sav_enc_1,skv_2) in
    {662}let exp_v_10: exponent = exp_v in
    {676}let K0_5: G = exp(g_sav_5,exp_v_10) in
    {677}let h_10: SymmetricKey = hash_fork(((exp(g,exp_v_10),g_sav_5,K0_5),keyEncAtoCTemp)) in
    {678}let (=symk2,symk_53: SymmetricKey) = dec(symk2_enc_1,h_10) in
    {679}let (g_sav'_1: G,sign_g_sav_1: bitstring) = dec(g_sav_enc_signed_1,symk_53) in
    {668}let pka_5: PublicKey = pk(ska) in
    {680}if check(hash((sig_gsav,pk(skv_2),g_sav_5)),sign_g_sav_1,pka_5) then
    {681}new sc_1: exponent;
    {685}new symk_k3_1: SymmetricKey;
    {682}let g_sc_5: G = exp(g,sc_1) in
    {686}let diddoc_sc_signed_1: bitstring = (g_sc_5,sig(hash((sig_gsac,pka_5,g_sc_5)),skv_2)) in
    {683}let K_9: G = exp(g_sav_5,sc_1) in
    {684}let h_11: SymmetricKey = hash_fork(((g_sc_5,g_sav_5,K_9),keyEncCtoATemp)) in
    {687}let m_63: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_5),pka_5),enc((symk3,symk_k3_1),h_11),enc(diddoc_sc_signed_1,symk_k3_1)) in
    {688}out(c_10, (msg4,m_63));
    {691}in(c_10, (=msg5,m_64: bitstring));
    {692}let (symk4_enc_5: bitstring,m5_enc_1: bitstring) = m_64 in
    {690}let symk_av_dec_5: SymmetricKey = hash_fork((K_9,h_11,keyEncAtoC)) in
    {693}let (=symk4,symk_54: SymmetricKey) = dec(symk4_enc_5,symk_av_dec_5) in
    {694}let (=tag5,(i'_9: bitstring,v'_9: bitstring,u'_9: bitstring,uri'_9: bitstring,a'_9: bitstring)) = dec(m5_enc_1,symk_54) in
    {672}let uri_9: bitstring = uri_req in
    {670}let i_6: bitstring = i in
    {667}let a_10: bitstring = a in
    {664}let u_10: bitstring = e in
    {661}let v_10: bitstring = v in
    {695}if ((i'_9,v'_9,u'_9,uri'_9,a'_9) = (i_6,v_10,u_10,uri_9,a_10)) then
    {696}new n_c_5: bitstring;
    {699}new symk_55: SymmetricKey;
    {689}let symk_av_enc_5: SymmetricKey = hash_fork((K_9,h_11,keyEncCtoA)) in
    {700}let enc_symk5_1: bitstring = enc((symk5,symk_55),symk_av_enc_5) in
    {697}let rule_1: bitstring = (u_10,i_6,uri_9,a_10) in
    {698}let vpr_send_prev_1: bitstring = (dec_vpr_msg,v_10,rule_1,n_c_5) in
    {701}let m_65: bitstring = (enc_symk5_1,enc((tag6,vpr_send_prev_1),symk_55)) in
    {702}event verifierInConeOfUser(m_62,m_63,m_64,m_65);
    {703}out(c_10, (msg6,m_65));
    {704}in(c_10, (=msg9,m_66: bitstring));
    {705}let (symk8_enc_5: bitstring,m9_enc_1: bitstring) = m_66 in
    {706}let (=symk8,symk_56: SymmetricKey) = dec(symk8_enc_5,symk_av_dec_5) in
    {707}let (=tag9,vp_signed_6: bitstring) = dec(m9_enc_1,symk_56) in
    {708}let (=vp_2_msg,vp_signed_7: bitstring,vp_sign: bitstring) = vp_signed_6 in
    {709}if check(vp_signed_7,vp_sign,pka_5) then
    {710}let (=vp_msg,vp_9: bitstring,sign_vp_1: bitstring) = vp_signed_7 in
    {665}let pku_5: PublicKey = pk(sk_E) in
    {711}if check(vp_9,sign_vp_1,pku_5) then
    {712}let (vpr_rec_5: bitstring,vc_rec_signed_1: bitstring) = vp_9 in
    {713}let (vc_rec_1: bitstring,sign_vc_rec_1: bitstring) = vc_rec_signed_1 in
    {671}let pki_5: PublicKey = pk(ski) in
    {714}if check(vc_rec_1,sign_vc_rec_1,pki_5) then
    {715}let (iss''_1: bitstring,u''_1: bitstring) = vc_rec_1 in
    {716}if ((iss''_1,u''_1) = (i_6,u_10)) then
    {717}let (=dec_vpr_msg,v''_5: bitstring,rule''_1: bitstring,n_c''_1: bitstring) = vpr_rec_5 in
    {718}if ((v''_5,rule''_1,n_c''_1) = (c_10,rule_1,n_c_5)) then
    {719}let (u'''_1: bitstring,i'''_1: bitstring,uri'''_1: bitstring,a'''_1: bitstring) = rule''_1 in
    {720}if ((u'''_1,i'''_1,uri'''_1,a'''_1) = (u_10,i_6,uri_9,a_10)) then
    {721}new resource_1: bitstring;
    {722}new symk_57: SymmetricKey;
    {723}let symk9_enc_5: bitstring = enc((symk9,symk_57),symk_av_enc_5) in
    {724}let m_67: bitstring = (symk9_enc_5,enc((tag10,resource_1),symk_57)) in
    {725}event auth_VerifierSendsLastMessageToApp(m_62,m_63,m_64,m_65,m_66,m_67);
    {726}out(c_10, (msg10,m_67));
    {659}let talksOnlyToHonest_9: bool = false in
    {727}if talksOnlyToHonest_9 then
    (
        {728}event auth_VerifierCompletesProtocol(m_62,m_63,m_64,m_65,m_66,m_67)
    ) | (
        {729}out(ch(resource_1), resource_fromVerifier)
    )
) | (
    {730}!
    {732}let c_11: channel = c2 in
    {745}in(c_11, (=msg3,m_68: bitstring));
    {746}let (=KEXDHINITSERVER,g_sav_enc_2: bitstring,symk2_enc_2: bitstring,g_sav_enc_signed_2: bitstring) = m_68 in
    {735}let skv_3: SecretKey = skv in
    {747}let (=gsav,g_sav_6: G) = adec(g_sav_enc_2,skv_3) in
    {734}let exp_v_11: exponent = exp_v in
    {748}let K0_6: G = exp(g_sav_6,exp_v_11) in
    {749}let h_12: SymmetricKey = hash_fork(((exp(g,exp_v_11),g_sav_6,K0_6),keyEncAtoCTemp)) in
    {750}let (=symk2,symk_58: SymmetricKey) = dec(symk2_enc_2,h_12) in
    {751}let (g_sav'_2: G,sign_g_sav_2: bitstring) = dec(g_sav_enc_signed_2,symk_58) in
    {740}let pka_6: PublicKey = pk(sk_E) in
    {752}if check(hash((sig_gsav,pk(skv_3),g_sav_6)),sign_g_sav_2,pka_6) then
    {753}new sc_2: exponent;
    {757}new symk_k3_2: SymmetricKey;
    {754}let g_sc_6: G = exp(g,sc_2) in
    {758}let diddoc_sc_signed_2: bitstring = (g_sc_6,sig(hash((sig_gsac,pka_6,g_sc_6)),skv_3)) in
    {755}let K_10: G = exp(g_sav_6,sc_2) in
    {756}let h_13: SymmetricKey = hash_fork(((g_sc_6,g_sav_6,K_10),keyEncCtoATemp)) in
    {759}let m_69: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_6),pka_6),enc((symk3,symk_k3_2),h_13),enc(diddoc_sc_signed_2,symk_k3_2)) in
    {760}out(c_11, (msg4,m_69));
    {763}in(c_11, (=msg5,m_70: bitstring));
    {764}let (symk4_enc_6: bitstring,m5_enc_2: bitstring) = m_70 in
    {762}let symk_av_dec_6: SymmetricKey = hash_fork((K_10,h_13,keyEncAtoC)) in
    {765}let (=symk4,symk_59: SymmetricKey) = dec(symk4_enc_6,symk_av_dec_6) in
    {766}let (=tag5,(i'_10: bitstring,v'_10: bitstring,u'_10: bitstring,uri'_10: bitstring,a'_10: bitstring)) = dec(m5_enc_2,symk_59) in
    {744}let uri_10: bitstring = uri_req in
    {742}let i_7: bitstring = i in
    {739}let a_11: bitstring = e in
    {736}let u_11: bitstring = u in
    {733}let v_11: bitstring = v in
    {767}if ((i'_10,v'_10,u'_10,uri'_10,a'_10) = (i_7,v_11,u_11,uri_10,a_11)) then
    {768}new n_c_6: bitstring;
    {771}new symk_60: SymmetricKey;
    {761}let symk_av_enc_6: SymmetricKey = hash_fork((K_10,h_13,keyEncCtoA)) in
    {772}let enc_symk5_2: bitstring = enc((symk5,symk_60),symk_av_enc_6) in
    {769}let rule_2: bitstring = (u_11,i_7,uri_10,a_11) in
    {770}let vpr_send_prev_2: bitstring = (dec_vpr_msg,v_11,rule_2,n_c_6) in
    {773}let m_71: bitstring = (enc_symk5_2,enc((tag6,vpr_send_prev_2),symk_60)) in
    {774}event verifierInConeOfUser(m_68,m_69,m_70,m_71);
    {775}out(c_11, (msg6,m_71));
    {776}in(c_11, (=msg9,m_72: bitstring));
    {777}let (symk8_enc_6: bitstring,m9_enc_2: bitstring) = m_72 in
    {778}let (=symk8,symk_61: SymmetricKey) = dec(symk8_enc_6,symk_av_dec_6) in
    {779}let (=tag9,vp_signed_8: bitstring) = dec(m9_enc_2,symk_61) in
    {780}let (=vp_2_msg,vp_signed_9: bitstring,vp_sign_1: bitstring) = vp_signed_8 in
    {781}if check(vp_signed_9,vp_sign_1,pka_6) then
    {782}let (=vp_msg,vp_10: bitstring,sign_vp_2: bitstring) = vp_signed_9 in
    {737}let pku_6: PublicKey = pk(sku) in
    {783}if check(vp_10,sign_vp_2,pku_6) then
    {784}let (vpr_rec_6: bitstring,vc_rec_signed_2: bitstring) = vp_10 in
    {785}let (vc_rec_2: bitstring,sign_vc_rec_2: bitstring) = vc_rec_signed_2 in
    {743}let pki_6: PublicKey = pk(ski) in
    {786}if check(vc_rec_2,sign_vc_rec_2,pki_6) then
    {787}let (iss''_2: bitstring,u''_2: bitstring) = vc_rec_2 in
    {788}if ((iss''_2,u''_2) = (i_7,u_11)) then
    {789}let (=dec_vpr_msg,v''_6: bitstring,rule''_2: bitstring,n_c''_2: bitstring) = vpr_rec_6 in
    {790}if ((v''_6,rule''_2,n_c''_2) = (c_11,rule_2,n_c_6)) then
    {791}let (u'''_2: bitstring,i'''_2: bitstring,uri'''_2: bitstring,a'''_2: bitstring) = rule''_2 in
    {792}if ((u'''_2,i'''_2,uri'''_2,a'''_2) = (u_11,i_7,uri_10,a_11)) then
    {793}new resource_2: bitstring;
    {794}new symk_62: SymmetricKey;
    {795}let symk9_enc_6: bitstring = enc((symk9,symk_62),symk_av_enc_6) in
    {796}let m_73: bitstring = (symk9_enc_6,enc((tag10,resource_2),symk_62)) in
    {797}event auth_VerifierSendsLastMessageToApp(m_68,m_69,m_70,m_71,m_72,m_73);
    {798}out(c_11, (msg10,m_73));
    {731}let talksOnlyToHonest_10: bool = false in
    {799}if talksOnlyToHonest_10 then
    (
        {800}event auth_VerifierCompletesProtocol(m_68,m_69,m_70,m_71,m_72,m_73)
    ) | (
        {801}out(ch(resource_2), resource_fromVerifier)
    )
) | (
    {802}!
    {804}let c_12: channel = c2 in
    {817}in(c_12, (=msg3,m_74: bitstring));
    {818}let (=KEXDHINITSERVER,g_sav_enc_3: bitstring,symk2_enc_3: bitstring,g_sav_enc_signed_3: bitstring) = m_74 in
    {807}let skv_4: SecretKey = skv in
    {819}let (=gsav,g_sav_7: G) = adec(g_sav_enc_3,skv_4) in
    {806}let exp_v_12: exponent = exp_v in
    {820}let K0_7: G = exp(g_sav_7,exp_v_12) in
    {821}let h_14: SymmetricKey = hash_fork(((exp(g,exp_v_12),g_sav_7,K0_7),keyEncAtoCTemp)) in
    {822}let (=symk2,symk_63: SymmetricKey) = dec(symk2_enc_3,h_14) in
    {823}let (g_sav'_3: G,sign_g_sav_3: bitstring) = dec(g_sav_enc_signed_3,symk_63) in
    {812}let pka_7: PublicKey = pk(sk_E) in
    {824}if check(hash((sig_gsav,pk(skv_4),g_sav_7)),sign_g_sav_3,pka_7) then
    {825}new sc_3: exponent;
    {829}new symk_k3_3: SymmetricKey;
    {826}let g_sc_7: G = exp(g,sc_3) in
    {830}let diddoc_sc_signed_3: bitstring = (g_sc_7,sig(hash((sig_gsac,pka_7,g_sc_7)),skv_4)) in
    {827}let K_11: G = exp(g_sav_7,sc_3) in
    {828}let h_15: SymmetricKey = hash_fork(((g_sc_7,g_sav_7,K_11),keyEncCtoATemp)) in
    {831}let m_75: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_7),pka_7),enc((symk3,symk_k3_3),h_15),enc(diddoc_sc_signed_3,symk_k3_3)) in
    {832}out(c_12, (msg4,m_75));
    {835}in(c_12, (=msg5,m_76: bitstring));
    {836}let (symk4_enc_7: bitstring,m5_enc_3: bitstring) = m_76 in
    {834}let symk_av_dec_7: SymmetricKey = hash_fork((K_11,h_15,keyEncAtoC)) in
    {837}let (=symk4,symk_64: SymmetricKey) = dec(symk4_enc_7,symk_av_dec_7) in
    {838}let (=tag5,(i'_11: bitstring,v'_11: bitstring,u'_11: bitstring,uri'_11: bitstring,a'_11: bitstring)) = dec(m5_enc_3,symk_64) in
    {816}let uri_11: bitstring = uri_req in
    {814}let i_8: bitstring = i in
    {811}let a_12: bitstring = e in
    {808}let u_12: bitstring = e in
    {805}let v_12: bitstring = v in
    {839}if ((i'_11,v'_11,u'_11,uri'_11,a'_11) = (i_8,v_12,u_12,uri_11,a_12)) then
    {840}new n_c_7: bitstring;
    {843}new symk_65: SymmetricKey;
    {833}let symk_av_enc_7: SymmetricKey = hash_fork((K_11,h_15,keyEncCtoA)) in
    {844}let enc_symk5_3: bitstring = enc((symk5,symk_65),symk_av_enc_7) in
    {841}let rule_3: bitstring = (u_12,i_8,uri_11,a_12) in
    {842}let vpr_send_prev_3: bitstring = (dec_vpr_msg,v_12,rule_3,n_c_7) in
    {845}let m_77: bitstring = (enc_symk5_3,enc((tag6,vpr_send_prev_3),symk_65)) in
    {846}event verifierInConeOfUser(m_74,m_75,m_76,m_77);
    {847}out(c_12, (msg6,m_77));
    {848}in(c_12, (=msg9,m_78: bitstring));
    {849}let (symk8_enc_7: bitstring,m9_enc_3: bitstring) = m_78 in
    {850}let (=symk8,symk_66: SymmetricKey) = dec(symk8_enc_7,symk_av_dec_7) in
    {851}let (=tag9,vp_signed_10: bitstring) = dec(m9_enc_3,symk_66) in
    {852}let (=vp_2_msg,vp_signed_11: bitstring,vp_sign_3: bitstring) = vp_signed_10 in
    {853}if check(vp_signed_11,vp_sign_3,pka_7) then
    {854}let (=vp_msg,vp_11: bitstring,sign_vp_3: bitstring) = vp_signed_11 in
    {809}let pku_7: PublicKey = pk(sk_E) in
    {855}if check(vp_11,sign_vp_3,pku_7) then
    {856}let (vpr_rec_7: bitstring,vc_rec_signed_3: bitstring) = vp_11 in
    {857}let (vc_rec_3: bitstring,sign_vc_rec_3: bitstring) = vc_rec_signed_3 in
    {815}let pki_7: PublicKey = pk(ski) in
    {858}if check(vc_rec_3,sign_vc_rec_3,pki_7) then
    {859}let (iss''_3: bitstring,u''_3: bitstring) = vc_rec_3 in
    {860}if ((iss''_3,u''_3) = (i_8,u_12)) then
    {861}let (=dec_vpr_msg,v''_7: bitstring,rule''_3: bitstring,n_c''_3: bitstring) = vpr_rec_7 in
    {862}if ((v''_7,rule''_3,n_c''_3) = (c_12,rule_3,n_c_7)) then
    {863}let (u'''_3: bitstring,i'''_3: bitstring,uri'''_3: bitstring,a'''_3: bitstring) = rule''_3 in
    {864}if ((u'''_3,i'''_3,uri'''_3,a'''_3) = (u_12,i_8,uri_11,a_12)) then
    {865}new resource_3: bitstring;
    {866}new symk_67: SymmetricKey;
    {867}let symk9_enc_7: bitstring = enc((symk9,symk_67),symk_av_enc_7) in
    {868}let m_79: bitstring = (symk9_enc_7,enc((tag10,resource_3),symk_67)) in
    {869}event auth_VerifierSendsLastMessageToApp(m_74,m_75,m_76,m_77,m_78,m_79);
    {870}out(c_12, (msg10,m_79));
    {803}let talksOnlyToHonest_11: bool = false in
    {871}if talksOnlyToHonest_11 then
    (
        {872}event auth_VerifierCompletesProtocol(m_74,m_75,m_76,m_77,m_78,m_79)
    ) | (
        {873}out(ch(resource_3), resource_fromVerifier)
    )
) | (
    {874}!
    {876}let c_13: channel = c2 in
    {889}in(c_13, (=msg3,m_80: bitstring));
    {890}let (=KEXDHINITSERVER,g_sav_enc_4: bitstring,symk2_enc_4: bitstring,g_sav_enc_signed_4: bitstring) = m_80 in
    {879}let skv_5: SecretKey = skv in
    {891}let (=gsav,g_sav_8: G) = adec(g_sav_enc_4,skv_5) in
    {878}let exp_v_13: exponent = exp_v in
    {892}let K0_8: G = exp(g_sav_8,exp_v_13) in
    {893}let h_16: SymmetricKey = hash_fork(((exp(g,exp_v_13),g_sav_8,K0_8),keyEncAtoCTemp)) in
    {894}let (=symk2,symk_68: SymmetricKey) = dec(symk2_enc_4,h_16) in
    {895}let (g_sav'_4: G,sign_g_sav_4: bitstring) = dec(g_sav_enc_signed_4,symk_68) in
    {884}let pka_8: PublicKey = pk(ska) in
    {896}if check(hash((sig_gsav,pk(skv_5),g_sav_8)),sign_g_sav_4,pka_8) then
    {897}new sc_4: exponent;
    {901}new symk_k3_4: SymmetricKey;
    {898}let g_sc_8: G = exp(g,sc_4) in
    {902}let diddoc_sc_signed_4: bitstring = (g_sc_8,sig(hash((sig_gsac,pka_8,g_sc_8)),skv_5)) in
    {899}let K_12: G = exp(g_sav_8,sc_4) in
    {900}let h_17: SymmetricKey = hash_fork(((g_sc_8,g_sav_8,K_12),keyEncCtoATemp)) in
    {903}let m_81: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_8),pka_8),enc((symk3,symk_k3_4),h_17),enc(diddoc_sc_signed_4,symk_k3_4)) in
    {904}out(c_13, (msg4,m_81));
    {907}in(c_13, (=msg5,m_82: bitstring));
    {908}let (symk4_enc_8: bitstring,m5_enc_4: bitstring) = m_82 in
    {906}let symk_av_dec_8: SymmetricKey = hash_fork((K_12,h_17,keyEncAtoC)) in
    {909}let (=symk4,symk_69: SymmetricKey) = dec(symk4_enc_8,symk_av_dec_8) in
    {910}let (=tag5,(i'_12: bitstring,v'_12: bitstring,u'_12: bitstring,uri'_12: bitstring,a'_12: bitstring)) = dec(m5_enc_4,symk_69) in
    {888}let uri_12: bitstring = uri_req in
    {886}let i_9: bitstring = e in
    {883}let a_13: bitstring = a in
    {880}let u_13: bitstring = u in
    {877}let v_13: bitstring = v in
    {911}if ((i'_12,v'_12,u'_12,uri'_12,a'_12) = (i_9,v_13,u_13,uri_12,a_13)) then
    {912}new n_c_8: bitstring;
    {915}new symk_70: SymmetricKey;
    {905}let symk_av_enc_8: SymmetricKey = hash_fork((K_12,h_17,keyEncCtoA)) in
    {916}let enc_symk5_4: bitstring = enc((symk5,symk_70),symk_av_enc_8) in
    {913}let rule_4: bitstring = (u_13,i_9,uri_12,a_13) in
    {914}let vpr_send_prev_4: bitstring = (dec_vpr_msg,v_13,rule_4,n_c_8) in
    {917}let m_83: bitstring = (enc_symk5_4,enc((tag6,vpr_send_prev_4),symk_70)) in
    {918}event verifierInConeOfUser(m_80,m_81,m_82,m_83);
    {919}out(c_13, (msg6,m_83));
    {920}in(c_13, (=msg9,m_84: bitstring));
    {921}let (symk8_enc_8: bitstring,m9_enc_4: bitstring) = m_84 in
    {922}let (=symk8,symk_71: SymmetricKey) = dec(symk8_enc_8,symk_av_dec_8) in
    {923}let (=tag9,vp_signed_12: bitstring) = dec(m9_enc_4,symk_71) in
    {924}let (=vp_2_msg,vp_signed_13: bitstring,vp_sign_4: bitstring) = vp_signed_12 in
    {925}if check(vp_signed_13,vp_sign_4,pka_8) then
    {926}let (=vp_msg,vp_12: bitstring,sign_vp_4: bitstring) = vp_signed_13 in
    {881}let pku_8: PublicKey = pk(sku) in
    {927}if check(vp_12,sign_vp_4,pku_8) then
    {928}let (vpr_rec_8: bitstring,vc_rec_signed_4: bitstring) = vp_12 in
    {929}let (vc_rec_4: bitstring,sign_vc_rec_4: bitstring) = vc_rec_signed_4 in
    {887}let pki_8: PublicKey = pk(sk_E) in
    {930}if check(vc_rec_4,sign_vc_rec_4,pki_8) then
    {931}let (iss''_4: bitstring,u''_4: bitstring) = vc_rec_4 in
    {932}if ((iss''_4,u''_4) = (i_9,u_13)) then
    {933}let (=dec_vpr_msg,v''_8: bitstring,rule''_4: bitstring,n_c''_4: bitstring) = vpr_rec_8 in
    {934}if ((v''_8,rule''_4,n_c''_4) = (c_13,rule_4,n_c_8)) then
    {935}let (u'''_4: bitstring,i'''_4: bitstring,uri'''_4: bitstring,a'''_4: bitstring) = rule''_4 in
    {936}if ((u'''_4,i'''_4,uri'''_4,a'''_4) = (u_13,i_9,uri_12,a_13)) then
    {937}new resource_4: bitstring;
    {938}new symk_72: SymmetricKey;
    {939}let symk9_enc_8: bitstring = enc((symk9,symk_72),symk_av_enc_8) in
    {940}let m_85: bitstring = (symk9_enc_8,enc((tag10,resource_4),symk_72)) in
    {941}event auth_VerifierSendsLastMessageToApp(m_80,m_81,m_82,m_83,m_84,m_85);
    {942}out(c_13, (msg10,m_85));
    {875}let talksOnlyToHonest_12: bool = false in
    {943}if talksOnlyToHonest_12 then
    (
        {944}event auth_VerifierCompletesProtocol(m_80,m_81,m_82,m_83,m_84,m_85)
    ) | (
        {945}out(ch(resource_4), resource_fromVerifier)
    )
) | (
    {946}!
    {948}let c_14: channel = c2 in
    {961}in(c_14, (=msg3,m_86: bitstring));
    {962}let (=KEXDHINITSERVER,g_sav_enc_5: bitstring,symk2_enc_5: bitstring,g_sav_enc_signed_5: bitstring) = m_86 in
    {951}let skv_6: SecretKey = skv in
    {963}let (=gsav,g_sav_9: G) = adec(g_sav_enc_5,skv_6) in
    {950}let exp_v_14: exponent = exp_v in
    {964}let K0_9: G = exp(g_sav_9,exp_v_14) in
    {965}let h_18: SymmetricKey = hash_fork(((exp(g,exp_v_14),g_sav_9,K0_9),keyEncAtoCTemp)) in
    {966}let (=symk2,symk_73: SymmetricKey) = dec(symk2_enc_5,h_18) in
    {967}let (g_sav'_5: G,sign_g_sav_5: bitstring) = dec(g_sav_enc_signed_5,symk_73) in
    {956}let pka_9: PublicKey = pk(ska) in
    {968}if check(hash((sig_gsav,pk(skv_6),g_sav_9)),sign_g_sav_5,pka_9) then
    {969}new sc_5: exponent;
    {973}new symk_k3_5: SymmetricKey;
    {970}let g_sc_9: G = exp(g,sc_5) in
    {974}let diddoc_sc_signed_5: bitstring = (g_sc_9,sig(hash((sig_gsac,pka_9,g_sc_9)),skv_6)) in
    {971}let K_13: G = exp(g_sav_9,sc_5) in
    {972}let h_19: SymmetricKey = hash_fork(((g_sc_9,g_sav_9,K_13),keyEncCtoATemp)) in
    {975}let m_87: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_9),pka_9),enc((symk3,symk_k3_5),h_19),enc(diddoc_sc_signed_5,symk_k3_5)) in
    {976}out(c_14, (msg4,m_87));
    {979}in(c_14, (=msg5,m_88: bitstring));
    {980}let (symk4_enc_9: bitstring,m5_enc_5: bitstring) = m_88 in
    {978}let symk_av_dec_9: SymmetricKey = hash_fork((K_13,h_19,keyEncAtoC)) in
    {981}let (=symk4,symk_74: SymmetricKey) = dec(symk4_enc_9,symk_av_dec_9) in
    {982}let (=tag5,(i'_13: bitstring,v'_13: bitstring,u'_13: bitstring,uri'_13: bitstring,a'_13: bitstring)) = dec(m5_enc_5,symk_74) in
    {960}let uri_13: bitstring = uri_req in
    {958}let i_10: bitstring = e in
    {955}let a_14: bitstring = a in
    {952}let u_14: bitstring = e in
    {949}let v_14: bitstring = v in
    {983}if ((i'_13,v'_13,u'_13,uri'_13,a'_13) = (i_10,v_14,u_14,uri_13,a_14)) then
    {984}new n_c_9: bitstring;
    {987}new symk_75: SymmetricKey;
    {977}let symk_av_enc_9: SymmetricKey = hash_fork((K_13,h_19,keyEncCtoA)) in
    {988}let enc_symk5_5: bitstring = enc((symk5,symk_75),symk_av_enc_9) in
    {985}let rule_5: bitstring = (u_14,i_10,uri_13,a_14) in
    {986}let vpr_send_prev_5: bitstring = (dec_vpr_msg,v_14,rule_5,n_c_9) in
    {989}let m_89: bitstring = (enc_symk5_5,enc((tag6,vpr_send_prev_5),symk_75)) in
    {990}event verifierInConeOfUser(m_86,m_87,m_88,m_89);
    {991}out(c_14, (msg6,m_89));
    {992}in(c_14, (=msg9,m_90: bitstring));
    {993}let (symk8_enc_9: bitstring,m9_enc_5: bitstring) = m_90 in
    {994}let (=symk8,symk_76: SymmetricKey) = dec(symk8_enc_9,symk_av_dec_9) in
    {995}let (=tag9,vp_signed_14: bitstring) = dec(m9_enc_5,symk_76) in
    {996}let (=vp_2_msg,vp_signed_15: bitstring,vp_sign_5: bitstring) = vp_signed_14 in
    {997}if check(vp_signed_15,vp_sign_5,pka_9) then
    {998}let (=vp_msg,vp_13: bitstring,sign_vp_5: bitstring) = vp_signed_15 in
    {953}let pku_9: PublicKey = pk(sk_E) in
    {999}if check(vp_13,sign_vp_5,pku_9) then
    {1000}let (vpr_rec_9: bitstring,vc_rec_signed_5: bitstring) = vp_13 in
    {1001}let (vc_rec_5: bitstring,sign_vc_rec_5: bitstring) = vc_rec_signed_5 in
    {959}let pki_9: PublicKey = pk(sk_E) in
    {1002}if check(vc_rec_5,sign_vc_rec_5,pki_9) then
    {1003}let (iss''_5: bitstring,u''_5: bitstring) = vc_rec_5 in
    {1004}if ((iss''_5,u''_5) = (i_10,u_14)) then
    {1005}let (=dec_vpr_msg,v''_9: bitstring,rule''_5: bitstring,n_c''_5: bitstring) = vpr_rec_9 in
    {1006}if ((v''_9,rule''_5,n_c''_5) = (c_14,rule_5,n_c_9)) then
    {1007}let (u'''_5: bitstring,i'''_5: bitstring,uri'''_5: bitstring,a'''_5: bitstring) = rule''_5 in
    {1008}if ((u'''_5,i'''_5,uri'''_5,a'''_5) = (u_14,i_10,uri_13,a_14)) then
    {1009}new resource_5: bitstring;
    {1010}new symk_77: SymmetricKey;
    {1011}let symk9_enc_9: bitstring = enc((symk9,symk_77),symk_av_enc_9) in
    {1012}let m_91: bitstring = (symk9_enc_9,enc((tag10,resource_5),symk_77)) in
    {1013}event auth_VerifierSendsLastMessageToApp(m_86,m_87,m_88,m_89,m_90,m_91);
    {1014}out(c_14, (msg10,m_91));
    {947}let talksOnlyToHonest_13: bool = false in
    {1015}if talksOnlyToHonest_13 then
    (
        {1016}event auth_VerifierCompletesProtocol(m_86,m_87,m_88,m_89,m_90,m_91)
    ) | (
        {1017}out(ch(resource_5), resource_fromVerifier)
    )
) | (
    {1018}!
    {1020}let c_15: channel = c2 in
    {1033}in(c_15, (=msg3,m_92: bitstring));
    {1034}let (=KEXDHINITSERVER,g_sav_enc_6: bitstring,symk2_enc_6: bitstring,g_sav_enc_signed_6: bitstring) = m_92 in
    {1023}let skv_7: SecretKey = skv in
    {1035}let (=gsav,g_sav_10: G) = adec(g_sav_enc_6,skv_7) in
    {1022}let exp_v_15: exponent = exp_v in
    {1036}let K0_10: G = exp(g_sav_10,exp_v_15) in
    {1037}let h_20: SymmetricKey = hash_fork(((exp(g,exp_v_15),g_sav_10,K0_10),keyEncAtoCTemp)) in
    {1038}let (=symk2,symk_78: SymmetricKey) = dec(symk2_enc_6,h_20) in
    {1039}let (g_sav'_6: G,sign_g_sav_6: bitstring) = dec(g_sav_enc_signed_6,symk_78) in
    {1028}let pka_10: PublicKey = pk(sk_E) in
    {1040}if check(hash((sig_gsav,pk(skv_7),g_sav_10)),sign_g_sav_6,pka_10) then
    {1041}new sc_6: exponent;
    {1045}new symk_k3_6: SymmetricKey;
    {1042}let g_sc_10: G = exp(g,sc_6) in
    {1046}let diddoc_sc_signed_6: bitstring = (g_sc_10,sig(hash((sig_gsac,pka_10,g_sc_10)),skv_7)) in
    {1043}let K_14: G = exp(g_sav_10,sc_6) in
    {1044}let h_21: SymmetricKey = hash_fork(((g_sc_10,g_sav_10,K_14),keyEncCtoATemp)) in
    {1047}let m_93: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_10),pka_10),enc((symk3,symk_k3_6),h_21),enc(diddoc_sc_signed_6,symk_k3_6)) in
    {1048}out(c_15, (msg4,m_93));
    {1051}in(c_15, (=msg5,m_94: bitstring));
    {1052}let (symk4_enc_10: bitstring,m5_enc_6: bitstring) = m_94 in
    {1050}let symk_av_dec_10: SymmetricKey = hash_fork((K_14,h_21,keyEncAtoC)) in
    {1053}let (=symk4,symk_79: SymmetricKey) = dec(symk4_enc_10,symk_av_dec_10) in
    {1054}let (=tag5,(i'_14: bitstring,v'_14: bitstring,u'_14: bitstring,uri'_14: bitstring,a'_14: bitstring)) = dec(m5_enc_6,symk_79) in
    {1032}let uri_14: bitstring = uri_req in
    {1030}let i_11: bitstring = e in
    {1027}let a_15: bitstring = e in
    {1024}let u_15: bitstring = u in
    {1021}let v_15: bitstring = v in
    {1055}if ((i'_14,v'_14,u'_14,uri'_14,a'_14) = (i_11,v_15,u_15,uri_14,a_15)) then
    {1056}new n_c_10: bitstring;
    {1059}new symk_80: SymmetricKey;
    {1049}let symk_av_enc_10: SymmetricKey = hash_fork((K_14,h_21,keyEncCtoA)) in
    {1060}let enc_symk5_6: bitstring = enc((symk5,symk_80),symk_av_enc_10) in
    {1057}let rule_6: bitstring = (u_15,i_11,uri_14,a_15) in
    {1058}let vpr_send_prev_6: bitstring = (dec_vpr_msg,v_15,rule_6,n_c_10) in
    {1061}let m_95: bitstring = (enc_symk5_6,enc((tag6,vpr_send_prev_6),symk_80)) in
    {1062}event verifierInConeOfUser(m_92,m_93,m_94,m_95);
    {1063}out(c_15, (msg6,m_95));
    {1064}in(c_15, (=msg9,m_96: bitstring));
    {1065}let (symk8_enc_10: bitstring,m9_enc_6: bitstring) = m_96 in
    {1066}let (=symk8,symk_81: SymmetricKey) = dec(symk8_enc_10,symk_av_dec_10) in
    {1067}let (=tag9,vp_signed_16: bitstring) = dec(m9_enc_6,symk_81) in
    {1068}let (=vp_2_msg,vp_signed_17: bitstring,vp_sign_6: bitstring) = vp_signed_16 in
    {1069}if check(vp_signed_17,vp_sign_6,pka_10) then
    {1070}let (=vp_msg,vp_14: bitstring,sign_vp_6: bitstring) = vp_signed_17 in
    {1025}let pku_10: PublicKey = pk(sku) in
    {1071}if check(vp_14,sign_vp_6,pku_10) then
    {1072}let (vpr_rec_10: bitstring,vc_rec_signed_6: bitstring) = vp_14 in
    {1073}let (vc_rec_6: bitstring,sign_vc_rec_6: bitstring) = vc_rec_signed_6 in
    {1031}let pki_10: PublicKey = pk(sk_E) in
    {1074}if check(vc_rec_6,sign_vc_rec_6,pki_10) then
    {1075}let (iss''_6: bitstring,u''_6: bitstring) = vc_rec_6 in
    {1076}if ((iss''_6,u''_6) = (i_11,u_15)) then
    {1077}let (=dec_vpr_msg,v''_10: bitstring,rule''_6: bitstring,n_c''_6: bitstring) = vpr_rec_10 in
    {1078}if ((v''_10,rule''_6,n_c''_6) = (c_15,rule_6,n_c_10)) then
    {1079}let (u'''_6: bitstring,i'''_6: bitstring,uri'''_6: bitstring,a'''_6: bitstring) = rule''_6 in
    {1080}if ((u'''_6,i'''_6,uri'''_6,a'''_6) = (u_15,i_11,uri_14,a_15)) then
    {1081}new resource_6: bitstring;
    {1082}new symk_82: SymmetricKey;
    {1083}let symk9_enc_10: bitstring = enc((symk9,symk_82),symk_av_enc_10) in
    {1084}let m_97: bitstring = (symk9_enc_10,enc((tag10,resource_6),symk_82)) in
    {1085}event auth_VerifierSendsLastMessageToApp(m_92,m_93,m_94,m_95,m_96,m_97);
    {1086}out(c_15, (msg10,m_97));
    {1019}let talksOnlyToHonest_14: bool = false in
    {1087}if talksOnlyToHonest_14 then
    (
        {1088}event auth_VerifierCompletesProtocol(m_92,m_93,m_94,m_95,m_96,m_97)
    ) | (
        {1089}out(ch(resource_6), resource_fromVerifier)
    )
) | (
    {1090}!
    {1092}let c_16: channel = c2 in
    {1105}in(c_16, (=msg3,m_98: bitstring));
    {1106}let (=KEXDHINITSERVER,g_sav_enc_7: bitstring,symk2_enc_7: bitstring,g_sav_enc_signed_7: bitstring) = m_98 in
    {1095}let skv_8: SecretKey = skv in
    {1107}let (=gsav,g_sav_11: G) = adec(g_sav_enc_7,skv_8) in
    {1094}let exp_v_16: exponent = exp_v in
    {1108}let K0_11: G = exp(g_sav_11,exp_v_16) in
    {1109}let h_22: SymmetricKey = hash_fork(((exp(g,exp_v_16),g_sav_11,K0_11),keyEncAtoCTemp)) in
    {1110}let (=symk2,symk_83: SymmetricKey) = dec(symk2_enc_7,h_22) in
    {1111}let (g_sav'_7: G,sign_g_sav_7: bitstring) = dec(g_sav_enc_signed_7,symk_83) in
    {1100}let pka_11: PublicKey = pk(sk_E) in
    {1112}if check(hash((sig_gsav,pk(skv_8),g_sav_11)),sign_g_sav_7,pka_11) then
    {1113}new sc_7: exponent;
    {1117}new symk_k3_7: SymmetricKey;
    {1114}let g_sc_11: G = exp(g,sc_7) in
    {1118}let diddoc_sc_signed_7: bitstring = (g_sc_11,sig(hash((sig_gsac,pka_11,g_sc_11)),skv_8)) in
    {1115}let K_15: G = exp(g_sav_11,sc_7) in
    {1116}let h_23: SymmetricKey = hash_fork(((g_sc_11,g_sav_11,K_15),keyEncCtoATemp)) in
    {1119}let m_99: bitstring = (KEXDHREPLYSERVER,aenc((gsac,g_sc_11),pka_11),enc((symk3,symk_k3_7),h_23),enc(diddoc_sc_signed_7,symk_k3_7)) in
    {1120}out(c_16, (msg4,m_99));
    {1123}in(c_16, (=msg5,m_100: bitstring));
    {1124}let (symk4_enc_11: bitstring,m5_enc_7: bitstring) = m_100 in
    {1122}let symk_av_dec_11: SymmetricKey = hash_fork((K_15,h_23,keyEncAtoC)) in
    {1125}let (=symk4,symk_84: SymmetricKey) = dec(symk4_enc_11,symk_av_dec_11) in
    {1126}let (=tag5,(i'_15: bitstring,v'_15: bitstring,u'_15: bitstring,uri'_15: bitstring,a'_15: bitstring)) = dec(m5_enc_7,symk_84) in
    {1104}let uri_15: bitstring = uri_req in
    {1102}let i_12: bitstring = e in
    {1099}let a_16: bitstring = e in
    {1096}let u_16: bitstring = e in
    {1093}let v_16: bitstring = v in
    {1127}if ((i'_15,v'_15,u'_15,uri'_15,a'_15) = (i_12,v_16,u_16,uri_15,a_16)) then
    {1128}new n_c_11: bitstring;
    {1131}new symk_85: SymmetricKey;
    {1121}let symk_av_enc_11: SymmetricKey = hash_fork((K_15,h_23,keyEncCtoA)) in
    {1132}let enc_symk5_7: bitstring = enc((symk5,symk_85),symk_av_enc_11) in
    {1129}let rule_7: bitstring = (u_16,i_12,uri_15,a_16) in
    {1130}let vpr_send_prev_7: bitstring = (dec_vpr_msg,v_16,rule_7,n_c_11) in
    {1133}let m_101: bitstring = (enc_symk5_7,enc((tag6,vpr_send_prev_7),symk_85)) in
    {1134}event verifierInConeOfUser(m_98,m_99,m_100,m_101);
    {1135}out(c_16, (msg6,m_101));
    {1136}in(c_16, (=msg9,m_102: bitstring));
    {1137}let (symk8_enc_11: bitstring,m9_enc_7: bitstring) = m_102 in
    {1138}let (=symk8,symk_86: SymmetricKey) = dec(symk8_enc_11,symk_av_dec_11) in
    {1139}let (=tag9,vp_signed_18: bitstring) = dec(m9_enc_7,symk_86) in
    {1140}let (=vp_2_msg,vp_signed_19: bitstring,vp_sign_7: bitstring) = vp_signed_18 in
    {1141}if check(vp_signed_19,vp_sign_7,pka_11) then
    {1142}let (=vp_msg,vp_15: bitstring,sign_vp_7: bitstring) = vp_signed_19 in
    {1097}let pku_11: PublicKey = pk(sk_E) in
    {1143}if check(vp_15,sign_vp_7,pku_11) then
    {1144}let (vpr_rec_11: bitstring,vc_rec_signed_7: bitstring) = vp_15 in
    {1145}let (vc_rec_7: bitstring,sign_vc_rec_7: bitstring) = vc_rec_signed_7 in
    {1103}let pki_11: PublicKey = pk(sk_E) in
    {1146}if check(vc_rec_7,sign_vc_rec_7,pki_11) then
    {1147}let (iss''_7: bitstring,u''_7: bitstring) = vc_rec_7 in
    {1148}if ((iss''_7,u''_7) = (i_12,u_16)) then
    {1149}let (=dec_vpr_msg,v''_11: bitstring,rule''_7: bitstring,n_c''_7: bitstring) = vpr_rec_11 in
    {1150}if ((v''_11,rule''_7,n_c''_7) = (c_16,rule_7,n_c_11)) then
    {1151}let (u'''_7: bitstring,i'''_7: bitstring,uri'''_7: bitstring,a'''_7: bitstring) = rule''_7 in
    {1152}if ((u'''_7,i'''_7,uri'''_7,a'''_7) = (u_16,i_12,uri_15,a_16)) then
    {1153}new resource_7: bitstring;
    {1154}new symk_87: SymmetricKey;
    {1155}let symk9_enc_11: bitstring = enc((symk9,symk_87),symk_av_enc_11) in
    {1156}let m_103: bitstring = (symk9_enc_11,enc((tag10,resource_7),symk_87)) in
    {1157}event auth_VerifierSendsLastMessageToApp(m_98,m_99,m_100,m_101,m_102,m_103);
    {1158}out(c_16, (msg10,m_103));
    {1091}let talksOnlyToHonest_15: bool = false in
    {1159}if talksOnlyToHonest_15 then
    (
        {1160}event auth_VerifierCompletesProtocol(m_98,m_99,m_100,m_101,m_102,m_103)
    ) | (
        {1161}out(ch(resource_7), resource_fromVerifier)
    )
)

-- Query inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_104,m_105,m_106,m_107,m_vpr)) && inj-event(verifierInConeOfUser(m_104,m_105,m_106,m_107)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (120 with conclusion selected). Queue: 625 rules.
400 rules inserted. Base: 400 rules (120 with conclusion selected). Queue: 691 rules.
600 rules inserted. Base: 600 rules (120 with conclusion selected). Queue: 737 rules.
800 rules inserted. Base: 799 rules (126 with conclusion selected). Queue: 732 rules.
1000 rules inserted. Base: 999 rules (126 with conclusion selected). Queue: 684 rules.
1200 rules inserted. Base: 1199 rules (126 with conclusion selected). Queue: 664 rules.
1400 rules inserted. Base: 1383 rules (126 with conclusion selected). Queue: 644 rules.
1600 rules inserted. Base: 1535 rules (128 with conclusion selected). Queue: 664 rules.
1800 rules inserted. Base: 1704 rules (128 with conclusion selected). Queue: 700 rules.
2000 rules inserted. Base: 1888 rules (128 with conclusion selected). Queue: 736 rules.
2200 rules inserted. Base: 2029 rules (144 with conclusion selected). Queue: 946 rules.
2400 rules inserted. Base: 2134 rules (165 with conclusion selected). Queue: 1163 rules.
2600 rules inserted. Base: 2246 rules (192 with conclusion selected). Queue: 1188 rules.
2800 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 1278 rules.
3000 rules inserted. Base: 2611 rules (194 with conclusion selected). Queue: 1294 rules.
3200 rules inserted. Base: 2779 rules (194 with conclusion selected). Queue: 1388 rules.
3400 rules inserted. Base: 2947 rules (194 with conclusion selected). Queue: 1428 rules.
3600 rules inserted. Base: 3147 rules (198 with conclusion selected). Queue: 1594 rules.
3800 rules inserted. Base: 3323 rules (198 with conclusion selected). Queue: 1702 rules.
4000 rules inserted. Base: 3390 rules (198 with conclusion selected). Queue: 1702 rules.
4200 rules inserted. Base: 3532 rules (200 with conclusion selected). Queue: 1751 rules.
4400 rules inserted. Base: 3671 rules (200 with conclusion selected). Queue: 1712 rules.
4600 rules inserted. Base: 3798 rules (200 with conclusion selected). Queue: 1705 rules.
4800 rules inserted. Base: 3935 rules (200 with conclusion selected). Queue: 1666 rules.
5000 rules inserted. Base: 4012 rules (200 with conclusion selected). Queue: 1634 rules.
5200 rules inserted. Base: 4098 rules (204 with conclusion selected). Queue: 2062 rules.
5400 rules inserted. Base: 4170 rules (204 with conclusion selected). Queue: 2032 rules.
5600 rules inserted. Base: 4307 rules (204 with conclusion selected). Queue: 1912 rules.
5800 rules inserted. Base: 4471 rules (204 with conclusion selected). Queue: 1778 rules.
6000 rules inserted. Base: 4653 rules (204 with conclusion selected). Queue: 1876 rules.
6200 rules inserted. Base: 4845 rules (204 with conclusion selected). Queue: 1817 rules.
6400 rules inserted. Base: 5022 rules (204 with conclusion selected). Queue: 1795 rules.
6600 rules inserted. Base: 5185 rules (204 with conclusion selected). Queue: 1764 rules.
6800 rules inserted. Base: 5316 rules (204 with conclusion selected). Queue: 1732 rules.
7000 rules inserted. Base: 5493 rules (204 with conclusion selected). Queue: 1737 rules.
7200 rules inserted. Base: 5628 rules (204 with conclusion selected). Queue: 1717 rules.
7400 rules inserted. Base: 5788 rules (204 with conclusion selected). Queue: 1701 rules.
7600 rules inserted. Base: 5943 rules (204 with conclusion selected). Queue: 1978 rules.
7800 rules inserted. Base: 6059 rules (204 with conclusion selected). Queue: 1951 rules.
8000 rules inserted. Base: 6127 rules (204 with conclusion selected). Queue: 1893 rules.
8200 rules inserted. Base: 6216 rules (204 with conclusion selected). Queue: 1833 rules.
8400 rules inserted. Base: 6307 rules (204 with conclusion selected). Queue: 1774 rules.
8600 rules inserted. Base: 6495 rules (204 with conclusion selected). Queue: 1740 rules.
8800 rules inserted. Base: 6613 rules (204 with conclusion selected). Queue: 1694 rules.
9000 rules inserted. Base: 6794 rules (204 with conclusion selected). Queue: 1660 rules.
9200 rules inserted. Base: 6832 rules (204 with conclusion selected). Queue: 1652 rules.
9400 rules inserted. Base: 6847 rules (204 with conclusion selected). Queue: 1682 rules.
9600 rules inserted. Base: 6895 rules (204 with conclusion selected). Queue: 1694 rules.
9800 rules inserted. Base: 7005 rules (204 with conclusion selected). Queue: 1694 rules.
10000 rules inserted. Base: 7149 rules (204 with conclusion selected). Queue: 1692 rules.
10200 rules inserted. Base: 7235 rules (204 with conclusion selected). Queue: 1692 rules.
10400 rules inserted. Base: 7361 rules (204 with conclusion selected). Queue: 1685 rules.
10600 rules inserted. Base: 7517 rules (204 with conclusion selected). Queue: 1683 rules.
10800 rules inserted. Base: 7523 rules (204 with conclusion selected). Queue: 1683 rules.
11000 rules inserted. Base: 7523 rules (204 with conclusion selected). Queue: 1683 rules.
11200 rules inserted. Base: 7532 rules (204 with conclusion selected). Queue: 1674 rules.
11400 rules inserted. Base: 7606 rules (204 with conclusion selected). Queue: 1592 rules.
11600 rules inserted. Base: 7745 rules (204 with conclusion selected). Queue: 1444 rules.
11800 rules inserted. Base: 7862 rules (204 with conclusion selected). Queue: 1302 rules.
12000 rules inserted. Base: 7855 rules (211 with conclusion selected). Queue: 1397 rules.
12200 rules inserted. Base: 7860 rules (211 with conclusion selected). Queue: 1382 rules.
12400 rules inserted. Base: 7859 rules (211 with conclusion selected). Queue: 1354 rules.
12600 rules inserted. Base: 7781 rules (221 with conclusion selected). Queue: 1351 rules.
12800 rules inserted. Base: 7694 rules (224 with conclusion selected). Queue: 1345 rules.
13000 rules inserted. Base: 7778 rules (230 with conclusion selected). Queue: 1346 rules.
13200 rules inserted. Base: 7978 rules (246 with conclusion selected). Queue: 1450 rules.
13400 rules inserted. Base: 7998 rules (247 with conclusion selected). Queue: 1487 rules.
13600 rules inserted. Base: 8078 rules (247 with conclusion selected). Queue: 1407 rules.
13800 rules inserted. Base: 8217 rules (265 with conclusion selected). Queue: 1369 rules.
14000 rules inserted. Base: 8417 rules (283 with conclusion selected). Queue: 1857 rules.
14200 rules inserted. Base: 8617 rules (297 with conclusion selected). Queue: 2246 rules.
14400 rules inserted. Base: 8699 rules (302 with conclusion selected). Queue: 2372 rules.
14600 rules inserted. Base: 8883 rules (304 with conclusion selected). Queue: 2613 rules.
14800 rules inserted. Base: 8942 rules (304 with conclusion selected). Queue: 2595 rules.
15000 rules inserted. Base: 8942 rules (304 with conclusion selected). Queue: 2595 rules.
15200 rules inserted. Base: 9103 rules (311 with conclusion selected). Queue: 3046 rules.
15400 rules inserted. Base: 9299 rules (313 with conclusion selected). Queue: 3232 rules.
15600 rules inserted. Base: 9499 rules (314 with conclusion selected). Queue: 3246 rules.
15800 rules inserted. Base: 9695 rules (316 with conclusion selected). Queue: 3433 rules.
16000 rules inserted. Base: 9895 rules (317 with conclusion selected). Queue: 3447 rules.
16200 rules inserted. Base: 10091 rules (320 with conclusion selected). Queue: 3649 rules.
16400 rules inserted. Base: 10291 rules (320 with conclusion selected). Queue: 3648 rules.
16600 rules inserted. Base: 10399 rules (322 with conclusion selected). Queue: 3830 rules.
16800 rules inserted. Base: 10542 rules (323 with conclusion selected). Queue: 4007 rules.
17000 rules inserted. Base: 10663 rules (323 with conclusion selected). Queue: 3984 rules.
17200 rules inserted. Base: 10812 rules (324 with conclusion selected). Queue: 4204 rules.
17400 rules inserted. Base: 10985 rules (324 with conclusion selected). Queue: 4050 rules.
17600 rules inserted. Base: 11185 rules (324 with conclusion selected). Queue: 3850 rules.
17800 rules inserted. Base: 11350 rules (326 with conclusion selected). Queue: 4184 rules.
18000 rules inserted. Base: 11443 rules (328 with conclusion selected). Queue: 4346 rules.
18200 rules inserted. Base: 11565 rules (330 with conclusion selected). Queue: 4737 rules.
18400 rules inserted. Base: 11764 rules (330 with conclusion selected). Queue: 4736 rules.
18600 rules inserted. Base: 11857 rules (330 with conclusion selected). Queue: 4749 rules.
18800 rules inserted. Base: 12053 rules (333 with conclusion selected). Queue: 5110 rules.
19000 rules inserted. Base: 12220 rules (333 with conclusion selected). Queue: 5109 rules.
19200 rules inserted. Base: 12343 rules (335 with conclusion selected). Queue: 5296 rules.
19400 rules inserted. Base: 12542 rules (336 with conclusion selected). Queue: 5484 rules.
19600 rules inserted. Base: 12709 rules (336 with conclusion selected). Queue: 5483 rules.
19800 rules inserted. Base: 12832 rules (339 with conclusion selected). Queue: 5859 rules.
20000 rules inserted. Base: 13031 rules (339 with conclusion selected). Queue: 5858 rules.
20200 rules inserted. Base: 13150 rules (339 with conclusion selected). Queue: 5857 rules.
20400 rules inserted. Base: 13243 rules (341 with conclusion selected). Queue: 6044 rules.
20600 rules inserted. Base: 13357 rules (341 with conclusion selected). Queue: 6057 rules.
20800 rules inserted. Base: 13449 rules (341 with conclusion selected). Queue: 6103 rules.
21000 rules inserted. Base: 13575 rules (341 with conclusion selected). Queue: 6070 rules.
21200 rules inserted. Base: 13701 rules (341 with conclusion selected). Queue: 6090 rules.
21400 rules inserted. Base: 13721 rules (341 with conclusion selected). Queue: 6109 rules.
21600 rules inserted. Base: 13824 rules (341 with conclusion selected). Queue: 6117 rules.
21800 rules inserted. Base: 13951 rules (341 with conclusion selected). Queue: 6154 rules.
22000 rules inserted. Base: 14078 rules (341 with conclusion selected). Queue: 6167 rules.
22200 rules inserted. Base: 14158 rules (341 with conclusion selected). Queue: 6167 rules.
22400 rules inserted. Base: 14283 rules (342 with conclusion selected). Queue: 6134 rules.
22600 rules inserted. Base: 14403 rules (342 with conclusion selected). Queue: 6154 rules.
22800 rules inserted. Base: 14491 rules (343 with conclusion selected). Queue: 6174 rules.
23000 rules inserted. Base: 14529 rules (343 with conclusion selected). Queue: 6206 rules.
23200 rules inserted. Base: 14623 rules (343 with conclusion selected). Queue: 6174 rules.
23400 rules inserted. Base: 14717 rules (343 with conclusion selected). Queue: 6188 rules.
23600 rules inserted. Base: 14779 rules (344 with conclusion selected). Queue: 6187 rules.
23800 rules inserted. Base: 14886 rules (344 with conclusion selected). Queue: 6219 rules.
24000 rules inserted. Base: 14918 rules (344 with conclusion selected). Queue: 6219 rules.
24200 rules inserted. Base: 15048 rules (344 with conclusion selected). Queue: 6187 rules.
24400 rules inserted. Base: 15146 rules (344 with conclusion selected). Queue: 6201 rules.
24600 rules inserted. Base: 15199 rules (345 with conclusion selected). Queue: 6200 rules.
24800 rules inserted. Base: 15261 rules (345 with conclusion selected). Queue: 6232 rules.
25000 rules inserted. Base: 15331 rules (345 with conclusion selected). Queue: 6210 rules.
25200 rules inserted. Base: 15439 rules (345 with conclusion selected). Queue: 6214 rules.
25400 rules inserted. Base: 15520 rules (346 with conclusion selected). Queue: 6213 rules.
25600 rules inserted. Base: 15632 rules (346 with conclusion selected). Queue: 6224 rules.
25800 rules inserted. Base: 15650 rules (346 with conclusion selected). Queue: 6245 rules.
26000 rules inserted. Base: 15785 rules (346 with conclusion selected). Queue: 6213 rules.
26200 rules inserted. Base: 15879 rules (346 with conclusion selected). Queue: 6227 rules.
26400 rules inserted. Base: 15909 rules (347 with conclusion selected). Queue: 6226 rules.
26600 rules inserted. Base: 16017 rules (349 with conclusion selected). Queue: 6272 rules.
26800 rules inserted. Base: 16111 rules (349 with conclusion selected). Queue: 6272 rules.
27000 rules inserted. Base: 16178 rules (349 with conclusion selected). Queue: 6270 rules.
27200 rules inserted. Base: 16308 rules (349 with conclusion selected). Queue: 6238 rules.
27400 rules inserted. Base: 16402 rules (365 with conclusion selected). Queue: 6386 rules.
27600 rules inserted. Base: 16441 rules (381 with conclusion selected). Queue: 6500 rules.
27800 rules inserted. Base: 16532 rules (381 with conclusion selected). Queue: 6500 rules.
28000 rules inserted. Base: 16670 rules (381 with conclusion selected). Queue: 6468 rules.
28200 rules inserted. Base: 16778 rules (382 with conclusion selected). Queue: 6468 rules.
28400 rules inserted. Base: 16890 rules (382 with conclusion selected). Queue: 6436 rules.
28600 rules inserted. Base: 17000 rules (382 with conclusion selected). Queue: 6436 rules.
28800 rules inserted. Base: 17160 rules (382 with conclusion selected). Queue: 6404 rules.
29000 rules inserted. Base: 17321 rules (384 with conclusion selected). Queue: 6385 rules.
29200 rules inserted. Base: 17400 rules (384 with conclusion selected). Queue: 6385 rules.
29400 rules inserted. Base: 17565 rules (384 with conclusion selected). Queue: 6385 rules.
29600 rules inserted. Base: 17691 rules (384 with conclusion selected). Queue: 6353 rules.
29800 rules inserted. Base: 17801 rules (384 with conclusion selected). Queue: 6353 rules.
30000 rules inserted. Base: 17929 rules (384 with conclusion selected). Queue: 6335 rules.
30200 rules inserted. Base: 18060 rules (384 with conclusion selected). Queue: 6335 rules.
30400 rules inserted. Base: 18199 rules (384 with conclusion selected). Queue: 6335 rules.
30600 rules inserted. Base: 18343 rules (384 with conclusion selected). Queue: 6303 rules.
30800 rules inserted. Base: 18477 rules (384 with conclusion selected). Queue: 6285 rules.
31000 rules inserted. Base: 18571 rules (384 with conclusion selected). Queue: 6285 rules.
31200 rules inserted. Base: 18727 rules (384 with conclusion selected). Queue: 6285 rules.
31400 rules inserted. Base: 18843 rules (384 with conclusion selected). Queue: 6281 rules.
31600 rules inserted. Base: 18969 rules (384 with conclusion selected). Queue: 6253 rules.
31800 rules inserted. Base: 19145 rules (384 with conclusion selected). Queue: 6235 rules.
32000 rules inserted. Base: 19228 rules (384 with conclusion selected). Queue: 6235 rules.
32200 rules inserted. Base: 19393 rules (384 with conclusion selected). Queue: 6235 rules.
32400 rules inserted. Base: 19519 rules (384 with conclusion selected). Queue: 6203 rules.
32600 rules inserted. Base: 19623 rules (384 with conclusion selected). Queue: 6203 rules.
32800 rules inserted. Base: 19735 rules (389 with conclusion selected). Queue: 6261 rules.
33000 rules inserted. Base: 19876 rules (390 with conclusion selected). Queue: 6534 rules.
33200 rules inserted. Base: 19951 rules (422 with conclusion selected). Queue: 7181 rules.
33400 rules inserted. Base: 20075 rules (422 with conclusion selected). Queue: 7501 rules.
33600 rules inserted. Base: 20199 rules (422 with conclusion selected). Queue: 7589 rules.
33800 rules inserted. Base: 20294 rules (425 with conclusion selected). Queue: 7664 rules.
34000 rules inserted. Base: 20395 rules (438 with conclusion selected). Queue: 7964 rules.
34200 rules inserted. Base: 20504 rules (454 with conclusion selected). Queue: 8380 rules.
34400 rules inserted. Base: 20638 rules (455 with conclusion selected). Queue: 8380 rules.
34600 rules inserted. Base: 20675 rules (457 with conclusion selected). Queue: 8379 rules.
34800 rules inserted. Base: 20819 rules (457 with conclusion selected). Queue: 8315 rules.
35000 rules inserted. Base: 20877 rules (457 with conclusion selected). Queue: 8269 rules.
35200 rules inserted. Base: 21041 rules (457 with conclusion selected). Queue: 8251 rules.
35400 rules inserted. Base: 21184 rules (458 with conclusion selected). Queue: 8250 rules.
35600 rules inserted. Base: 21280 rules (459 with conclusion selected). Queue: 8250 rules.
35800 rules inserted. Base: 21378 rules (460 with conclusion selected). Queue: 8250 rules.
36000 rules inserted. Base: 21554 rules (460 with conclusion selected). Queue: 8186 rules.
36200 rules inserted. Base: 21667 rules (460 with conclusion selected). Queue: 8186 rules.
36400 rules inserted. Base: 21761 rules (460 with conclusion selected). Queue: 8186 rules.
36600 rules inserted. Base: 21922 rules (461 with conclusion selected). Queue: 8186 rules.
36800 rules inserted. Base: 22021 rules (462 with conclusion selected). Queue: 8122 rules.
37000 rules inserted. Base: 22147 rules (462 with conclusion selected). Queue: 8122 rules.
37200 rules inserted. Base: 22276 rules (462 with conclusion selected). Queue: 8122 rules.
37400 rules inserted. Base: 22404 rules (463 with conclusion selected). Queue: 8122 rules.
37600 rules inserted. Base: 22485 rules (464 with conclusion selected). Queue: 8107 rules.
37800 rules inserted. Base: 22646 rules (464 with conclusion selected). Queue: 8058 rules.
38000 rules inserted. Base: 22795 rules (464 with conclusion selected). Queue: 8058 rules.
38200 rules inserted. Base: 22886 rules (464 with conclusion selected). Queue: 8058 rules.
38400 rules inserted. Base: 23016 rules (466 with conclusion selected). Queue: 8058 rules.
38600 rules inserted. Base: 23149 rules (466 with conclusion selected). Queue: 7994 rules.
38800 rules inserted. Base: 23256 rules (466 with conclusion selected). Queue: 7994 rules.
39000 rules inserted. Base: 23415 rules (470 with conclusion selected). Queue: 8005 rules.
39200 rules inserted. Base: 23561 rules (470 with conclusion selected). Queue: 7870 rules.
39400 rules inserted. Base: 23615 rules (470 with conclusion selected). Queue: 7870 rules.
39600 rules inserted. Base: 23713 rules (470 with conclusion selected). Queue: 7774 rules.
39800 rules inserted. Base: 23778 rules (470 with conclusion selected). Queue: 8339 rules.
40000 rules inserted. Base: 23866 rules (470 with conclusion selected). Queue: 8321 rules.
40200 rules inserted. Base: 23958 rules (470 with conclusion selected). Queue: 8302 rules.
40400 rules inserted. Base: 24017 rules (470 with conclusion selected). Queue: 8294 rules.
40600 rules inserted. Base: 24033 rules (470 with conclusion selected). Queue: 8292 rules.
40800 rules inserted. Base: 24044 rules (470 with conclusion selected). Queue: 8292 rules.
41000 rules inserted. Base: 24088 rules (470 with conclusion selected). Queue: 8289 rules.
41200 rules inserted. Base: 24179 rules (470 with conclusion selected). Queue: 8804 rules.
41400 rules inserted. Base: 24243 rules (470 with conclusion selected). Queue: 8828 rules.
41600 rules inserted. Base: 24309 rules (470 with conclusion selected). Queue: 8814 rules.
41800 rules inserted. Base: 24344 rules (470 with conclusion selected). Queue: 8808 rules.
42000 rules inserted. Base: 24432 rules (470 with conclusion selected). Queue: 8832 rules.
42200 rules inserted. Base: 24472 rules (470 with conclusion selected). Queue: 8830 rules.
42400 rules inserted. Base: 24538 rules (470 with conclusion selected). Queue: 8816 rules.
42600 rules inserted. Base: 24606 rules (470 with conclusion selected). Queue: 8761 rules.
42800 rules inserted. Base: 24716 rules (471 with conclusion selected). Queue: 8711 rules.
43000 rules inserted. Base: 24839 rules (472 with conclusion selected). Queue: 8618 rules.
43200 rules inserted. Base: 24917 rules (472 with conclusion selected). Queue: 8552 rules.
43400 rules inserted. Base: 24985 rules (472 with conclusion selected). Queue: 8550 rules.
43600 rules inserted. Base: 25097 rules (472 with conclusion selected). Queue: 8486 rules.
43800 rules inserted. Base: 25193 rules (472 with conclusion selected). Queue: 8390 rules.
44000 rules inserted. Base: 25197 rules (474 with conclusion selected). Queue: 8388 rules.
44200 rules inserted. Base: 25224 rules (474 with conclusion selected). Queue: 8379 rules.
44400 rules inserted. Base: 25299 rules (474 with conclusion selected). Queue: 8322 rules.
44600 rules inserted. Base: 25395 rules (474 with conclusion selected). Queue: 8226 rules.
44800 rules inserted. Base: 25399 rules (476 with conclusion selected). Queue: 8224 rules.
45000 rules inserted. Base: 25419 rules (476 with conclusion selected). Queue: 8222 rules.
45200 rules inserted. Base: 25501 rules (476 with conclusion selected). Queue: 8158 rules.
45400 rules inserted. Base: 25597 rules (476 with conclusion selected). Queue: 8062 rules.
45600 rules inserted. Base: 25598 rules (477 with conclusion selected). Queue: 8061 rules.
45800 rules inserted. Base: 25621 rules (478 with conclusion selected). Queue: 8058 rules.
46000 rules inserted. Base: 25698 rules (478 with conclusion selected). Queue: 7994 rules.
46200 rules inserted. Base: 25799 rules (478 with conclusion selected). Queue: 7898 rules.
46400 rules inserted. Base: 25800 rules (479 with conclusion selected). Queue: 7897 rules.
46600 rules inserted. Base: 25823 rules (480 with conclusion selected). Queue: 7894 rules.
46800 rules inserted. Base: 25896 rules (480 with conclusion selected). Queue: 7821 rules.
47000 rules inserted. Base: 26093 rules (480 with conclusion selected). Queue: 7628 rules.
47200 rules inserted. Base: 26110 rules (480 with conclusion selected). Queue: 7619 rules.
47400 rules inserted. Base: 26152 rules (480 with conclusion selected). Queue: 7617 rules.
47600 rules inserted. Base: 26160 rules (480 with conclusion selected). Queue: 7617 rules.
47800 rules inserted. Base: 26168 rules (480 with conclusion selected). Queue: 7617 rules.
48000 rules inserted. Base: 26176 rules (480 with conclusion selected). Queue: 7617 rules.
48200 rules inserted. Base: 26221 rules (480 with conclusion selected). Queue: 7649 rules.
48400 rules inserted. Base: 26282 rules (480 with conclusion selected). Queue: 7695 rules.
48600 rules inserted. Base: 26342 rules (480 with conclusion selected). Queue: 7737 rules.
48800 rules inserted. Base: 26433 rules (480 with conclusion selected). Queue: 7733 rules.
49000 rules inserted. Base: 26445 rules (480 with conclusion selected). Queue: 7733 rules.
49200 rules inserted. Base: 26487 rules (480 with conclusion selected). Queue: 7733 rules.
49400 rules inserted. Base: 26495 rules (480 with conclusion selected). Queue: 7731 rules.
49600 rules inserted. Base: 26503 rules (480 with conclusion selected). Queue: 7731 rules.
49800 rules inserted. Base: 26511 rules (480 with conclusion selected). Queue: 7731 rules.
50000 rules inserted. Base: 26530 rules (480 with conclusion selected). Queue: 7720 rules.
50200 rules inserted. Base: 26699 rules (480 with conclusion selected). Queue: 7663 rules.
50400 rules inserted. Base: 26736 rules (480 with conclusion selected). Queue: 7691 rules.
50600 rules inserted. Base: 26765 rules (480 with conclusion selected). Queue: 7711 rules.
50800 rules inserted. Base: 26940 rules (480 with conclusion selected). Queue: 7668 rules.
51000 rules inserted. Base: 27000 rules (480 with conclusion selected). Queue: 7683 rules.
51200 rules inserted. Base: 27044 rules (480 with conclusion selected). Queue: 7715 rules.
51400 rules inserted. Base: 27098 rules (480 with conclusion selected). Queue: 7721 rules.
51600 rules inserted. Base: 27187 rules (480 with conclusion selected). Queue: 7677 rules.
51800 rules inserted. Base: 27268 rules (480 with conclusion selected). Queue: 7656 rules.
52000 rules inserted. Base: 27370 rules (480 with conclusion selected). Queue: 7643 rules.
52200 rules inserted. Base: 27404 rules (480 with conclusion selected). Queue: 7630 rules.
52400 rules inserted. Base: 27466 rules (480 with conclusion selected). Queue: 7570 rules.
52600 rules inserted. Base: 27509 rules (480 with conclusion selected). Queue: 7531 rules.
52800 rules inserted. Base: 27545 rules (480 with conclusion selected). Queue: 7513 rules.
53000 rules inserted. Base: 27577 rules (480 with conclusion selected). Queue: 7481 rules.
53200 rules inserted. Base: 27659 rules (480 with conclusion selected). Queue: 7405 rules.
53400 rules inserted. Base: 27695 rules (480 with conclusion selected). Queue: 7387 rules.
53600 rules inserted. Base: 27729 rules (480 with conclusion selected). Queue: 7353 rules.
53800 rules inserted. Base: 27811 rules (480 with conclusion selected). Queue: 7277 rules.
54000 rules inserted. Base: 27847 rules (480 with conclusion selected). Queue: 7259 rules.
54200 rules inserted. Base: 27865 rules (480 with conclusion selected). Queue: 7241 rules.
54400 rules inserted. Base: 27948 rules (480 with conclusion selected). Queue: 7160 rules.
54600 rules inserted. Base: 27965 rules (480 with conclusion selected). Queue: 7147 rules.
54800 rules inserted. Base: 28140 rules (483 with conclusion selected). Queue: 6974 rules.
55000 rules inserted. Base: 28247 rules (483 with conclusion selected). Queue: 6950 rules.
55200 rules inserted. Base: 28275 rules (483 with conclusion selected). Queue: 6930 rules.
55400 rules inserted. Base: 28283 rules (483 with conclusion selected). Queue: 6930 rules.
55600 rules inserted. Base: 28291 rules (483 with conclusion selected). Queue: 6930 rules.
55800 rules inserted. Base: 28461 rules (483 with conclusion selected). Queue: 6855 rules.
56000 rules inserted. Base: 28651 rules (483 with conclusion selected). Queue: 6801 rules.
56200 rules inserted. Base: 28839 rules (483 with conclusion selected). Queue: 6744 rules.
56400 rules inserted. Base: 29029 rules (483 with conclusion selected). Queue: 6778 rules.
56600 rules inserted. Base: 29223 rules (483 with conclusion selected). Queue: 6641 rules.
56800 rules inserted. Base: 29415 rules (483 with conclusion selected). Queue: 6453 rules.
57000 rules inserted. Base: 29536 rules (483 with conclusion selected). Queue: 6414 rules.
57200 rules inserted. Base: 29641 rules (483 with conclusion selected). Queue: 6314 rules.
57400 rules inserted. Base: 29649 rules (483 with conclusion selected). Queue: 6314 rules.
57600 rules inserted. Base: 29657 rules (483 with conclusion selected). Queue: 6314 rules.
57800 rules inserted. Base: 29713 rules (483 with conclusion selected). Queue: 6311 rules.
58000 rules inserted. Base: 29890 rules (483 with conclusion selected). Queue: 6226 rules.
58200 rules inserted. Base: 30085 rules (483 with conclusion selected). Queue: 6104 rules.
58400 rules inserted. Base: 30259 rules (483 with conclusion selected). Queue: 6065 rules.
58600 rules inserted. Base: 30424 rules (483 with conclusion selected). Queue: 5990 rules.
58800 rules inserted. Base: 30614 rules (483 with conclusion selected). Queue: 5904 rules.
59000 rules inserted. Base: 30798 rules (483 with conclusion selected). Queue: 5818 rules.
59200 rules inserted. Base: 30842 rules (483 with conclusion selected). Queue: 5862 rules.
59400 rules inserted. Base: 30931 rules (483 with conclusion selected). Queue: 5922 rules.
59600 rules inserted. Base: 31036 rules (483 with conclusion selected). Queue: 5942 rules.
59800 rules inserted. Base: 31086 rules (483 with conclusion selected). Queue: 5920 rules.
60000 rules inserted. Base: 31126 rules (483 with conclusion selected). Queue: 5880 rules.
60200 rules inserted. Base: 31149 rules (483 with conclusion selected). Queue: 5860 rules.
60400 rules inserted. Base: 31154 rules (483 with conclusion selected). Queue: 5856 rules.
60600 rules inserted. Base: 31198 rules (483 with conclusion selected). Queue: 5814 rules.
60800 rules inserted. Base: 31218 rules (483 with conclusion selected). Queue: 5796 rules.
61000 rules inserted. Base: 31222 rules (483 with conclusion selected). Queue: 5792 rules.
61200 rules inserted. Base: 31270 rules (483 with conclusion selected). Queue: 5746 rules.
61400 rules inserted. Base: 31290 rules (483 with conclusion selected). Queue: 5728 rules.
61600 rules inserted. Base: 31334 rules (483 with conclusion selected). Queue: 5686 rules.
61800 rules inserted. Base: 31371 rules (485 with conclusion selected). Queue: 5872 rules.
62000 rules inserted. Base: 31562 rules (485 with conclusion selected). Queue: 5746 rules.
62200 rules inserted. Base: 31757 rules (485 with conclusion selected). Queue: 5554 rules.
62400 rules inserted. Base: 31951 rules (485 with conclusion selected). Queue: 5362 rules.
62600 rules inserted. Base: 32127 rules (485 with conclusion selected). Queue: 5215 rules.
62800 rules inserted. Base: 32253 rules (485 with conclusion selected). Queue: 5212 rules.
63000 rules inserted. Base: 32379 rules (485 with conclusion selected). Queue: 5209 rules.
63200 rules inserted. Base: 32547 rules (485 with conclusion selected). Queue: 5112 rules.
63400 rules inserted. Base: 32723 rules (485 with conclusion selected). Queue: 5251 rules.
63600 rules inserted. Base: 32919 rules (485 with conclusion selected). Queue: 5111 rules.
63800 rules inserted. Base: 33113 rules (485 with conclusion selected). Queue: 4919 rules.
64000 rules inserted. Base: 33308 rules (485 with conclusion selected). Queue: 4727 rules.
64200 rules inserted. Base: 33411 rules (485 with conclusion selected). Queue: 4679 rules.
64400 rules inserted. Base: 33537 rules (485 with conclusion selected). Queue: 4676 rules.
64600 rules inserted. Base: 33629 rules (485 with conclusion selected). Queue: 4659 rules.
64800 rules inserted. Base: 33755 rules (485 with conclusion selected). Queue: 4656 rules.
65000 rules inserted. Base: 33933 rules (485 with conclusion selected). Queue: 4718 rules.
65200 rules inserted. Base: 34117 rules (485 with conclusion selected). Queue: 4600 rules.
65400 rules inserted. Base: 34297 rules (485 with conclusion selected). Queue: 4744 rules.
65600 rules inserted. Base: 34453 rules (485 with conclusion selected). Queue: 4666 rules.
65800 rules inserted. Base: 34538 rules (485 with conclusion selected). Queue: 4582 rules.
66000 rules inserted. Base: 34636 rules (485 with conclusion selected). Queue: 4484 rules.
66200 rules inserted. Base: 34722 rules (485 with conclusion selected). Queue: 4402 rules.
66400 rules inserted. Base: 34777 rules (485 with conclusion selected). Queue: 4347 rules.
66600 rules inserted. Base: 34897 rules (485 with conclusion selected). Queue: 4231 rules.
66800 rules inserted. Base: 34906 rules (485 with conclusion selected). Queue: 4222 rules.
67000 rules inserted. Base: 35019 rules (485 with conclusion selected). Queue: 4113 rules.
67200 rules inserted. Base: 35090 rules (485 with conclusion selected). Queue: 4042 rules.
67400 rules inserted. Base: 35188 rules (485 with conclusion selected). Queue: 3944 rules.
67600 rules inserted. Base: 35329 rules (485 with conclusion selected). Queue: 3800 rules.
67800 rules inserted. Base: 35486 rules (485 with conclusion selected). Queue: 3906 rules.
68000 rules inserted. Base: 35560 rules (485 with conclusion selected). Queue: 3880 rules.
68200 rules inserted. Base: 35634 rules (485 with conclusion selected). Queue: 3854 rules.
68400 rules inserted. Base: 35767 rules (485 with conclusion selected). Queue: 3748 rules.
68600 rules inserted. Base: 35946 rules (485 with conclusion selected). Queue: 3580 rules.
68800 rules inserted. Base: 36127 rules (485 with conclusion selected). Queue: 3681 rules.
69000 rules inserted. Base: 36226 rules (485 with conclusion selected). Queue: 3646 rules.
69200 rules inserted. Base: 36367 rules (485 with conclusion selected). Queue: 3587 rules.
69400 rules inserted. Base: 36447 rules (485 with conclusion selected). Queue: 3560 rules.
69600 rules inserted. Base: 36592 rules (485 with conclusion selected). Queue: 3432 rules.
69800 rules inserted. Base: 36764 rules (485 with conclusion selected). Queue: 3516 rules.
70000 rules inserted. Base: 36936 rules (485 with conclusion selected). Queue: 3348 rules.
70200 rules inserted. Base: 37106 rules (485 with conclusion selected). Queue: 3216 rules.
70400 rules inserted. Base: 37299 rules (485 with conclusion selected). Queue: 3237 rules.
70600 rules inserted. Base: 37483 rules (485 with conclusion selected). Queue: 3049 rules.
70800 rules inserted. Base: 37673 rules (485 with conclusion selected). Queue: 2855 rules.
71000 rules inserted. Base: 37867 rules (485 with conclusion selected). Queue: 2661 rules.
71200 rules inserted. Base: 38051 rules (485 with conclusion selected). Queue: 2473 rules.
71400 rules inserted. Base: 38214 rules (487 with conclusion selected). Queue: 2302 rules.
71600 rules inserted. Base: 38352 rules (487 with conclusion selected). Queue: 2166 rules.
71800 rules inserted. Base: 38529 rules (487 with conclusion selected). Queue: 2048 rules.
72000 rules inserted. Base: 38701 rules (487 with conclusion selected). Queue: 1977 rules.
72200 rules inserted. Base: 38819 rules (487 with conclusion selected). Queue: 1922 rules.
72400 rules inserted. Base: 38977 rules (487 with conclusion selected). Queue: 1774 rules.
72600 rules inserted. Base: 39129 rules (487 with conclusion selected). Queue: 1675 rules.
72800 rules inserted. Base: 39277 rules (487 with conclusion selected). Queue: 1610 rules.
73000 rules inserted. Base: 39449 rules (487 with conclusion selected). Queue: 1539 rules.
73200 rules inserted. Base: 39568 rules (487 with conclusion selected). Queue: 1446 rules.
73400 rules inserted. Base: 39686 rules (487 with conclusion selected). Queue: 1310 rules.
73600 rules inserted. Base: 39851 rules (487 with conclusion selected). Queue: 1166 rules.
73800 rules inserted. Base: 39853 rules (489 with conclusion selected). Queue: 1115 rules.
74000 rules inserted. Base: 39965 rules (489 with conclusion selected). Queue: 1120 rules.
74200 rules inserted. Base: 40007 rules (489 with conclusion selected). Queue: 1095 rules.
74400 rules inserted. Base: 40124 rules (489 with conclusion selected). Queue: 1058 rules.
74600 rules inserted. Base: 40208 rules (489 with conclusion selected). Queue: 1054 rules.
74800 rules inserted. Base: 40178 rules (491 with conclusion selected). Queue: 1057 rules.
75000 rules inserted. Base: 40245 rules (491 with conclusion selected). Queue: 993 rules.
75200 rules inserted. Base: 40290 rules (491 with conclusion selected). Queue: 876 rules.
75400 rules inserted. Base: 40350 rules (491 with conclusion selected). Queue: 808 rules.
75600 rules inserted. Base: 40472 rules (491 with conclusion selected). Queue: 686 rules.
75800 rules inserted. Base: 40360 rules (491 with conclusion selected). Queue: 696 rules.
76000 rules inserted. Base: 40099 rules (495 with conclusion selected). Queue: 717 rules.
76200 rules inserted. Base: 39678 rules (495 with conclusion selected). Queue: 723 rules.
76400 rules inserted. Base: 39226 rules (495 with conclusion selected). Queue: 733 rules.
76600 rules inserted. Base: 38758 rules (505 with conclusion selected). Queue: 885 rules.
76800 rules inserted. Base: 38702 rules (505 with conclusion selected). Queue: 817 rules.
77000 rules inserted. Base: 38668 rules (537 with conclusion selected). Queue: 773 rules.
77200 rules inserted. Base: 38486 rules (539 with conclusion selected). Queue: 802 rules.
77400 rules inserted. Base: 38176 rules (547 with conclusion selected). Queue: 1049 rules.
77600 rules inserted. Base: 37753 rules (549 with conclusion selected). Queue: 1115 rules.
77800 rules inserted. Base: 37193 rules (549 with conclusion selected). Queue: 1115 rules.
78000 rules inserted. Base: 36821 rules (549 with conclusion selected). Queue: 1085 rules.
78200 rules inserted. Base: 36726 rules (555 with conclusion selected). Queue: 1275 rules.
78400 rules inserted. Base: 36858 rules (557 with conclusion selected). Queue: 1274 rules.
78600 rules inserted. Base: 36993 rules (560 with conclusion selected). Queue: 1272 rules.
78800 rules inserted. Base: 36523 rules (560 with conclusion selected). Queue: 1228 rules.
79000 rules inserted. Base: 36225 rules (564 with conclusion selected). Queue: 1198 rules.
79200 rules inserted. Base: 36050 rules (576 with conclusion selected). Queue: 1167 rules.
79400 rules inserted. Base: 36181 rules (581 with conclusion selected). Queue: 1174 rules.
79600 rules inserted. Base: 36380 rules (584 with conclusion selected). Queue: 1108 rules.
79800 rules inserted. Base: 36578 rules (585 with conclusion selected). Queue: 1043 rules.
80000 rules inserted. Base: 36683 rules (617 with conclusion selected). Queue: 987 rules.
80200 rules inserted. Base: 36790 rules (651 with conclusion selected). Queue: 1019 rules.
80400 rules inserted. Base: 36955 rules (661 with conclusion selected). Queue: 998 rules.
80600 rules inserted. Base: 37153 rules (662 with conclusion selected). Queue: 933 rules.
80800 rules inserted. Base: 37350 rules (663 with conclusion selected). Queue: 805 rules.
81000 rules inserted. Base: 37458 rules (663 with conclusion selected). Queue: 740 rules.
81200 rules inserted. Base: 37563 rules (663 with conclusion selected). Queue: 666 rules.
81400 rules inserted. Base: 37672 rules (664 with conclusion selected). Queue: 629 rules.
81600 rules inserted. Base: 37868 rules (664 with conclusion selected). Queue: 438 rules.
81800 rules inserted. Base: 37892 rules (664 with conclusion selected). Queue: 358 rules.
82000 rules inserted. Base: 37980 rules (697 with conclusion selected). Queue: 454 rules.
82200 rules inserted. Base: 37936 rules (699 with conclusion selected). Queue: 517 rules.
82400 rules inserted. Base: 38090 rules (713 with conclusion selected). Queue: 483 rules.
82600 rules inserted. Base: 38005 rules (727 with conclusion selected). Queue: 884 rules.
82800 rules inserted. Base: 38104 rules (737 with conclusion selected). Queue: 1488 rules.
83000 rules inserted. Base: 38162 rules (749 with conclusion selected). Queue: 1549 rules.
83200 rules inserted. Base: 38287 rules (753 with conclusion selected). Queue: 1806 rules.
83400 rules inserted. Base: 38351 rules (756 with conclusion selected). Queue: 1962 rules.
83600 rules inserted. Base: 38543 rules (757 with conclusion selected). Queue: 1992 rules.
83800 rules inserted. Base: 38743 rules (757 with conclusion selected). Queue: 1801 rules.
84000 rules inserted. Base: 38939 rules (757 with conclusion selected). Queue: 1614 rules.
84200 rules inserted. Base: 39139 rules (757 with conclusion selected). Queue: 1423 rules.
84400 rules inserted. Base: 39249 rules (763 with conclusion selected). Queue: 1496 rules.
84600 rules inserted. Base: 39379 rules (766 with conclusion selected). Queue: 1627 rules.
84800 rules inserted. Base: 39508 rules (768 with conclusion selected). Queue: 1756 rules.
85000 rules inserted. Base: 39637 rules (769 with conclusion selected). Queue: 1820 rules.
85200 rules inserted. Base: 39801 rules (770 with conclusion selected). Queue: 1885 rules.
85400 rules inserted. Base: 39933 rules (771 with conclusion selected). Queue: 1950 rules.
85600 rules inserted. Base: 40089 rules (771 with conclusion selected). Queue: 1950 rules.
85800 rules inserted. Base: 40185 rules (773 with conclusion selected). Queue: 1980 rules.
86000 rules inserted. Base: 40314 rules (774 with conclusion selected). Queue: 2044 rules.
86200 rules inserted. Base: 40463 rules (775 with conclusion selected). Queue: 2109 rules.
86400 rules inserted. Base: 40596 rules (776 with conclusion selected). Queue: 2174 rules.
86600 rules inserted. Base: 40760 rules (776 with conclusion selected). Queue: 2174 rules.
86800 rules inserted. Base: 40892 rules (777 with conclusion selected). Queue: 2239 rules.
87000 rules inserted. Base: 41050 rules (777 with conclusion selected). Queue: 2239 rules.
87200 rules inserted. Base: 41250 rules (777 with conclusion selected). Queue: 2239 rules.
87400 rules inserted. Base: 41450 rules (777 with conclusion selected). Queue: 2239 rules.
87600 rules inserted. Base: 41560 rules (793 with conclusion selected). Queue: 3563 rules.
87800 rules inserted. Base: 41671 rules (793 with conclusion selected). Queue: 3505 rules.
88000 rules inserted. Base: 41804 rules (794 with conclusion selected). Queue: 3570 rules.
88200 rules inserted. Base: 41964 rules (794 with conclusion selected). Queue: 3570 rules.
88400 rules inserted. Base: 42164 rules (794 with conclusion selected). Queue: 3570 rules.
88600 rules inserted. Base: 42364 rules (794 with conclusion selected). Queue: 3570 rules.
88800 rules inserted. Base: 42498 rules (794 with conclusion selected). Queue: 3570 rules.
89000 rules inserted. Base: 42698 rules (794 with conclusion selected). Queue: 3570 rules.
89200 rules inserted. Base: 42859 rules (794 with conclusion selected). Queue: 3570 rules.
89400 rules inserted. Base: 42959 rules (794 with conclusion selected). Queue: 3570 rules.
89600 rules inserted. Base: 43058 rules (794 with conclusion selected). Queue: 3570 rules.
89800 rules inserted. Base: 43238 rules (794 with conclusion selected). Queue: 3543 rules.
90000 rules inserted. Base: 43438 rules (794 with conclusion selected). Queue: 3360 rules.
90200 rules inserted. Base: 43638 rules (794 with conclusion selected). Queue: 3177 rules.
90400 rules inserted. Base: 43838 rules (794 with conclusion selected). Queue: 2994 rules.
90600 rules inserted. Base: 44028 rules (794 with conclusion selected). Queue: 2841 rules.
90800 rules inserted. Base: 44226 rules (794 with conclusion selected). Queue: 2679 rules.
91000 rules inserted. Base: 44418 rules (794 with conclusion selected). Queue: 2522 rules.
91200 rules inserted. Base: 44502 rules (802 with conclusion selected). Queue: 2510 rules.
91400 rules inserted. Base: 44554 rules (810 with conclusion selected). Queue: 2608 rules.
91600 rules inserted. Base: 44754 rules (810 with conclusion selected). Queue: 2608 rules.
91800 rules inserted. Base: 44876 rules (810 with conclusion selected). Queue: 2608 rules.
92000 rules inserted. Base: 44978 rules (810 with conclusion selected). Queue: 2608 rules.
92200 rules inserted. Base: 45094 rules (810 with conclusion selected). Queue: 2608 rules.
92400 rules inserted. Base: 45243 rules (810 with conclusion selected). Queue: 2608 rules.
92600 rules inserted. Base: 45344 rules (810 with conclusion selected). Queue: 2608 rules.
92800 rules inserted. Base: 45500 rules (810 with conclusion selected). Queue: 2608 rules.
93000 rules inserted. Base: 45634 rules (810 with conclusion selected). Queue: 2608 rules.
93200 rules inserted. Base: 45775 rules (810 with conclusion selected). Queue: 2608 rules.
93400 rules inserted. Base: 45904 rules (810 with conclusion selected). Queue: 2608 rules.
93600 rules inserted. Base: 46088 rules (818 with conclusion selected). Queue: 2657 rules.
93800 rules inserted. Base: 46228 rules (836 with conclusion selected). Queue: 2815 rules.
94000 rules inserted. Base: 46309 rules (850 with conclusion selected). Queue: 2908 rules.
94200 rules inserted. Base: 46408 rules (850 with conclusion selected). Queue: 2908 rules.
94400 rules inserted. Base: 46574 rules (850 with conclusion selected). Queue: 2908 rules.
94600 rules inserted. Base: 46716 rules (850 with conclusion selected). Queue: 2908 rules.
94800 rules inserted. Base: 46838 rules (850 with conclusion selected). Queue: 2908 rules.
95000 rules inserted. Base: 46939 rules (850 with conclusion selected). Queue: 2908 rules.
95200 rules inserted. Base: 47104 rules (850 with conclusion selected). Queue: 2908 rules.
95400 rules inserted. Base: 47203 rules (850 with conclusion selected). Queue: 2908 rules.
95600 rules inserted. Base: 47239 rules (850 with conclusion selected). Queue: 2908 rules.
95800 rules inserted. Base: 47287 rules (850 with conclusion selected). Queue: 2908 rules.
96000 rules inserted. Base: 47400 rules (850 with conclusion selected). Queue: 2933 rules.
96200 rules inserted. Base: 47600 rules (850 with conclusion selected). Queue: 2974 rules.
96400 rules inserted. Base: 47794 rules (858 with conclusion selected). Queue: 3024 rules.
96600 rules inserted. Base: 47960 rules (858 with conclusion selected). Queue: 3024 rules.
96800 rules inserted. Base: 48145 rules (866 with conclusion selected). Queue: 3072 rules.
97000 rules inserted. Base: 48294 rules (866 with conclusion selected). Queue: 3072 rules.
97200 rules inserted. Base: 48409 rules (866 with conclusion selected). Queue: 3072 rules.
97400 rules inserted. Base: 48457 rules (866 with conclusion selected). Queue: 3072 rules.
97600 rules inserted. Base: 48525 rules (866 with conclusion selected). Queue: 3072 rules.
97800 rules inserted. Base: 48582 rules (866 with conclusion selected). Queue: 3072 rules.
98000 rules inserted. Base: 48616 rules (866 with conclusion selected). Queue: 3072 rules.
98200 rules inserted. Base: 48657 rules (866 with conclusion selected). Queue: 3072 rules.
98400 rules inserted. Base: 48753 rules (866 with conclusion selected). Queue: 3040 rules.
98600 rules inserted. Base: 48854 rules (866 with conclusion selected). Queue: 3021 rules.
98800 rules inserted. Base: 48919 rules (866 with conclusion selected). Queue: 2972 rules.
99000 rules inserted. Base: 49008 rules (866 with conclusion selected). Queue: 2986 rules.
99200 rules inserted. Base: 49152 rules (866 with conclusion selected). Queue: 3044 rules.
99400 rules inserted. Base: 49332 rules (866 with conclusion selected). Queue: 3057 rules.
99600 rules inserted. Base: 49484 rules (866 with conclusion selected). Queue: 3088 rules.
99800 rules inserted. Base: 49660 rules (866 with conclusion selected). Queue: 3117 rules.
100000 rules inserted. Base: 49716 rules (866 with conclusion selected). Queue: 3116 rules.
100200 rules inserted. Base: 49771 rules (866 with conclusion selected). Queue: 3116 rules.
100400 rules inserted. Base: 49853 rules (866 with conclusion selected). Queue: 3098 rules.
100600 rules inserted. Base: 49953 rules (866 with conclusion selected). Queue: 3066 rules.
100800 rules inserted. Base: 50033 rules (866 with conclusion selected). Queue: 3016 rules.
101000 rules inserted. Base: 50090 rules (866 with conclusion selected). Queue: 2959 rules.
101200 rules inserted. Base: 50191 rules (866 with conclusion selected). Queue: 2940 rules.
101400 rules inserted. Base: 50231 rules (866 with conclusion selected). Queue: 2916 rules.
101600 rules inserted. Base: 50247 rules (866 with conclusion selected). Queue: 2916 rules.
101800 rules inserted. Base: 50313 rules (866 with conclusion selected). Queue: 2866 rules.
102000 rules inserted. Base: 50458 rules (866 with conclusion selected). Queue: 2933 rules.
102200 rules inserted. Base: 50634 rules (866 with conclusion selected). Queue: 3032 rules.
102400 rules inserted. Base: 50828 rules (866 with conclusion selected). Queue: 3093 rules.
102600 rules inserted. Base: 50975 rules (866 with conclusion selected). Queue: 3130 rules.
102800 rules inserted. Base: 51174 rules (866 with conclusion selected). Queue: 3244 rules.
103000 rules inserted. Base: 51338 rules (866 with conclusion selected). Queue: 3269 rules.
103200 rules inserted. Base: 51438 rules (866 with conclusion selected). Queue: 3240 rules.
103400 rules inserted. Base: 51515 rules (866 with conclusion selected). Queue: 3190 rules.
103600 rules inserted. Base: 51531 rules (866 with conclusion selected). Queue: 3190 rules.
103800 rules inserted. Base: 51561 rules (866 with conclusion selected). Queue: 3176 rules.
104000 rules inserted. Base: 51629 rules (866 with conclusion selected). Queue: 3140 rules.
104200 rules inserted. Base: 51648 rules (866 with conclusion selected). Queue: 3137 rules.
104400 rules inserted. Base: 51786 rules (866 with conclusion selected). Queue: 3026 rules.
104600 rules inserted. Base: 51920 rules (866 with conclusion selected). Queue: 2913 rules.
104800 rules inserted. Base: 52056 rules (866 with conclusion selected). Queue: 2912 rules.
105000 rules inserted. Base: 52240 rules (866 with conclusion selected). Queue: 2905 rules.
105200 rules inserted. Base: 52397 rules (866 with conclusion selected). Queue: 2904 rules.
105400 rules inserted. Base: 52524 rules (866 with conclusion selected). Queue: 2904 rules.
105600 rules inserted. Base: 52711 rules (866 with conclusion selected). Queue: 3018 rules.
105800 rules inserted. Base: 52802 rules (866 with conclusion selected). Queue: 3018 rules.
106000 rules inserted. Base: 52932 rules (866 with conclusion selected). Queue: 3018 rules.
106200 rules inserted. Base: 53092 rules (866 with conclusion selected). Queue: 3084 rules.
106400 rules inserted. Base: 53157 rules (866 with conclusion selected). Queue: 3132 rules.
106600 rules inserted. Base: 53203 rules (866 with conclusion selected). Queue: 3102 rules.
106800 rules inserted. Base: 53344 rules (866 with conclusion selected). Queue: 2993 rules.
107000 rules inserted. Base: 53467 rules (866 with conclusion selected). Queue: 2904 rules.
107200 rules inserted. Base: 53602 rules (866 with conclusion selected). Queue: 2801 rules.
107400 rules inserted. Base: 53710 rules (866 with conclusion selected). Queue: 2726 rules.
107600 rules inserted. Base: 53840 rules (866 with conclusion selected). Queue: 2662 rules.
107800 rules inserted. Base: 53984 rules (866 with conclusion selected). Queue: 2655 rules.
108000 rules inserted. Base: 54121 rules (866 with conclusion selected). Queue: 2646 rules.
108200 rules inserted. Base: 54169 rules (866 with conclusion selected). Queue: 2694 rules.
108400 rules inserted. Base: 54223 rules (866 with conclusion selected). Queue: 2710 rules.
108600 rules inserted. Base: 54352 rules (866 with conclusion selected). Queue: 2710 rules.
108800 rules inserted. Base: 54437 rules (866 with conclusion selected). Queue: 2686 rules.
109000 rules inserted. Base: 54484 rules (866 with conclusion selected). Queue: 2733 rules.
109200 rules inserted. Base: 54555 rules (866 with conclusion selected). Queue: 2742 rules.
109400 rules inserted. Base: 54688 rules (866 with conclusion selected). Queue: 2723 rules.
109600 rules inserted. Base: 54822 rules (866 with conclusion selected). Queue: 2621 rules.
109800 rules inserted. Base: 54927 rules (866 with conclusion selected). Queue: 2564 rules.
110000 rules inserted. Base: 55055 rules (866 with conclusion selected). Queue: 2500 rules.
110200 rules inserted. Base: 55212 rules (866 with conclusion selected). Queue: 2393 rules.
110400 rules inserted. Base: 55339 rules (866 with conclusion selected). Queue: 2348 rules.
110600 rules inserted. Base: 55456 rules (866 with conclusion selected). Queue: 2315 rules.
110800 rules inserted. Base: 55612 rules (866 with conclusion selected). Queue: 2372 rules.
111000 rules inserted. Base: 55765 rules (866 with conclusion selected). Queue: 2436 rules.
111200 rules inserted. Base: 55803 rules (866 with conclusion selected). Queue: 2468 rules.
111400 rules inserted. Base: 55859 rules (866 with conclusion selected). Queue: 2484 rules.
111600 rules inserted. Base: 56008 rules (866 with conclusion selected). Queue: 2532 rules.
111800 rules inserted. Base: 56157 rules (866 with conclusion selected). Queue: 2596 rules.
112000 rules inserted. Base: 56195 rules (866 with conclusion selected). Queue: 2628 rules.
112200 rules inserted. Base: 56243 rules (866 with conclusion selected). Queue: 2660 rules.
112400 rules inserted. Base: 56424 rules (866 with conclusion selected). Queue: 2532 rules.
112600 rules inserted. Base: 56560 rules (866 with conclusion selected). Queue: 2468 rules.
112800 rules inserted. Base: 56651 rules (868 with conclusion selected). Queue: 2518 rules.
113000 rules inserted. Base: 56753 rules (868 with conclusion selected). Queue: 2564 rules.
113200 rules inserted. Base: 56888 rules (868 with conclusion selected). Queue: 2564 rules.
113400 rules inserted. Base: 57041 rules (868 with conclusion selected). Queue: 2564 rules.
113600 rules inserted. Base: 57112 rules (868 with conclusion selected). Queue: 2612 rules.
113800 rules inserted. Base: 57268 rules (868 with conclusion selected). Queue: 2684 rules.
114000 rules inserted. Base: 57409 rules (868 with conclusion selected). Queue: 2660 rules.
114200 rules inserted. Base: 57543 rules (868 with conclusion selected). Queue: 2660 rules.
114400 rules inserted. Base: 57659 rules (868 with conclusion selected). Queue: 2660 rules.
114600 rules inserted. Base: 57775 rules (868 with conclusion selected). Queue: 2724 rules.
114800 rules inserted. Base: 57918 rules (868 with conclusion selected). Queue: 2787 rules.
115000 rules inserted. Base: 58042 rules (868 with conclusion selected). Queue: 2722 rules.
115200 rules inserted. Base: 58137 rules (868 with conclusion selected). Queue: 2647 rules.
115400 rules inserted. Base: 58241 rules (876 with conclusion selected). Queue: 2559 rules.
115600 rules inserted. Base: 58324 rules (884 with conclusion selected). Queue: 2515 rules.
115800 rules inserted. Base: 58404 rules (884 with conclusion selected). Queue: 2515 rules.
116000 rules inserted. Base: 58483 rules (884 with conclusion selected). Queue: 2511 rules.
116200 rules inserted. Base: 58573 rules (884 with conclusion selected). Queue: 2499 rules.
116400 rules inserted. Base: 58706 rules (884 with conclusion selected). Queue: 2499 rules.
116600 rules inserted. Base: 58823 rules (884 with conclusion selected). Queue: 2467 rules.
116800 rules inserted. Base: 58920 rules (884 with conclusion selected). Queue: 2467 rules.
117000 rules inserted. Base: 59013 rules (884 with conclusion selected). Queue: 2467 rules.
117200 rules inserted. Base: 59070 rules (884 with conclusion selected). Queue: 2451 rules.
117400 rules inserted. Base: 59197 rules (884 with conclusion selected). Queue: 2451 rules.
117600 rules inserted. Base: 59336 rules (884 with conclusion selected). Queue: 2451 rules.
117800 rules inserted. Base: 59424 rules (884 with conclusion selected). Queue: 2382 rules.
118000 rules inserted. Base: 59124 rules (884 with conclusion selected). Queue: 2389 rules.
118200 rules inserted. Base: 59194 rules (884 with conclusion selected). Queue: 2383 rules.
118400 rules inserted. Base: 59337 rules (884 with conclusion selected). Queue: 2377 rules.
118600 rules inserted. Base: 59437 rules (884 with conclusion selected). Queue: 2373 rules.
118800 rules inserted. Base: 59502 rules (884 with conclusion selected). Queue: 2373 rules.
119000 rules inserted. Base: 59593 rules (884 with conclusion selected). Queue: 2373 rules.
119200 rules inserted. Base: 59740 rules (884 with conclusion selected). Queue: 2367 rules.
119400 rules inserted. Base: 59881 rules (884 with conclusion selected). Queue: 2361 rules.
119600 rules inserted. Base: 59981 rules (884 with conclusion selected). Queue: 2357 rules.
119800 rules inserted. Base: 60054 rules (884 with conclusion selected). Queue: 2357 rules.
120000 rules inserted. Base: 60139 rules (884 with conclusion selected). Queue: 2357 rules.
120200 rules inserted. Base: 60247 rules (884 with conclusion selected). Queue: 2278 rules.
120400 rules inserted. Base: 60356 rules (884 with conclusion selected). Queue: 2169 rules.
120600 rules inserted. Base: 60429 rules (884 with conclusion selected). Queue: 2155 rules.
120800 rules inserted. Base: 60501 rules (884 with conclusion selected). Queue: 2153 rules.
121000 rules inserted. Base: 60570 rules (884 with conclusion selected). Queue: 2144 rules.
121200 rules inserted. Base: 60703 rules (884 with conclusion selected). Queue: 2138 rules.
121400 rules inserted. Base: 60851 rules (884 with conclusion selected). Queue: 2131 rules.
121600 rules inserted. Base: 60923 rules (884 with conclusion selected). Queue: 2127 rules.
121800 rules inserted. Base: 60995 rules (884 with conclusion selected). Queue: 2125 rules.
122000 rules inserted. Base: 61070 rules (884 with conclusion selected). Queue: 2115 rules.
122200 rules inserted. Base: 61199 rules (884 with conclusion selected). Queue: 2109 rules.
122400 rules inserted. Base: 61333 rules (884 with conclusion selected). Queue: 2102 rules.
122600 rules inserted. Base: 61066 rules (885 with conclusion selected). Queue: 2061 rules.
122800 rules inserted. Base: 61160 rules (885 with conclusion selected). Queue: 2025 rules.
123000 rules inserted. Base: 61253 rules (885 with conclusion selected). Queue: 1996 rules.
123200 rules inserted. Base: 61329 rules (885 with conclusion selected). Queue: 1992 rules.
123400 rules inserted. Base: 61400 rules (885 with conclusion selected). Queue: 1989 rules.
123600 rules inserted. Base: 61487 rules (885 with conclusion selected). Queue: 1975 rules.
123800 rules inserted. Base: 61579 rules (885 with conclusion selected). Queue: 1945 rules.
124000 rules inserted. Base: 61669 rules (885 with conclusion selected). Queue: 1910 rules.
124200 rules inserted. Base: 61750 rules (885 with conclusion selected). Queue: 1914 rules.
124400 rules inserted. Base: 61808 rules (885 with conclusion selected). Queue: 1909 rules.
124600 rules inserted. Base: 61734 rules (886 with conclusion selected). Queue: 1863 rules.
124800 rules inserted. Base: 61683 rules (886 with conclusion selected). Queue: 1795 rules.
125000 rules inserted. Base: 61766 rules (886 with conclusion selected). Queue: 1724 rules.
125200 rules inserted. Base: 61871 rules (886 with conclusion selected). Queue: 1690 rules.
125400 rules inserted. Base: 61961 rules (886 with conclusion selected). Queue: 1652 rules.
125600 rules inserted. Base: 62061 rules (886 with conclusion selected). Queue: 1599 rules.
125800 rules inserted. Base: 62143 rules (886 with conclusion selected). Queue: 1532 rules.
126000 rules inserted. Base: 62246 rules (886 with conclusion selected). Queue: 1476 rules.
126200 rules inserted. Base: 62334 rules (886 with conclusion selected). Queue: 1444 rules.
126400 rules inserted. Base: 62425 rules (886 with conclusion selected). Queue: 1408 rules.
126600 rules inserted. Base: 62374 rules (950 with conclusion selected). Queue: 1794 rules.
126800 rules inserted. Base: 62478 rules (950 with conclusion selected). Queue: 1729 rules.
127000 rules inserted. Base: 62562 rules (950 with conclusion selected). Queue: 1657 rules.
127200 rules inserted. Base: 62640 rules (950 with conclusion selected). Queue: 1698 rules.
127400 rules inserted. Base: 62731 rules (950 with conclusion selected). Queue: 1634 rules.
127600 rules inserted. Base: 62826 rules (950 with conclusion selected). Queue: 1566 rules.
127800 rules inserted. Base: 62909 rules (950 with conclusion selected). Queue: 1498 rules.
128000 rules inserted. Base: 62994 rules (954 with conclusion selected). Queue: 1407 rules.
128200 rules inserted. Base: 63194 rules (954 with conclusion selected). Queue: 1287 rules.
128400 rules inserted. Base: 63394 rules (954 with conclusion selected). Queue: 1151 rules.
128600 rules inserted. Base: 63543 rules (954 with conclusion selected). Queue: 1044 rules.
128800 rules inserted. Base: 63653 rules (954 with conclusion selected). Queue: 974 rules.
129000 rules inserted. Base: 63846 rules (954 with conclusion selected). Queue: 877 rules.
129200 rules inserted. Base: 63957 rules (954 with conclusion selected). Queue: 808 rules.
129400 rules inserted. Base: 64008 rules (956 with conclusion selected). Queue: 702 rules.
129600 rules inserted. Base: 64208 rules (956 with conclusion selected). Queue: 573 rules.
129800 rules inserted. Base: 64399 rules (956 with conclusion selected). Queue: 422 rules.
130000 rules inserted. Base: 64596 rules (956 with conclusion selected). Queue: 269 rules.
130200 rules inserted. Base: 64765 rules (958 with conclusion selected). Queue: 201 rules.
130400 rules inserted. Base: 64918 rules (958 with conclusion selected). Queue: 194 rules.
130600 rules inserted. Base: 65041 rules (958 with conclusion selected). Queue: 176 rules.
130800 rules inserted. Base: 65161 rules (958 with conclusion selected). Queue: 512 rules.
131000 rules inserted. Base: 65301 rules (960 with conclusion selected). Queue: 448 rules.
131200 rules inserted. Base: 65322 rules (960 with conclusion selected). Queue: 520 rules.
131400 rules inserted. Base: 65479 rules (960 with conclusion selected). Queue: 448 rules.
131600 rules inserted. Base: 65611 rules (963 with conclusion selected). Queue: 422 rules.
131800 rules inserted. Base: 65619 rules (967 with conclusion selected). Queue: 336 rules.
132000 rules inserted. Base: 65760 rules (969 with conclusion selected). Queue: 197 rules.
132200 rules inserted. Base: 65683 rules (970 with conclusion selected). Queue: 202 rules.
132400 rules inserted. Base: 65587 rules (974 with conclusion selected). Queue: 228 rules.
132600 rules inserted. Base: 65591 rules (978 with conclusion selected). Queue: 282 rules.
132800 rules inserted. Base: 65525 rules (980 with conclusion selected). Queue: 256 rules.
133000 rules inserted. Base: 65424 rules (982 with conclusion selected). Queue: 231 rules.
133200 rules inserted. Base: 65149 rules (982 with conclusion selected). Queue: 188 rules.
133400 rules inserted. Base: 64566 rules (982 with conclusion selected). Queue: 151 rules.
133600 rules inserted. Base: 64208 rules (1000 with conclusion selected). Queue: 273 rules.
133800 rules inserted. Base: 64036 rules (1004 with conclusion selected). Queue: 332 rules.
134000 rules inserted. Base: 64051 rules (1012 with conclusion selected). Queue: 360 rules.
134200 rules inserted. Base: 64058 rules (1022 with conclusion selected). Queue: 435 rules.
134400 rules inserted. Base: 64226 rules (1030 with conclusion selected). Queue: 503 rules.
134600 rules inserted. Base: 64394 rules (1030 with conclusion selected). Queue: 482 rules.
134800 rules inserted. Base: 64514 rules (1042 with conclusion selected). Queue: 547 rules.
135000 rules inserted. Base: 64666 rules (1042 with conclusion selected). Queue: 459 rules.
135200 rules inserted. Base: 64794 rules (1046 with conclusion selected). Queue: 434 rules.
135400 rules inserted. Base: 64973 rules (1050 with conclusion selected). Queue: 320 rules.
135600 rules inserted. Base: 65130 rules (1054 with conclusion selected). Queue: 225 rules.
135800 rules inserted. Base: 65189 rules (1054 with conclusion selected). Queue: 168 rules.
136000 rules inserted. Base: 65207 rules (1058 with conclusion selected). Queue: 132 rules.
136200 rules inserted. Base: 65140 rules (1072 with conclusion selected). Queue: 419 rules.
136400 rules inserted. Base: 65170 rules (1078 with conclusion selected). Queue: 560 rules.
136600 rules inserted. Base: 65334 rules (1082 with conclusion selected). Queue: 600 rules.
136800 rules inserted. Base: 65483 rules (1085 with conclusion selected). Queue: 619 rules.
137000 rules inserted. Base: 65634 rules (1086 with conclusion selected). Queue: 576 rules.
137200 rules inserted. Base: 65747 rules (1086 with conclusion selected). Queue: 560 rules.
137400 rules inserted. Base: 65890 rules (1086 with conclusion selected). Queue: 512 rules.
137600 rules inserted. Base: 65995 rules (1086 with conclusion selected). Queue: 448 rules.
137800 rules inserted. Base: 66120 rules (1086 with conclusion selected). Queue: 357 rules.
138000 rules inserted. Base: 66237 rules (1086 with conclusion selected). Queue: 288 rules.
138200 rules inserted. Base: 66304 rules (1086 with conclusion selected). Queue: 221 rules.
138400 rules inserted. Base: 66426 rules (1086 with conclusion selected). Queue: 99 rules.
Starting query inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_104,m_105,m_106,m_107,m_vpr)) && inj-event(verifierInConeOfUser(m_104,m_105,m_106,m_107))
RESULT inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_104,m_105,m_106,m_107,m_vpr)) && inj-event(verifierInConeOfUser(m_104,m_105,m_106,m_107)) is true.
-- Query inj-event(auth_AppCompletesProtocol(m_104,m_105,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_106,m_107,m_vp,m_accesstoken)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accesstoken)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (120 with conclusion selected). Queue: 501 rules.
400 rules inserted. Base: 400 rules (120 with conclusion selected). Queue: 613 rules.
600 rules inserted. Base: 600 rules (120 with conclusion selected). Queue: 615 rules.
800 rules inserted. Base: 799 rules (126 with conclusion selected). Queue: 590 rules.
1000 rules inserted. Base: 999 rules (126 with conclusion selected). Queue: 582 rules.
1200 rules inserted. Base: 1174 rules (126 with conclusion selected). Queue: 578 rules.
1400 rules inserted. Base: 1333 rules (128 with conclusion selected). Queue: 610 rules.
1600 rules inserted. Base: 1501 rules (128 with conclusion selected). Queue: 670 rules.
1800 rules inserted. Base: 1667 rules (128 with conclusion selected). Queue: 670 rules.
2000 rules inserted. Base: 1771 rules (160 with conclusion selected). Queue: 1102 rules.
2200 rules inserted. Base: 1861 rules (192 with conclusion selected). Queue: 1146 rules.
2400 rules inserted. Base: 2019 rules (192 with conclusion selected). Queue: 1222 rules.
2600 rules inserted. Base: 2207 rules (194 with conclusion selected). Queue: 1252 rules.
2800 rules inserted. Base: 2375 rules (194 with conclusion selected). Queue: 1296 rules.
3000 rules inserted. Base: 2543 rules (194 with conclusion selected). Queue: 1328 rules.
3200 rules inserted. Base: 2743 rules (198 with conclusion selected). Queue: 1384 rules.
3400 rules inserted. Base: 2909 rules (198 with conclusion selected). Queue: 1420 rules.
3600 rules inserted. Base: 2972 rules (198 with conclusion selected). Queue: 1420 rules.
3800 rules inserted. Base: 3131 rules (200 with conclusion selected). Queue: 1499 rules.
4000 rules inserted. Base: 3282 rules (200 with conclusion selected). Queue: 1460 rules.
4200 rules inserted. Base: 3461 rules (200 with conclusion selected). Queue: 1458 rules.
4400 rules inserted. Base: 3578 rules (200 with conclusion selected). Queue: 1402 rules.
4600 rules inserted. Base: 3713 rules (204 with conclusion selected). Queue: 1666 rules.
4800 rules inserted. Base: 3829 rules (204 with conclusion selected). Queue: 1596 rules.
5000 rules inserted. Base: 3984 rules (204 with conclusion selected). Queue: 1441 rules.
5200 rules inserted. Base: 4160 rules (204 with conclusion selected). Queue: 1474 rules.
5400 rules inserted. Base: 4348 rules (204 with conclusion selected). Queue: 1506 rules.
5600 rules inserted. Base: 4525 rules (204 with conclusion selected). Queue: 1506 rules.
5800 rules inserted. Base: 4698 rules (204 with conclusion selected). Queue: 1539 rules.
6000 rules inserted. Base: 4809 rules (204 with conclusion selected). Queue: 1532 rules.
6200 rules inserted. Base: 4928 rules (204 with conclusion selected). Queue: 1571 rules.
6400 rules inserted. Base: 5060 rules (204 with conclusion selected). Queue: 1649 rules.
6600 rules inserted. Base: 5239 rules (204 with conclusion selected). Queue: 1920 rules.
6800 rules inserted. Base: 5336 rules (204 with conclusion selected). Queue: 1879 rules.
7000 rules inserted. Base: 5421 rules (204 with conclusion selected). Queue: 1827 rules.
7200 rules inserted. Base: 5498 rules (204 with conclusion selected). Queue: 1765 rules.
7400 rules inserted. Base: 5603 rules (204 with conclusion selected). Queue: 1712 rules.
7600 rules inserted. Base: 5724 rules (204 with conclusion selected). Queue: 1671 rules.
7800 rules inserted. Base: 5909 rules (204 with conclusion selected). Queue: 1610 rules.
8000 rules inserted. Base: 5960 rules (204 with conclusion selected). Queue: 1598 rules.
8200 rules inserted. Base: 5972 rules (204 with conclusion selected). Queue: 1622 rules.
8400 rules inserted. Base: 6011 rules (204 with conclusion selected). Queue: 1640 rules.
8600 rules inserted. Base: 6107 rules (204 with conclusion selected). Queue: 1640 rules.
8800 rules inserted. Base: 6235 rules (204 with conclusion selected). Queue: 1640 rules.
9000 rules inserted. Base: 6373 rules (204 with conclusion selected). Queue: 1640 rules.
9200 rules inserted. Base: 6455 rules (204 with conclusion selected). Queue: 1638 rules.
9400 rules inserted. Base: 6537 rules (204 with conclusion selected). Queue: 1636 rules.
9600 rules inserted. Base: 6537 rules (204 with conclusion selected). Queue: 1636 rules.
9800 rules inserted. Base: 6537 rules (204 with conclusion selected). Queue: 1636 rules.
10000 rules inserted. Base: 6565 rules (204 with conclusion selected). Queue: 1608 rules.
10200 rules inserted. Base: 6697 rules (204 with conclusion selected). Queue: 1516 rules.
10400 rules inserted. Base: 6813 rules (204 with conclusion selected). Queue: 1382 rules.
10600 rules inserted. Base: 6966 rules (204 with conclusion selected). Queue: 1218 rules.
10800 rules inserted. Base: 6959 rules (211 with conclusion selected). Queue: 1296 rules.
11000 rules inserted. Base: 6982 rules (211 with conclusion selected). Queue: 1286 rules.
11200 rules inserted. Base: 6973 rules (218 with conclusion selected). Queue: 1252 rules.
11400 rules inserted. Base: 6881 rules (224 with conclusion selected). Queue: 1252 rules.
11600 rules inserted. Base: 6789 rules (228 with conclusion selected). Queue: 1253 rules.
11800 rules inserted. Base: 6971 rules (230 with conclusion selected). Queue: 1273 rules.
12000 rules inserted. Base: 7157 rules (246 with conclusion selected). Queue: 1437 rules.
12200 rules inserted. Base: 7245 rules (247 with conclusion selected). Queue: 1385 rules.
12400 rules inserted. Base: 7355 rules (262 with conclusion selected). Queue: 1396 rules.
12600 rules inserted. Base: 7555 rules (277 with conclusion selected). Queue: 1427 rules.
12800 rules inserted. Base: 7755 rules (293 with conclusion selected). Queue: 1553 rules.
13000 rules inserted. Base: 7809 rules (301 with conclusion selected). Queue: 1703 rules.
13200 rules inserted. Base: 7941 rules (302 with conclusion selected). Queue: 1745 rules.
13400 rules inserted. Base: 8129 rules (304 with conclusion selected). Queue: 1901 rules.
13600 rules inserted. Base: 8152 rules (304 with conclusion selected). Queue: 1908 rules.
13800 rules inserted. Base: 8306 rules (311 with conclusion selected). Queue: 2273 rules.
14000 rules inserted. Base: 8502 rules (314 with conclusion selected). Queue: 2441 rules.
14200 rules inserted. Base: 8698 rules (317 with conclusion selected). Queue: 2610 rules.
14400 rules inserted. Base: 8894 rules (320 with conclusion selected). Queue: 2779 rules.
14600 rules inserted. Base: 8993 rules (322 with conclusion selected). Queue: 2933 rules.
14800 rules inserted. Base: 9057 rules (323 with conclusion selected). Queue: 3080 rules.
15000 rules inserted. Base: 9208 rules (323 with conclusion selected). Queue: 3018 rules.
15200 rules inserted. Base: 9308 rules (324 with conclusion selected). Queue: 3174 rules.
15400 rules inserted. Base: 9476 rules (324 with conclusion selected). Queue: 3106 rules.
15600 rules inserted. Base: 9675 rules (325 with conclusion selected). Queue: 3090 rules.
15800 rules inserted. Base: 9759 rules (326 with conclusion selected). Queue: 3213 rules.
16000 rules inserted. Base: 9844 rules (328 with conclusion selected). Queue: 3349 rules.
16200 rules inserted. Base: 10006 rules (330 with conclusion selected). Queue: 3651 rules.
16400 rules inserted. Base: 10121 rules (333 with conclusion selected). Queue: 3963 rules.
16600 rules inserted. Base: 10267 rules (333 with conclusion selected). Queue: 3961 rules.
16800 rules inserted. Base: 10401 rules (336 with conclusion selected). Queue: 4272 rules.
17000 rules inserted. Base: 10499 rules (336 with conclusion selected). Queue: 4271 rules.
17200 rules inserted. Base: 10682 rules (339 with conclusion selected). Queue: 4582 rules.
17400 rules inserted. Base: 10764 rules (341 with conclusion selected). Queue: 4736 rules.
17600 rules inserted. Base: 10786 rules (341 with conclusion selected). Queue: 4736 rules.
17800 rules inserted. Base: 10857 rules (341 with conclusion selected). Queue: 4736 rules.
18000 rules inserted. Base: 10984 rules (341 with conclusion selected). Queue: 4736 rules.
18200 rules inserted. Base: 11070 rules (341 with conclusion selected). Queue: 4746 rules.
18400 rules inserted. Base: 11103 rules (341 with conclusion selected). Queue: 4755 rules.
18600 rules inserted. Base: 11159 rules (341 with conclusion selected). Queue: 4755 rules.
18800 rules inserted. Base: 11229 rules (341 with conclusion selected). Queue: 4787 rules.
19000 rules inserted. Base: 11314 rules (341 with conclusion selected). Queue: 4787 rules.
19200 rules inserted. Base: 11396 rules (342 with conclusion selected). Queue: 4754 rules.
19400 rules inserted. Base: 11482 rules (342 with conclusion selected). Queue: 4764 rules.
19600 rules inserted. Base: 11558 rules (343 with conclusion selected). Queue: 4774 rules.
19800 rules inserted. Base: 11606 rules (343 with conclusion selected). Queue: 4806 rules.
20000 rules inserted. Base: 11698 rules (343 with conclusion selected). Queue: 4788 rules.
20200 rules inserted. Base: 11771 rules (344 with conclusion selected). Queue: 4787 rules.
20400 rules inserted. Base: 11827 rules (344 with conclusion selected). Queue: 4819 rules.
20600 rules inserted. Base: 11933 rules (344 with conclusion selected). Queue: 4787 rules.
20800 rules inserted. Base: 11992 rules (345 with conclusion selected). Queue: 4800 rules.
21000 rules inserted. Base: 12064 rules (345 with conclusion selected). Queue: 4832 rules.
21200 rules inserted. Base: 12186 rules (345 with conclusion selected). Queue: 4800 rules.
21400 rules inserted. Base: 12244 rules (345 with conclusion selected). Queue: 4814 rules.
21600 rules inserted. Base: 12317 rules (346 with conclusion selected). Queue: 4813 rules.
21800 rules inserted. Base: 12376 rules (346 with conclusion selected). Queue: 4836 rules.
22000 rules inserted. Base: 12462 rules (346 with conclusion selected). Queue: 4827 rules.
22200 rules inserted. Base: 12514 rules (347 with conclusion selected). Queue: 4826 rules.
22400 rules inserted. Base: 12532 rules (351 with conclusion selected). Queue: 4935 rules.
22600 rules inserted. Base: 12625 rules (351 with conclusion selected). Queue: 4903 rules.
22800 rules inserted. Base: 12658 rules (351 with conclusion selected). Queue: 4901 rules.
23000 rules inserted. Base: 12764 rules (351 with conclusion selected). Queue: 4869 rules.
23200 rules inserted. Base: 12797 rules (383 with conclusion selected). Queue: 5099 rules.
23400 rules inserted. Base: 12853 rules (383 with conclusion selected). Queue: 5067 rules.
23600 rules inserted. Base: 12953 rules (383 with conclusion selected). Queue: 5035 rules.
23800 rules inserted. Base: 13015 rules (384 with conclusion selected). Queue: 5026 rules.
24000 rules inserted. Base: 13126 rules (384 with conclusion selected). Queue: 5003 rules.
24200 rules inserted. Base: 13232 rules (384 with conclusion selected). Queue: 4971 rules.
24400 rules inserted. Base: 13338 rules (386 with conclusion selected). Queue: 4952 rules.
24600 rules inserted. Base: 13408 rules (386 with conclusion selected). Queue: 4952 rules.
24800 rules inserted. Base: 13518 rules (386 with conclusion selected). Queue: 4920 rules.
25000 rules inserted. Base: 13620 rules (386 with conclusion selected). Queue: 4908 rules.
25200 rules inserted. Base: 13690 rules (386 with conclusion selected). Queue: 4902 rules.
25400 rules inserted. Base: 13776 rules (386 with conclusion selected). Queue: 4902 rules.
25600 rules inserted. Base: 13888 rules (386 with conclusion selected). Queue: 4870 rules.
25800 rules inserted. Base: 13994 rules (386 with conclusion selected). Queue: 4852 rules.
26000 rules inserted. Base: 14104 rules (386 with conclusion selected). Queue: 4852 rules.
26200 rules inserted. Base: 14208 rules (386 with conclusion selected). Queue: 4820 rules.
26400 rules inserted. Base: 14322 rules (386 with conclusion selected). Queue: 4802 rules.
26600 rules inserted. Base: 14375 rules (386 with conclusion selected). Queue: 4802 rules.
26800 rules inserted. Base: 14474 rules (386 with conclusion selected). Queue: 4792 rules.
27000 rules inserted. Base: 14560 rules (386 with conclusion selected). Queue: 4770 rules.
27200 rules inserted. Base: 14612 rules (393 with conclusion selected). Queue: 4897 rules.
27400 rules inserted. Base: 14808 rules (398 with conclusion selected). Queue: 5024 rules.
27600 rules inserted. Base: 14848 rules (422 with conclusion selected). Queue: 5347 rules.
27800 rules inserted. Base: 14976 rules (430 with conclusion selected). Queue: 5519 rules.
28000 rules inserted. Base: 15054 rules (430 with conclusion selected). Queue: 5600 rules.
28200 rules inserted. Base: 15149 rules (446 with conclusion selected). Queue: 5820 rules.
28400 rules inserted. Base: 15258 rules (462 with conclusion selected). Queue: 6046 rules.
28600 rules inserted. Base: 15328 rules (463 with conclusion selected). Queue: 6046 rules.
28800 rules inserted. Base: 15382 rules (465 with conclusion selected). Queue: 6007 rules.
29000 rules inserted. Base: 15456 rules (465 with conclusion selected). Queue: 5981 rules.
29200 rules inserted. Base: 15594 rules (465 with conclusion selected). Queue: 5917 rules.
29400 rules inserted. Base: 15682 rules (466 with conclusion selected). Queue: 5916 rules.
29600 rules inserted. Base: 15756 rules (468 with conclusion selected). Queue: 5916 rules.
29800 rules inserted. Base: 15892 rules (468 with conclusion selected). Queue: 5852 rules.
30000 rules inserted. Base: 15988 rules (468 with conclusion selected). Queue: 5852 rules.
30200 rules inserted. Base: 16062 rules (470 with conclusion selected). Queue: 5852 rules.
30400 rules inserted. Base: 16198 rules (470 with conclusion selected). Queue: 5788 rules.
30600 rules inserted. Base: 16294 rules (470 with conclusion selected). Queue: 5788 rules.
30800 rules inserted. Base: 16366 rules (471 with conclusion selected). Queue: 5788 rules.
31000 rules inserted. Base: 16498 rules (472 with conclusion selected). Queue: 5724 rules.
31200 rules inserted. Base: 16600 rules (472 with conclusion selected). Queue: 5724 rules.
31400 rules inserted. Base: 16653 rules (473 with conclusion selected). Queue: 5724 rules.
31600 rules inserted. Base: 16778 rules (474 with conclusion selected). Queue: 5660 rules.
31800 rules inserted. Base: 16837 rules (474 with conclusion selected). Queue: 5657 rules.
32000 rules inserted. Base: 17014 rules (482 with conclusion selected). Queue: 5722 rules.
32200 rules inserted. Base: 17211 rules (482 with conclusion selected). Queue: 5532 rules.
32400 rules inserted. Base: 17316 rules (482 with conclusion selected). Queue: 5462 rules.
32600 rules inserted. Base: 17430 rules (482 with conclusion selected). Queue: 5579 rules.
32800 rules inserted. Base: 17500 rules (482 with conclusion selected). Queue: 5557 rules.
33000 rules inserted. Base: 17585 rules (482 with conclusion selected). Queue: 5530 rules.
33200 rules inserted. Base: 17631 rules (482 with conclusion selected). Queue: 5522 rules.
33400 rules inserted. Base: 17694 rules (482 with conclusion selected). Queue: 5485 rules.
33600 rules inserted. Base: 17752 rules (482 with conclusion selected). Queue: 5681 rules.
33800 rules inserted. Base: 17803 rules (482 with conclusion selected). Queue: 5679 rules.
34000 rules inserted. Base: 17878 rules (482 with conclusion selected). Queue: 5666 rules.
34200 rules inserted. Base: 17942 rules (482 with conclusion selected). Queue: 5668 rules.
34400 rules inserted. Base: 18000 rules (482 with conclusion selected). Queue: 5650 rules.
34600 rules inserted. Base: 18127 rules (483 with conclusion selected). Queue: 5553 rules.
34800 rules inserted. Base: 18243 rules (484 with conclusion selected). Queue: 5452 rules.
35000 rules inserted. Base: 18324 rules (484 with conclusion selected). Queue: 5384 rules.
35200 rules inserted. Base: 18450 rules (484 with conclusion selected). Queue: 5320 rules.
35400 rules inserted. Base: 18547 rules (485 with conclusion selected). Queue: 5223 rules.
35600 rules inserted. Base: 18572 rules (486 with conclusion selected). Queue: 5218 rules.
35800 rules inserted. Base: 18654 rules (486 with conclusion selected). Queue: 5154 rules.
36000 rules inserted. Base: 18751 rules (487 with conclusion selected). Queue: 5057 rules.
36200 rules inserted. Base: 18790 rules (488 with conclusion selected). Queue: 5038 rules.
36400 rules inserted. Base: 18878 rules (488 with conclusion selected). Queue: 4968 rules.
36600 rules inserted. Base: 18958 rules (490 with conclusion selected). Queue: 4890 rules.
36800 rules inserted. Base: 19032 rules (490 with conclusion selected). Queue: 4834 rules.
37000 rules inserted. Base: 19120 rules (490 with conclusion selected). Queue: 4764 rules.
37200 rules inserted. Base: 19162 rules (492 with conclusion selected). Queue: 4724 rules.
37400 rules inserted. Base: 19248 rules (492 with conclusion selected). Queue: 4656 rules.
37600 rules inserted. Base: 19431 rules (492 with conclusion selected). Queue: 4478 rules.
37800 rules inserted. Base: 19562 rules (492 with conclusion selected). Queue: 4366 rules.
38000 rules inserted. Base: 19593 rules (492 with conclusion selected). Queue: 4362 rules.
38200 rules inserted. Base: 19601 rules (492 with conclusion selected). Queue: 4362 rules.
38400 rules inserted. Base: 19655 rules (492 with conclusion selected). Queue: 4389 rules.
38600 rules inserted. Base: 19708 rules (492 with conclusion selected). Queue: 4455 rules.
38800 rules inserted. Base: 19749 rules (492 with conclusion selected). Queue: 4426 rules.
39000 rules inserted. Base: 19777 rules (492 with conclusion selected). Queue: 4422 rules.
39200 rules inserted. Base: 19785 rules (492 with conclusion selected). Queue: 4422 rules.
39400 rules inserted. Base: 19918 rules (492 with conclusion selected). Queue: 4354 rules.
39600 rules inserted. Base: 19954 rules (492 with conclusion selected). Queue: 4372 rules.
39800 rules inserted. Base: 20104 rules (492 with conclusion selected). Queue: 4313 rules.
40000 rules inserted. Base: 20140 rules (492 with conclusion selected). Queue: 4331 rules.
40200 rules inserted. Base: 20190 rules (492 with conclusion selected). Queue: 4326 rules.
40400 rules inserted. Base: 20292 rules (492 with conclusion selected). Queue: 4306 rules.
40600 rules inserted. Base: 20342 rules (492 with conclusion selected). Queue: 4298 rules.
40800 rules inserted. Base: 20428 rules (492 with conclusion selected). Queue: 4218 rules.
41000 rules inserted. Base: 20474 rules (492 with conclusion selected). Queue: 4190 rules.
41200 rules inserted. Base: 20556 rules (492 with conclusion selected). Queue: 4114 rules.
41400 rules inserted. Base: 20606 rules (492 with conclusion selected). Queue: 4082 rules.
41600 rules inserted. Base: 20684 rules (492 with conclusion selected). Queue: 4010 rules.
41800 rules inserted. Base: 20738 rules (492 with conclusion selected). Queue: 3974 rules.
42000 rules inserted. Base: 20812 rules (492 with conclusion selected). Queue: 3906 rules.
42200 rules inserted. Base: 20932 rules (498 with conclusion selected). Queue: 3832 rules.
42400 rules inserted. Base: 20997 rules (498 with conclusion selected). Queue: 3800 rules.
42600 rules inserted. Base: 21057 rules (498 with conclusion selected). Queue: 3776 rules.
42800 rules inserted. Base: 21239 rules (498 with conclusion selected). Queue: 3696 rules.
43000 rules inserted. Base: 21422 rules (498 with conclusion selected). Queue: 3672 rules.
43200 rules inserted. Base: 21615 rules (498 with conclusion selected). Queue: 3536 rules.
43400 rules inserted. Base: 21760 rules (498 with conclusion selected). Queue: 3458 rules.
43600 rules inserted. Base: 21776 rules (498 with conclusion selected). Queue: 3450 rules.
43800 rules inserted. Base: 21915 rules (498 with conclusion selected). Queue: 3399 rules.
44000 rules inserted. Base: 22102 rules (498 with conclusion selected). Queue: 3294 rules.
44200 rules inserted. Base: 22268 rules (498 with conclusion selected). Queue: 3234 rules.
44400 rules inserted. Base: 22434 rules (498 with conclusion selected). Queue: 3146 rules.
44600 rules inserted. Base: 22510 rules (498 with conclusion selected). Queue: 3149 rules.
44800 rules inserted. Base: 22641 rules (498 with conclusion selected). Queue: 3203 rules.
45000 rules inserted. Base: 22691 rules (498 with conclusion selected). Queue: 3156 rules.
45200 rules inserted. Base: 22724 rules (498 with conclusion selected). Queue: 3126 rules.
45400 rules inserted. Base: 22785 rules (498 with conclusion selected). Queue: 3068 rules.
45600 rules inserted. Base: 22832 rules (498 with conclusion selected). Queue: 3024 rules.
45800 rules inserted. Base: 22864 rules (498 with conclusion selected). Queue: 2994 rules.
46000 rules inserted. Base: 22926 rules (504 with conclusion selected). Queue: 3016 rules.
46200 rules inserted. Base: 23116 rules (504 with conclusion selected). Queue: 2893 rules.
46400 rules inserted. Base: 23295 rules (504 with conclusion selected). Queue: 2756 rules.
46600 rules inserted. Base: 23446 rules (504 with conclusion selected). Queue: 2751 rules.
46800 rules inserted. Base: 23621 rules (504 with conclusion selected). Queue: 2750 rules.
47000 rules inserted. Base: 23816 rules (504 with conclusion selected). Queue: 2596 rules.
47200 rules inserted. Base: 23964 rules (504 with conclusion selected). Queue: 2507 rules.
47400 rules inserted. Base: 24094 rules (504 with conclusion selected). Queue: 2495 rules.
47600 rules inserted. Base: 24254 rules (504 with conclusion selected). Queue: 2518 rules.
47800 rules inserted. Base: 24443 rules (504 with conclusion selected). Queue: 2406 rules.
48000 rules inserted. Base: 24619 rules (504 with conclusion selected). Queue: 2412 rules.
48200 rules inserted. Base: 24724 rules (504 with conclusion selected). Queue: 2312 rules.
48400 rules inserted. Base: 24806 rules (504 with conclusion selected). Queue: 2234 rules.
48600 rules inserted. Base: 24890 rules (504 with conclusion selected). Queue: 2154 rules.
48800 rules inserted. Base: 24992 rules (504 with conclusion selected). Queue: 2056 rules.
49000 rules inserted. Base: 25090 rules (504 with conclusion selected). Queue: 1948 rules.
49200 rules inserted. Base: 25226 rules (504 with conclusion selected). Queue: 1941 rules.
49400 rules inserted. Base: 25341 rules (504 with conclusion selected). Queue: 1926 rules.
49600 rules inserted. Base: 25512 rules (504 with conclusion selected). Queue: 1832 rules.
49800 rules inserted. Base: 25652 rules (504 with conclusion selected). Queue: 1788 rules.
50000 rules inserted. Base: 25798 rules (504 with conclusion selected). Queue: 1746 rules.
50200 rules inserted. Base: 25955 rules (504 with conclusion selected). Queue: 1698 rules.
50400 rules inserted. Base: 26127 rules (504 with conclusion selected). Queue: 1556 rules.
50600 rules inserted. Base: 26304 rules (504 with conclusion selected). Queue: 1436 rules.
50800 rules inserted. Base: 26472 rules (504 with conclusion selected). Queue: 1260 rules.
51000 rules inserted. Base: 26585 rules (516 with conclusion selected). Queue: 1122 rules.
51200 rules inserted. Base: 26743 rules (516 with conclusion selected). Queue: 1025 rules.
51400 rules inserted. Base: 26864 rules (516 with conclusion selected). Queue: 964 rules.
51600 rules inserted. Base: 27010 rules (516 with conclusion selected). Queue: 868 rules.
51800 rules inserted. Base: 27130 rules (516 with conclusion selected). Queue: 814 rules.
52000 rules inserted. Base: 27263 rules (516 with conclusion selected). Queue: 688 rules.
52200 rules inserted. Base: 27305 rules (528 with conclusion selected). Queue: 671 rules.
52400 rules inserted. Base: 27386 rules (528 with conclusion selected). Queue: 681 rules.
52600 rules inserted. Base: 27508 rules (528 with conclusion selected). Queue: 702 rules.
52800 rules inserted. Base: 27482 rules (530 with conclusion selected). Queue: 699 rules.
53000 rules inserted. Base: 27510 rules (530 with conclusion selected). Queue: 599 rules.
53200 rules inserted. Base: 27570 rules (530 with conclusion selected). Queue: 531 rules.
53400 rules inserted. Base: 27488 rules (530 with conclusion selected). Queue: 494 rules.
53600 rules inserted. Base: 27047 rules (534 with conclusion selected). Queue: 519 rules.
53800 rules inserted. Base: 26660 rules (534 with conclusion selected). Queue: 510 rules.
54000 rules inserted. Base: 26131 rules (544 with conclusion selected). Queue: 565 rules.
54200 rules inserted. Base: 26112 rules (560 with conclusion selected). Queue: 492 rules.
54400 rules inserted. Base: 26004 rules (578 with conclusion selected). Queue: 488 rules.
54600 rules inserted. Base: 25460 rules (588 with conclusion selected). Queue: 598 rules.
54800 rules inserted. Base: 24969 rules (588 with conclusion selected). Queue: 592 rules.
55000 rules inserted. Base: 24765 rules (594 with conclusion selected). Queue: 631 rules.
55200 rules inserted. Base: 24682 rules (599 with conclusion selected). Queue: 598 rules.
55400 rules inserted. Base: 24402 rules (607 with conclusion selected). Queue: 572 rules.
55600 rules inserted. Base: 24426 rules (616 with conclusion selected). Queue: 559 rules.
55800 rules inserted. Base: 24593 rules (645 with conclusion selected). Queue: 509 rules.
56000 rules inserted. Base: 24736 rules (689 with conclusion selected). Queue: 541 rules.
56200 rules inserted. Base: 24928 rules (696 with conclusion selected). Queue: 505 rules.
56400 rules inserted. Base: 25064 rules (696 with conclusion selected). Queue: 447 rules.
56600 rules inserted. Base: 25197 rules (696 with conclusion selected). Queue: 371 rules.
56800 rules inserted. Base: 25316 rules (697 with conclusion selected). Queue: 262 rules.
57000 rules inserted. Base: 25422 rules (710 with conclusion selected). Queue: 312 rules.
57200 rules inserted. Base: 25496 rules (718 with conclusion selected). Queue: 332 rules.
57400 rules inserted. Base: 25499 rules (730 with conclusion selected). Queue: 509 rules.
57600 rules inserted. Base: 25675 rules (742 with conclusion selected). Queue: 625 rules.
57800 rules inserted. Base: 25757 rules (750 with conclusion selected). Queue: 799 rules.
58000 rules inserted. Base: 25918 rules (752 with conclusion selected). Queue: 749 rules.
58200 rules inserted. Base: 26073 rules (753 with conclusion selected). Queue: 606 rules.
58400 rules inserted. Base: 26175 rules (759 with conclusion selected). Queue: 717 rules.
58600 rules inserted. Base: 26322 rules (762 with conclusion selected). Queue: 791 rules.
58800 rules inserted. Base: 26458 rules (763 with conclusion selected). Queue: 786 rules.
59000 rules inserted. Base: 26554 rules (767 with conclusion selected). Queue: 877 rules.
59200 rules inserted. Base: 26691 rules (768 with conclusion selected). Queue: 902 rules.
59400 rules inserted. Base: 26855 rules (769 with conclusion selected). Queue: 927 rules.
59600 rules inserted. Base: 27019 rules (785 with conclusion selected). Queue: 1425 rules.
59800 rules inserted. Base: 27149 rules (786 with conclusion selected). Queue: 1402 rules.
60000 rules inserted. Base: 27339 rules (786 with conclusion selected). Queue: 1402 rules.
60200 rules inserted. Base: 27513 rules (786 with conclusion selected). Queue: 1402 rules.
60400 rules inserted. Base: 27623 rules (786 with conclusion selected). Queue: 1402 rules.
60600 rules inserted. Base: 27813 rules (786 with conclusion selected). Queue: 1284 rules.
60800 rules inserted. Base: 28007 rules (786 with conclusion selected). Queue: 1119 rules.
61000 rules inserted. Base: 28201 rules (786 with conclusion selected). Queue: 956 rules.
61200 rules inserted. Base: 28227 rules (790 with conclusion selected). Queue: 1100 rules.
61400 rules inserted. Base: 28336 rules (790 with conclusion selected). Queue: 1100 rules.
61600 rules inserted. Base: 28463 rules (790 with conclusion selected). Queue: 1100 rules.
61800 rules inserted. Base: 28614 rules (790 with conclusion selected). Queue: 1100 rules.
62000 rules inserted. Base: 28769 rules (791 with conclusion selected). Queue: 1135 rules.
62200 rules inserted. Base: 28874 rules (796 with conclusion selected). Queue: 1340 rules.
62400 rules inserted. Base: 29001 rules (796 with conclusion selected). Queue: 1340 rules.
62600 rules inserted. Base: 29126 rules (796 with conclusion selected). Queue: 1340 rules.
62800 rules inserted. Base: 29238 rules (796 with conclusion selected). Queue: 1340 rules.
63000 rules inserted. Base: 29315 rules (796 with conclusion selected). Queue: 1352 rules.
63200 rules inserted. Base: 29515 rules (796 with conclusion selected). Queue: 1384 rules.
63400 rules inserted. Base: 29695 rules (797 with conclusion selected). Queue: 1455 rules.
63600 rules inserted. Base: 29869 rules (798 with conclusion selected). Queue: 1510 rules.
63800 rules inserted. Base: 29948 rules (798 with conclusion selected). Queue: 1510 rules.
64000 rules inserted. Base: 29999 rules (798 with conclusion selected). Queue: 1510 rules.
64200 rules inserted. Base: 30076 rules (798 with conclusion selected). Queue: 1500 rules.
64400 rules inserted. Base: 30163 rules (798 with conclusion selected). Queue: 1496 rules.
64600 rules inserted. Base: 30327 rules (798 with conclusion selected). Queue: 1530 rules.
64800 rules inserted. Base: 30499 rules (798 with conclusion selected). Queue: 1546 rules.
65000 rules inserted. Base: 30667 rules (798 with conclusion selected). Queue: 1594 rules.
65200 rules inserted. Base: 30727 rules (798 with conclusion selected). Queue: 1594 rules.
65400 rules inserted. Base: 30814 rules (798 with conclusion selected). Queue: 1574 rules.
65600 rules inserted. Base: 30892 rules (798 with conclusion selected). Queue: 1554 rules.
65800 rules inserted. Base: 30947 rules (798 with conclusion selected). Queue: 1531 rules.
66000 rules inserted. Base: 31121 rules (798 with conclusion selected). Queue: 1600 rules.
66200 rules inserted. Base: 31305 rules (798 with conclusion selected). Queue: 1736 rules.
66400 rules inserted. Base: 31483 rules (798 with conclusion selected). Queue: 1800 rules.
66600 rules inserted. Base: 31667 rules (798 with conclusion selected). Queue: 1896 rules.
66800 rules inserted. Base: 31756 rules (798 with conclusion selected). Queue: 1876 rules.
67000 rules inserted. Base: 31814 rules (798 with conclusion selected). Queue: 1866 rules.
67200 rules inserted. Base: 31895 rules (798 with conclusion selected). Queue: 1833 rules.
67400 rules inserted. Base: 32045 rules (798 with conclusion selected). Queue: 1798 rules.
67600 rules inserted. Base: 32201 rules (798 with conclusion selected). Queue: 1794 rules.
67800 rules inserted. Base: 32345 rules (798 with conclusion selected). Queue: 1794 rules.
68000 rules inserted. Base: 32517 rules (798 with conclusion selected). Queue: 1922 rules.
68200 rules inserted. Base: 32635 rules (798 with conclusion selected). Queue: 1922 rules.
68400 rules inserted. Base: 32783 rules (798 with conclusion selected). Queue: 1922 rules.
68600 rules inserted. Base: 32906 rules (798 with conclusion selected). Queue: 2050 rules.
68800 rules inserted. Base: 33035 rules (798 with conclusion selected). Queue: 1987 rules.
69000 rules inserted. Base: 33178 rules (798 with conclusion selected). Queue: 1924 rules.
69200 rules inserted. Base: 33318 rules (798 with conclusion selected). Queue: 1900 rules.
69400 rules inserted. Base: 33382 rules (798 with conclusion selected). Queue: 1892 rules.
69600 rules inserted. Base: 33414 rules (798 with conclusion selected). Queue: 1924 rules.
69800 rules inserted. Base: 33541 rules (798 with conclusion selected). Queue: 1924 rules.
70000 rules inserted. Base: 33632 rules (798 with conclusion selected). Queue: 1908 rules.
70200 rules inserted. Base: 33656 rules (798 with conclusion selected). Queue: 1932 rules.
70400 rules inserted. Base: 33733 rules (798 with conclusion selected). Queue: 1940 rules.
70600 rules inserted. Base: 33890 rules (798 with conclusion selected). Queue: 1914 rules.
70800 rules inserted. Base: 34017 rules (798 with conclusion selected). Queue: 1906 rules.
71000 rules inserted. Base: 34177 rules (798 with conclusion selected). Queue: 1834 rules.
71200 rules inserted. Base: 34284 rules (798 with conclusion selected). Queue: 1810 rules.
71400 rules inserted. Base: 34425 rules (798 with conclusion selected). Queue: 1906 rules.
71600 rules inserted. Base: 34500 rules (798 with conclusion selected). Queue: 1938 rules.
71800 rules inserted. Base: 34532 rules (798 with conclusion selected). Queue: 1970 rules.
72000 rules inserted. Base: 34611 rules (798 with conclusion selected). Queue: 1992 rules.
72200 rules inserted. Base: 34764 rules (798 with conclusion selected). Queue: 2082 rules.
72400 rules inserted. Base: 34784 rules (798 with conclusion selected). Queue: 2098 rules.
72600 rules inserted. Base: 34853 rules (798 with conclusion selected). Queue: 2109 rules.
72800 rules inserted. Base: 34989 rules (798 with conclusion selected). Queue: 2042 rules.
73000 rules inserted. Base: 35072 rules (800 with conclusion selected). Queue: 2078 rules.
73200 rules inserted. Base: 35189 rules (800 with conclusion selected). Queue: 2078 rules.
73400 rules inserted. Base: 35359 rules (800 with conclusion selected). Queue: 2078 rules.
73600 rules inserted. Base: 35395 rules (800 with conclusion selected). Queue: 2119 rules.
73800 rules inserted. Base: 35559 rules (800 with conclusion selected). Queue: 2192 rules.
74000 rules inserted. Base: 35658 rules (800 with conclusion selected). Queue: 2190 rules.
74200 rules inserted. Base: 35833 rules (800 with conclusion selected). Queue: 2190 rules.
74400 rules inserted. Base: 35863 rules (800 with conclusion selected). Queue: 2222 rules.
74600 rules inserted. Base: 36038 rules (800 with conclusion selected). Queue: 2318 rules.
74800 rules inserted. Base: 36123 rules (800 with conclusion selected). Queue: 2292 rules.
75000 rules inserted. Base: 36220 rules (804 with conclusion selected). Queue: 2229 rules.
75200 rules inserted. Base: 36233 rules (808 with conclusion selected). Queue: 2197 rules.
75400 rules inserted. Base: 36351 rules (808 with conclusion selected). Queue: 2197 rules.
75600 rules inserted. Base: 36364 rules (808 with conclusion selected). Queue: 2181 rules.
75800 rules inserted. Base: 36525 rules (808 with conclusion selected). Queue: 2181 rules.
76000 rules inserted. Base: 36665 rules (808 with conclusion selected). Queue: 2176 rules.
76200 rules inserted. Base: 36689 rules (808 with conclusion selected). Queue: 2165 rules.
76400 rules inserted. Base: 36799 rules (808 with conclusion selected). Queue: 2165 rules.
76600 rules inserted. Base: 36827 rules (808 with conclusion selected). Queue: 2149 rules.
76800 rules inserted. Base: 36997 rules (808 with conclusion selected). Queue: 2149 rules.
77000 rules inserted. Base: 37119 rules (808 with conclusion selected). Queue: 2123 rules.
77200 rules inserted. Base: 37169 rules (808 with conclusion selected). Queue: 2060 rules.
77400 rules inserted. Base: 37130 rules (808 with conclusion selected). Queue: 2052 rules.
77600 rules inserted. Base: 37303 rules (808 with conclusion selected). Queue: 2043 rules.
77800 rules inserted. Base: 37354 rules (808 with conclusion selected). Queue: 2039 rules.
78000 rules inserted. Base: 37464 rules (808 with conclusion selected). Queue: 2039 rules.
78200 rules inserted. Base: 37524 rules (808 with conclusion selected). Queue: 2039 rules.
78400 rules inserted. Base: 37665 rules (808 with conclusion selected). Queue: 2032 rules.
78600 rules inserted. Base: 37828 rules (808 with conclusion selected). Queue: 2023 rules.
78800 rules inserted. Base: 37857 rules (808 with conclusion selected). Queue: 2023 rules.
79000 rules inserted. Base: 37967 rules (808 with conclusion selected). Queue: 2023 rules.
79200 rules inserted. Base: 38024 rules (808 with conclusion selected). Queue: 1979 rules.
79400 rules inserted. Base: 38053 rules (808 with conclusion selected). Queue: 1897 rules.
79600 rules inserted. Base: 38152 rules (808 with conclusion selected). Queue: 1897 rules.
79800 rules inserted. Base: 38169 rules (808 with conclusion selected). Queue: 1889 rules.
80000 rules inserted. Base: 38319 rules (808 with conclusion selected). Queue: 1881 rules.
80200 rules inserted. Base: 38473 rules (808 with conclusion selected). Queue: 1873 rules.
80400 rules inserted. Base: 38490 rules (808 with conclusion selected). Queue: 1865 rules.
80600 rules inserted. Base: 38589 rules (808 with conclusion selected). Queue: 1865 rules.
80800 rules inserted. Base: 38622 rules (808 with conclusion selected). Queue: 1853 rules.
81000 rules inserted. Base: 38799 rules (808 with conclusion selected). Queue: 1844 rules.
81200 rules inserted. Base: 38877 rules (809 with conclusion selected). Queue: 1851 rules.
81400 rules inserted. Base: 38848 rules (809 with conclusion selected). Queue: 1827 rules.
81600 rules inserted. Base: 38947 rules (809 with conclusion selected). Queue: 1811 rules.
81800 rules inserted. Base: 38993 rules (809 with conclusion selected). Queue: 1791 rules.
82000 rules inserted. Base: 39091 rules (809 with conclusion selected). Queue: 1791 rules.
82200 rules inserted. Base: 39138 rules (809 with conclusion selected). Queue: 1771 rules.
82400 rules inserted. Base: 39236 rules (809 with conclusion selected). Queue: 1747 rules.
82600 rules inserted. Base: 39282 rules (809 with conclusion selected). Queue: 1727 rules.
82800 rules inserted. Base: 39381 rules (809 with conclusion selected). Queue: 1727 rules.
83000 rules inserted. Base: 39425 rules (809 with conclusion selected). Queue: 1735 rules.
83200 rules inserted. Base: 39386 rules (810 with conclusion selected). Queue: 1690 rules.
83400 rules inserted. Base: 39478 rules (810 with conclusion selected). Queue: 1607 rules.
83600 rules inserted. Base: 39568 rules (810 with conclusion selected). Queue: 1566 rules.
83800 rules inserted. Base: 39667 rules (810 with conclusion selected). Queue: 1550 rules.
84000 rules inserted. Base: 39754 rules (810 with conclusion selected). Queue: 1483 rules.
84200 rules inserted. Base: 39847 rules (810 with conclusion selected). Queue: 1396 rules.
84400 rules inserted. Base: 39937 rules (810 with conclusion selected). Queue: 1358 rules.
84600 rules inserted. Base: 40036 rules (810 with conclusion selected). Queue: 1342 rules.
84800 rules inserted. Base: 39910 rules (810 with conclusion selected). Queue: 1348 rules.
85000 rules inserted. Base: 39983 rules (834 with conclusion selected). Queue: 1612 rules.
85200 rules inserted. Base: 40084 rules (834 with conclusion selected). Queue: 1529 rules.
85400 rules inserted. Base: 40170 rules (834 with conclusion selected). Queue: 1452 rules.
85600 rules inserted. Base: 40227 rules (834 with conclusion selected). Queue: 1456 rules.
85800 rules inserted. Base: 40335 rules (834 with conclusion selected). Queue: 1366 rules.
86000 rules inserted. Base: 40418 rules (834 with conclusion selected). Queue: 1292 rules.
86200 rules inserted. Base: 40399 rules (838 with conclusion selected). Queue: 1267 rules.
86400 rules inserted. Base: 40599 rules (838 with conclusion selected). Queue: 1159 rules.
86600 rules inserted. Base: 40799 rules (838 with conclusion selected). Queue: 1006 rules.
86800 rules inserted. Base: 40893 rules (838 with conclusion selected). Queue: 936 rules.
87000 rules inserted. Base: 41055 rules (838 with conclusion selected). Queue: 833 rules.
87200 rules inserted. Base: 41168 rules (838 with conclusion selected). Queue: 744 rules.
87400 rules inserted. Base: 41198 rules (838 with conclusion selected). Queue: 694 rules.
87600 rules inserted. Base: 41301 rules (840 with conclusion selected). Queue: 540 rules.
87800 rules inserted. Base: 41497 rules (840 with conclusion selected). Queue: 400 rules.
88000 rules inserted. Base: 41695 rules (840 with conclusion selected). Queue: 215 rules.
88200 rules inserted. Base: 41817 rules (842 with conclusion selected). Queue: 147 rules.
88400 rules inserted. Base: 41964 rules (842 with conclusion selected). Queue: 82 rules.
88600 rules inserted. Base: 42068 rules (844 with conclusion selected). Queue: 274 rules.
88800 rules inserted. Base: 42166 rules (844 with conclusion selected). Queue: 202 rules.
89000 rules inserted. Base: 42240 rules (849 with conclusion selected). Queue: 193 rules.
89200 rules inserted. Base: 42326 rules (851 with conclusion selected). Queue: 98 rules.
89400 rules inserted. Base: 42283 rules (856 with conclusion selected). Queue: 141 rules.
89600 rules inserted. Base: 42172 rules (857 with conclusion selected). Queue: 126 rules.
89800 rules inserted. Base: 41868 rules (858 with conclusion selected). Queue: 90 rules.
90000 rules inserted. Base: 41509 rules (867 with conclusion selected). Queue: 123 rules.
90200 rules inserted. Base: 41508 rules (876 with conclusion selected). Queue: 194 rules.
90400 rules inserted. Base: 41607 rules (884 with conclusion selected). Queue: 271 rules.
90600 rules inserted. Base: 41743 rules (886 with conclusion selected). Queue: 189 rules.
90800 rules inserted. Base: 41882 rules (888 with conclusion selected). Queue: 102 rules.
91000 rules inserted. Base: 41866 rules (894 with conclusion selected). Queue: 152 rules.
91200 rules inserted. Base: 42010 rules (896 with conclusion selected). Queue: 200 rules.
91400 rules inserted. Base: 42162 rules (896 with conclusion selected). Queue: 192 rules.
91600 rules inserted. Base: 42286 rules (896 with conclusion selected). Queue: 144 rules.
91800 rules inserted. Base: 42370 rules (896 with conclusion selected). Queue: 80 rules.
Starting query inj-event(auth_AppCompletesProtocol(m_104,m_105,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_106,m_107,m_vp,m_accesstoken)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accesstoken)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107))
RESULT inj-event(auth_AppCompletesProtocol(m_104,m_105,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_106,m_107,m_vp,m_accesstoken)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accesstoken)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107)) is true.
-- Query inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_vp,m_accesstoken)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_104,m_105,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_106,m_107,m_vp)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (120 with conclusion selected). Queue: 561 rules.
400 rules inserted. Base: 400 rules (120 with conclusion selected). Queue: 653 rules.
600 rules inserted. Base: 600 rules (120 with conclusion selected). Queue: 675 rules.
800 rules inserted. Base: 799 rules (126 with conclusion selected). Queue: 646 rules.
1000 rules inserted. Base: 999 rules (126 with conclusion selected). Queue: 609 rules.
1200 rules inserted. Base: 1198 rules (126 with conclusion selected). Queue: 582 rules.
1400 rules inserted. Base: 1357 rules (128 with conclusion selected). Queue: 578 rules.
1600 rules inserted. Base: 1517 rules (128 with conclusion selected). Queue: 638 rules.
1800 rules inserted. Base: 1693 rules (128 with conclusion selected). Queue: 674 rules.
2000 rules inserted. Base: 1838 rules (140 with conclusion selected). Queue: 816 rules.
2200 rules inserted. Base: 1929 rules (170 with conclusion selected). Queue: 1116 rules.
2400 rules inserted. Base: 2019 rules (192 with conclusion selected). Queue: 1159 rules.
2600 rules inserted. Base: 2218 rules (192 with conclusion selected). Queue: 1253 rules.
2800 rules inserted. Base: 2407 rules (194 with conclusion selected). Queue: 1248 rules.
3000 rules inserted. Base: 2575 rules (194 with conclusion selected). Queue: 1300 rules.
3200 rules inserted. Base: 2743 rules (194 with conclusion selected). Queue: 1361 rules.
3400 rules inserted. Base: 2943 rules (198 with conclusion selected). Queue: 1392 rules.
3600 rules inserted. Base: 3060 rules (198 with conclusion selected). Queue: 1420 rules.
3800 rules inserted. Base: 3135 rules (199 with conclusion selected). Queue: 1466 rules.
4000 rules inserted. Base: 3323 rules (200 with conclusion selected). Queue: 1496 rules.
4200 rules inserted. Base: 3462 rules (200 with conclusion selected). Queue: 1458 rules.
4400 rules inserted. Base: 3630 rules (200 with conclusion selected). Queue: 1439 rules.
4600 rules inserted. Base: 3754 rules (202 with conclusion selected). Queue: 1537 rules.
4800 rules inserted. Base: 3883 rules (204 with conclusion selected). Queue: 1644 rules.
5000 rules inserted. Base: 4014 rules (204 with conclusion selected). Queue: 1539 rules.
5200 rules inserted. Base: 4171 rules (204 with conclusion selected). Queue: 1384 rules.
5400 rules inserted. Base: 4353 rules (204 with conclusion selected). Queue: 1503 rules.
5600 rules inserted. Base: 4543 rules (204 with conclusion selected). Queue: 1516 rules.
5800 rules inserted. Base: 4719 rules (204 with conclusion selected). Queue: 1489 rules.
6000 rules inserted. Base: 4845 rules (204 with conclusion selected). Queue: 1522 rules.
6200 rules inserted. Base: 4993 rules (204 with conclusion selected). Queue: 1578 rules.
6400 rules inserted. Base: 5108 rules (204 with conclusion selected). Queue: 1571 rules.
6600 rules inserted. Base: 5239 rules (204 with conclusion selected). Queue: 1924 rules.
6800 rules inserted. Base: 5428 rules (204 with conclusion selected). Queue: 1913 rules.
7000 rules inserted. Base: 5483 rules (204 with conclusion selected). Queue: 1860 rules.
7200 rules inserted. Base: 5578 rules (204 with conclusion selected). Queue: 1807 rules.
7400 rules inserted. Base: 5642 rules (204 with conclusion selected). Queue: 1752 rules.
7600 rules inserted. Base: 5803 rules (204 with conclusion selected). Queue: 1679 rules.
7800 rules inserted. Base: 5909 rules (204 with conclusion selected). Queue: 1636 rules.
8000 rules inserted. Base: 6056 rules (204 with conclusion selected). Queue: 1600 rules.
8200 rules inserted. Base: 6091 rules (204 with conclusion selected). Queue: 1604 rules.
8400 rules inserted. Base: 6103 rules (204 with conclusion selected). Queue: 1628 rules.
8600 rules inserted. Base: 6177 rules (204 with conclusion selected). Queue: 1640 rules.
8800 rules inserted. Base: 6287 rules (204 with conclusion selected). Queue: 1640 rules.
9000 rules inserted. Base: 6409 rules (204 with conclusion selected). Queue: 1640 rules.
9200 rules inserted. Base: 6501 rules (204 with conclusion selected). Queue: 1640 rules.
9400 rules inserted. Base: 6583 rules (204 with conclusion selected). Queue: 1638 rules.
9600 rules inserted. Base: 6665 rules (204 with conclusion selected). Queue: 1636 rules.
9800 rules inserted. Base: 6665 rules (204 with conclusion selected). Queue: 1636 rules.
10000 rules inserted. Base: 6665 rules (204 with conclusion selected). Queue: 1636 rules.
10200 rules inserted. Base: 6747 rules (204 with conclusion selected). Queue: 1566 rules.
10400 rules inserted. Base: 6839 rules (204 with conclusion selected). Queue: 1490 rules.
10600 rules inserted. Base: 6978 rules (204 with conclusion selected). Queue: 1342 rules.
10800 rules inserted. Base: 7094 rules (204 with conclusion selected). Queue: 1201 rules.
11000 rules inserted. Base: 7087 rules (211 with conclusion selected). Queue: 1291 rules.
11200 rules inserted. Base: 7128 rules (211 with conclusion selected). Queue: 1261 rules.
11400 rules inserted. Base: 7069 rules (218 with conclusion selected). Queue: 1253 rules.
11600 rules inserted. Base: 6981 rules (224 with conclusion selected). Queue: 1248 rules.
11800 rules inserted. Base: 6977 rules (230 with conclusion selected). Queue: 1303 rules.
12000 rules inserted. Base: 7171 rules (235 with conclusion selected). Queue: 1257 rules.
12200 rules inserted. Base: 7287 rules (247 with conclusion selected). Queue: 1471 rules.
12400 rules inserted. Base: 7377 rules (247 with conclusion selected). Queue: 1381 rules.
12600 rules inserted. Base: 7555 rules (265 with conclusion selected). Queue: 1328 rules.
12800 rules inserted. Base: 7755 rules (283 with conclusion selected). Queue: 1496 rules.
13000 rules inserted. Base: 7926 rules (301 with conclusion selected). Queue: 1695 rules.
13200 rules inserted. Base: 7957 rules (301 with conclusion selected). Queue: 1710 rules.
13400 rules inserted. Base: 8141 rules (304 with conclusion selected). Queue: 1909 rules.
13600 rules inserted. Base: 8280 rules (304 with conclusion selected). Queue: 1908 rules.
13800 rules inserted. Base: 8309 rules (306 with conclusion selected). Queue: 1940 rules.
14000 rules inserted. Base: 8506 rules (311 with conclusion selected). Queue: 2272 rules.
14200 rules inserted. Base: 8702 rules (314 with conclusion selected). Queue: 2441 rules.
14400 rules inserted. Base: 8896 rules (317 with conclusion selected). Queue: 2600 rules.
14600 rules inserted. Base: 9090 rules (322 with conclusion selected). Queue: 2934 rules.
14800 rules inserted. Base: 9121 rules (322 with conclusion selected). Queue: 2933 rules.
15000 rules inserted. Base: 9249 rules (323 with conclusion selected). Queue: 3081 rules.
15200 rules inserted. Base: 9363 rules (323 with conclusion selected). Queue: 3018 rules.
15400 rules inserted. Base: 9501 rules (324 with conclusion selected). Queue: 3191 rules.
15600 rules inserted. Base: 9676 rules (324 with conclusion selected). Queue: 3034 rules.
15800 rules inserted. Base: 9842 rules (326 with conclusion selected). Queue: 3218 rules.
16000 rules inserted. Base: 9926 rules (328 with conclusion selected). Queue: 3341 rules.
16200 rules inserted. Base: 10040 rules (330 with conclusion selected). Queue: 3653 rules.
16400 rules inserted. Base: 10163 rules (330 with conclusion selected). Queue: 3651 rules.
16600 rules inserted. Base: 10320 rules (333 with conclusion selected). Queue: 3962 rules.
16800 rules inserted. Base: 10405 rules (333 with conclusion selected). Queue: 3969 rules.
17000 rules inserted. Base: 10587 rules (336 with conclusion selected). Queue: 4271 rules.
17200 rules inserted. Base: 10683 rules (338 with conclusion selected). Queue: 4433 rules.
17400 rules inserted. Base: 10849 rules (339 with conclusion selected). Queue: 4581 rules.
17600 rules inserted. Base: 10914 rules (341 with conclusion selected). Queue: 4736 rules.
17800 rules inserted. Base: 10932 rules (341 with conclusion selected). Queue: 4726 rules.
18000 rules inserted. Base: 11010 rules (341 with conclusion selected). Queue: 4778 rules.
18200 rules inserted. Base: 11145 rules (341 with conclusion selected). Queue: 4736 rules.
18400 rules inserted. Base: 11209 rules (341 with conclusion selected). Queue: 4746 rules.
18600 rules inserted. Base: 11233 rules (341 with conclusion selected). Queue: 4755 rules.
18800 rules inserted. Base: 11310 rules (341 with conclusion selected). Queue: 4783 rules.
19000 rules inserted. Base: 11392 rules (341 with conclusion selected). Queue: 4797 rules.
19200 rules inserted. Base: 11478 rules (341 with conclusion selected). Queue: 4787 rules.
19400 rules inserted. Base: 11563 rules (342 with conclusion selected). Queue: 4754 rules.
19600 rules inserted. Base: 11627 rules (342 with conclusion selected). Queue: 4764 rules.
19800 rules inserted. Base: 11686 rules (343 with conclusion selected). Queue: 4806 rules.
20000 rules inserted. Base: 11806 rules (343 with conclusion selected). Queue: 4774 rules.
20200 rules inserted. Base: 11866 rules (343 with conclusion selected). Queue: 4788 rules.
20400 rules inserted. Base: 11939 rules (344 with conclusion selected). Queue: 4787 rules.
20600 rules inserted. Base: 11996 rules (344 with conclusion selected). Queue: 4812 rules.
20800 rules inserted. Base: 12082 rules (344 with conclusion selected). Queue: 4801 rules.
21000 rules inserted. Base: 12152 rules (345 with conclusion selected). Queue: 4800 rules.
21200 rules inserted. Base: 12211 rules (345 with conclusion selected). Queue: 4832 rules.
21400 rules inserted. Base: 12314 rules (345 with conclusion selected). Queue: 4800 rules.
21600 rules inserted. Base: 12373 rules (346 with conclusion selected). Queue: 4813 rules.
21800 rules inserted. Base: 12445 rules (346 with conclusion selected). Queue: 4845 rules.
22000 rules inserted. Base: 12567 rules (346 with conclusion selected). Queue: 4813 rules.
22200 rules inserted. Base: 12625 rules (346 with conclusion selected). Queue: 4827 rules.
22400 rules inserted. Base: 12642 rules (347 with conclusion selected). Queue: 4826 rules.
22600 rules inserted. Base: 12732 rules (351 with conclusion selected). Queue: 4951 rules.
22800 rules inserted. Base: 12753 rules (351 with conclusion selected). Queue: 4950 rules.
23000 rules inserted. Base: 12807 rules (351 with conclusion selected). Queue: 4949 rules.
23200 rules inserted. Base: 12912 rules (356 with conclusion selected). Queue: 4967 rules.
23400 rules inserted. Base: 12932 rules (383 with conclusion selected). Queue: 5124 rules.
23600 rules inserted. Base: 13015 rules (383 with conclusion selected). Queue: 5109 rules.
23800 rules inserted. Base: 13097 rules (384 with conclusion selected). Queue: 5083 rules.
24000 rules inserted. Base: 13206 rules (384 with conclusion selected). Queue: 5051 rules.
24200 rules inserted. Base: 13254 rules (384 with conclusion selected). Queue: 5051 rules.
24400 rules inserted. Base: 13369 rules (384 with conclusion selected). Queue: 5019 rules.
24600 rules inserted. Base: 13466 rules (386 with conclusion selected). Queue: 5000 rules.
24800 rules inserted. Base: 13576 rules (386 with conclusion selected). Queue: 5000 rules.
25000 rules inserted. Base: 13680 rules (386 with conclusion selected). Queue: 4968 rules.
25200 rules inserted. Base: 13794 rules (386 with conclusion selected). Queue: 4950 rules.
25400 rules inserted. Base: 13864 rules (386 with conclusion selected). Queue: 4950 rules.
25600 rules inserted. Base: 13970 rules (386 with conclusion selected). Queue: 4918 rules.
25800 rules inserted. Base: 14072 rules (386 with conclusion selected). Queue: 4910 rules.
26000 rules inserted. Base: 14146 rules (386 with conclusion selected). Queue: 4900 rules.
26200 rules inserted. Base: 14232 rules (386 with conclusion selected). Queue: 4900 rules.
26400 rules inserted. Base: 14340 rules (386 with conclusion selected). Queue: 4868 rules.
26600 rules inserted. Base: 14450 rules (386 with conclusion selected). Queue: 4850 rules.
26800 rules inserted. Base: 14556 rules (386 with conclusion selected). Queue: 4850 rules.
27000 rules inserted. Base: 14664 rules (386 with conclusion selected). Queue: 4818 rules.
27200 rules inserted. Base: 14688 rules (386 with conclusion selected). Queue: 4818 rules.
27400 rules inserted. Base: 14812 rules (394 with conclusion selected). Queue: 5029 rules.
27600 rules inserted. Base: 14984 rules (398 with conclusion selected). Queue: 5168 rules.
27800 rules inserted. Base: 15034 rules (430 with conclusion selected). Queue: 5583 rules.
28000 rules inserted. Base: 15176 rules (430 with conclusion selected). Queue: 5663 rules.
28200 rules inserted. Base: 15243 rules (430 with conclusion selected). Queue: 5737 rules.
28400 rules inserted. Base: 15342 rules (446 with conclusion selected). Queue: 5954 rules.
28600 rules inserted. Base: 15434 rules (462 with conclusion selected). Queue: 6190 rules.
28800 rules inserted. Base: 15504 rules (463 with conclusion selected). Queue: 6190 rules.
29000 rules inserted. Base: 15582 rules (465 with conclusion selected). Queue: 6127 rules.
29200 rules inserted. Base: 15642 rules (465 with conclusion selected). Queue: 6115 rules.
29400 rules inserted. Base: 15770 rules (465 with conclusion selected). Queue: 6061 rules.
29600 rules inserted. Base: 15858 rules (466 with conclusion selected). Queue: 6060 rules.
29800 rules inserted. Base: 15938 rules (468 with conclusion selected). Queue: 6054 rules.
30000 rules inserted. Base: 16068 rules (468 with conclusion selected). Queue: 5996 rules.
30200 rules inserted. Base: 16164 rules (468 with conclusion selected). Queue: 5996 rules.
30400 rules inserted. Base: 16238 rules (470 with conclusion selected). Queue: 5996 rules.
30600 rules inserted. Base: 16374 rules (470 with conclusion selected). Queue: 5932 rules.
30800 rules inserted. Base: 16470 rules (470 with conclusion selected). Queue: 5932 rules.
31000 rules inserted. Base: 16544 rules (472 with conclusion selected). Queue: 5932 rules.
31200 rules inserted. Base: 16680 rules (472 with conclusion selected). Queue: 5868 rules.
31400 rules inserted. Base: 16776 rules (472 with conclusion selected). Queue: 5868 rules.
31600 rules inserted. Base: 16848 rules (473 with conclusion selected). Queue: 5868 rules.
31800 rules inserted. Base: 16978 rules (474 with conclusion selected). Queue: 5804 rules.
32000 rules inserted. Base: 17014 rules (474 with conclusion selected). Queue: 5800 rules.
32200 rules inserted. Base: 17214 rules (481 with conclusion selected). Queue: 5854 rules.
32400 rules inserted. Base: 17411 rules (482 with conclusion selected). Queue: 5745 rules.
32600 rules inserted. Base: 17606 rules (482 with conclusion selected). Queue: 5558 rules.
32800 rules inserted. Base: 17678 rules (482 with conclusion selected). Queue: 5516 rules.
33000 rules inserted. Base: 17774 rules (482 with conclusion selected). Queue: 5667 rules.
33200 rules inserted. Base: 17855 rules (482 with conclusion selected). Queue: 5642 rules.
33400 rules inserted. Base: 17939 rules (482 with conclusion selected). Queue: 5622 rules.
33600 rules inserted. Base: 17955 rules (482 with conclusion selected). Queue: 5618 rules.
33800 rules inserted. Base: 18044 rules (482 with conclusion selected). Queue: 5554 rules.
34000 rules inserted. Base: 18102 rules (482 with conclusion selected). Queue: 5780 rules.
34200 rules inserted. Base: 18152 rules (482 with conclusion selected). Queue: 5762 rules.
34400 rules inserted. Base: 18223 rules (482 with conclusion selected). Queue: 5772 rules.
34600 rules inserted. Base: 18289 rules (482 with conclusion selected). Queue: 5753 rules.
34800 rules inserted. Base: 18348 rules (482 with conclusion selected). Queue: 5718 rules.
35000 rules inserted. Base: 18490 rules (483 with conclusion selected). Queue: 5606 rules.
35200 rules inserted. Base: 18578 rules (484 with conclusion selected). Queue: 5533 rules.
35400 rules inserted. Base: 18673 rules (484 with conclusion selected). Queue: 5480 rules.
35600 rules inserted. Base: 18794 rules (484 with conclusion selected). Queue: 5392 rules.
35800 rules inserted. Base: 18870 rules (486 with conclusion selected). Queue: 5318 rules.
36000 rules inserted. Base: 18948 rules (486 with conclusion selected). Queue: 5258 rules.
36200 rules inserted. Base: 19036 rules (486 with conclusion selected). Queue: 5188 rules.
36400 rules inserted. Base: 19076 rules (488 with conclusion selected). Queue: 5150 rules.
36600 rules inserted. Base: 19160 rules (488 with conclusion selected). Queue: 5084 rules.
36800 rules inserted. Base: 19274 rules (488 with conclusion selected). Queue: 4988 rules.
37000 rules inserted. Base: 19290 rules (490 with conclusion selected). Queue: 4982 rules.
37200 rules inserted. Base: 19378 rules (490 with conclusion selected). Queue: 4918 rules.
37400 rules inserted. Base: 19479 rules (491 with conclusion selected). Queue: 4821 rules.
37600 rules inserted. Base: 19504 rules (492 with conclusion selected). Queue: 4816 rules.
37800 rules inserted. Base: 19634 rules (492 with conclusion selected). Queue: 4686 rules.
38000 rules inserted. Base: 19831 rules (492 with conclusion selected). Queue: 4496 rules.
38200 rules inserted. Base: 19976 rules (492 with conclusion selected). Queue: 4366 rules.
38400 rules inserted. Base: 20009 rules (492 with conclusion selected). Queue: 4362 rules.
38600 rules inserted. Base: 20017 rules (492 with conclusion selected). Queue: 4362 rules.
38800 rules inserted. Base: 20066 rules (492 with conclusion selected). Queue: 4387 rules.
39000 rules inserted. Base: 20111 rules (492 with conclusion selected). Queue: 4410 rules.
39200 rules inserted. Base: 20164 rules (492 with conclusion selected). Queue: 4426 rules.
39400 rules inserted. Base: 20192 rules (492 with conclusion selected). Queue: 4422 rules.
39600 rules inserted. Base: 20200 rules (492 with conclusion selected). Queue: 4422 rules.
39800 rules inserted. Base: 20334 rules (492 with conclusion selected). Queue: 4354 rules.
40000 rules inserted. Base: 20370 rules (492 with conclusion selected). Queue: 4372 rules.
40200 rules inserted. Base: 20517 rules (492 with conclusion selected). Queue: 4313 rules.
40400 rules inserted. Base: 20554 rules (492 with conclusion selected). Queue: 4331 rules.
40600 rules inserted. Base: 20596 rules (492 with conclusion selected). Queue: 4326 rules.
40800 rules inserted. Base: 20692 rules (492 with conclusion selected). Queue: 4306 rules.
41000 rules inserted. Base: 20758 rules (492 with conclusion selected). Queue: 4298 rules.
41200 rules inserted. Base: 20844 rules (492 with conclusion selected). Queue: 4218 rules.
41400 rules inserted. Base: 20886 rules (492 with conclusion selected). Queue: 4194 rules.
41600 rules inserted. Base: 20972 rules (492 with conclusion selected). Queue: 4114 rules.
41800 rules inserted. Base: 21014 rules (492 with conclusion selected). Queue: 4090 rules.
42000 rules inserted. Base: 21100 rules (492 with conclusion selected). Queue: 4010 rules.
42200 rules inserted. Base: 21142 rules (492 with conclusion selected). Queue: 3986 rules.
42400 rules inserted. Base: 21228 rules (492 with conclusion selected). Queue: 3906 rules.
42600 rules inserted. Base: 21332 rules (498 with conclusion selected). Queue: 3810 rules.
42800 rules inserted. Base: 21412 rules (498 with conclusion selected). Queue: 3800 rules.
43000 rules inserted. Base: 21461 rules (498 with conclusion selected). Queue: 3767 rules.
43200 rules inserted. Base: 21639 rules (498 with conclusion selected). Queue: 3712 rules.
43400 rules inserted. Base: 21824 rules (498 with conclusion selected). Queue: 3617 rules.
43600 rules inserted. Base: 22016 rules (498 with conclusion selected). Queue: 3551 rules.
43800 rules inserted. Base: 22161 rules (498 with conclusion selected). Queue: 3473 rules.
44000 rules inserted. Base: 22192 rules (498 with conclusion selected). Queue: 3450 rules.
44200 rules inserted. Base: 22317 rules (498 with conclusion selected). Queue: 3405 rules.
44400 rules inserted. Base: 22505 rules (498 with conclusion selected). Queue: 3285 rules.
44600 rules inserted. Base: 22668 rules (498 with conclusion selected). Queue: 3250 rules.
44800 rules inserted. Base: 22850 rules (498 with conclusion selected). Queue: 3146 rules.
45000 rules inserted. Base: 22919 rules (498 with conclusion selected). Queue: 3156 rules.
45200 rules inserted. Base: 23042 rules (498 with conclusion selected). Queue: 3214 rules.
45400 rules inserted. Base: 23105 rules (498 with conclusion selected). Queue: 3157 rules.
45600 rules inserted. Base: 23140 rules (498 with conclusion selected). Queue: 3126 rules.
45800 rules inserted. Base: 23197 rules (498 with conclusion selected). Queue: 3071 rules.
46000 rules inserted. Base: 23247 rules (498 with conclusion selected). Queue: 3024 rules.
46200 rules inserted. Base: 23280 rules (498 with conclusion selected). Queue: 2994 rules.
46400 rules inserted. Base: 23332 rules (504 with conclusion selected). Queue: 2944 rules.
46600 rules inserted. Base: 23516 rules (504 with conclusion selected). Queue: 2908 rules.
46800 rules inserted. Base: 23700 rules (504 with conclusion selected). Queue: 2757 rules.
47000 rules inserted. Base: 23849 rules (504 with conclusion selected). Queue: 2751 rules.
47200 rules inserted. Base: 24021 rules (504 with conclusion selected). Queue: 2750 rules.
47400 rules inserted. Base: 24216 rules (504 with conclusion selected). Queue: 2612 rules.
47600 rules inserted. Base: 24368 rules (504 with conclusion selected). Queue: 2507 rules.
47800 rules inserted. Base: 24498 rules (504 with conclusion selected). Queue: 2496 rules.
48000 rules inserted. Base: 24658 rules (504 with conclusion selected). Queue: 2518 rules.
48200 rules inserted. Base: 24843 rules (504 with conclusion selected). Queue: 2406 rules.
48400 rules inserted. Base: 25024 rules (504 with conclusion selected). Queue: 2367 rules.
48600 rules inserted. Base: 25124 rules (504 with conclusion selected). Queue: 2328 rules.
48800 rules inserted. Base: 25206 rules (504 with conclusion selected). Queue: 2250 rules.
49000 rules inserted. Base: 25300 rules (504 with conclusion selected). Queue: 2160 rules.
49200 rules inserted. Base: 25408 rules (504 with conclusion selected). Queue: 2056 rules.
49400 rules inserted. Base: 25492 rules (504 with conclusion selected). Queue: 1948 rules.
49600 rules inserted. Base: 25633 rules (504 with conclusion selected). Queue: 1943 rules.
49800 rules inserted. Base: 25741 rules (504 with conclusion selected). Queue: 1926 rules.
50000 rules inserted. Base: 25913 rules (504 with conclusion selected). Queue: 1784 rules.
50200 rules inserted. Base: 26061 rules (504 with conclusion selected). Queue: 1791 rules.
50400 rules inserted. Base: 26205 rules (504 with conclusion selected). Queue: 1747 rules.
50600 rules inserted. Base: 26365 rules (504 with conclusion selected). Queue: 1674 rules.
50800 rules inserted. Base: 26527 rules (504 with conclusion selected). Queue: 1556 rules.
51000 rules inserted. Base: 26704 rules (504 with conclusion selected). Queue: 1452 rules.
51200 rules inserted. Base: 26874 rules (504 with conclusion selected). Queue: 1274 rules.
51400 rules inserted. Base: 26988 rules (516 with conclusion selected). Queue: 1146 rules.
51600 rules inserted. Base: 27146 rules (516 with conclusion selected). Queue: 1030 rules.
51800 rules inserted. Base: 27264 rules (516 with conclusion selected). Queue: 964 rules.
52000 rules inserted. Base: 27416 rules (516 with conclusion selected). Queue: 871 rules.
52200 rules inserted. Base: 27546 rules (516 with conclusion selected). Queue: 814 rules.
52400 rules inserted. Base: 27666 rules (516 with conclusion selected). Queue: 712 rules.
52600 rules inserted. Base: 27711 rules (528 with conclusion selected). Queue: 667 rules.
52800 rules inserted. Base: 27789 rules (528 with conclusion selected). Queue: 678 rules.
53000 rules inserted. Base: 27924 rules (528 with conclusion selected). Queue: 702 rules.
53200 rules inserted. Base: 27891 rules (530 with conclusion selected). Queue: 708 rules.
53400 rules inserted. Base: 27998 rules (530 with conclusion selected). Queue: 601 rules.
53600 rules inserted. Base: 27978 rules (530 with conclusion selected). Queue: 540 rules.
53800 rules inserted. Base: 27916 rules (530 with conclusion selected). Queue: 494 rules.
54000 rules inserted. Base: 27570 rules (534 with conclusion selected). Queue: 523 rules.
54200 rules inserted. Base: 27082 rules (534 with conclusion selected). Queue: 512 rules.
54400 rules inserted. Base: 26539 rules (544 with conclusion selected). Queue: 573 rules.
54600 rules inserted. Base: 26517 rules (560 with conclusion selected). Queue: 503 rules.
54800 rules inserted. Base: 26484 rules (578 with conclusion selected). Queue: 490 rules.
55000 rules inserted. Base: 25916 rules (588 with conclusion selected). Queue: 598 rules.
55200 rules inserted. Base: 25382 rules (588 with conclusion selected). Queue: 593 rules.
55400 rules inserted. Base: 25233 rules (594 with conclusion selected). Queue: 632 rules.
55600 rules inserted. Base: 25130 rules (599 with conclusion selected). Queue: 606 rules.
55800 rules inserted. Base: 24837 rules (603 with conclusion selected). Queue: 576 rules.
56000 rules inserted. Base: 24826 rules (616 with conclusion selected). Queue: 562 rules.
56200 rules inserted. Base: 24993 rules (629 with conclusion selected). Queue: 501 rules.
56400 rules inserted. Base: 25136 rules (689 with conclusion selected). Queue: 541 rules.
56600 rules inserted. Base: 25329 rules (695 with conclusion selected). Queue: 516 rules.
56800 rules inserted. Base: 25468 rules (696 with conclusion selected). Queue: 449 rules.
57000 rules inserted. Base: 25601 rules (696 with conclusion selected). Queue: 372 rules.
57200 rules inserted. Base: 25739 rules (697 with conclusion selected). Queue: 267 rules.
57400 rules inserted. Base: 25834 rules (710 with conclusion selected). Queue: 317 rules.
57600 rules inserted. Base: 25896 rules (718 with conclusion selected). Queue: 348 rules.
57800 rules inserted. Base: 25907 rules (730 with conclusion selected). Queue: 513 rules.
58000 rules inserted. Base: 26075 rules (742 with conclusion selected). Queue: 644 rules.
58200 rules inserted. Base: 26157 rules (750 with conclusion selected). Queue: 803 rules.
58400 rules inserted. Base: 26318 rules (752 with conclusion selected). Queue: 769 rules.
58600 rules inserted. Base: 26514 rules (752 with conclusion selected). Queue: 588 rules.
58800 rules inserted. Base: 26575 rules (759 with conclusion selected). Queue: 739 rules.
59000 rules inserted. Base: 26732 rules (762 with conclusion selected). Queue: 813 rules.
59200 rules inserted. Base: 26858 rules (763 with conclusion selected). Queue: 828 rules.
59400 rules inserted. Base: 26959 rules (766 with conclusion selected). Queue: 890 rules.
59600 rules inserted. Base: 27107 rules (768 with conclusion selected). Queue: 940 rules.
59800 rules inserted. Base: 27255 rules (769 with conclusion selected). Queue: 965 rules.
60000 rules inserted. Base: 27429 rules (777 with conclusion selected). Queue: 1219 rules.
60200 rules inserted. Base: 27560 rules (785 with conclusion selected). Queue: 1415 rules.
60400 rules inserted. Base: 27723 rules (786 with conclusion selected). Queue: 1440 rules.
60600 rules inserted. Base: 27897 rules (786 with conclusion selected). Queue: 1440 rules.
60800 rules inserted. Base: 28047 rules (786 with conclusion selected). Queue: 1440 rules.
61000 rules inserted. Base: 28197 rules (786 with conclusion selected). Queue: 1393 rules.
61200 rules inserted. Base: 28397 rules (786 with conclusion selected). Queue: 1214 rules.
61400 rules inserted. Base: 28585 rules (786 with conclusion selected). Queue: 1067 rules.
61600 rules inserted. Base: 28595 rules (790 with conclusion selected). Queue: 1154 rules.
61800 rules inserted. Base: 28762 rules (790 with conclusion selected). Queue: 1154 rules.
62000 rules inserted. Base: 28889 rules (790 with conclusion selected). Queue: 1154 rules.
62200 rules inserted. Base: 29016 rules (790 with conclusion selected). Queue: 1154 rules.
62400 rules inserted. Base: 29145 rules (790 with conclusion selected). Queue: 1154 rules.
62600 rules inserted. Base: 29298 rules (793 with conclusion selected). Queue: 1272 rules.
62800 rules inserted. Base: 29426 rules (796 with conclusion selected). Queue: 1426 rules.
63000 rules inserted. Base: 29555 rules (796 with conclusion selected). Queue: 1426 rules.
63200 rules inserted. Base: 29679 rules (796 with conclusion selected). Queue: 1426 rules.
63400 rules inserted. Base: 29776 rules (796 with conclusion selected). Queue: 1426 rules.
63600 rules inserted. Base: 29879 rules (796 with conclusion selected). Queue: 1445 rules.
63800 rules inserted. Base: 30079 rules (796 with conclusion selected). Queue: 1527 rules.
64000 rules inserted. Base: 30239 rules (797 with conclusion selected). Queue: 1561 rules.
64200 rules inserted. Base: 30421 rules (798 with conclusion selected). Queue: 1668 rules.
64400 rules inserted. Base: 30530 rules (798 with conclusion selected). Queue: 1668 rules.
64600 rules inserted. Base: 30582 rules (798 with conclusion selected). Queue: 1668 rules.
64800 rules inserted. Base: 30649 rules (798 with conclusion selected). Queue: 1653 rules.
65000 rules inserted. Base: 30729 rules (798 with conclusion selected). Queue: 1650 rules.
65200 rules inserted. Base: 30863 rules (798 with conclusion selected). Queue: 1720 rules.
65400 rules inserted. Base: 31031 rules (798 with conclusion selected). Queue: 1752 rules.
65600 rules inserted. Base: 31191 rules (798 with conclusion selected). Queue: 1752 rules.
65800 rules inserted. Base: 31327 rules (798 with conclusion selected). Queue: 1848 rules.
66000 rules inserted. Base: 31395 rules (798 with conclusion selected). Queue: 1848 rules.
66200 rules inserted. Base: 31490 rules (798 with conclusion selected). Queue: 1828 rules.
66400 rules inserted. Base: 31568 rules (798 with conclusion selected). Queue: 1808 rules.
66600 rules inserted. Base: 31615 rules (798 with conclusion selected). Queue: 1793 rules.
66800 rules inserted. Base: 31781 rules (798 with conclusion selected). Queue: 1830 rules.
67000 rules inserted. Base: 31981 rules (798 with conclusion selected). Queue: 2086 rules.
67200 rules inserted. Base: 32118 rules (798 with conclusion selected). Queue: 2150 rules.
67400 rules inserted. Base: 32305 rules (798 with conclusion selected). Queue: 2278 rules.
67600 rules inserted. Base: 32505 rules (798 with conclusion selected). Queue: 2406 rules.
67800 rules inserted. Base: 32615 rules (798 with conclusion selected). Queue: 2451 rules.
68000 rules inserted. Base: 32649 rules (798 with conclusion selected). Queue: 2450 rules.
68200 rules inserted. Base: 32724 rules (798 with conclusion selected). Queue: 2438 rules.
68400 rules inserted. Base: 32854 rules (798 with conclusion selected). Queue: 2372 rules.
68600 rules inserted. Base: 33028 rules (798 with conclusion selected). Queue: 2368 rules.
68800 rules inserted. Base: 33183 rules (798 with conclusion selected). Queue: 2368 rules.
69000 rules inserted. Base: 33345 rules (798 with conclusion selected). Queue: 2368 rules.
69200 rules inserted. Base: 33507 rules (798 with conclusion selected). Queue: 2496 rules.
69400 rules inserted. Base: 33631 rules (798 with conclusion selected). Queue: 2624 rules.
69600 rules inserted. Base: 33763 rules (798 with conclusion selected). Queue: 2624 rules.
69800 rules inserted. Base: 33931 rules (798 with conclusion selected). Queue: 2624 rules.
70000 rules inserted. Base: 34079 rules (798 with conclusion selected). Queue: 2624 rules.
70200 rules inserted. Base: 34246 rules (798 with conclusion selected). Queue: 2880 rules.
70400 rules inserted. Base: 34342 rules (798 with conclusion selected). Queue: 2832 rules.
70600 rules inserted. Base: 34481 rules (798 with conclusion selected). Queue: 2775 rules.
70800 rules inserted. Base: 34626 rules (798 with conclusion selected). Queue: 2730 rules.
71000 rules inserted. Base: 34722 rules (798 with conclusion selected). Queue: 2722 rules.
71200 rules inserted. Base: 34754 rules (798 with conclusion selected). Queue: 2754 rules.
71400 rules inserted. Base: 34786 rules (798 with conclusion selected). Queue: 2786 rules.
71600 rules inserted. Base: 34877 rules (798 with conclusion selected). Queue: 2786 rules.
71800 rules inserted. Base: 35037 rules (798 with conclusion selected). Queue: 2786 rules.
72000 rules inserted. Base: 35160 rules (798 with conclusion selected). Queue: 2754 rules.
72200 rules inserted. Base: 35194 rules (798 with conclusion selected). Queue: 2762 rules.
72400 rules inserted. Base: 35234 rules (798 with conclusion selected). Queue: 2802 rules.
72600 rules inserted. Base: 35250 rules (798 with conclusion selected). Queue: 2818 rules.
72800 rules inserted. Base: 35409 rules (798 with conclusion selected). Queue: 2818 rules.
73000 rules inserted. Base: 35566 rules (798 with conclusion selected). Queue: 2818 rules.
73200 rules inserted. Base: 35703 rules (798 with conclusion selected). Queue: 2784 rules.
73400 rules inserted. Base: 35851 rules (798 with conclusion selected). Queue: 2751 rules.
73600 rules inserted. Base: 35981 rules (798 with conclusion selected). Queue: 2698 rules.
73800 rules inserted. Base: 36085 rules (798 with conclusion selected). Queue: 2733 rules.
74000 rules inserted. Base: 36285 rules (798 with conclusion selected). Queue: 2850 rules.
74200 rules inserted. Base: 36442 rules (798 with conclusion selected). Queue: 2944 rules.
74400 rules inserted. Base: 36466 rules (798 with conclusion selected). Queue: 2960 rules.
74600 rules inserted. Base: 36498 rules (798 with conclusion selected). Queue: 2992 rules.
74800 rules inserted. Base: 36550 rules (798 with conclusion selected). Queue: 2980 rules.
75000 rules inserted. Base: 36673 rules (798 with conclusion selected). Queue: 3052 rules.
75200 rules inserted. Base: 36873 rules (798 with conclusion selected). Queue: 3169 rules.
75400 rules inserted. Base: 36982 rules (798 with conclusion selected). Queue: 3232 rules.
75600 rules inserted. Base: 37010 rules (798 with conclusion selected). Queue: 3256 rules.
75800 rules inserted. Base: 37042 rules (798 with conclusion selected). Queue: 3288 rules.
76000 rules inserted. Base: 37139 rules (798 with conclusion selected). Queue: 3272 rules.
76200 rules inserted. Base: 37273 rules (799 with conclusion selected). Queue: 3224 rules.
76400 rules inserted. Base: 37322 rules (800 with conclusion selected). Queue: 3260 rules.
76600 rules inserted. Base: 37477 rules (800 with conclusion selected). Queue: 3260 rules.
76800 rules inserted. Base: 37651 rules (800 with conclusion selected). Queue: 3260 rules.
77000 rules inserted. Base: 37825 rules (800 with conclusion selected). Queue: 3260 rules.
77200 rules inserted. Base: 37862 rules (800 with conclusion selected). Queue: 3260 rules.
77400 rules inserted. Base: 37993 rules (800 with conclusion selected). Queue: 3356 rules.
77600 rules inserted. Base: 38193 rules (800 with conclusion selected). Queue: 3482 rules.
77800 rules inserted. Base: 38310 rules (800 with conclusion selected). Queue: 3484 rules.
78000 rules inserted. Base: 38438 rules (800 with conclusion selected). Queue: 3484 rules.
78200 rules inserted. Base: 38605 rules (800 with conclusion selected). Queue: 3484 rules.
78400 rules inserted. Base: 38780 rules (800 with conclusion selected). Queue: 3484 rules.
78600 rules inserted. Base: 38894 rules (800 with conclusion selected). Queue: 3484 rules.
78800 rules inserted. Base: 38945 rules (800 with conclusion selected). Queue: 3556 rules.
79000 rules inserted. Base: 39145 rules (800 with conclusion selected). Queue: 3676 rules.
79200 rules inserted. Base: 39295 rules (800 with conclusion selected). Queue: 3716 rules.
79400 rules inserted. Base: 39370 rules (800 with conclusion selected). Queue: 3704 rules.
79600 rules inserted. Base: 39471 rules (808 with conclusion selected). Queue: 3625 rules.
79800 rules inserted. Base: 39488 rules (808 with conclusion selected). Queue: 3619 rules.
80000 rules inserted. Base: 39599 rules (808 with conclusion selected). Queue: 3619 rules.
80200 rules inserted. Base: 39717 rules (808 with conclusion selected). Queue: 3619 rules.
80400 rules inserted. Base: 39780 rules (808 with conclusion selected). Queue: 3619 rules.
80600 rules inserted. Base: 39867 rules (808 with conclusion selected). Queue: 3587 rules.
80800 rules inserted. Base: 40041 rules (808 with conclusion selected). Queue: 3587 rules.
81000 rules inserted. Base: 40216 rules (808 with conclusion selected). Queue: 3587 rules.
81200 rules inserted. Base: 40372 rules (808 with conclusion selected). Queue: 3587 rules.
81400 rules inserted. Base: 40392 rules (808 with conclusion selected). Queue: 3555 rules.
81600 rules inserted. Base: 40510 rules (808 with conclusion selected). Queue: 3555 rules.
81800 rules inserted. Base: 40620 rules (808 with conclusion selected). Queue: 3555 rules.
82000 rules inserted. Base: 40731 rules (808 with conclusion selected). Queue: 3555 rules.
82200 rules inserted. Base: 40758 rules (808 with conclusion selected). Queue: 3523 rules.
82400 rules inserted. Base: 40932 rules (808 with conclusion selected). Queue: 3523 rules.
82600 rules inserted. Base: 41099 rules (808 with conclusion selected). Queue: 3523 rules.
82800 rules inserted. Base: 41273 rules (808 with conclusion selected). Queue: 3523 rules.
83000 rules inserted. Base: 41375 rules (808 with conclusion selected). Queue: 3483 rules.
83200 rules inserted. Base: 41343 rules (808 with conclusion selected). Queue: 3435 rules.
83400 rules inserted. Base: 41403 rules (808 with conclusion selected). Queue: 3425 rules.
83600 rules inserted. Base: 41585 rules (808 with conclusion selected). Queue: 3415 rules.
83800 rules inserted. Base: 41763 rules (808 with conclusion selected). Queue: 3405 rules.
84000 rules inserted. Base: 41920 rules (808 with conclusion selected). Queue: 3397 rules.
84200 rules inserted. Base: 41951 rules (808 with conclusion selected). Queue: 3397 rules.
84400 rules inserted. Base: 42062 rules (808 with conclusion selected). Queue: 3397 rules.
84600 rules inserted. Base: 42177 rules (808 with conclusion selected). Queue: 3397 rules.
84800 rules inserted. Base: 42262 rules (808 with conclusion selected). Queue: 3397 rules.
85000 rules inserted. Base: 42359 rules (808 with conclusion selected). Queue: 3392 rules.
85200 rules inserted. Base: 42541 rules (808 with conclusion selected). Queue: 3383 rules.
85400 rules inserted. Base: 42717 rules (808 with conclusion selected). Queue: 3373 rules.
85600 rules inserted. Base: 42872 rules (808 with conclusion selected). Queue: 3365 rules.
85800 rules inserted. Base: 42905 rules (808 with conclusion selected). Queue: 3365 rules.
86000 rules inserted. Base: 43015 rules (808 with conclusion selected). Queue: 3365 rules.
86200 rules inserted. Base: 43133 rules (808 with conclusion selected). Queue: 3365 rules.
86400 rules inserted. Base: 43212 rules (808 with conclusion selected). Queue: 3365 rules.
86600 rules inserted. Base: 43301 rules (808 with conclusion selected). Queue: 3279 rules.
86800 rules inserted. Base: 43324 rules (808 with conclusion selected). Queue: 3239 rules.
87000 rules inserted. Base: 43423 rules (808 with conclusion selected). Queue: 3239 rules.
87200 rules inserted. Base: 43522 rules (808 with conclusion selected). Queue: 3239 rules.
87400 rules inserted. Base: 43594 rules (808 with conclusion selected). Queue: 3239 rules.
87600 rules inserted. Base: 43663 rules (808 with conclusion selected). Queue: 3226 rules.
87800 rules inserted. Base: 43845 rules (808 with conclusion selected). Queue: 3216 rules.
88000 rules inserted. Base: 44020 rules (808 with conclusion selected). Queue: 3207 rules.
88200 rules inserted. Base: 44173 rules (808 with conclusion selected). Queue: 3199 rules.
88400 rules inserted. Base: 44194 rules (808 with conclusion selected). Queue: 3191 rules.
88600 rules inserted. Base: 44293 rules (808 with conclusion selected). Queue: 3191 rules.
88800 rules inserted. Base: 44391 rules (808 with conclusion selected). Queue: 3191 rules.
89000 rules inserted. Base: 44424 rules (808 with conclusion selected). Queue: 3187 rules.
89200 rules inserted. Base: 44551 rules (808 with conclusion selected). Queue: 3176 rules.
89400 rules inserted. Base: 44724 rules (808 with conclusion selected). Queue: 3167 rules.
89600 rules inserted. Base: 44906 rules (808 with conclusion selected). Queue: 3158 rules.
89800 rules inserted. Base: 45038 rules (808 with conclusion selected). Queue: 3192 rules.
90000 rules inserted. Base: 44983 rules (809 with conclusion selected). Queue: 3145 rules.
90200 rules inserted. Base: 45082 rules (809 with conclusion selected). Queue: 3126 rules.
90400 rules inserted. Base: 45180 rules (809 with conclusion selected). Queue: 3105 rules.
90600 rules inserted. Base: 45280 rules (809 with conclusion selected). Queue: 3088 rules.
90800 rules inserted. Base: 45327 rules (809 with conclusion selected). Queue: 3077 rules.
91000 rules inserted. Base: 45425 rules (809 with conclusion selected). Queue: 3077 rules.
91200 rules inserted. Base: 45524 rules (809 with conclusion selected). Queue: 3077 rules.
91400 rules inserted. Base: 45591 rules (809 with conclusion selected). Queue: 3077 rules.
91600 rules inserted. Base: 45672 rules (809 with conclusion selected). Queue: 3049 rules.
91800 rules inserted. Base: 45772 rules (809 with conclusion selected). Queue: 3028 rules.
92000 rules inserted. Base: 45870 rules (809 with conclusion selected). Queue: 3009 rules.
92200 rules inserted. Base: 45955 rules (809 with conclusion selected). Queue: 2985 rules.
92400 rules inserted. Base: 46016 rules (809 with conclusion selected). Queue: 2989 rules.
92600 rules inserted. Base: 46115 rules (809 with conclusion selected). Queue: 2989 rules.
92800 rules inserted. Base: 46214 rules (809 with conclusion selected). Queue: 2989 rules.
93000 rules inserted. Base: 46253 rules (809 with conclusion selected). Queue: 3021 rules.
93200 rules inserted. Base: 46218 rules (810 with conclusion selected). Queue: 2947 rules.
93400 rules inserted. Base: 46309 rules (810 with conclusion selected). Queue: 2862 rules.
93600 rules inserted. Base: 46401 rules (810 with conclusion selected). Queue: 2779 rules.
93800 rules inserted. Base: 46494 rules (810 with conclusion selected). Queue: 2716 rules.
94000 rules inserted. Base: 46592 rules (810 with conclusion selected). Queue: 2700 rules.
94200 rules inserted. Base: 46692 rules (810 with conclusion selected). Queue: 2678 rules.
94400 rules inserted. Base: 46790 rules (810 with conclusion selected). Queue: 2660 rules.
94600 rules inserted. Base: 46884 rules (810 with conclusion selected). Queue: 2594 rules.
94800 rules inserted. Base: 46973 rules (810 with conclusion selected). Queue: 2514 rules.
95000 rules inserted. Base: 47063 rules (810 with conclusion selected). Queue: 2433 rules.
95200 rules inserted. Base: 47162 rules (810 with conclusion selected). Queue: 2364 rules.
95400 rules inserted. Base: 47254 rules (810 with conclusion selected). Queue: 2340 rules.
95600 rules inserted. Base: 47353 rules (810 with conclusion selected). Queue: 2324 rules.
95800 rules inserted. Base: 47452 rules (810 with conclusion selected). Queue: 2300 rules.
96000 rules inserted. Base: 47500 rules (810 with conclusion selected). Queue: 2308 rules.
96200 rules inserted. Base: 47410 rules (834 with conclusion selected). Queue: 2578 rules.
96400 rules inserted. Base: 47465 rules (834 with conclusion selected). Queue: 2538 rules.
96600 rules inserted. Base: 47564 rules (834 with conclusion selected). Queue: 2469 rules.
96800 rules inserted. Base: 47657 rules (834 with conclusion selected). Queue: 2382 rules.
97000 rules inserted. Base: 47747 rules (834 with conclusion selected). Queue: 2301 rules.
97200 rules inserted. Base: 47827 rules (834 with conclusion selected). Queue: 2331 rules.
97400 rules inserted. Base: 47879 rules (834 with conclusion selected). Queue: 2294 rules.
97600 rules inserted. Base: 47970 rules (834 with conclusion selected). Queue: 2236 rules.
97800 rules inserted. Base: 48060 rules (834 with conclusion selected). Queue: 2152 rules.
98000 rules inserted. Base: 48152 rules (834 with conclusion selected). Queue: 2069 rules.
98200 rules inserted. Base: 48236 rules (834 with conclusion selected). Queue: 1994 rules.
98400 rules inserted. Base: 48215 rules (838 with conclusion selected). Queue: 1969 rules.
98600 rules inserted. Base: 48415 rules (838 with conclusion selected). Queue: 1861 rules.
98800 rules inserted. Base: 48615 rules (838 with conclusion selected). Queue: 1710 rules.
99000 rules inserted. Base: 48815 rules (838 with conclusion selected). Queue: 1542 rules.
99200 rules inserted. Base: 48874 rules (838 with conclusion selected). Queue: 1502 rules.
99400 rules inserted. Base: 48947 rules (838 with conclusion selected). Queue: 1462 rules.
99600 rules inserted. Base: 49139 rules (838 with conclusion selected). Queue: 1355 rules.
99800 rules inserted. Base: 49339 rules (838 with conclusion selected). Queue: 1182 rules.
100000 rules inserted. Base: 49405 rules (838 with conclusion selected). Queue: 1142 rules.
100200 rules inserted. Base: 49459 rules (838 with conclusion selected). Queue: 1095 rules.
100400 rules inserted. Base: 49457 rules (840 with conclusion selected). Queue: 1012 rules.
100600 rules inserted. Base: 49657 rules (840 with conclusion selected). Queue: 874 rules.
100800 rules inserted. Base: 49857 rules (840 with conclusion selected). Queue: 692 rules.
101000 rules inserted. Base: 50045 rules (840 with conclusion selected). Queue: 555 rules.
101200 rules inserted. Base: 50245 rules (840 with conclusion selected). Queue: 370 rules.
101400 rules inserted. Base: 50389 rules (840 with conclusion selected). Queue: 235 rules.
101600 rules inserted. Base: 50540 rules (842 with conclusion selected). Queue: 225 rules.
101800 rules inserted. Base: 50689 rules (842 with conclusion selected). Queue: 194 rules.
102000 rules inserted. Base: 50814 rules (842 with conclusion selected). Queue: 192 rules.
102200 rules inserted. Base: 50910 rules (844 with conclusion selected). Queue: 544 rules.
102400 rules inserted. Base: 51089 rules (844 with conclusion selected). Queue: 376 rules.
102600 rules inserted. Base: 51110 rules (844 with conclusion selected). Queue: 448 rules.
102800 rules inserted. Base: 51222 rules (847 with conclusion selected). Queue: 542 rules.
103000 rules inserted. Base: 51401 rules (847 with conclusion selected). Queue: 374 rules.
103200 rules inserted. Base: 51407 rules (851 with conclusion selected). Queue: 264 rules.
103400 rules inserted. Base: 51457 rules (853 with conclusion selected). Queue: 195 rules.
103600 rules inserted. Base: 51370 rules (858 with conclusion selected). Queue: 228 rules.
103800 rules inserted. Base: 51353 rules (858 with conclusion selected). Queue: 238 rules.
104000 rules inserted. Base: 51229 rules (862 with conclusion selected). Queue: 271 rules.
104200 rules inserted. Base: 51144 rules (864 with conclusion selected). Queue: 262 rules.
104400 rules inserted. Base: 51192 rules (866 with conclusion selected). Queue: 184 rules.
104600 rules inserted. Base: 50604 rules (866 with conclusion selected). Queue: 188 rules.
104800 rules inserted. Base: 49976 rules (866 with conclusion selected). Queue: 116 rules.
105000 rules inserted. Base: 49879 rules (884 with conclusion selected). Queue: 256 rules.
105200 rules inserted. Base: 49825 rules (895 with conclusion selected). Queue: 428 rules.
105400 rules inserted. Base: 49821 rules (896 with conclusion selected). Queue: 355 rules.
105600 rules inserted. Base: 49855 rules (906 with conclusion selected). Queue: 423 rules.
105800 rules inserted. Base: 50004 rules (914 with conclusion selected). Queue: 492 rules.
106000 rules inserted. Base: 50183 rules (922 with conclusion selected). Queue: 535 rules.
106200 rules inserted. Base: 50300 rules (926 with conclusion selected). Queue: 520 rules.
106400 rules inserted. Base: 50463 rules (926 with conclusion selected). Queue: 384 rules.
106600 rules inserted. Base: 50584 rules (933 with conclusion selected). Queue: 409 rules.
106800 rules inserted. Base: 50731 rules (934 with conclusion selected). Queue: 281 rules.
107000 rules inserted. Base: 50884 rules (938 with conclusion selected). Queue: 192 rules.
107200 rules inserted. Base: 50947 rules (938 with conclusion selected). Queue: 121 rules.
107400 rules inserted. Base: 50861 rules (948 with conclusion selected). Queue: 261 rules.
107600 rules inserted. Base: 50815 rules (962 with conclusion selected). Queue: 560 rules.
107800 rules inserted. Base: 50950 rules (964 with conclusion selected). Queue: 581 rules.
108000 rules inserted. Base: 51099 rules (966 with conclusion selected). Queue: 600 rules.
108200 rules inserted. Base: 51257 rules (970 with conclusion selected). Queue: 624 rules.
108400 rules inserted. Base: 51399 rules (970 with conclusion selected). Queue: 576 rules.
108600 rules inserted. Base: 51521 rules (970 with conclusion selected). Queue: 528 rules.
108800 rules inserted. Base: 51646 rules (970 with conclusion selected). Queue: 502 rules.
109000 rules inserted. Base: 51769 rules (970 with conclusion selected). Queue: 416 rules.
109200 rules inserted. Base: 51887 rules (970 with conclusion selected). Queue: 333 rules.
109400 rules inserted. Base: 51986 rules (970 with conclusion selected). Queue: 258 rules.
109600 rules inserted. Base: 52071 rules (970 with conclusion selected). Queue: 173 rules.
109800 rules inserted. Base: 52175 rules (970 with conclusion selected). Queue: 69 rules.
Starting query inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_vp,m_accesstoken)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_104,m_105,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_106,m_107,m_vp)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107))
RESULT inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_vp,m_accesstoken)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_104,m_105,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_106,m_107,m_vp)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107)) is true.

--------------------------------------------------------------
Verification summary:

Query inj-event(auth_UserCompletesProtocol(m_handshakeReq,m_handshakeResp,m_vpr,m_vp)) ==> inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq,m_handshakeResp,m_104,m_105,m_106,m_107,m_vpr)) && inj-event(verifierInConeOfUser(m_104,m_105,m_106,m_107)) is true.

Query inj-event(auth_AppCompletesProtocol(m_104,m_105,m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_106,m_107,m_vp,m_accesstoken)) ==> inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq,m_handshakeResp,m_uri,m_rule,m_vp,m_accesstoken)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107)) is true.

Query inj-event(auth_VerifierCompletesProtocol(m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_vp,m_accesstoken)) ==> inj-event(auth_AppSendsLastMessageToVerifier(m_104,m_105,m_handshake_ver,m_handshake_resp_ver,m_uri,m_vpr,m_106,m_107,m_vp)) && inj-event(auth_UserSendsLastMessageToApp(m_104,m_105,m_106,m_107)) is true.

--------------------------------------------------------------