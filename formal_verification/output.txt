Linear part:
exp(exp(g,x),y) = exp(exp(g,y),x)
Completing equations...
Completed equations:
exp(exp(g,x),y) = exp(exp(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new sku: SecretKey;
{2}new ska: SecretKey;
{3}new skv: SecretKey;
{4}new ski: SecretKey;
{5}new u: exponent;
{6}new a: exponent;
{7}new v: exponent;
{8}new i: exponent;
{9}out(c, exp(g,u));
{10}out(c, exp(g,a));
{11}out(c, exp(g,v));
{12}out(c, pk(sku));
{13}out(c, pk(ska));
{14}out(c, pk(skv));
{15}out(c, pk(ski));
{16}let DID_u: DID = gen_DID(exp(g,u)) in
{17}let DID_a: DID = gen_DID(exp(g,a)) in
{18}let DID_v: DID = gen_DID(exp(g,v)) in
{19}let DID_i: DID = gen_DID(exp(g,i)) in
{20}out(c, DID_u);
{21}out(c, DID_a);
{22}out(c, DID_v);
{23}out(c, DID_i);
{24}new claims: bitstring;
{25}let attr: bitstring = (DID_u,DID_i,claims) in
{26}let vc: bitstring = ((attr,DID_i,DID_u),sig(hash((attr,DID_i,DID_u)),ski)) in
(
    {27}!
    {28}let talksOnlyToHonest: bool = true in
    {29}let c_a2v_1: channel = c_a2v in
    {30}let v_1: exponent = v in
    {31}let skv_1: SecretKey = skv in
    {32}let pku: PublicKey = pk(sku) in
    {33}let g2u: G = exp(g,u) in
    {34}let pka: PublicKey = pk(ska) in
    {35}let g2a: G = exp(g,a) in
    {36}let pki: PublicKey = pk(ski) in
    {37}let claims_1: bitstring = claims in
    {38}let uri: bitstring = uri_req in
    {39}new sc: exponent;
    {40}new k1: SymmetricKey;
    {41}new k3: SymmetricKey;
    {42}new k10: SymmetricKey;
    {43}new th0: nonce;
    {44}new nc: nonce;
    {45}let rule: bitstring = (DID_i,DID_v,DID_u,DID_a,uri) in
    {46}let attr_1: bitstring = (DID_u,DID_i,claims_1) in
    {47}out(c_a2v_1, (tag_th0,th0));
    {48}in(c_a2v_1, (=tag_M1,M1': bitstring));
    {49}let (enc_k0: bitstring,enc_g2sav: bitstring,enc_m1: bitstring) = M1' in
    {50}let (=tag_g2sav,g2sav': G) = adec(enc_g2sav,skv_1) in
    {51}let g2v2sav: SymmetricKey = bit2symk((tag_g2v2sav,hash_gen(exp(g2sav',v_1)))) in
    {52}let (=tag_k0,k0': SymmetricKey) = sdec(enc_k0,g2v2sav) in
    {53}let (=tag_m1,m1': bitstring) = sdec(enc_m1,k0') in
    {54}let (th0': nonce,th1': nonce,s1: bitstring) = m1' in
    {55}if check(hash_gen(g2sav'),s1,pka) then
    {56}if (th0' = th0) then
    {57}let g2sc: G = exp(g,sc) in
    {58}let g2sc2sav: SymmetricKey = bit2symk((tag_g2sc2sav,hash_gen(exp(g2sav',sc)))) in
    {59}let m2: bitstring = (th1',sig(hash_gen(g2sc),skv_1)) in
    {60}let M2: bitstring = (senc((tag_k1,k1),g2sc2sav),aenc((tag_g2sc,g2sc),pka),senc((tag_m2,m2),k1)) in
    {61}out(c_a2v_1, (tag_M2,M2));
    {62}in(c_a2v_1, (=tag_M3,M3': bitstring));
    {63}let (enc_k2: bitstring,enc_m3: bitstring) = M3' in
    {64}let (=tag_k2,k2': SymmetricKey) = sdec(enc_k2,g2sc2sav) in
    {65}let (=tag_m3,m3': bitstring) = sdec(enc_m3,k2') in
    {66}if (m3' = rule) then
    {67}let m4: bitstring = (attr_1,uri,nc) in
    {68}let M4: bitstring = (senc((tag_k3,k3),g2sc2sav),senc((tag_m4,m4),k3)) in
    {69}out(c_a2v_1, (tag_M4,M4));
    {70}in(c_a2v_1, (=tag_M10,M10': bitstring));
    {71}let (=tag_m10,enc_k9: bitstring,enc_m10: bitstring) = M10' in
    {72}let (=tag_k9,k9': SymmetricKey) = sdec(enc_k9,g2sc2sav) in
    {73}let (=tag_m10,m10': bitstring) = sdec(enc_m10,k9') in
    {74}let (m9'': bitstring,s7: bitstring) = m10' in
    {75}let (vp'': bitstring,s6': bitstring) = m9'' in
    {76}let (nr'': bitstring,m4'': bitstring,vc'': bitstring) = vp'' in
    {77}let (attr'': bitstring,uri'': bitstring,nc'': nonce) = m4'' in
    {78}if check(hash(m9''),s7,pka) then
    {79}if check(hash(vp''),s6',pku) then
    {80}if (nc'' = nc) then
    {81}let (vc_claims: bitstring,sig_vc_claims: bitstring) = vc'' in
    {82}if check(hash(vc_claims),sig_vc_claims,pki) then
    {83}let (attr''': bitstring,DID_i''': DID,DID_u''': DID) = vc_claims in
    {84}if (attr''' = attr_1) then
    {85}new resource: bitstring;
    {86}let m11: bitstring = resource in
    {87}let M11: bitstring = (senc((tag_k10,k10),g2sc2sav),senc((tag_m11,m11),k10)) in
    {88}event auth_VerifierSendsLastMessageToAppMessage(senc((tag_m11,m11),k10));
    {89}event auth_VerifierSendsLastMessageToAppKey(senc((tag_k10,k10),g2sc2sav));
    {90}out(c_a2v_1, (tag_M11,M11));
    {91}if talksOnlyToHonest then
    {92}event auth_VerfierCompletesProtocolWithAppKey(senc((tag_k3,k3),g2sc2sav));
    {93}event auth_VerfierCompletesProtocolWithAppMessage(senc((tag_m4,m4),k3));
    {94}out(ch(resource), resource_fromVerifier)
) | (
    {95}!
    {96}let talksOnlyToHonest_1: bool = true in
    {97}let c_a2v_2: channel = c_a2v in
    {98}let c_u2a_1: channel = c_u2a in
    {99}let a_1: exponent = a in
    {100}let ska_1: SecretKey = ska in
    {101}let pku_1: PublicKey = pk(sku) in
    {102}let g2u_1: G = exp(g,u) in
    {103}let pkv: PublicKey = pk(skv) in
    {104}let g2v: G = exp(g,v) in
    {105}let pki_1: PublicKey = pk(ski) in
    {106}let uri_1: bitstring = uri_req in
    {107}new sav: exponent;
    {108}new sa: exponent;
    {109}new k0: SymmetricKey;
    {110}new k2: SymmetricKey;
    {111}new k5: SymmetricKey;
    {112}new k7: SymmetricKey;
    {113}new k9: SymmetricKey;
    {114}new th1: nonce;
    {115}new th2: nonce;
    {116}new nr: nonce;
    {117}in(c_a2v_2, (=tag_th0,th0'_1: nonce));
    {118}let g2sav: G = exp(g,sav) in
    {119}let m1: bitstring = (th0'_1,th1,sig(hash_gen(g2sav),ska_1)) in
    {120}let g2v2sav_1: SymmetricKey = bit2symk((tag_g2v2sav,hash_gen(exp(g2v,sav)))) in
    {121}let M1: bitstring = (senc((tag_k0,k0),g2v2sav_1),aenc((tag_g2sav,g2sav),pkv),senc((tag_m1,m1),k0)) in
    {122}out(c_a2v_2, (tag_M1,M1));
    {123}in(c_a2v_2, (=tag_M2,M2': bitstring));
    {124}let (enc_k1: bitstring,enc_g2sc: bitstring,enc_m2: bitstring) = M2' in
    {125}let (=tag_g2sc,g2sc': G) = adec(enc_g2sc,ska_1) in
    {126}let g2sc2sav_1: SymmetricKey = bit2symk((tag_g2sc2sav,hash_gen(exp(g2sc',sav)))) in
    {127}let (=tag_k1,k1': SymmetricKey) = sdec(enc_k1,g2sc2sav_1) in
    {128}let (=tag_m2,m2': bitstring) = sdec(enc_m2,k1') in
    {129}let (th1'_1: nonce,s2: bitstring) = m2' in
    {130}if check(hash_gen(g2sc'),s2,pkv) then
    {131}if (th1'_1 = th1) then
    {132}let m3: bitstring = (DID_i,DID_v,DID_u,DID_a,uri_1) in
    {133}let M3: bitstring = (senc((tag_k2,k2),g2sc2sav_1),senc((tag_m3,m3),k2)) in
    {134}out(c_a2v_2, (tag_M3,M3));
    {135}in(c_a2v_2, (=tag_M4,M4': bitstring));
    {136}let (k3_enc: bitstring,m4_enc: bitstring) = M4' in
    {137}let (=tag_k3,k3': SymmetricKey) = sdec(k3_enc,g2sc2sav_1) in
    {138}let (=tag_m4,m4': bitstring) = sdec(m4_enc,k3') in
    {139}let (attr': bitstring,uri': bitstring,nc': nonce) = m4' in
    {140}if (uri' = uri_1) then
    {141}out(c_u2a_1, (tag_th2,th2));
    {142}in(c_u2a_1, (=tag_M5,M5': bitstring));
    {143}let (enc_k4: bitstring,enc_g2su: bitstring,enc_m5: bitstring) = M5' in
    {144}let (=tag_g2su,g2su': G) = adec(enc_g2su,ska_1) in
    {145}let g2a2su: SymmetricKey = bit2symk((tag_g2a2su,hash_gen(exp(g2su',a_1)))) in
    {146}let (=tag_k4,k4': SymmetricKey) = sdec(enc_k4,g2a2su) in
    {147}let (=tag_m5,m5': bitstring) = sdec(enc_m5,k4') in
    {148}let (th2': nonce,th3': nonce,s3: bitstring) = m5' in
    {149}if check(hash_gen(g2su'),s3,pku_1) then
    {150}if (th2' = th2) then
    {151}let g2sa: G = exp(g,sa) in
    {152}let m6: bitstring = (th3',sig(hash_gen(g2sa),ska_1)) in
    {153}let g2su2sa: SymmetricKey = bit2symk((tag_g2su2sa,hash_gen(exp(g2su',sa)))) in
    {154}let M6: bitstring = (senc((tag_k5,k5),g2su2sa),aenc((tag_g2sa,g2sa),pku_1),senc((tag_m6,m6),k5)) in
    {155}out(c_u2a_1, (tag_M6,M6));
    {156}in(c_u2a_1, (=tag_M7,M7': bitstring));
    {157}let (enc_k6: bitstring,enc_m7: bitstring) = M7' in
    {158}let (=tag_k6,k6': SymmetricKey) = sdec(enc_k6,g2su2sa) in
    {159}let (=tag_m7,m7': bitstring) = sdec(enc_m7,k6') in
    {160}let vpr2: bitstring = (m4',nr) in
    {161}let m8: bitstring = (vpr2,sig(hash(vpr2),ska_1)) in
    {162}let M8: bitstring = (senc((tag_k7,k7),g2su2sa),senc((tag_m8,m8),k7)) in
    {163}event auth_AppSendsLastMessageToUserMessage(senc((tag_m8,m8),k7));
    {164}event auth_AppSendsLastMessageToUserKey(senc((tag_k7,k7),g2su2sa));
    {165}out(c_u2a_1, (tag_M8,M8));
    {166}in(c_u2a_1, (=tag_M9,M9': bitstring));
    {167}let (enc_k8: bitstring,enc_m9: bitstring) = M9' in
    {168}let (=tag_k8,k8': SymmetricKey) = sdec(enc_k8,g2su2sa) in
    {169}let (=tag_m9,m9': bitstring) = sdec(enc_m9,k8') in
    {170}let (vp': bitstring,s6: bitstring) = m9' in
    {171}let (nr': nonce,m4''_1: bitstring,vc': bitstring) = vp' in
    {172}if check(hash(vp'),s6,pku_1) then
    {173}if (nr' = nr) then
    {174}let m10: bitstring = (m9',sig(hash(m9'),ska_1)) in
    {175}let M10: bitstring = (senc((tag_k9,k9),g2sc2sav_1),senc((tag_m10,m10),k9)) in
    {176}event auth_AppSendsLastMessageToVerifierKey(k3_enc);
    {177}event auth_AppSendsLastMessageToVerifierMessage(m4_enc);
    {178}out(c_a2v_2, (tag_M10,M10));
    {179}in(c_a2v_2, (=tag_M11,M11': bitstring));
    {180}let (enc_k10: bitstring,enc_m11: bitstring) = M11' in
    {181}let (=tag_k10,k10': SymmetricKey) = sdec(enc_k10,g2sc2sav_1) in
    {182}let (=tag_m11,m11': bitstring) = sdec(enc_m11,k10') in
    {183}let resource': bitstring = m11' in
    {184}if talksOnlyToHonest_1 then
    {185}event auth_AppCompletesProtocolWithUserMessage(enc_m9);
    {186}event auth_AppCompletesProtocolWithUserKey(enc_k8);
    {187}event auth_AppCompletesProtocolWithVerifierMessage(enc_m11);
    {188}event auth_AppCompletesProtocolWithVerifierKey(enc_k10);
    {189}out(ch(m11'), resource_fromApp)
) | (
    {190}!
    {191}let talksOnlyToHonest_2: bool = true in
    {192}let c_u2a_2: channel = c_u2a in
    {193}let u_1: exponent = u in
    {194}let sku_1: SecretKey = sku in
    {195}let pka_1: PublicKey = pk(ska) in
    {196}let g2a_1: G = exp(g,a) in
    {197}let pkv_1: PublicKey = pk(skv) in
    {198}let g2v_1: G = exp(g,v) in
    {199}let pki_2: PublicKey = pk(ski) in
    {200}let uri_2: bitstring = uri_req in
    {201}new su: exponent;
    {202}new k4: SymmetricKey;
    {203}new k6: SymmetricKey;
    {204}new k8: SymmetricKey;
    {205}new th3: nonce;
    {206}in(c_u2a_2, (=tag_th2,th2'_1: nonce));
    {207}let g2su: G = exp(g,su) in
    {208}let m5: bitstring = (th2'_1,th3,sig(hash_gen(g2su),sku_1)) in
    {209}let g2a2su_1: SymmetricKey = bit2symk((tag_g2a2su,hash_gen(exp(g2a_1,su)))) in
    {210}let M5: bitstring = (senc((tag_k4,k4),g2a2su_1),aenc((tag_g2su,g2su),pka_1),senc((tag_m5,m5),k4)) in
    {211}out(c_u2a_2, (tag_M5,M5));
    {212}in(c_u2a_2, (=tag_M6,M6': bitstring));
    {213}let (enc_k5: bitstring,enc_g2sa: bitstring,enc_m6: bitstring) = M6' in
    {214}let (=tag_g2sa,g2sa': G) = adec(enc_g2sa,sku_1) in
    {215}let g2su2sa_1: SymmetricKey = bit2symk((tag_g2su2sa,hash_gen(exp(g2sa',su)))) in
    {216}let (=tag_k5,k5': SymmetricKey) = sdec(enc_k5,g2su2sa_1) in
    {217}let (=tag_m6,m6': bitstring) = sdec(enc_m6,k5') in
    {218}let (th3'_1: nonce,s4: bitstring) = m6' in
    {219}if check(hash_gen(g2sa'),s4,pka_1) then
    {220}if (th3'_1 = th3) then
    {221}new m7: bitstring;
    {222}let M7: bitstring = (senc((tag_k6,k6),g2su2sa_1),senc((tag_m7,m7),k6)) in
    {223}out(c_u2a_2, (tag_M7,M7));
    {224}in(c_u2a_2, (=tag_M8,M8': bitstring));
    {225}let (enc_k7: bitstring,enc_m8: bitstring) = M8' in
    {226}let (=tag_k7,k7': SymmetricKey) = sdec(enc_k7,g2su2sa_1) in
    {227}let (=tag_m8,m8': bitstring) = sdec(enc_m8,k7') in
    {228}let (vpr2': bitstring,s5: bitstring) = m8' in
    {229}let (m4'_1: bitstring,nr'_1: bitstring) = vpr2' in
    {230}if check(hash(vpr2'),s5,pka_1) then
    {231}let vp: bitstring = (nr'_1,m4'_1,vc) in
    {232}let m9: bitstring = (vp,sig(hash(vp),sku_1)) in
    {233}let M9: bitstring = (senc((tag_k8,k8),g2su2sa_1),senc((tag_m9,m9),k8)) in
    {234}event auth_UserSendsLastMessageToAppMessage(senc((tag_m9,m9),k8));
    {235}event auth_UserSendsLastMessageToAppKey(senc((tag_k8,k8),g2su2sa_1));
    {236}out(c_u2a_2, (tag_M9,M9));
    {237}if talksOnlyToHonest_2 then
    {238}event auth_UserCompletesProtocolWithAppMessage(enc_m8);
    {239}event auth_UserCompletesProtocolWithAppKey(enc_k7);
    {240}out(ch(vp), vp_fromUser)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new sku: SecretKey;
{2}new ska: SecretKey;
{3}new skv: SecretKey;
{4}new ski: SecretKey;
{5}new u: exponent;
{6}new a: exponent;
{7}new v: exponent;
{8}new i: exponent;
{9}out(c, exp(g,u));
{10}out(c, exp(g,a));
{11}out(c, exp(g,v));
{12}out(c, pk(sku));
{13}out(c, pk(ska));
{14}out(c, pk(skv));
{15}out(c, pk(ski));
{16}let DID_u: DID = gen_DID(exp(g,u)) in
{20}out(c, DID_u);
{17}let DID_a: DID = gen_DID(exp(g,a)) in
{21}out(c, DID_a);
{18}let DID_v: DID = gen_DID(exp(g,v)) in
{22}out(c, DID_v);
{19}let DID_i: DID = gen_DID(exp(g,i)) in
{23}out(c, DID_i);
{24}new claims: bitstring;
(
    {27}!
    {39}new sc: exponent;
    {40}new k1: SymmetricKey;
    {41}new k3: SymmetricKey;
    {42}new k10: SymmetricKey;
    {43}new th0: nonce;
    {44}new nc: nonce;
    {29}let c_a2v_1: channel = c_a2v in
    {47}out(c_a2v_1, (tag_th0,th0));
    {48}in(c_a2v_1, (=tag_M1,M1': bitstring));
    {49}let (enc_k0: bitstring,enc_g2sav: bitstring,enc_m1: bitstring) = M1' in
    {31}let skv_1: SecretKey = skv in
    {50}let (=tag_g2sav,g2sav': G) = adec(enc_g2sav,skv_1) in
    {30}let v_1: exponent = v in
    {51}let g2v2sav: SymmetricKey = bit2symk((tag_g2v2sav,hash_gen(exp(g2sav',v_1)))) in
    {52}let (=tag_k0,k0': SymmetricKey) = sdec(enc_k0,g2v2sav) in
    {53}let (=tag_m1,m1': bitstring) = sdec(enc_m1,k0') in
    {54}let (th0': nonce,th1': nonce,s1: bitstring) = m1' in
    {34}let pka: PublicKey = pk(ska) in
    {55}if check(hash_gen(g2sav'),s1,pka) then
    {56}if (th0' = th0) then
    {57}let g2sc: G = exp(g,sc) in
    {59}let m2: bitstring = (th1',sig(hash_gen(g2sc),skv_1)) in
    {58}let g2sc2sav: SymmetricKey = bit2symk((tag_g2sc2sav,hash_gen(exp(g2sav',sc)))) in
    {60}let M2: bitstring = (senc((tag_k1,k1),g2sc2sav),aenc((tag_g2sc,g2sc),pka),senc((tag_m2,m2),k1)) in
    {61}out(c_a2v_1, (tag_M2,M2));
    {62}in(c_a2v_1, (=tag_M3,M3': bitstring));
    {63}let (enc_k2: bitstring,enc_m3: bitstring) = M3' in
    {64}let (=tag_k2,k2': SymmetricKey) = sdec(enc_k2,g2sc2sav) in
    {65}let (=tag_m3,m3': bitstring) = sdec(enc_m3,k2') in
    {38}let uri: bitstring = uri_req in
    {45}let rule: bitstring = (DID_i,DID_v,DID_u,DID_a,uri) in
    {66}if (m3' = rule) then
    {37}let claims_1: bitstring = claims in
    {46}let attr_1: bitstring = (DID_u,DID_i,claims_1) in
    {67}let m4: bitstring = (attr_1,uri,nc) in
    {68}let M4: bitstring = (senc((tag_k3,k3),g2sc2sav),senc((tag_m4,m4),k3)) in
    {69}out(c_a2v_1, (tag_M4,M4));
    {70}in(c_a2v_1, (=tag_M10,M10': bitstring));
    {71}let (=tag_m10,enc_k9: bitstring,enc_m10: bitstring) = M10' in
    {72}let (=tag_k9,k9': SymmetricKey) = sdec(enc_k9,g2sc2sav) in
    {73}let (=tag_m10,m10': bitstring) = sdec(enc_m10,k9') in
    {74}let (m9'': bitstring,s7: bitstring) = m10' in
    {75}let (vp'': bitstring,s6': bitstring) = m9'' in
    {76}let (nr'': bitstring,m4'': bitstring,vc'': bitstring) = vp'' in
    {77}let (attr'': bitstring,uri'': bitstring,nc'': nonce) = m4'' in
    {78}if check(hash(m9''),s7,pka) then
    {32}let pku: PublicKey = pk(sku) in
    {79}if check(hash(vp''),s6',pku) then
    {80}if (nc'' = nc) then
    {81}let (vc_claims: bitstring,sig_vc_claims: bitstring) = vc'' in
    {36}let pki: PublicKey = pk(ski) in
    {82}if check(hash(vc_claims),sig_vc_claims,pki) then
    {83}let (attr''': bitstring,DID_i''': DID,DID_u''': DID) = vc_claims in
    {84}if (attr''' = attr_1) then
    {85}new resource: bitstring;
    {86}let m11: bitstring = resource in
    {88}event auth_VerifierSendsLastMessageToAppMessage(senc((tag_m11,m11),k10));
    {89}event auth_VerifierSendsLastMessageToAppKey(senc((tag_k10,k10),g2sc2sav));
    {87}let M11: bitstring = (senc((tag_k10,k10),g2sc2sav),senc((tag_m11,m11),k10)) in
    {90}out(c_a2v_1, (tag_M11,M11));
    {28}let talksOnlyToHonest: bool = true in
    {91}if talksOnlyToHonest then
    {92}event auth_VerfierCompletesProtocolWithAppKey(senc((tag_k3,k3),g2sc2sav));
    {93}event auth_VerfierCompletesProtocolWithAppMessage(senc((tag_m4,m4),k3));
    {94}out(ch(resource), resource_fromVerifier)
) | (
    {95}!
    {107}new sav: exponent;
    {108}new sa: exponent;
    {109}new k0: SymmetricKey;
    {110}new k2: SymmetricKey;
    {111}new k5: SymmetricKey;
    {112}new k7: SymmetricKey;
    {113}new k9: SymmetricKey;
    {114}new th1: nonce;
    {115}new th2: nonce;
    {116}new nr: nonce;
    {97}let c_a2v_2: channel = c_a2v in
    {117}in(c_a2v_2, (=tag_th0,th0'_1: nonce));
    {104}let g2v: G = exp(g,v) in
    {120}let g2v2sav_1: SymmetricKey = bit2symk((tag_g2v2sav,hash_gen(exp(g2v,sav)))) in
    {118}let g2sav: G = exp(g,sav) in
    {100}let ska_1: SecretKey = ska in
    {119}let m1: bitstring = (th0'_1,th1,sig(hash_gen(g2sav),ska_1)) in
    {103}let pkv: PublicKey = pk(skv) in
    {121}let M1: bitstring = (senc((tag_k0,k0),g2v2sav_1),aenc((tag_g2sav,g2sav),pkv),senc((tag_m1,m1),k0)) in
    {122}out(c_a2v_2, (tag_M1,M1));
    {123}in(c_a2v_2, (=tag_M2,M2': bitstring));
    {124}let (enc_k1: bitstring,enc_g2sc: bitstring,enc_m2: bitstring) = M2' in
    {125}let (=tag_g2sc,g2sc': G) = adec(enc_g2sc,ska_1) in
    {126}let g2sc2sav_1: SymmetricKey = bit2symk((tag_g2sc2sav,hash_gen(exp(g2sc',sav)))) in
    {127}let (=tag_k1,k1': SymmetricKey) = sdec(enc_k1,g2sc2sav_1) in
    {128}let (=tag_m2,m2': bitstring) = sdec(enc_m2,k1') in
    {129}let (th1'_1: nonce,s2: bitstring) = m2' in
    {130}if check(hash_gen(g2sc'),s2,pkv) then
    {131}if (th1'_1 = th1) then
    {106}let uri_1: bitstring = uri_req in
    {132}let m3: bitstring = (DID_i,DID_v,DID_u,DID_a,uri_1) in
    {133}let M3: bitstring = (senc((tag_k2,k2),g2sc2sav_1),senc((tag_m3,m3),k2)) in
    {134}out(c_a2v_2, (tag_M3,M3));
    {135}in(c_a2v_2, (=tag_M4,M4': bitstring));
    {136}let (k3_enc: bitstring,m4_enc: bitstring) = M4' in
    {137}let (=tag_k3,k3': SymmetricKey) = sdec(k3_enc,g2sc2sav_1) in
    {138}let (=tag_m4,m4': bitstring) = sdec(m4_enc,k3') in
    {139}let (attr': bitstring,uri': bitstring,nc': nonce) = m4' in
    {140}if (uri' = uri_1) then
    {98}let c_u2a_1: channel = c_u2a in
    {141}out(c_u2a_1, (tag_th2,th2));
    {142}in(c_u2a_1, (=tag_M5,M5': bitstring));
    {143}let (enc_k4: bitstring,enc_g2su: bitstring,enc_m5: bitstring) = M5' in
    {144}let (=tag_g2su,g2su': G) = adec(enc_g2su,ska_1) in
    {99}let a_1: exponent = a in
    {145}let g2a2su: SymmetricKey = bit2symk((tag_g2a2su,hash_gen(exp(g2su',a_1)))) in
    {146}let (=tag_k4,k4': SymmetricKey) = sdec(enc_k4,g2a2su) in
    {147}let (=tag_m5,m5': bitstring) = sdec(enc_m5,k4') in
    {148}let (th2': nonce,th3': nonce,s3: bitstring) = m5' in
    {101}let pku_1: PublicKey = pk(sku) in
    {149}if check(hash_gen(g2su'),s3,pku_1) then
    {150}if (th2' = th2) then
    {153}let g2su2sa: SymmetricKey = bit2symk((tag_g2su2sa,hash_gen(exp(g2su',sa)))) in
    {151}let g2sa: G = exp(g,sa) in
    {152}let m6: bitstring = (th3',sig(hash_gen(g2sa),ska_1)) in
    {154}let M6: bitstring = (senc((tag_k5,k5),g2su2sa),aenc((tag_g2sa,g2sa),pku_1),senc((tag_m6,m6),k5)) in
    {155}out(c_u2a_1, (tag_M6,M6));
    {156}in(c_u2a_1, (=tag_M7,M7': bitstring));
    {157}let (enc_k6: bitstring,enc_m7: bitstring) = M7' in
    {158}let (=tag_k6,k6': SymmetricKey) = sdec(enc_k6,g2su2sa) in
    {159}let (=tag_m7,m7': bitstring) = sdec(enc_m7,k6') in
    {160}let vpr2: bitstring = (m4',nr) in
    {161}let m8: bitstring = (vpr2,sig(hash(vpr2),ska_1)) in
    {163}event auth_AppSendsLastMessageToUserMessage(senc((tag_m8,m8),k7));
    {164}event auth_AppSendsLastMessageToUserKey(senc((tag_k7,k7),g2su2sa));
    {162}let M8: bitstring = (senc((tag_k7,k7),g2su2sa),senc((tag_m8,m8),k7)) in
    {165}out(c_u2a_1, (tag_M8,M8));
    {166}in(c_u2a_1, (=tag_M9,M9': bitstring));
    {167}let (enc_k8: bitstring,enc_m9: bitstring) = M9' in
    {168}let (=tag_k8,k8': SymmetricKey) = sdec(enc_k8,g2su2sa) in
    {169}let (=tag_m9,m9': bitstring) = sdec(enc_m9,k8') in
    {170}let (vp': bitstring,s6: bitstring) = m9' in
    {171}let (nr': nonce,m4''_1: bitstring,vc': bitstring) = vp' in
    {172}if check(hash(vp'),s6,pku_1) then
    {173}if (nr' = nr) then
    {176}event auth_AppSendsLastMessageToVerifierKey(k3_enc);
    {177}event auth_AppSendsLastMessageToVerifierMessage(m4_enc);
    {174}let m10: bitstring = (m9',sig(hash(m9'),ska_1)) in
    {175}let M10: bitstring = (senc((tag_k9,k9),g2sc2sav_1),senc((tag_m10,m10),k9)) in
    {178}out(c_a2v_2, (tag_M10,M10));
    {179}in(c_a2v_2, (=tag_M11,M11': bitstring));
    {180}let (enc_k10: bitstring,enc_m11: bitstring) = M11' in
    {181}let (=tag_k10,k10': SymmetricKey) = sdec(enc_k10,g2sc2sav_1) in
    {182}let (=tag_m11,m11': bitstring) = sdec(enc_m11,k10') in
    {96}let talksOnlyToHonest_1: bool = true in
    {184}if talksOnlyToHonest_1 then
    {185}event auth_AppCompletesProtocolWithUserMessage(enc_m9);
    {186}event auth_AppCompletesProtocolWithUserKey(enc_k8);
    {187}event auth_AppCompletesProtocolWithVerifierMessage(enc_m11);
    {188}event auth_AppCompletesProtocolWithVerifierKey(enc_k10);
    {189}out(ch(m11'), resource_fromApp)
) | (
    {190}!
    {201}new su: exponent;
    {202}new k4: SymmetricKey;
    {203}new k6: SymmetricKey;
    {204}new k8: SymmetricKey;
    {205}new th3: nonce;
    {192}let c_u2a_2: channel = c_u2a in
    {206}in(c_u2a_2, (=tag_th2,th2'_1: nonce));
    {196}let g2a_1: G = exp(g,a) in
    {209}let g2a2su_1: SymmetricKey = bit2symk((tag_g2a2su,hash_gen(exp(g2a_1,su)))) in
    {207}let g2su: G = exp(g,su) in
    {194}let sku_1: SecretKey = sku in
    {208}let m5: bitstring = (th2'_1,th3,sig(hash_gen(g2su),sku_1)) in
    {195}let pka_1: PublicKey = pk(ska) in
    {210}let M5: bitstring = (senc((tag_k4,k4),g2a2su_1),aenc((tag_g2su,g2su),pka_1),senc((tag_m5,m5),k4)) in
    {211}out(c_u2a_2, (tag_M5,M5));
    {212}in(c_u2a_2, (=tag_M6,M6': bitstring));
    {213}let (enc_k5: bitstring,enc_g2sa: bitstring,enc_m6: bitstring) = M6' in
    {214}let (=tag_g2sa,g2sa': G) = adec(enc_g2sa,sku_1) in
    {215}let g2su2sa_1: SymmetricKey = bit2symk((tag_g2su2sa,hash_gen(exp(g2sa',su)))) in
    {216}let (=tag_k5,k5': SymmetricKey) = sdec(enc_k5,g2su2sa_1) in
    {217}let (=tag_m6,m6': bitstring) = sdec(enc_m6,k5') in
    {218}let (th3'_1: nonce,s4: bitstring) = m6' in
    {219}if check(hash_gen(g2sa'),s4,pka_1) then
    {220}if (th3'_1 = th3) then
    {221}new m7: bitstring;
    {222}let M7: bitstring = (senc((tag_k6,k6),g2su2sa_1),senc((tag_m7,m7),k6)) in
    {223}out(c_u2a_2, (tag_M7,M7));
    {224}in(c_u2a_2, (=tag_M8,M8': bitstring));
    {225}let (enc_k7: bitstring,enc_m8: bitstring) = M8' in
    {226}let (=tag_k7,k7': SymmetricKey) = sdec(enc_k7,g2su2sa_1) in
    {227}let (=tag_m8,m8': bitstring) = sdec(enc_m8,k7') in
    {228}let (vpr2': bitstring,s5: bitstring) = m8' in
    {229}let (m4'_1: bitstring,nr'_1: bitstring) = vpr2' in
    {230}if check(hash(vpr2'),s5,pka_1) then
    {25}let attr: bitstring = (DID_u,DID_i,claims) in
    {26}let vc: bitstring = ((attr,DID_i,DID_u),sig(hash((attr,DID_i,DID_u)),ski)) in
    {231}let vp: bitstring = (nr'_1,m4'_1,vc) in
    {232}let m9: bitstring = (vp,sig(hash(vp),sku_1)) in
    {234}event auth_UserSendsLastMessageToAppMessage(senc((tag_m9,m9),k8));
    {235}event auth_UserSendsLastMessageToAppKey(senc((tag_k8,k8),g2su2sa_1));
    {233}let M9: bitstring = (senc((tag_k8,k8),g2su2sa_1),senc((tag_m9,m9),k8)) in
    {236}out(c_u2a_2, (tag_M9,M9));
    {191}let talksOnlyToHonest_2: bool = true in
    {237}if talksOnlyToHonest_2 then
    {238}event auth_UserCompletesProtocolWithAppMessage(enc_m8);
    {239}event auth_UserCompletesProtocolWithAppKey(enc_k7);
    {240}out(ch(vp), vp_fromUser)
)

-- Query not attacker(vp_fromUser[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (87 with conclusion selected). Queue: 123 rules.
400 rules inserted. Base: 377 rules (91 with conclusion selected). Queue: 129 rules.
600 rules inserted. Base: 563 rules (91 with conclusion selected). Queue: 144 rules.
800 rules inserted. Base: 725 rules (95 with conclusion selected). Queue: 224 rules.
1000 rules inserted. Base: 861 rules (95 with conclusion selected). Queue: 241 rules.
1200 rules inserted. Base: 1001 rules (95 with conclusion selected). Queue: 262 rules.
1400 rules inserted. Base: 1123 rules (98 with conclusion selected). Queue: 296 rules.
1600 rules inserted. Base: 1258 rules (98 with conclusion selected). Queue: 296 rules.
1800 rules inserted. Base: 1385 rules (98 with conclusion selected). Queue: 284 rules.
2000 rules inserted. Base: 1541 rules (98 with conclusion selected). Queue: 302 rules.
2200 rules inserted. Base: 1682 rules (98 with conclusion selected). Queue: 333 rules.
2400 rules inserted. Base: 1820 rules (98 with conclusion selected). Queue: 311 rules.
2600 rules inserted. Base: 1916 rules (98 with conclusion selected). Queue: 299 rules.
2800 rules inserted. Base: 2019 rules (98 with conclusion selected). Queue: 299 rules.
3000 rules inserted. Base: 2168 rules (98 with conclusion selected). Queue: 320 rules.
3200 rules inserted. Base: 2336 rules (101 with conclusion selected). Queue: 420 rules.
3400 rules inserted. Base: 2505 rules (101 with conclusion selected). Queue: 475 rules.
3600 rules inserted. Base: 2670 rules (101 with conclusion selected). Queue: 533 rules.
3800 rules inserted. Base: 2728 rules (101 with conclusion selected). Queue: 490 rules.
4000 rules inserted. Base: 2807 rules (101 with conclusion selected). Queue: 479 rules.
4200 rules inserted. Base: 2954 rules (101 with conclusion selected). Queue: 484 rules.
4400 rules inserted. Base: 3081 rules (101 with conclusion selected). Queue: 466 rules.
4600 rules inserted. Base: 3206 rules (101 with conclusion selected). Queue: 468 rules.
4800 rules inserted. Base: 3312 rules (101 with conclusion selected). Queue: 463 rules.
5000 rules inserted. Base: 3430 rules (101 with conclusion selected). Queue: 458 rules.
5200 rules inserted. Base: 3435 rules (102 with conclusion selected). Queue: 459 rules.
5400 rules inserted. Base: 3539 rules (102 with conclusion selected). Queue: 458 rules.
5600 rules inserted. Base: 3608 rules (102 with conclusion selected). Queue: 462 rules.
5800 rules inserted. Base: 3619 rules (102 with conclusion selected). Queue: 468 rules.
6000 rules inserted. Base: 3700 rules (102 with conclusion selected). Queue: 452 rules.
6200 rules inserted. Base: 3600 rules (106 with conclusion selected). Queue: 510 rules.
6400 rules inserted. Base: 3692 rules (106 with conclusion selected). Queue: 486 rules.
6600 rules inserted. Base: 3621 rules (106 with conclusion selected). Queue: 486 rules.
6800 rules inserted. Base: 3714 rules (106 with conclusion selected). Queue: 444 rules.
7000 rules inserted. Base: 3728 rules (106 with conclusion selected). Queue: 431 rules.
7200 rules inserted. Base: 3788 rules (106 with conclusion selected). Queue: 427 rules.
7400 rules inserted. Base: 3867 rules (110 with conclusion selected). Queue: 480 rules.
7600 rules inserted. Base: 3799 rules (110 with conclusion selected). Queue: 449 rules.
7800 rules inserted. Base: 3847 rules (110 with conclusion selected). Queue: 449 rules.
8000 rules inserted. Base: 3789 rules (110 with conclusion selected). Queue: 450 rules.
8200 rules inserted. Base: 3836 rules (110 with conclusion selected). Queue: 398 rules.
8400 rules inserted. Base: 3886 rules (110 with conclusion selected). Queue: 334 rules.
8600 rules inserted. Base: 3919 rules (110 with conclusion selected). Queue: 299 rules.
8800 rules inserted. Base: 3912 rules (110 with conclusion selected). Queue: 230 rules.
9000 rules inserted. Base: 3917 rules (110 with conclusion selected). Queue: 201 rules.
9200 rules inserted. Base: 3918 rules (110 with conclusion selected). Queue: 116 rules.
9400 rules inserted. Base: 3852 rules (112 with conclusion selected). Queue: 71 rules.
9600 rules inserted. Base: 3815 rules (113 with conclusion selected). Queue: 37 rules.
9800 rules inserted. Base: 3925 rules (116 with conclusion selected). Queue: 138 rules.
10000 rules inserted. Base: 4038 rules (117 with conclusion selected). Queue: 175 rules.
10200 rules inserted. Base: 4134 rules (117 with conclusion selected). Queue: 218 rules.
10400 rules inserted. Base: 4190 rules (117 with conclusion selected). Queue: 234 rules.
10600 rules inserted. Base: 4286 rules (117 with conclusion selected). Queue: 192 rules.
10800 rules inserted. Base: 4379 rules (117 with conclusion selected). Queue: 170 rules.
11000 rules inserted. Base: 4455 rules (117 with conclusion selected). Queue: 169 rules.
11200 rules inserted. Base: 4476 rules (117 with conclusion selected). Queue: 137 rules.
11400 rules inserted. Base: 4010 rules (120 with conclusion selected). Queue: 112 rules.
11600 rules inserted. Base: 3977 rules (120 with conclusion selected). Queue: 121 rules.
11800 rules inserted. Base: 3987 rules (120 with conclusion selected). Queue: 158 rules.
12000 rules inserted. Base: 4131 rules (120 with conclusion selected). Queue: 196 rules.
12200 rules inserted. Base: 4248 rules (120 with conclusion selected). Queue: 184 rules.
12400 rules inserted. Base: 4335 rules (121 with conclusion selected). Queue: 177 rules.
12600 rules inserted. Base: 4504 rules (130 with conclusion selected). Queue: 224 rules.
12800 rules inserted. Base: 4684 rules (130 with conclusion selected). Queue: 224 rules.
13000 rules inserted. Base: 4857 rules (130 with conclusion selected). Queue: 247 rules.
13200 rules inserted. Base: 4965 rules (130 with conclusion selected). Queue: 176 rules.
13400 rules inserted. Base: 5112 rules (130 with conclusion selected). Queue: 207 rules.
13600 rules inserted. Base: 5232 rules (130 with conclusion selected). Queue: 243 rules.
13800 rules inserted. Base: 5314 rules (130 with conclusion selected). Queue: 228 rules.
14000 rules inserted. Base: 5415 rules (130 with conclusion selected). Queue: 213 rules.
14200 rules inserted. Base: 5475 rules (130 with conclusion selected). Queue: 170 rules.
14400 rules inserted. Base: 5542 rules (130 with conclusion selected). Queue: 144 rules.
14600 rules inserted. Base: 5571 rules (134 with conclusion selected). Queue: 110 rules.
14800 rules inserted. Base: 5569 rules (134 with conclusion selected). Queue: 87 rules.
15000 rules inserted. Base: 5573 rules (134 with conclusion selected). Queue: 18 rules.
Starting query not attacker(vp_fromUser[])
RESULT not attacker(vp_fromUser[]) is true.
-- Query not attacker(resource_fromApp[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (87 with conclusion selected). Queue: 123 rules.
400 rules inserted. Base: 377 rules (91 with conclusion selected). Queue: 129 rules.
600 rules inserted. Base: 563 rules (91 with conclusion selected). Queue: 144 rules.
800 rules inserted. Base: 725 rules (95 with conclusion selected). Queue: 224 rules.
1000 rules inserted. Base: 861 rules (95 with conclusion selected). Queue: 241 rules.
1200 rules inserted. Base: 1001 rules (95 with conclusion selected). Queue: 262 rules.
1400 rules inserted. Base: 1123 rules (98 with conclusion selected). Queue: 296 rules.
1600 rules inserted. Base: 1258 rules (98 with conclusion selected). Queue: 296 rules.
1800 rules inserted. Base: 1385 rules (98 with conclusion selected). Queue: 284 rules.
2000 rules inserted. Base: 1541 rules (98 with conclusion selected). Queue: 302 rules.
2200 rules inserted. Base: 1682 rules (98 with conclusion selected). Queue: 333 rules.
2400 rules inserted. Base: 1820 rules (98 with conclusion selected). Queue: 311 rules.
2600 rules inserted. Base: 1916 rules (98 with conclusion selected). Queue: 299 rules.
2800 rules inserted. Base: 2019 rules (98 with conclusion selected). Queue: 299 rules.
3000 rules inserted. Base: 2168 rules (98 with conclusion selected). Queue: 320 rules.
3200 rules inserted. Base: 2336 rules (101 with conclusion selected). Queue: 420 rules.
3400 rules inserted. Base: 2505 rules (101 with conclusion selected). Queue: 475 rules.
3600 rules inserted. Base: 2670 rules (101 with conclusion selected). Queue: 533 rules.
3800 rules inserted. Base: 2728 rules (101 with conclusion selected). Queue: 490 rules.
4000 rules inserted. Base: 2807 rules (101 with conclusion selected). Queue: 479 rules.
4200 rules inserted. Base: 2954 rules (101 with conclusion selected). Queue: 484 rules.
4400 rules inserted. Base: 3081 rules (101 with conclusion selected). Queue: 466 rules.
4600 rules inserted. Base: 3206 rules (101 with conclusion selected). Queue: 468 rules.
4800 rules inserted. Base: 3312 rules (101 with conclusion selected). Queue: 463 rules.
5000 rules inserted. Base: 3430 rules (101 with conclusion selected). Queue: 458 rules.
5200 rules inserted. Base: 3435 rules (102 with conclusion selected). Queue: 459 rules.
5400 rules inserted. Base: 3539 rules (102 with conclusion selected). Queue: 458 rules.
5600 rules inserted. Base: 3608 rules (102 with conclusion selected). Queue: 462 rules.
5800 rules inserted. Base: 3619 rules (102 with conclusion selected). Queue: 468 rules.
6000 rules inserted. Base: 3700 rules (102 with conclusion selected). Queue: 452 rules.
6200 rules inserted. Base: 3600 rules (106 with conclusion selected). Queue: 510 rules.
6400 rules inserted. Base: 3692 rules (106 with conclusion selected). Queue: 486 rules.
6600 rules inserted. Base: 3621 rules (106 with conclusion selected). Queue: 486 rules.
6800 rules inserted. Base: 3714 rules (106 with conclusion selected). Queue: 444 rules.
7000 rules inserted. Base: 3728 rules (106 with conclusion selected). Queue: 431 rules.
7200 rules inserted. Base: 3788 rules (106 with conclusion selected). Queue: 427 rules.
7400 rules inserted. Base: 3867 rules (110 with conclusion selected). Queue: 480 rules.
7600 rules inserted. Base: 3799 rules (110 with conclusion selected). Queue: 449 rules.
7800 rules inserted. Base: 3847 rules (110 with conclusion selected). Queue: 449 rules.
8000 rules inserted. Base: 3789 rules (110 with conclusion selected). Queue: 450 rules.
8200 rules inserted. Base: 3836 rules (110 with conclusion selected). Queue: 398 rules.
8400 rules inserted. Base: 3886 rules (110 with conclusion selected). Queue: 334 rules.
8600 rules inserted. Base: 3919 rules (110 with conclusion selected). Queue: 299 rules.
8800 rules inserted. Base: 3912 rules (110 with conclusion selected). Queue: 230 rules.
9000 rules inserted. Base: 3917 rules (110 with conclusion selected). Queue: 201 rules.
9200 rules inserted. Base: 3918 rules (110 with conclusion selected). Queue: 116 rules.
9400 rules inserted. Base: 3852 rules (112 with conclusion selected). Queue: 71 rules.
9600 rules inserted. Base: 3815 rules (113 with conclusion selected). Queue: 37 rules.
9800 rules inserted. Base: 3925 rules (116 with conclusion selected). Queue: 138 rules.
10000 rules inserted. Base: 4038 rules (117 with conclusion selected). Queue: 175 rules.
10200 rules inserted. Base: 4134 rules (117 with conclusion selected). Queue: 218 rules.
10400 rules inserted. Base: 4190 rules (117 with conclusion selected). Queue: 234 rules.
10600 rules inserted. Base: 4286 rules (117 with conclusion selected). Queue: 192 rules.
10800 rules inserted. Base: 4379 rules (117 with conclusion selected). Queue: 170 rules.
11000 rules inserted. Base: 4455 rules (117 with conclusion selected). Queue: 169 rules.
11200 rules inserted. Base: 4476 rules (117 with conclusion selected). Queue: 137 rules.
11400 rules inserted. Base: 4010 rules (120 with conclusion selected). Queue: 112 rules.
11600 rules inserted. Base: 3977 rules (120 with conclusion selected). Queue: 121 rules.
11800 rules inserted. Base: 3987 rules (120 with conclusion selected). Queue: 158 rules.
12000 rules inserted. Base: 4131 rules (120 with conclusion selected). Queue: 196 rules.
12200 rules inserted. Base: 4248 rules (120 with conclusion selected). Queue: 184 rules.
12400 rules inserted. Base: 4335 rules (121 with conclusion selected). Queue: 177 rules.
12600 rules inserted. Base: 4504 rules (130 with conclusion selected). Queue: 224 rules.
12800 rules inserted. Base: 4684 rules (130 with conclusion selected). Queue: 224 rules.
13000 rules inserted. Base: 4857 rules (130 with conclusion selected). Queue: 247 rules.
13200 rules inserted. Base: 4965 rules (130 with conclusion selected). Queue: 176 rules.
13400 rules inserted. Base: 5112 rules (130 with conclusion selected). Queue: 207 rules.
13600 rules inserted. Base: 5232 rules (130 with conclusion selected). Queue: 243 rules.
13800 rules inserted. Base: 5314 rules (130 with conclusion selected). Queue: 228 rules.
14000 rules inserted. Base: 5415 rules (130 with conclusion selected). Queue: 213 rules.
14200 rules inserted. Base: 5475 rules (130 with conclusion selected). Queue: 170 rules.
14400 rules inserted. Base: 5542 rules (130 with conclusion selected). Queue: 144 rules.
14600 rules inserted. Base: 5571 rules (134 with conclusion selected). Queue: 110 rules.
14800 rules inserted. Base: 5569 rules (134 with conclusion selected). Queue: 87 rules.
15000 rules inserted. Base: 5573 rules (134 with conclusion selected). Queue: 18 rules.
Starting query not attacker(resource_fromApp[])
RESULT not attacker(resource_fromApp[]) is true.
-- Query not attacker(resource_fromVerifier[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (87 with conclusion selected). Queue: 123 rules.
400 rules inserted. Base: 377 rules (91 with conclusion selected). Queue: 129 rules.
600 rules inserted. Base: 563 rules (91 with conclusion selected). Queue: 144 rules.
800 rules inserted. Base: 725 rules (95 with conclusion selected). Queue: 224 rules.
1000 rules inserted. Base: 861 rules (95 with conclusion selected). Queue: 241 rules.
1200 rules inserted. Base: 1001 rules (95 with conclusion selected). Queue: 262 rules.
1400 rules inserted. Base: 1123 rules (98 with conclusion selected). Queue: 296 rules.
1600 rules inserted. Base: 1258 rules (98 with conclusion selected). Queue: 296 rules.
1800 rules inserted. Base: 1385 rules (98 with conclusion selected). Queue: 284 rules.
2000 rules inserted. Base: 1541 rules (98 with conclusion selected). Queue: 302 rules.
2200 rules inserted. Base: 1682 rules (98 with conclusion selected). Queue: 333 rules.
2400 rules inserted. Base: 1820 rules (98 with conclusion selected). Queue: 311 rules.
2600 rules inserted. Base: 1916 rules (98 with conclusion selected). Queue: 299 rules.
2800 rules inserted. Base: 2019 rules (98 with conclusion selected). Queue: 299 rules.
3000 rules inserted. Base: 2168 rules (98 with conclusion selected). Queue: 320 rules.
3200 rules inserted. Base: 2336 rules (101 with conclusion selected). Queue: 420 rules.
3400 rules inserted. Base: 2505 rules (101 with conclusion selected). Queue: 475 rules.
3600 rules inserted. Base: 2670 rules (101 with conclusion selected). Queue: 533 rules.
3800 rules inserted. Base: 2728 rules (101 with conclusion selected). Queue: 490 rules.
4000 rules inserted. Base: 2807 rules (101 with conclusion selected). Queue: 479 rules.
4200 rules inserted. Base: 2954 rules (101 with conclusion selected). Queue: 484 rules.
4400 rules inserted. Base: 3081 rules (101 with conclusion selected). Queue: 466 rules.
4600 rules inserted. Base: 3206 rules (101 with conclusion selected). Queue: 468 rules.
4800 rules inserted. Base: 3312 rules (101 with conclusion selected). Queue: 463 rules.
5000 rules inserted. Base: 3430 rules (101 with conclusion selected). Queue: 458 rules.
5200 rules inserted. Base: 3435 rules (102 with conclusion selected). Queue: 459 rules.
5400 rules inserted. Base: 3539 rules (102 with conclusion selected). Queue: 458 rules.
5600 rules inserted. Base: 3608 rules (102 with conclusion selected). Queue: 462 rules.
5800 rules inserted. Base: 3619 rules (102 with conclusion selected). Queue: 468 rules.
6000 rules inserted. Base: 3700 rules (102 with conclusion selected). Queue: 452 rules.
6200 rules inserted. Base: 3600 rules (106 with conclusion selected). Queue: 510 rules.
6400 rules inserted. Base: 3692 rules (106 with conclusion selected). Queue: 486 rules.
6600 rules inserted. Base: 3621 rules (106 with conclusion selected). Queue: 486 rules.
6800 rules inserted. Base: 3714 rules (106 with conclusion selected). Queue: 444 rules.
7000 rules inserted. Base: 3728 rules (106 with conclusion selected). Queue: 431 rules.
7200 rules inserted. Base: 3788 rules (106 with conclusion selected). Queue: 427 rules.
7400 rules inserted. Base: 3867 rules (110 with conclusion selected). Queue: 480 rules.
7600 rules inserted. Base: 3799 rules (110 with conclusion selected). Queue: 449 rules.
7800 rules inserted. Base: 3847 rules (110 with conclusion selected). Queue: 449 rules.
8000 rules inserted. Base: 3789 rules (110 with conclusion selected). Queue: 450 rules.
8200 rules inserted. Base: 3836 rules (110 with conclusion selected). Queue: 398 rules.
8400 rules inserted. Base: 3886 rules (110 with conclusion selected). Queue: 334 rules.
8600 rules inserted. Base: 3919 rules (110 with conclusion selected). Queue: 299 rules.
8800 rules inserted. Base: 3912 rules (110 with conclusion selected). Queue: 230 rules.
9000 rules inserted. Base: 3917 rules (110 with conclusion selected). Queue: 201 rules.
9200 rules inserted. Base: 3918 rules (110 with conclusion selected). Queue: 116 rules.
9400 rules inserted. Base: 3852 rules (112 with conclusion selected). Queue: 71 rules.
9600 rules inserted. Base: 3815 rules (113 with conclusion selected). Queue: 37 rules.
9800 rules inserted. Base: 3925 rules (116 with conclusion selected). Queue: 138 rules.
10000 rules inserted. Base: 4038 rules (117 with conclusion selected). Queue: 175 rules.
10200 rules inserted. Base: 4134 rules (117 with conclusion selected). Queue: 218 rules.
10400 rules inserted. Base: 4190 rules (117 with conclusion selected). Queue: 234 rules.
10600 rules inserted. Base: 4286 rules (117 with conclusion selected). Queue: 192 rules.
10800 rules inserted. Base: 4379 rules (117 with conclusion selected). Queue: 170 rules.
11000 rules inserted. Base: 4455 rules (117 with conclusion selected). Queue: 169 rules.
11200 rules inserted. Base: 4476 rules (117 with conclusion selected). Queue: 137 rules.
11400 rules inserted. Base: 4010 rules (120 with conclusion selected). Queue: 112 rules.
11600 rules inserted. Base: 3977 rules (120 with conclusion selected). Queue: 121 rules.
11800 rules inserted. Base: 3987 rules (120 with conclusion selected). Queue: 158 rules.
12000 rules inserted. Base: 4131 rules (120 with conclusion selected). Queue: 196 rules.
12200 rules inserted. Base: 4248 rules (120 with conclusion selected). Queue: 184 rules.
12400 rules inserted. Base: 4335 rules (121 with conclusion selected). Queue: 177 rules.
12600 rules inserted. Base: 4504 rules (130 with conclusion selected). Queue: 224 rules.
12800 rules inserted. Base: 4684 rules (130 with conclusion selected). Queue: 224 rules.
13000 rules inserted. Base: 4857 rules (130 with conclusion selected). Queue: 247 rules.
13200 rules inserted. Base: 4965 rules (130 with conclusion selected). Queue: 176 rules.
13400 rules inserted. Base: 5112 rules (130 with conclusion selected). Queue: 207 rules.
13600 rules inserted. Base: 5232 rules (130 with conclusion selected). Queue: 243 rules.
13800 rules inserted. Base: 5314 rules (130 with conclusion selected). Queue: 228 rules.
14000 rules inserted. Base: 5415 rules (130 with conclusion selected). Queue: 213 rules.
14200 rules inserted. Base: 5475 rules (130 with conclusion selected). Queue: 170 rules.
14400 rules inserted. Base: 5542 rules (130 with conclusion selected). Queue: 144 rules.
14600 rules inserted. Base: 5571 rules (134 with conclusion selected). Queue: 110 rules.
14800 rules inserted. Base: 5569 rules (134 with conclusion selected). Queue: 87 rules.
15000 rules inserted. Base: 5573 rules (134 with conclusion selected). Queue: 18 rules.
Starting query not attacker(resource_fromVerifier[])
RESULT not attacker(resource_fromVerifier[]) is true.
-- Query event(auth_UserCompletesProtocolWithAppKey(K7)) && event(auth_UserCompletesProtocolWithAppMessage(M8_1)) ==> event(auth_AppSendsLastMessageToUserKey(K7)) && event(auth_AppSendsLastMessageToUserMessage(M8_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (87 with conclusion selected). Queue: 127 rules.
400 rules inserted. Base: 377 rules (91 with conclusion selected). Queue: 133 rules.
600 rules inserted. Base: 566 rules (91 with conclusion selected). Queue: 151 rules.
800 rules inserted. Base: 742 rules (95 with conclusion selected). Queue: 235 rules.
1000 rules inserted. Base: 866 rules (95 with conclusion selected). Queue: 252 rules.
1200 rules inserted. Base: 1004 rules (95 with conclusion selected). Queue: 260 rules.
1400 rules inserted. Base: 1127 rules (98 with conclusion selected). Queue: 290 rules.
1600 rules inserted. Base: 1262 rules (98 with conclusion selected). Queue: 298 rules.
1800 rules inserted. Base: 1412 rules (98 with conclusion selected). Queue: 289 rules.
2000 rules inserted. Base: 1546 rules (98 with conclusion selected). Queue: 300 rules.
2200 rules inserted. Base: 1683 rules (98 with conclusion selected). Queue: 339 rules.
2400 rules inserted. Base: 1847 rules (98 with conclusion selected). Queue: 331 rules.
2600 rules inserted. Base: 1921 rules (98 with conclusion selected). Queue: 312 rules.
2800 rules inserted. Base: 2019 rules (98 with conclusion selected). Queue: 306 rules.
3000 rules inserted. Base: 2174 rules (98 with conclusion selected). Queue: 319 rules.
3200 rules inserted. Base: 2338 rules (101 with conclusion selected). Queue: 434 rules.
3400 rules inserted. Base: 2490 rules (101 with conclusion selected). Queue: 442 rules.
3600 rules inserted. Base: 2678 rules (101 with conclusion selected). Queue: 557 rules.
3800 rules inserted. Base: 2833 rules (101 with conclusion selected). Queue: 572 rules.
4000 rules inserted. Base: 2820 rules (101 with conclusion selected). Queue: 503 rules.
4200 rules inserted. Base: 2995 rules (101 with conclusion selected). Queue: 536 rules.
4400 rules inserted. Base: 3140 rules (101 with conclusion selected). Queue: 545 rules.
4600 rules inserted. Base: 3267 rules (101 with conclusion selected). Queue: 565 rules.
4800 rules inserted. Base: 3399 rules (101 with conclusion selected). Queue: 563 rules.
5000 rules inserted. Base: 3505 rules (101 with conclusion selected). Queue: 555 rules.
5200 rules inserted. Base: 3651 rules (101 with conclusion selected). Queue: 594 rules.
5400 rules inserted. Base: 3780 rules (101 with conclusion selected). Queue: 623 rules.
5600 rules inserted. Base: 3785 rules (102 with conclusion selected). Queue: 636 rules.
5800 rules inserted. Base: 3886 rules (102 with conclusion selected). Queue: 650 rules.
6000 rules inserted. Base: 4011 rules (102 with conclusion selected). Queue: 663 rules.
6200 rules inserted. Base: 4011 rules (102 with conclusion selected). Queue: 671 rules.
6400 rules inserted. Base: 4116 rules (102 with conclusion selected). Queue: 722 rules.
6600 rules inserted. Base: 4190 rules (102 with conclusion selected). Queue: 704 rules.
6800 rules inserted. Base: 4199 rules (106 with conclusion selected). Queue: 793 rules.
7000 rules inserted. Base: 4300 rules (106 with conclusion selected). Queue: 876 rules.
7200 rules inserted. Base: 4404 rules (106 with conclusion selected). Queue: 867 rules.
7400 rules inserted. Base: 4498 rules (106 with conclusion selected). Queue: 867 rules.
7600 rules inserted. Base: 4501 rules (106 with conclusion selected). Queue: 891 rules.
7800 rules inserted. Base: 4579 rules (106 with conclusion selected). Queue: 852 rules.
8000 rules inserted. Base: 4682 rules (106 with conclusion selected). Queue: 857 rules.
8200 rules inserted. Base: 4773 rules (106 with conclusion selected). Queue: 842 rules.
8400 rules inserted. Base: 4804 rules (106 with conclusion selected). Queue: 847 rules.
8600 rules inserted. Base: 4855 rules (106 with conclusion selected). Queue: 877 rules.
8800 rules inserted. Base: 4965 rules (106 with conclusion selected). Queue: 865 rules.
9000 rules inserted. Base: 5062 rules (106 with conclusion selected). Queue: 823 rules.
9200 rules inserted. Base: 5055 rules (110 with conclusion selected). Queue: 856 rules.
9400 rules inserted. Base: 5125 rules (110 with conclusion selected). Queue: 873 rules.
9600 rules inserted. Base: 5181 rules (110 with conclusion selected). Queue: 888 rules.
9800 rules inserted. Base: 5218 rules (110 with conclusion selected). Queue: 881 rules.
10000 rules inserted. Base: 5226 rules (110 with conclusion selected). Queue: 925 rules.
10200 rules inserted. Base: 5219 rules (110 with conclusion selected). Queue: 900 rules.
10400 rules inserted. Base: 5301 rules (110 with conclusion selected). Queue: 882 rules.
10600 rules inserted. Base: 5366 rules (110 with conclusion selected). Queue: 859 rules.
10800 rules inserted. Base: 5488 rules (110 with conclusion selected). Queue: 793 rules.
11000 rules inserted. Base: 5501 rules (110 with conclusion selected). Queue: 764 rules.
11200 rules inserted. Base: 5546 rules (110 with conclusion selected). Queue: 727 rules.
11400 rules inserted. Base: 5568 rules (110 with conclusion selected). Queue: 706 rules.
11600 rules inserted. Base: 5671 rules (110 with conclusion selected). Queue: 711 rules.
11800 rules inserted. Base: 5705 rules (110 with conclusion selected). Queue: 686 rules.
12000 rules inserted. Base: 5809 rules (110 with conclusion selected). Queue: 664 rules.
12200 rules inserted. Base: 5852 rules (110 with conclusion selected). Queue: 621 rules.
12400 rules inserted. Base: 5890 rules (110 with conclusion selected). Queue: 625 rules.
12600 rules inserted. Base: 5924 rules (110 with conclusion selected). Queue: 601 rules.
12800 rules inserted. Base: 5962 rules (110 with conclusion selected). Queue: 563 rules.
13000 rules inserted. Base: 5889 rules (110 with conclusion selected). Queue: 552 rules.
13200 rules inserted. Base: 5950 rules (110 with conclusion selected). Queue: 487 rules.
13400 rules inserted. Base: 6023 rules (110 with conclusion selected). Queue: 395 rules.
13600 rules inserted. Base: 6056 rules (110 with conclusion selected). Queue: 354 rules.
13800 rules inserted. Base: 6113 rules (110 with conclusion selected). Queue: 303 rules.
14000 rules inserted. Base: 6089 rules (110 with conclusion selected). Queue: 210 rules.
14200 rules inserted. Base: 6176 rules (112 with conclusion selected). Queue: 178 rules.
14400 rules inserted. Base: 6247 rules (112 with conclusion selected). Queue: 119 rules.
14600 rules inserted. Base: 6373 rules (113 with conclusion selected). Queue: 131 rules.
14800 rules inserted. Base: 6459 rules (119 with conclusion selected). Queue: 171 rules.
15000 rules inserted. Base: 6598 rules (119 with conclusion selected). Queue: 188 rules.
15200 rules inserted. Base: 6716 rules (119 with conclusion selected). Queue: 202 rules.
15400 rules inserted. Base: 6853 rules (123 with conclusion selected). Queue: 196 rules.
15600 rules inserted. Base: 7013 rules (124 with conclusion selected). Queue: 234 rules.
15800 rules inserted. Base: 7133 rules (124 with conclusion selected). Queue: 295 rules.
16000 rules inserted. Base: 7223 rules (124 with conclusion selected). Queue: 330 rules.
16200 rules inserted. Base: 7326 rules (124 with conclusion selected). Queue: 315 rules.
16400 rules inserted. Base: 7475 rules (124 with conclusion selected). Queue: 290 rules.
16600 rules inserted. Base: 7592 rules (124 with conclusion selected). Queue: 290 rules.
16800 rules inserted. Base: 7700 rules (124 with conclusion selected). Queue: 314 rules.
17000 rules inserted. Base: 7793 rules (124 with conclusion selected). Queue: 336 rules.
17200 rules inserted. Base: 7892 rules (124 with conclusion selected). Queue: 320 rules.
17400 rules inserted. Base: 7975 rules (124 with conclusion selected). Queue: 290 rules.
17600 rules inserted. Base: 7950 rules (124 with conclusion selected). Queue: 257 rules.
17800 rules inserted. Base: 7979 rules (124 with conclusion selected). Queue: 267 rules.
18000 rules inserted. Base: 8078 rules (127 with conclusion selected). Queue: 325 rules.
18200 rules inserted. Base: 8150 rules (127 with conclusion selected). Queue: 312 rules.
18400 rules inserted. Base: 8134 rules (127 with conclusion selected). Queue: 271 rules.
18600 rules inserted. Base: 8275 rules (127 with conclusion selected). Queue: 277 rules.
18800 rules inserted. Base: 8283 rules (127 with conclusion selected). Queue: 280 rules.
19000 rules inserted. Base: 8390 rules (130 with conclusion selected). Queue: 286 rules.
19200 rules inserted. Base: 8530 rules (130 with conclusion selected). Queue: 323 rules.
19400 rules inserted. Base: 8692 rules (130 with conclusion selected). Queue: 350 rules.
19600 rules inserted. Base: 8815 rules (130 with conclusion selected). Queue: 358 rules.
19800 rules inserted. Base: 8963 rules (130 with conclusion selected). Queue: 353 rules.
20000 rules inserted. Base: 9033 rules (130 with conclusion selected). Queue: 356 rules.
20200 rules inserted. Base: 9151 rules (130 with conclusion selected). Queue: 327 rules.
20400 rules inserted. Base: 9312 rules (138 with conclusion selected). Queue: 913 rules.
20600 rules inserted. Base: 9493 rules (140 with conclusion selected). Queue: 1111 rules.
20800 rules inserted. Base: 9577 rules (140 with conclusion selected). Queue: 1091 rules.
21000 rules inserted. Base: 9656 rules (140 with conclusion selected). Queue: 1075 rules.
21200 rules inserted. Base: 9749 rules (140 with conclusion selected). Queue: 1071 rules.
21400 rules inserted. Base: 9824 rules (140 with conclusion selected). Queue: 1051 rules.
21600 rules inserted. Base: 9916 rules (140 with conclusion selected). Queue: 1043 rules.
21800 rules inserted. Base: 10026 rules (140 with conclusion selected). Queue: 1038 rules.
22000 rules inserted. Base: 10106 rules (140 with conclusion selected). Queue: 1043 rules.
22200 rules inserted. Base: 10211 rules (140 with conclusion selected). Queue: 1071 rules.
22400 rules inserted. Base: 10284 rules (140 with conclusion selected). Queue: 1066 rules.
22600 rules inserted. Base: 10356 rules (140 with conclusion selected). Queue: 1058 rules.
22800 rules inserted. Base: 10452 rules (140 with conclusion selected). Queue: 1029 rules.
23000 rules inserted. Base: 10496 rules (140 with conclusion selected). Queue: 994 rules.
23200 rules inserted. Base: 10496 rules (140 with conclusion selected). Queue: 952 rules.
23400 rules inserted. Base: 10557 rules (140 with conclusion selected). Queue: 919 rules.
23600 rules inserted. Base: 10604 rules (142 with conclusion selected). Queue: 1081 rules.
23800 rules inserted. Base: 10741 rules (150 with conclusion selected). Queue: 1629 rules.
24000 rules inserted. Base: 10880 rules (150 with conclusion selected). Queue: 1593 rules.
24200 rules inserted. Base: 11027 rules (150 with conclusion selected). Queue: 1574 rules.
24400 rules inserted. Base: 11177 rules (150 with conclusion selected). Queue: 1527 rules.
24600 rules inserted. Base: 11274 rules (150 with conclusion selected). Queue: 1505 rules.
24800 rules inserted. Base: 11353 rules (150 with conclusion selected). Queue: 1489 rules.
25000 rules inserted. Base: 11440 rules (150 with conclusion selected). Queue: 1479 rules.
25200 rules inserted. Base: 11515 rules (150 with conclusion selected). Queue: 1459 rules.
25400 rules inserted. Base: 11587 rules (150 with conclusion selected). Queue: 1428 rules.
25600 rules inserted. Base: 11728 rules (150 with conclusion selected). Queue: 1406 rules.
25800 rules inserted. Base: 11872 rules (150 with conclusion selected). Queue: 1383 rules.
26000 rules inserted. Base: 11992 rules (150 with conclusion selected). Queue: 1345 rules.
26200 rules inserted. Base: 12073 rules (150 with conclusion selected). Queue: 1350 rules.
26400 rules inserted. Base: 12168 rules (150 with conclusion selected). Queue: 1366 rules.
26600 rules inserted. Base: 12241 rules (150 with conclusion selected). Queue: 1361 rules.
26800 rules inserted. Base: 12309 rules (150 with conclusion selected). Queue: 1352 rules.
27000 rules inserted. Base: 12430 rules (150 with conclusion selected). Queue: 1270 rules.
27200 rules inserted. Base: 12525 rules (150 with conclusion selected). Queue: 1207 rules.
27400 rules inserted. Base: 12605 rules (150 with conclusion selected). Queue: 1149 rules.
27600 rules inserted. Base: 12648 rules (150 with conclusion selected). Queue: 1115 rules.
27800 rules inserted. Base: 12669 rules (150 with conclusion selected). Queue: 1069 rules.
28000 rules inserted. Base: 12718 rules (150 with conclusion selected). Queue: 1044 rules.
28200 rules inserted. Base: 12750 rules (150 with conclusion selected). Queue: 1029 rules.
28400 rules inserted. Base: 12793 rules (150 with conclusion selected). Queue: 1026 rules.
28600 rules inserted. Base: 12928 rules (150 with conclusion selected). Queue: 997 rules.
28800 rules inserted. Base: 13057 rules (150 with conclusion selected). Queue: 971 rules.
29000 rules inserted. Base: 13192 rules (150 with conclusion selected). Queue: 923 rules.
29200 rules inserted. Base: 13331 rules (150 with conclusion selected). Queue: 866 rules.
29400 rules inserted. Base: 13414 rules (150 with conclusion selected). Queue: 827 rules.
29600 rules inserted. Base: 13544 rules (150 with conclusion selected). Queue: 788 rules.
29800 rules inserted. Base: 13674 rules (150 with conclusion selected). Queue: 737 rules.
30000 rules inserted. Base: 13812 rules (150 with conclusion selected). Queue: 699 rules.
30200 rules inserted. Base: 12740 rules (150 with conclusion selected). Queue: 629 rules.
30400 rules inserted. Base: 12840 rules (150 with conclusion selected). Queue: 544 rules.
30600 rules inserted. Base: 12928 rules (150 with conclusion selected). Queue: 472 rules.
30800 rules inserted. Base: 12994 rules (158 with conclusion selected). Queue: 415 rules.
31000 rules inserted. Base: 13014 rules (158 with conclusion selected). Queue: 403 rules.
31200 rules inserted. Base: 13049 rules (158 with conclusion selected). Queue: 391 rules.
31400 rules inserted. Base: 13128 rules (158 with conclusion selected). Queue: 342 rules.
31600 rules inserted. Base: 13168 rules (158 with conclusion selected). Queue: 306 rules.
31800 rules inserted. Base: 12056 rules (154 with conclusion selected). Queue: 233 rules.
32000 rules inserted. Base: 12060 rules (158 with conclusion selected). Queue: 183 rules.
32200 rules inserted. Base: 12082 rules (158 with conclusion selected). Queue: 156 rules.
32400 rules inserted. Base: 12039 rules (158 with conclusion selected). Queue: 81 rules.
32600 rules inserted. Base: 12050 rules (158 with conclusion selected). Queue: 6 rules.
Starting query event(auth_UserCompletesProtocolWithAppKey(K7)) && event(auth_UserCompletesProtocolWithAppMessage(M8_1)) ==> event(auth_AppSendsLastMessageToUserKey(K7)) && event(auth_AppSendsLastMessageToUserMessage(M8_1))
goal reachable: b-event(auth_AppSendsLastMessageToUserKey(senc((tag_k7,k7_1),bit2symk((tag_g2su2sa,hash_gen(exp(exp(g,sa_1),su_1))))))) && b-event(auth_AppSendsLastMessageToUserMessage(senc((tag_m8,((((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),nr_1),sig(hash((((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),nr_1)),ska[]))),k7_1))) && b-event(auth_AppSendsLastMessageToUserKey(senc((tag_k7,k7_2),bit2symk((tag_g2su2sa,hash_gen(exp(exp(g,sa_2),su_2))))))) && b-event(auth_AppSendsLastMessageToUserMessage(senc((tag_m8,((((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),nr_2),sig(hash((((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),nr_2)),ska[]))),k7_2))) -> event(auth_UserCompletesProtocolWithAppKey(senc((tag_k7,k7_1),bit2symk((tag_g2su2sa,hash_gen(exp(exp(g,sa_1),su_1))))))) && event(auth_UserCompletesProtocolWithAppMessage(senc((tag_m8,((((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),nr_2),sig(hash((((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),nr_2)),ska[]))),k7_2)))
Abbreviations:
k7_1 = k7[!1 = @sid]
sa_1 = sa[!1 = @sid]
su_1 = su[!1 = @sid_1]
nc_2 = nc[!1 = @sid_2]
nr_2 = nr[!1 = @sid_3]
k7_2 = k7[!1 = @sid_3]
nc_1 = nc[!1 = @sid_4]
nr_1 = nr[!1 = @sid]
sa_2 = sa[!1 = @sid_3]
su_2 = su[!1 = @sid_5]
RESULT event(auth_UserCompletesProtocolWithAppKey(K7)) && event(auth_UserCompletesProtocolWithAppMessage(M8_1)) ==> event(auth_AppSendsLastMessageToUserKey(K7)) && event(auth_AppSendsLastMessageToUserMessage(M8_1)) is true.
-- Query event(auth_AppCompletesProtocolWithUserKey(K8)) && event(auth_AppCompletesProtocolWithUserMessage(M9_1)) ==> event(auth_UserSendsLastMessageToAppKey(K8)) && event(auth_UserSendsLastMessageToAppMessage(M9_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (83 with conclusion selected). Queue: 133 rules.
400 rules inserted. Base: 377 rules (91 with conclusion selected). Queue: 145 rules.
600 rules inserted. Base: 566 rules (91 with conclusion selected). Queue: 164 rules.
800 rules inserted. Base: 746 rules (95 with conclusion selected). Queue: 262 rules.
1000 rules inserted. Base: 871 rules (95 with conclusion selected). Queue: 261 rules.
1200 rules inserted. Base: 1018 rules (95 with conclusion selected). Queue: 267 rules.
1400 rules inserted. Base: 1157 rules (95 with conclusion selected). Queue: 289 rules.
1600 rules inserted. Base: 1303 rules (98 with conclusion selected). Queue: 348 rules.
1800 rules inserted. Base: 1444 rules (98 with conclusion selected). Queue: 346 rules.
2000 rules inserted. Base: 1592 rules (98 with conclusion selected). Queue: 334 rules.
2200 rules inserted. Base: 1726 rules (98 with conclusion selected). Queue: 342 rules.
2400 rules inserted. Base: 1860 rules (98 with conclusion selected). Queue: 378 rules.
2600 rules inserted. Base: 2039 rules (98 with conclusion selected). Queue: 390 rules.
2800 rules inserted. Base: 2107 rules (98 with conclusion selected). Queue: 353 rules.
3000 rules inserted. Base: 2264 rules (98 with conclusion selected). Queue: 338 rules.
3200 rules inserted. Base: 2361 rules (98 with conclusion selected). Queue: 353 rules.
3400 rules inserted. Base: 2508 rules (98 with conclusion selected). Queue: 366 rules.
3600 rules inserted. Base: 2674 rules (101 with conclusion selected). Queue: 499 rules.
3800 rules inserted. Base: 2825 rules (101 with conclusion selected). Queue: 503 rules.
4000 rules inserted. Base: 3015 rules (101 with conclusion selected). Queue: 624 rules.
4200 rules inserted. Base: 3182 rules (101 with conclusion selected). Queue: 628 rules.
4400 rules inserted. Base: 3201 rules (101 with conclusion selected). Queue: 568 rules.
4600 rules inserted. Base: 3274 rules (101 with conclusion selected). Queue: 546 rules.
4800 rules inserted. Base: 3426 rules (101 with conclusion selected). Queue: 551 rules.
5000 rules inserted. Base: 3574 rules (101 with conclusion selected). Queue: 543 rules.
5200 rules inserted. Base: 3718 rules (101 with conclusion selected). Queue: 565 rules.
5400 rules inserted. Base: 3857 rules (101 with conclusion selected). Queue: 544 rules.
5600 rules inserted. Base: 3948 rules (101 with conclusion selected). Queue: 527 rules.
5800 rules inserted. Base: 4072 rules (101 with conclusion selected). Queue: 535 rules.
6000 rules inserted. Base: 4076 rules (102 with conclusion selected). Queue: 544 rules.
6200 rules inserted. Base: 4188 rules (102 with conclusion selected). Queue: 551 rules.
6400 rules inserted. Base: 4304 rules (102 with conclusion selected). Queue: 554 rules.
6600 rules inserted. Base: 4282 rules (102 with conclusion selected). Queue: 552 rules.
6800 rules inserted. Base: 4382 rules (102 with conclusion selected). Queue: 562 rules.
7000 rules inserted. Base: 4463 rules (102 with conclusion selected). Queue: 553 rules.
7200 rules inserted. Base: 4353 rules (106 with conclusion selected). Queue: 598 rules.
7400 rules inserted. Base: 4453 rules (106 with conclusion selected). Queue: 598 rules.
7600 rules inserted. Base: 4539 rules (106 with conclusion selected). Queue: 587 rules.
7800 rules inserted. Base: 4473 rules (106 with conclusion selected). Queue: 572 rules.
8000 rules inserted. Base: 4572 rules (106 with conclusion selected). Queue: 563 rules.
8200 rules inserted. Base: 4578 rules (106 with conclusion selected). Queue: 552 rules.
8400 rules inserted. Base: 4635 rules (106 with conclusion selected). Queue: 566 rules.
8600 rules inserted. Base: 4723 rules (106 with conclusion selected). Queue: 555 rules.
8800 rules inserted. Base: 4664 rules (110 with conclusion selected). Queue: 610 rules.
9000 rules inserted. Base: 4728 rules (110 with conclusion selected). Queue: 605 rules.
9200 rules inserted. Base: 4765 rules (110 with conclusion selected). Queue: 588 rules.
9400 rules inserted. Base: 4754 rules (110 with conclusion selected). Queue: 634 rules.
9600 rules inserted. Base: 4805 rules (110 with conclusion selected). Queue: 637 rules.
9800 rules inserted. Base: 4866 rules (110 with conclusion selected). Queue: 582 rules.
10000 rules inserted. Base: 4934 rules (110 with conclusion selected). Queue: 502 rules.
10200 rules inserted. Base: 4969 rules (110 with conclusion selected). Queue: 445 rules.
10400 rules inserted. Base: 5036 rules (110 with conclusion selected). Queue: 435 rules.
10600 rules inserted. Base: 5058 rules (110 with conclusion selected). Queue: 374 rules.
10800 rules inserted. Base: 5107 rules (110 with conclusion selected). Queue: 369 rules.
11000 rules inserted. Base: 5102 rules (110 with conclusion selected). Queue: 311 rules.
11200 rules inserted. Base: 5098 rules (110 with conclusion selected). Queue: 265 rules.
11400 rules inserted. Base: 5103 rules (110 with conclusion selected). Queue: 173 rules.
11600 rules inserted. Base: 5125 rules (110 with conclusion selected). Queue: 103 rules.
11800 rules inserted. Base: 5161 rules (112 with conclusion selected). Queue: 73 rules.
12000 rules inserted. Base: 5229 rules (116 with conclusion selected). Queue: 136 rules.
12200 rules inserted. Base: 5372 rules (116 with conclusion selected). Queue: 192 rules.
12400 rules inserted. Base: 5536 rules (116 with conclusion selected). Queue: 257 rules.
12600 rules inserted. Base: 5689 rules (116 with conclusion selected). Queue: 239 rules.
12800 rules inserted. Base: 5870 rules (119 with conclusion selected). Queue: 354 rules.
13000 rules inserted. Base: 6020 rules (119 with conclusion selected). Queue: 404 rules.
13200 rules inserted. Base: 6167 rules (119 with conclusion selected). Queue: 490 rules.
13400 rules inserted. Base: 6314 rules (119 with conclusion selected). Queue: 565 rules.
13600 rules inserted. Base: 6441 rules (119 with conclusion selected). Queue: 596 rules.
13800 rules inserted. Base: 6626 rules (119 with conclusion selected). Queue: 602 rules.
14000 rules inserted. Base: 6759 rules (119 with conclusion selected). Queue: 565 rules.
14200 rules inserted. Base: 6932 rules (119 with conclusion selected). Queue: 560 rules.
14400 rules inserted. Base: 7104 rules (119 with conclusion selected). Queue: 536 rules.
14600 rules inserted. Base: 7222 rules (119 with conclusion selected). Queue: 540 rules.
14800 rules inserted. Base: 7355 rules (119 with conclusion selected). Queue: 595 rules.
15000 rules inserted. Base: 7511 rules (119 with conclusion selected). Queue: 621 rules.
15200 rules inserted. Base: 7610 rules (119 with conclusion selected). Queue: 608 rules.
15400 rules inserted. Base: 7750 rules (119 with conclusion selected). Queue: 690 rules.
15600 rules inserted. Base: 7870 rules (119 with conclusion selected). Queue: 678 rules.
15800 rules inserted. Base: 7993 rules (119 with conclusion selected). Queue: 659 rules.
16000 rules inserted. Base: 8125 rules (119 with conclusion selected). Queue: 639 rules.
16200 rules inserted. Base: 8232 rules (119 with conclusion selected). Queue: 622 rules.
16400 rules inserted. Base: 8079 rules (119 with conclusion selected). Queue: 548 rules.
16600 rules inserted. Base: 8205 rules (119 with conclusion selected). Queue: 545 rules.
16800 rules inserted. Base: 8363 rules (119 with conclusion selected). Queue: 545 rules.
17000 rules inserted. Base: 8345 rules (119 with conclusion selected). Queue: 571 rules.
17200 rules inserted. Base: 8463 rules (119 with conclusion selected). Queue: 560 rules.
17400 rules inserted. Base: 8577 rules (122 with conclusion selected). Queue: 564 rules.
17600 rules inserted. Base: 8698 rules (122 with conclusion selected). Queue: 543 rules.
17800 rules inserted. Base: 8801 rules (122 with conclusion selected). Queue: 509 rules.
18000 rules inserted. Base: 8943 rules (122 with conclusion selected). Queue: 486 rules.
18200 rules inserted. Base: 8771 rules (122 with conclusion selected). Queue: 401 rules.
18400 rules inserted. Base: 8926 rules (122 with conclusion selected). Queue: 401 rules.
18600 rules inserted. Base: 8962 rules (122 with conclusion selected). Queue: 398 rules.
18800 rules inserted. Base: 9063 rules (122 with conclusion selected). Queue: 381 rules.
19000 rules inserted. Base: 9223 rules (125 with conclusion selected). Queue: 390 rules.
19200 rules inserted. Base: 9382 rules (125 with conclusion selected). Queue: 414 rules.
19400 rules inserted. Base: 9532 rules (125 with conclusion selected). Queue: 401 rules.
19600 rules inserted. Base: 9695 rules (125 with conclusion selected). Queue: 409 rules.
19800 rules inserted. Base: 9850 rules (125 with conclusion selected). Queue: 423 rules.
20000 rules inserted. Base: 9997 rules (125 with conclusion selected). Queue: 424 rules.
20200 rules inserted. Base: 10091 rules (125 with conclusion selected). Queue: 437 rules.
20400 rules inserted. Base: 10200 rules (125 with conclusion selected). Queue: 419 rules.
20600 rules inserted. Base: 10342 rules (126 with conclusion selected). Queue: 466 rules.
20800 rules inserted. Base: 10500 rules (135 with conclusion selected). Queue: 856 rules.
21000 rules inserted. Base: 10651 rules (135 with conclusion selected). Queue: 873 rules.
21200 rules inserted. Base: 10775 rules (135 with conclusion selected). Queue: 842 rules.
21400 rules inserted. Base: 10923 rules (135 with conclusion selected). Queue: 913 rules.
21600 rules inserted. Base: 11022 rules (135 with conclusion selected). Queue: 899 rules.
21800 rules inserted. Base: 11186 rules (135 with conclusion selected). Queue: 895 rules.
22000 rules inserted. Base: 11284 rules (135 with conclusion selected). Queue: 913 rules.
22200 rules inserted. Base: 11446 rules (135 with conclusion selected). Queue: 1026 rules.
22400 rules inserted. Base: 11579 rules (135 with conclusion selected). Queue: 1072 rules.
22600 rules inserted. Base: 11668 rules (135 with conclusion selected). Queue: 1062 rules.
22800 rules inserted. Base: 11758 rules (135 with conclusion selected). Queue: 1025 rules.
23000 rules inserted. Base: 11724 rules (135 with conclusion selected). Queue: 901 rules.
23200 rules inserted. Base: 11671 rules (135 with conclusion selected). Queue: 763 rules.
23400 rules inserted. Base: 11779 rules (140 with conclusion selected). Queue: 902 rules.
23600 rules inserted. Base: 11916 rules (145 with conclusion selected). Queue: 1103 rules.
23800 rules inserted. Base: 12094 rules (145 with conclusion selected). Queue: 1140 rules.
24000 rules inserted. Base: 12260 rules (145 with conclusion selected). Queue: 1155 rules.
24200 rules inserted. Base: 12352 rules (145 with conclusion selected). Queue: 1125 rules.
24400 rules inserted. Base: 12507 rules (145 with conclusion selected). Queue: 1196 rules.
24600 rules inserted. Base: 12615 rules (145 with conclusion selected). Queue: 1166 rules.
24800 rules inserted. Base: 12732 rules (145 with conclusion selected). Queue: 1199 rules.
25000 rules inserted. Base: 12871 rules (145 with conclusion selected). Queue: 1233 rules.
25200 rules inserted. Base: 12985 rules (145 with conclusion selected). Queue: 1221 rules.
25400 rules inserted. Base: 13111 rules (145 with conclusion selected). Queue: 1254 rules.
25600 rules inserted. Base: 13292 rules (145 with conclusion selected). Queue: 1407 rules.
25800 rules inserted. Base: 13402 rules (145 with conclusion selected). Queue: 1369 rules.
26000 rules inserted. Base: 13522 rules (145 with conclusion selected). Queue: 1431 rules.
26200 rules inserted. Base: 13603 rules (145 with conclusion selected). Queue: 1407 rules.
26400 rules inserted. Base: 13691 rules (145 with conclusion selected). Queue: 1359 rules.
26600 rules inserted. Base: 13670 rules (145 with conclusion selected). Queue: 1240 rules.
26800 rules inserted. Base: 13588 rules (145 with conclusion selected). Queue: 1091 rules.
27000 rules inserted. Base: 13701 rules (145 with conclusion selected). Queue: 1114 rules.
27200 rules inserted. Base: 13850 rules (145 with conclusion selected). Queue: 1132 rules.
27400 rules inserted. Base: 13895 rules (145 with conclusion selected). Queue: 1111 rules.
27600 rules inserted. Base: 14012 rules (145 with conclusion selected). Queue: 1103 rules.
27800 rules inserted. Base: 14194 rules (145 with conclusion selected). Queue: 1117 rules.
28000 rules inserted. Base: 14334 rules (145 with conclusion selected). Queue: 1102 rules.
28200 rules inserted. Base: 14534 rules (145 with conclusion selected). Queue: 961 rules.
28400 rules inserted. Base: 14056 rules (145 with conclusion selected). Queue: 802 rules.
28600 rules inserted. Base: 14148 rules (145 with conclusion selected). Queue: 772 rules.
28800 rules inserted. Base: 14269 rules (145 with conclusion selected). Queue: 830 rules.
29000 rules inserted. Base: 14417 rules (145 with conclusion selected). Queue: 846 rules.
29200 rules inserted. Base: 13809 rules (145 with conclusion selected). Queue: 801 rules.
29400 rules inserted. Base: 13902 rules (145 with conclusion selected). Queue: 802 rules.
29600 rules inserted. Base: 13993 rules (145 with conclusion selected). Queue: 800 rules.
29800 rules inserted. Base: 14077 rules (145 with conclusion selected). Queue: 777 rules.
30000 rules inserted. Base: 14171 rules (157 with conclusion selected). Queue: 738 rules.
30200 rules inserted. Base: 14265 rules (157 with conclusion selected). Queue: 769 rules.
30400 rules inserted. Base: 14344 rules (157 with conclusion selected). Queue: 774 rules.
30600 rules inserted. Base: 14427 rules (157 with conclusion selected). Queue: 738 rules.
30800 rules inserted. Base: 14498 rules (157 with conclusion selected). Queue: 722 rules.
31000 rules inserted. Base: 14684 rules (157 with conclusion selected). Queue: 601 rules.
31200 rules inserted. Base: 14296 rules (157 with conclusion selected). Queue: 481 rules.
31400 rules inserted. Base: 14323 rules (157 with conclusion selected). Queue: 464 rules.
31600 rules inserted. Base: 14355 rules (157 with conclusion selected). Queue: 423 rules.
31800 rules inserted. Base: 13851 rules (151 with conclusion selected). Queue: 388 rules.
32000 rules inserted. Base: 13931 rules (151 with conclusion selected). Queue: 338 rules.
32200 rules inserted. Base: 13972 rules (157 with conclusion selected). Queue: 285 rules.
32400 rules inserted. Base: 13998 rules (157 with conclusion selected). Queue: 288 rules.
32600 rules inserted. Base: 14034 rules (157 with conclusion selected). Queue: 233 rules.
32800 rules inserted. Base: 13933 rules (157 with conclusion selected). Queue: 195 rules.
33000 rules inserted. Base: 13934 rules (157 with conclusion selected). Queue: 121 rules.
33200 rules inserted. Base: 13907 rules (157 with conclusion selected). Queue: 88 rules.
33400 rules inserted. Base: 13863 rules (157 with conclusion selected). Queue: 26 rules.
Starting query event(auth_AppCompletesProtocolWithUserKey(K8)) && event(auth_AppCompletesProtocolWithUserMessage(M9_1)) ==> event(auth_UserSendsLastMessageToAppKey(K8)) && event(auth_UserSendsLastMessageToAppMessage(M9_1))
goal reachable: b-event(auth_UserSendsLastMessageToAppKey(senc((tag_k8,k8_1),bit2symk((tag_g2su2sa,hash_gen(exp(exp(g,sa_1),su_1))))))) && b-event(auth_UserSendsLastMessageToAppMessage(senc((tag_m9,((nr_1,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_1,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[]))),k8_1))) && b-event(auth_UserSendsLastMessageToAppKey(senc((tag_k8,k8_2),bit2symk((tag_g2su2sa,hash_gen(exp(exp(g,sa_2),su_2))))))) && b-event(auth_UserSendsLastMessageToAppMessage(senc((tag_m9,((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[]))),k8_2))) -> event(auth_AppCompletesProtocolWithUserKey(senc((tag_k8,k8_1),bit2symk((tag_g2su2sa,hash_gen(exp(exp(g,sa_1),su_1))))))) && event(auth_AppCompletesProtocolWithUserMessage(senc((tag_m9,((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[]))),k8_2)))
Abbreviations:
k8_1 = k8[!1 = @sid]
sa_1 = sa[!1 = @sid_1]
su_1 = su[!1 = @sid]
nr_2 = nr[!1 = @sid_2]
nc_2 = nc[!1 = @sid_3]
k8_2 = k8[!1 = @sid_4]
nr_1 = nr[!1 = @sid_1]
nc_1 = nc[!1 = @sid_5]
sa_2 = sa[!1 = @sid_2]
su_2 = su[!1 = @sid_4]
RESULT event(auth_AppCompletesProtocolWithUserKey(K8)) && event(auth_AppCompletesProtocolWithUserMessage(M9_1)) ==> event(auth_UserSendsLastMessageToAppKey(K8)) && event(auth_UserSendsLastMessageToAppMessage(M9_1)) is true.
-- Query event(auth_VerfierCompletesProtocolWithAppKey(K9)) && event(auth_VerfierCompletesProtocolWithAppMessage(M10_1)) ==> event(auth_AppSendsLastMessageToVerifierKey(K9)) && event(auth_AppSendsLastMessageToVerifierMessage(M10_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (84 with conclusion selected). Queue: 125 rules.
400 rules inserted. Base: 369 rules (91 with conclusion selected). Queue: 137 rules.
600 rules inserted. Base: 558 rules (91 with conclusion selected). Queue: 159 rules.
800 rules inserted. Base: 726 rules (95 with conclusion selected). Queue: 238 rules.
1000 rules inserted. Base: 850 rules (95 with conclusion selected). Queue: 250 rules.
1200 rules inserted. Base: 993 rules (95 with conclusion selected). Queue: 259 rules.
1400 rules inserted. Base: 1106 rules (98 with conclusion selected). Queue: 291 rules.
1600 rules inserted. Base: 1260 rules (98 with conclusion selected). Queue: 310 rules.
1800 rules inserted. Base: 1404 rules (98 with conclusion selected). Queue: 304 rules.
2000 rules inserted. Base: 1523 rules (98 with conclusion selected). Queue: 302 rules.
2200 rules inserted. Base: 1655 rules (98 with conclusion selected). Queue: 364 rules.
2400 rules inserted. Base: 1830 rules (98 with conclusion selected). Queue: 353 rules.
2600 rules inserted. Base: 1901 rules (98 with conclusion selected). Queue: 321 rules.
2800 rules inserted. Base: 2054 rules (98 with conclusion selected). Queue: 312 rules.
3000 rules inserted. Base: 2166 rules (98 with conclusion selected). Queue: 344 rules.
3200 rules inserted. Base: 2308 rules (98 with conclusion selected). Queue: 346 rules.
3400 rules inserted. Base: 2477 rules (101 with conclusion selected). Queue: 445 rules.
3600 rules inserted. Base: 2647 rules (101 with conclusion selected). Queue: 480 rules.
3800 rules inserted. Base: 2818 rules (101 with conclusion selected). Queue: 560 rules.
4000 rules inserted. Base: 2949 rules (101 with conclusion selected). Queue: 569 rules.
4200 rules inserted. Base: 2957 rules (101 with conclusion selected). Queue: 511 rules.
4400 rules inserted. Base: 3118 rules (101 with conclusion selected). Queue: 516 rules.
4600 rules inserted. Base: 3253 rules (101 with conclusion selected). Queue: 520 rules.
4800 rules inserted. Base: 3392 rules (101 with conclusion selected). Queue: 540 rules.
5000 rules inserted. Base: 3543 rules (101 with conclusion selected). Queue: 533 rules.
5200 rules inserted. Base: 3638 rules (101 with conclusion selected). Queue: 529 rules.
5400 rules inserted. Base: 3779 rules (101 with conclusion selected). Queue: 561 rules.
5600 rules inserted. Base: 3786 rules (102 with conclusion selected). Queue: 568 rules.
5800 rules inserted. Base: 3900 rules (102 with conclusion selected). Queue: 604 rules.
6000 rules inserted. Base: 4028 rules (102 with conclusion selected). Queue: 595 rules.
6200 rules inserted. Base: 4018 rules (102 with conclusion selected). Queue: 590 rules.
6400 rules inserted. Base: 4130 rules (102 with conclusion selected). Queue: 616 rules.
6600 rules inserted. Base: 4211 rules (102 with conclusion selected). Queue: 597 rules.
6800 rules inserted. Base: 4179 rules (106 with conclusion selected). Queue: 674 rules.
7000 rules inserted. Base: 4284 rules (106 with conclusion selected). Queue: 684 rules.
7200 rules inserted. Base: 4380 rules (106 with conclusion selected). Queue: 657 rules.
7400 rules inserted. Base: 4395 rules (106 with conclusion selected). Queue: 676 rules.
7600 rules inserted. Base: 4497 rules (106 with conclusion selected). Queue: 655 rules.
7800 rules inserted. Base: 4582 rules (106 with conclusion selected). Queue: 622 rules.
8000 rules inserted. Base: 4668 rules (106 with conclusion selected). Queue: 631 rules.
8200 rules inserted. Base: 4746 rules (106 with conclusion selected). Queue: 647 rules.
8400 rules inserted. Base: 4828 rules (106 with conclusion selected). Queue: 641 rules.
8600 rules inserted. Base: 4821 rules (110 with conclusion selected). Queue: 689 rules.
8800 rules inserted. Base: 4896 rules (110 with conclusion selected). Queue: 699 rules.
9000 rules inserted. Base: 4922 rules (110 with conclusion selected). Queue: 666 rules.
9200 rules inserted. Base: 5033 rules (110 with conclusion selected). Queue: 678 rules.
9400 rules inserted. Base: 4997 rules (110 with conclusion selected). Queue: 667 rules.
9600 rules inserted. Base: 5058 rules (110 with conclusion selected). Queue: 634 rules.
9800 rules inserted. Base: 5154 rules (110 with conclusion selected). Queue: 584 rules.
10000 rules inserted. Base: 5206 rules (110 with conclusion selected). Queue: 539 rules.
10200 rules inserted. Base: 5201 rules (110 with conclusion selected). Queue: 490 rules.
10400 rules inserted. Base: 5306 rules (110 with conclusion selected). Queue: 480 rules.
10600 rules inserted. Base: 5345 rules (110 with conclusion selected). Queue: 371 rules.
10800 rules inserted. Base: 5386 rules (110 with conclusion selected). Queue: 366 rules.
11000 rules inserted. Base: 5371 rules (110 with conclusion selected). Queue: 322 rules.
11200 rules inserted. Base: 5364 rules (110 with conclusion selected). Queue: 272 rules.
11400 rules inserted. Base: 5373 rules (110 with conclusion selected). Queue: 162 rules.
11600 rules inserted. Base: 5370 rules (110 with conclusion selected). Queue: 107 rules.
11800 rules inserted. Base: 5411 rules (112 with conclusion selected). Queue: 98 rules.
12000 rules inserted. Base: 5443 rules (113 with conclusion selected). Queue: 70 rules.
12200 rules inserted. Base: 5560 rules (116 with conclusion selected). Queue: 142 rules.
12400 rules inserted. Base: 5694 rules (116 with conclusion selected). Queue: 163 rules.
12600 rules inserted. Base: 5776 rules (117 with conclusion selected). Queue: 191 rules.
12800 rules inserted. Base: 5887 rules (117 with conclusion selected). Queue: 241 rules.
13000 rules inserted. Base: 5953 rules (117 with conclusion selected). Queue: 256 rules.
13200 rules inserted. Base: 6063 rules (117 with conclusion selected). Queue: 237 rules.
13400 rules inserted. Base: 6171 rules (117 with conclusion selected). Queue: 188 rules.
13600 rules inserted. Base: 6260 rules (117 with conclusion selected). Queue: 187 rules.
13800 rules inserted. Base: 6307 rules (117 with conclusion selected). Queue: 186 rules.
14000 rules inserted. Base: 6282 rules (117 with conclusion selected). Queue: 194 rules.
14200 rules inserted. Base: 6222 rules (117 with conclusion selected). Queue: 182 rules.
14400 rules inserted. Base: 6274 rules (121 with conclusion selected). Queue: 306 rules.
14600 rules inserted. Base: 6239 rules (121 with conclusion selected). Queue: 316 rules.
14800 rules inserted. Base: 6250 rules (121 with conclusion selected). Queue: 317 rules.
15000 rules inserted. Base: 6264 rules (121 with conclusion selected). Queue: 336 rules.
15200 rules inserted. Base: 6227 rules (121 with conclusion selected). Queue: 331 rules.
15400 rules inserted. Base: 6240 rules (121 with conclusion selected). Queue: 332 rules.
15600 rules inserted. Base: 6363 rules (121 with conclusion selected). Queue: 359 rules.
15800 rules inserted. Base: 6459 rules (121 with conclusion selected). Queue: 357 rules.
16000 rules inserted. Base: 6652 rules (121 with conclusion selected). Queue: 376 rules.
16200 rules inserted. Base: 6749 rules (121 with conclusion selected). Queue: 357 rules.
16400 rules inserted. Base: 6919 rules (121 with conclusion selected). Queue: 354 rules.
16600 rules inserted. Base: 6976 rules (121 with conclusion selected). Queue: 337 rules.
16800 rules inserted. Base: 7063 rules (121 with conclusion selected). Queue: 320 rules.
17000 rules inserted. Base: 7236 rules (132 with conclusion selected). Queue: 389 rules.
17200 rules inserted. Base: 7410 rules (135 with conclusion selected). Queue: 412 rules.
17400 rules inserted. Base: 7587 rules (135 with conclusion selected). Queue: 417 rules.
17600 rules inserted. Base: 7762 rules (135 with conclusion selected). Queue: 407 rules.
17800 rules inserted. Base: 7927 rules (135 with conclusion selected). Queue: 418 rules.
18000 rules inserted. Base: 8098 rules (135 with conclusion selected). Queue: 403 rules.
18200 rules inserted. Base: 8213 rules (135 with conclusion selected). Queue: 336 rules.
18400 rules inserted. Base: 8366 rules (135 with conclusion selected). Queue: 323 rules.
18600 rules inserted. Base: 8536 rules (135 with conclusion selected). Queue: 378 rules.
18800 rules inserted. Base: 8672 rules (135 with conclusion selected). Queue: 415 rules.
19000 rules inserted. Base: 8806 rules (135 with conclusion selected). Queue: 437 rules.
19200 rules inserted. Base: 8874 rules (135 with conclusion selected). Queue: 423 rules.
19400 rules inserted. Base: 8948 rules (135 with conclusion selected). Queue: 415 rules.
19600 rules inserted. Base: 9048 rules (135 with conclusion selected). Queue: 391 rules.
19800 rules inserted. Base: 9148 rules (135 with conclusion selected). Queue: 375 rules.
20000 rules inserted. Base: 9203 rules (135 with conclusion selected). Queue: 358 rules.
20200 rules inserted. Base: 9277 rules (135 with conclusion selected). Queue: 340 rules.
20400 rules inserted. Base: 9283 rules (135 with conclusion selected). Queue: 311 rules.
20600 rules inserted. Base: 9346 rules (135 with conclusion selected). Queue: 279 rules.
20800 rules inserted. Base: 9386 rules (139 with conclusion selected). Queue: 236 rules.
21000 rules inserted. Base: 9425 rules (139 with conclusion selected). Queue: 214 rules.
21200 rules inserted. Base: 9401 rules (139 with conclusion selected). Queue: 192 rules.
21400 rules inserted. Base: 9313 rules (139 with conclusion selected). Queue: 163 rules.
21600 rules inserted. Base: 9250 rules (137 with conclusion selected). Queue: 132 rules.
21800 rules inserted. Base: 9302 rules (139 with conclusion selected). Queue: 5 rules.
Starting query event(auth_VerfierCompletesProtocolWithAppKey(K9)) && event(auth_VerfierCompletesProtocolWithAppMessage(M10_1)) ==> event(auth_AppSendsLastMessageToVerifierKey(K9)) && event(auth_AppSendsLastMessageToVerifierMessage(M10_1))
goal reachable: b-event(auth_AppSendsLastMessageToVerifierMessage(senc((tag_m4,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1)),k3_1))) && b-event(auth_AppSendsLastMessageToVerifierKey(senc((tag_k3,k3_1),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_1),sc_1))))))) && b-event(auth_AppSendsLastMessageToVerifierMessage(senc((tag_m4,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2)),k3_2))) && b-event(auth_AppSendsLastMessageToVerifierKey(senc((tag_k3,k3_2),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_2),sc_2))))))) -> event(auth_VerfierCompletesProtocolWithAppKey(senc((tag_k3,k3_1),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_1),sc_1))))))) && event(auth_VerfierCompletesProtocolWithAppMessage(senc((tag_m4,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2)),k3_2)))
Abbreviations:
k3_1 = k3[!1 = @sid]
sav_1 = sav[!1 = @sid_1]
sc_1 = sc[!1 = @sid]
nc_2 = nc[!1 = @sid_2]
k3_2 = k3[!1 = @sid_2]
nc_1 = nc[!1 = @sid]
sav_2 = sav[!1 = @sid_3]
sc_2 = sc[!1 = @sid_2]
RESULT event(auth_VerfierCompletesProtocolWithAppKey(K9)) && event(auth_VerfierCompletesProtocolWithAppMessage(M10_1)) ==> event(auth_AppSendsLastMessageToVerifierKey(K9)) && event(auth_AppSendsLastMessageToVerifierMessage(M10_1)) is true.
-- Query event(auth_AppCompletesProtocolWithVerifierKey(K10)) && event(auth_AppCompletesProtocolWithVerifierMessage(M11_1)) ==> event(auth_VerifierSendsLastMessageToAppKey(K10)) && event(auth_VerifierSendsLastMessageToAppMessage(M11_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (83 with conclusion selected). Queue: 133 rules.
400 rules inserted. Base: 377 rules (91 with conclusion selected). Queue: 145 rules.
600 rules inserted. Base: 566 rules (91 with conclusion selected). Queue: 164 rules.
800 rules inserted. Base: 746 rules (95 with conclusion selected). Queue: 262 rules.
1000 rules inserted. Base: 871 rules (95 with conclusion selected). Queue: 261 rules.
1200 rules inserted. Base: 1018 rules (95 with conclusion selected). Queue: 267 rules.
1400 rules inserted. Base: 1157 rules (95 with conclusion selected). Queue: 289 rules.
1600 rules inserted. Base: 1303 rules (98 with conclusion selected). Queue: 348 rules.
1800 rules inserted. Base: 1444 rules (98 with conclusion selected). Queue: 346 rules.
2000 rules inserted. Base: 1592 rules (98 with conclusion selected). Queue: 334 rules.
2200 rules inserted. Base: 1726 rules (98 with conclusion selected). Queue: 342 rules.
2400 rules inserted. Base: 1860 rules (98 with conclusion selected). Queue: 380 rules.
2600 rules inserted. Base: 2039 rules (98 with conclusion selected). Queue: 392 rules.
2800 rules inserted. Base: 2108 rules (98 with conclusion selected). Queue: 357 rules.
3000 rules inserted. Base: 2266 rules (98 with conclusion selected). Queue: 338 rules.
3200 rules inserted. Base: 2370 rules (98 with conclusion selected). Queue: 359 rules.
3400 rules inserted. Base: 2516 rules (98 with conclusion selected). Queue: 372 rules.
3600 rules inserted. Base: 2684 rules (101 with conclusion selected). Queue: 516 rules.
3800 rules inserted. Base: 2839 rules (101 with conclusion selected). Queue: 525 rules.
4000 rules inserted. Base: 3031 rules (101 with conclusion selected). Queue: 638 rules.
4200 rules inserted. Base: 3203 rules (101 with conclusion selected). Queue: 659 rules.
4400 rules inserted. Base: 3305 rules (101 with conclusion selected). Queue: 647 rules.
4600 rules inserted. Base: 3288 rules (101 with conclusion selected). Queue: 574 rules.
4800 rules inserted. Base: 3448 rules (101 with conclusion selected). Queue: 575 rules.
5000 rules inserted. Base: 3608 rules (101 with conclusion selected). Queue: 579 rules.
5200 rules inserted. Base: 3732 rules (101 with conclusion selected). Queue: 579 rules.
5400 rules inserted. Base: 3872 rules (101 with conclusion selected). Queue: 580 rules.
5600 rules inserted. Base: 3988 rules (101 with conclusion selected). Queue: 571 rules.
5800 rules inserted. Base: 4119 rules (101 with conclusion selected). Queue: 575 rules.
6000 rules inserted. Base: 4231 rules (101 with conclusion selected). Queue: 578 rules.
6200 rules inserted. Base: 4247 rules (102 with conclusion selected). Queue: 557 rules.
6400 rules inserted. Base: 4353 rules (102 with conclusion selected). Queue: 577 rules.
6600 rules inserted. Base: 4483 rules (102 with conclusion selected). Queue: 591 rules.
6800 rules inserted. Base: 4456 rules (102 with conclusion selected). Queue: 596 rules.
7000 rules inserted. Base: 4566 rules (102 with conclusion selected). Queue: 601 rules.
7200 rules inserted. Base: 4642 rules (102 with conclusion selected). Queue: 591 rules.
7400 rules inserted. Base: 4538 rules (106 with conclusion selected). Queue: 627 rules.
7600 rules inserted. Base: 4635 rules (106 with conclusion selected). Queue: 633 rules.
7800 rules inserted. Base: 4732 rules (106 with conclusion selected). Queue: 631 rules.
8000 rules inserted. Base: 4661 rules (106 with conclusion selected). Queue: 637 rules.
8200 rules inserted. Base: 4759 rules (106 with conclusion selected). Queue: 590 rules.
8400 rules inserted. Base: 4852 rules (106 with conclusion selected). Queue: 572 rules.
8600 rules inserted. Base: 4825 rules (106 with conclusion selected). Queue: 600 rules.
8800 rules inserted. Base: 4914 rules (106 with conclusion selected). Queue: 588 rules.
9000 rules inserted. Base: 4991 rules (109 with conclusion selected). Queue: 633 rules.
9200 rules inserted. Base: 4936 rules (110 with conclusion selected). Queue: 637 rules.
9400 rules inserted. Base: 4975 rules (110 with conclusion selected). Queue: 621 rules.
9600 rules inserted. Base: 5058 rules (110 with conclusion selected). Queue: 642 rules.
9800 rules inserted. Base: 5006 rules (110 with conclusion selected). Queue: 646 rules.
10000 rules inserted. Base: 5069 rules (110 with conclusion selected). Queue: 616 rules.
10200 rules inserted. Base: 5164 rules (110 with conclusion selected). Queue: 555 rules.
10400 rules inserted. Base: 5193 rules (110 with conclusion selected). Queue: 504 rules.
10600 rules inserted. Base: 5195 rules (110 with conclusion selected). Queue: 450 rules.
10800 rules inserted. Base: 5281 rules (110 with conclusion selected). Queue: 426 rules.
11000 rules inserted. Base: 5305 rules (110 with conclusion selected). Queue: 373 rules.
11200 rules inserted. Base: 5333 rules (110 with conclusion selected). Queue: 348 rules.
11400 rules inserted. Base: 5360 rules (110 with conclusion selected). Queue: 268 rules.
11600 rules inserted. Base: 5359 rules (110 with conclusion selected). Queue: 181 rules.
11800 rules inserted. Base: 5302 rules (110 with conclusion selected). Queue: 107 rules.
12000 rules inserted. Base: 5371 rules (112 with conclusion selected). Queue: 82 rules.
12200 rules inserted. Base: 5365 rules (113 with conclusion selected). Queue: 60 rules.
12400 rules inserted. Base: 5486 rules (116 with conclusion selected). Queue: 158 rules.
12600 rules inserted. Base: 5607 rules (116 with conclusion selected). Queue: 230 rules.
12800 rules inserted. Base: 5672 rules (117 with conclusion selected). Queue: 243 rules.
13000 rules inserted. Base: 5794 rules (117 with conclusion selected). Queue: 273 rules.
13200 rules inserted. Base: 5893 rules (117 with conclusion selected). Queue: 345 rules.
13400 rules inserted. Base: 5963 rules (117 with conclusion selected). Queue: 378 rules.
13600 rules inserted. Base: 6021 rules (117 with conclusion selected). Queue: 402 rules.
13800 rules inserted. Base: 6103 rules (117 with conclusion selected). Queue: 358 rules.
14000 rules inserted. Base: 6215 rules (117 with conclusion selected). Queue: 293 rules.
14200 rules inserted. Base: 6290 rules (117 with conclusion selected). Queue: 288 rules.
14400 rules inserted. Base: 6404 rules (117 with conclusion selected). Queue: 293 rules.
14600 rules inserted. Base: 6428 rules (117 with conclusion selected). Queue: 300 rules.
14800 rules inserted. Base: 6437 rules (117 with conclusion selected). Queue: 269 rules.
15000 rules inserted. Base: 6480 rules (117 with conclusion selected). Queue: 240 rules.
15200 rules inserted. Base: 6222 rules (117 with conclusion selected). Queue: 197 rules.
15400 rules inserted. Base: 6026 rules (120 with conclusion selected). Queue: 220 rules.
15600 rules inserted. Base: 5902 rules (120 with conclusion selected). Queue: 182 rules.
15800 rules inserted. Base: 5826 rules (120 with conclusion selected). Queue: 188 rules.
16000 rules inserted. Base: 5788 rules (120 with conclusion selected). Queue: 192 rules.
16200 rules inserted. Base: 5843 rules (120 with conclusion selected). Queue: 232 rules.
16400 rules inserted. Base: 6011 rules (120 with conclusion selected). Queue: 291 rules.
16600 rules inserted. Base: 6143 rules (120 with conclusion selected). Queue: 274 rules.
16800 rules inserted. Base: 6219 rules (120 with conclusion selected). Queue: 265 rules.
17000 rules inserted. Base: 6326 rules (122 with conclusion selected). Queue: 266 rules.
17200 rules inserted. Base: 6489 rules (132 with conclusion selected). Queue: 413 rules.
17400 rules inserted. Base: 6676 rules (132 with conclusion selected). Queue: 435 rules.
17600 rules inserted. Base: 6862 rules (132 with conclusion selected). Queue: 462 rules.
17800 rules inserted. Base: 7035 rules (132 with conclusion selected). Queue: 546 rules.
18000 rules inserted. Base: 7213 rules (132 with conclusion selected). Queue: 619 rules.
18200 rules inserted. Base: 7334 rules (132 with conclusion selected). Queue: 580 rules.
18400 rules inserted. Base: 7332 rules (132 with conclusion selected). Queue: 466 rules.
18600 rules inserted. Base: 7366 rules (132 with conclusion selected). Queue: 409 rules.
18800 rules inserted. Base: 7553 rules (132 with conclusion selected). Queue: 464 rules.
19000 rules inserted. Base: 7694 rules (132 with conclusion selected). Queue: 508 rules.
19200 rules inserted. Base: 7827 rules (132 with conclusion selected). Queue: 549 rules.
19400 rules inserted. Base: 7950 rules (132 with conclusion selected). Queue: 590 rules.
19600 rules inserted. Base: 8052 rules (132 with conclusion selected). Queue: 589 rules.
19800 rules inserted. Base: 8195 rules (132 with conclusion selected). Queue: 597 rules.
20000 rules inserted. Base: 8297 rules (132 with conclusion selected). Queue: 572 rules.
20200 rules inserted. Base: 8435 rules (132 with conclusion selected). Queue: 593 rules.
20400 rules inserted. Base: 8580 rules (132 with conclusion selected). Queue: 577 rules.
20600 rules inserted. Base: 8697 rules (132 with conclusion selected). Queue: 538 rules.
20800 rules inserted. Base: 8762 rules (132 with conclusion selected). Queue: 468 rules.
21000 rules inserted. Base: 8880 rules (132 with conclusion selected). Queue: 431 rules.
21200 rules inserted. Base: 8934 rules (132 with conclusion selected). Queue: 382 rules.
21400 rules inserted. Base: 8977 rules (132 with conclusion selected). Queue: 368 rules.
21600 rules inserted. Base: 9000 rules (136 with conclusion selected). Queue: 340 rules.
21800 rules inserted. Base: 9092 rules (146 with conclusion selected). Queue: 297 rules.
22000 rules inserted. Base: 9176 rules (146 with conclusion selected). Queue: 282 rules.
22200 rules inserted. Base: 9272 rules (146 with conclusion selected). Queue: 268 rules.
22400 rules inserted. Base: 9266 rules (146 with conclusion selected). Queue: 232 rules.
22600 rules inserted. Base: 9208 rules (144 with conclusion selected). Queue: 135 rules.
22800 rules inserted. Base: 9028 rules (144 with conclusion selected). Queue: 68 rules.
Starting query event(auth_AppCompletesProtocolWithVerifierKey(K10)) && event(auth_AppCompletesProtocolWithVerifierMessage(M11_1)) ==> event(auth_VerifierSendsLastMessageToAppKey(K10)) && event(auth_VerifierSendsLastMessageToAppMessage(M11_1))
goal reachable: b-event(auth_VerifierSendsLastMessageToAppKey(senc((tag_k10,k10_1),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_1),sc_1))))))) && b-event(auth_VerifierSendsLastMessageToAppMessage(senc((tag_m11,resource_1),k10_1))) && b-event(auth_VerifierSendsLastMessageToAppKey(senc((tag_k10,k10_2),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_2),sc_2))))))) && b-event(auth_VerifierSendsLastMessageToAppMessage(senc((tag_m11,resource_2),k10_2))) -> event(auth_AppCompletesProtocolWithVerifierKey(senc((tag_k10,k10_1),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_1),sc_1))))))) && event(auth_AppCompletesProtocolWithVerifierMessage(senc((tag_m11,resource_2),k10_2)))
Abbreviations:
k10_1 = k10[!1 = @sid]
sav_1 = sav[!1 = @sid_1]
sc_1 = sc[!1 = @sid]
k9_1 = k9[!1 = @sid_2]
sav_2 = sav[!1 = @sid_2]
sc_2 = sc[!1 = @sid_3]
nr_1 = nr[!1 = @sid_2]
nc_1 = nc[!1 = @sid_3]
k2_1 = k2[!1 = @sid_2]
k0_1 = k0[!1 = @sid_2]
th0_1 = th0[!1 = @sid_3]
th1_1 = th1[!1 = @sid_2]
resource_2 = resource[M10' = (tag_m10,senc((tag_k9,k9_1),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_2),sc_2))))),senc((tag_m10,(((nr_1,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_1,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[])),sig(hash(((nr_1,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_1,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_1),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[]))),ska[]))),k9_1)),M3' = (senc((tag_k2,k2_1),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_2),sc_2))))),senc((tag_m3,(gen_DID(exp(g,i[])),gen_DID(exp(g,v[])),gen_DID(exp(g,u[])),gen_DID(exp(g,a[])),uri_req)),k2_1)),M1' = (senc((tag_k0,k0_1),bit2symk((tag_g2v2sav,hash_gen(exp(exp(g,v[]),sav_2))))),aenc((tag_g2sav,exp(g,sav_2)),pk(skv[])),senc((tag_m1,(th0_1,th1_1,sig(hash_gen(exp(g,sav_2)),ska[]))),k0_1)),!1 = @sid_3]
k10_2 = k10[!1 = @sid_3]
k9_2 = k9[!1 = @sid_1]
nr_2 = nr[!1 = @sid_1]
nc_2 = nc[!1 = @sid]
k2_2 = k2[!1 = @sid_1]
k0_2 = k0[!1 = @sid_1]
th0_2 = th0[!1 = @sid]
th1_2 = th1[!1 = @sid_1]
resource_1 = resource[M10' = (tag_m10,senc((tag_k9,k9_2),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_1),sc_1))))),senc((tag_m10,(((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[])),sig(hash(((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[]))),sig(hash((nr_2,((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),uri_req,nc_2),(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[]))),sig(hash(((gen_DID(exp(g,u[])),gen_DID(exp(g,i[])),claims[]),gen_DID(exp(g,i[])),gen_DID(exp(g,u[])))),ski[])))),sku[]))),ska[]))),k9_2)),M3' = (senc((tag_k2,k2_2),bit2symk((tag_g2sc2sav,hash_gen(exp(exp(g,sav_1),sc_1))))),senc((tag_m3,(gen_DID(exp(g,i[])),gen_DID(exp(g,v[])),gen_DID(exp(g,u[])),gen_DID(exp(g,a[])),uri_req)),k2_2)),M1' = (senc((tag_k0,k0_2),bit2symk((tag_g2v2sav,hash_gen(exp(exp(g,v[]),sav_1))))),aenc((tag_g2sav,exp(g,sav_1)),pk(skv[])),senc((tag_m1,(th0_2,th1_2,sig(hash_gen(exp(g,sav_1)),ska[]))),k0_2)),!1 = @sid]
RESULT event(auth_AppCompletesProtocolWithVerifierKey(K10)) && event(auth_AppCompletesProtocolWithVerifierMessage(M11_1)) ==> event(auth_VerifierSendsLastMessageToAppKey(K10)) && event(auth_VerifierSendsLastMessageToAppMessage(M11_1)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(vp_fromUser[]) is true.

Query not attacker(resource_fromApp[]) is true.

Query not attacker(resource_fromVerifier[]) is true.

Query event(auth_UserCompletesProtocolWithAppKey(K7)) && event(auth_UserCompletesProtocolWithAppMessage(M8_1)) ==> event(auth_AppSendsLastMessageToUserKey(K7)) && event(auth_AppSendsLastMessageToUserMessage(M8_1)) is true.

Query event(auth_AppCompletesProtocolWithUserKey(K8)) && event(auth_AppCompletesProtocolWithUserMessage(M9_1)) ==> event(auth_UserSendsLastMessageToAppKey(K8)) && event(auth_UserSendsLastMessageToAppMessage(M9_1)) is true.

Query event(auth_VerfierCompletesProtocolWithAppKey(K9)) && event(auth_VerfierCompletesProtocolWithAppMessage(M10_1)) ==> event(auth_AppSendsLastMessageToVerifierKey(K9)) && event(auth_AppSendsLastMessageToVerifierMessage(M10_1)) is true.

Query event(auth_AppCompletesProtocolWithVerifierKey(K10)) && event(auth_AppCompletesProtocolWithVerifierMessage(M11_1)) ==> event(auth_VerifierSendsLastMessageToAppKey(K10)) && event(auth_VerifierSendsLastMessageToAppMessage(M11_1)) is true.

--------------------------------------------------------------

