(* --------------------------------------------------------------------------------------------------------- *)
(* DIDComm *)
(* This is a derivation of the full protocol, where we simply send the resource, rather then sending the encrypted version of it. *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* START keys *)
type SymmetricKey.
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)
type G.
type exponent.

const uri_req:bitstring.
const usr:bitstring.

type tag.
type ktag.

const tag1, tag2, tag2_bis, tag3, tag4, tag5, tag6, tag7, tag8, tag9, tag10, tag11, tag12, tag13, tag14, tag15, tag16, tag17:tag [data].

const msg1, msg2, msg2_bis, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, msg11, msg12, msg13, msg14, msg15, msg16, msg17:tag [data].
const KEXDHINIT, KEXDHREPLY, KEXDHINITSERVER, KEXDHREPLYSERVER, KEXDHINITTTP, KEXDHREPLYTTP: tag [data].
const keyEncStoC, keyEncCtoS, keyEncAtoC, keyEncCtoA: ktag [data].
const keyEncStoCTemp, keyEncCtoSTemp, keyEncAtoCTemp, keyEncCtoATemp, keyEncTTPtoVer, keyEncVertoTTP: ktag [data].
const symkForResource, symk0, symk1, symk2, symk3, symk4, symk5, symk6, symk7, symk8, symk9, symk10, symk11, symk12, symk13, symk14, symk15, symk16:ktag[data].
const dec_vpr_msg, dec_vpr_2_msg, vp_msg, vp_2_msg: tag[data].
const sig_gsu, sig_gsa, sig_gsav, sig_gsac, sig_gsttp, sig_gsv:  ktag [data].
const gsu, gsa, gsav, gsac, gsttp, gsv:  ktag [data].

(* START hash *)
fun hash_pk(PublicKey): bitstring.
fun hash_fork(bitstring): SymmetricKey.
fun hash(bitstring): bitstring.
(* End hash *)

(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(* START digital signature *)
fun gensig(G(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:G,sk:SecretKey; gencheck(msg,gensig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(*DEFS*)
fun ch(bitstring): channel.
fun chSymK(SymmetricKey): channel.



const g: G.
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).


(* SECRECY *)

free vp_fromProver: bitstring [private].
free resource_fromVerifier: bitstring [private].
free resource_fromApp: bitstring [private].


(* AUTHENTICATION *)

event auth_AppCompletesProtocol(bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring).
event auth_UserCompletesProtocol(bitstring,bitstring,bitstring,bitstring).
event auth_VerifierCompletesProtocol(bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring).

(* App -> User *)
event auth_AppSendsLastMessageToUser(bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring).
event verifierInConeOfUser(bitstring,bitstring,bitstring,bitstring).

(* User -> App *)
event auth_UserSendsLastMessageToApp(bitstring,bitstring, bitstring,bitstring).

(* Verifier -> App *)
event auth_VerifierSendsLastMessageToApp(bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).

(* App -> Verifier *)
event auth_AppSendsLastMessageToVerifier(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_AppCompletesProtocolWithUser(bitstring, bitstring,bitstring, bitstring, bitstring,bitstring,bitstring, bitstring).



(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Definition for the attacker *)
free sk_E:SecretKey.
free exp_E:exponent.
free e:bitstring.
free euri:bitstring.

let user(talksOnlyToHonest:bool, c:channel, u:bitstring, exp_u:exponent, sku:SecretKey, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, exp_v:G, vc:bitstring, uri:bitstring) =
    
    (* Message 1 User -> App *)
    new su: exponent;
    let g_su = exp(g, su) in
    let K0 = exp(exp_a, su) in
    let h0 = hash_fork(((g_su, exp_a, K0),keyEncCtoSTemp)) in
    new symk_0:SymmetricKey;
    let diddoc_su_signed = (g_su, sig(hash((sig_gsu, pka, g_su)),sku)) in
    let m_1:bitstring = (KEXDHINIT, aenc((gsu, g_su), pka), enc((symk0, symk_0), h0), enc(diddoc_su_signed, symk_0)) in
    out(c, (msg1, m_1));


    (* Message 2 App -> User *)
    in(c, (=msg2, m_2:bitstring));
    let (=KEXDHREPLY, g_sa_enc: bitstring, symk_1_enc: bitstring, diddoc_sa_signed_enc:bitstring) = m_2 in
    let (=gsa, g_sa:G) = adec(g_sa_enc, sku) in
    let K = exp(g_sa, su) in
    let h = hash_fork(((g_su, g_sa, K), keyEncStoCTemp)) in
    let (=symk1, symk_1:SymmetricKey) = dec(symk_1_enc, h) in
    let (g_sa':G, g_sa_signed:bitstring) = dec(diddoc_sa_signed_enc, symk_1) in
    if check(hash((sig_gsa, pk(sku), g_sa)), g_sa_signed , pka) then

    (* We can now define the shared secret *)
    let symk_ua_enc = hash_fork((K, h, keyEncCtoS)) in
    let symk_ua_dec = hash_fork((K, h, keyEncStoC)) in
    

    (* Message 7 App -> User *)
    (* This is the VPR sent by the Verifier to the App, and then signed by the App for the User *)
    in(c, (=msg7, m_7:bitstring));
    let (symk6_enc:bitstring, m7_enc:bitstring) = m_7 in
    let (=symk6, symk_6:SymmetricKey) = dec(symk6_enc, symk_ua_dec) in
    let (=tag7, n_r:bitstring,  v':bitstring, vpr_signed:bitstring) = dec(m7_enc, symk_6)  in
    if (v = v') then
    let (=dec_vpr_2_msg, vpr_rec:bitstring, sig_vpr_2:bitstring) = vpr_signed in
    (* Check if the signature applied by the App is genuine *)
    if (check(vpr_rec, sig_vpr_2, pka)) then

    let (=dec_vpr_msg, v'':bitstring, rule':bitstring, n_c:bitstring) = vpr_rec in
    let (u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    (* Check that these are field we expect to sign  *)
    if ((u', uri', a', v'') = (u, uri, a, v)) then
    
    (* Message 8 User -> App *)
    (* Produce the VP as response to the VPR *)
    let vp = (vp_msg, (vpr_rec, vc), sig((vpr_rec, vc), sku)) in
    new symk_7:SymmetricKey;
    let symk7_enc = enc((symk7, symk_7), symk_ua_enc) in
    let m_8 = (symk7_enc, enc((tag8, n_r, vp), symk_ua_enc)) in

    event auth_UserSendsLastMessageToApp(m_1, m_2, m_7,m_8);
    out(c, (msg8, m_8));
    
    if talksOnlyToHonest then
        event auth_UserCompletesProtocol(m_1, m_2 , m_7, m_8)|
        out(ch(vp), vp_fromProver);

    0.

let app(talksOnlyToHonest:bool, c:channel,c2:channel, a:bitstring, exp_a:exponent, ska:SecretKey,  u:bitstring, pku:PublicKey, exp_u:G, v:bitstring, pkv:PublicKey, exp_v:G, i:bitstring, pki:PublicKey, uri:bitstring) =

   
    (* Message 1 User -> App *)
    (* Send the communication request *)
    in(c, (=msg1, m_1:bitstring));
    let (=KEXDHINIT, g_su_enc: bitstring, symk0_enc:bitstring, g_su_signed_enc:bitstring) = m_1 in
    let (=gsu, g_su:G) = adec(g_su_enc, ska) in
    let K_temp = exp(g_su, exp_a) in
    let h_temp = hash_fork(((g_su, exp(g, exp_a), K_temp), keyEncCtoSTemp)) in
    let (=symk0, symk_0:SymmetricKey) = dec(symk0_enc, h_temp) in
    let (g_su':G, g_su_sign:bitstring) = dec(g_su_signed_enc, symk_0) in
    if check(hash((sig_gsu, pk(ska), g_su)), g_su_sign, pku) then
    
    (* Message 2 *)
    (* Send the response *)
    new sa: exponent;
    let g_sa = exp(g, sa) in
    let K = exp(g_su, sa) in
    let h = hash_fork(((g_su, g_sa, K), keyEncStoCTemp)) in
    new symk_1:SymmetricKey;
    let diddoc_sa_enc = (g_sa, sig(hash((sig_gsa, pku, g_sa)), ska)) in
    let m_2:bitstring = (KEXDHREPLY, aenc((gsa, g_sa), pkv), enc((symk1, symk_1), h), enc(diddoc_sa_enc, symk_1)) in 
    out(c, (msg2, m_2));
    
    let symk_ua_enc = hash_fork((K, h, keyEncStoC)) in
    let symk_ua_dec = hash_fork((K, h, keyEncCtoS)) in


    (* Message 3 App -> CSS *)
    (* Send the communication request *)
    new sav: exponent;
    let g_sav = exp(g, sav) in
    let KC_temp = exp(exp_v, sav) in
    let hc_temp = hash_fork(((exp_v, g_sav, KC_temp), keyEncAtoCTemp)) in
    new symk_2:SymmetricKey;
    let diddoc_sav_signed = (g_sav, sig(hash((sig_gsav, pkv, g_sav)), ska)) in
    let m_3:bitstring = (KEXDHINITSERVER, aenc((gsav, g_sav), pku), enc((symk2, symk_2), hc_temp), enc(diddoc_sav_signed, symk_2)) in
    out(c2, (msg3, m_3));

    (* Message 4 CSS -> App *)
    (* Send the response *)
    in(c2, (=msg4, m_4:bitstring));
    let (=KEXDHREPLYSERVER, g_sc_enc: bitstring, symk3_enc: bitstring, g_sc_signed_enc:bitstring) = m_4 in
    let(=gsac, g_sc:G) = adec(g_sc_enc, ska) in
    let KC = exp(g_sc, sav) in
    let hc = hash_fork(((g_sc, g_sav, KC), keyEncCtoATemp)) in
    let (=symk3, symk_3:SymmetricKey) = dec(symk3_enc, hc) in
    let (g_sc':G, g_sc_sisn:bitstring) = dec(g_sc_signed_enc, symk_3) in
    if check(hash((sig_gsac, pk(ska), g_sc)), g_sc_sisn, pkv) then

    let symk_av_enc = hash_fork((KC, hc, keyEncAtoC)) in
    let symk_av_dec = hash_fork((KC, hc, keyEncCtoA)) in


    (* Message 5 App -> CSS *)
    (* Send (i, v, u, uri, a) to the CSS *)
    new symk_4: SymmetricKey;
    let symk4_enc = enc((symk4, symk_4), symk_av_enc) in
    let m_5 = (symk4_enc, enc((tag5, (i, v, u, uri, a)), symk_4)) in
    out(c2,(msg5, m_5));

    (* Message 6 CSS -> App *)
    (* Receive the VPR = (v, rule, n_v) from the CSS *)
    in(c2, (=msg6, m_6:bitstring));
    let (symk5_enc:bitstring, m6_enc:bitstring) = m_6 in
    let (=symk5, symk_5:SymmetricKey) = dec(symk5_enc, symk_av_dec) in
    let (=tag6, dec_vpr:bitstring) = dec(m6_enc, symk_5)  in
    let (=dec_vpr_msg, v':bitstring, rule':bitstring, n_c':bitstring) = dec_vpr in
    let(u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    if ((v', u', i', uri', a') = (v, u, i, uri, a)) then  (*Who knows, maybe server is starting behaving maliciously *)

    (* Message 7 App -> User *)
    (* Send the VPR^2, which is the VPR signed with secret key of app + nonce *)
    new n_r:bitstring;
    let vpr_signed = (dec_vpr_2_msg, dec_vpr, sig(dec_vpr, ska)) in
    new symk_6:SymmetricKey;
    let symk6_enc = enc((symk6, symk_6), symk_ua_enc) in
    let m_7 = (symk6_enc, enc((tag7, n_r, v, vpr_signed), symk_6)) in
    event auth_AppSendsLastMessageToUser(m_1,m_2,m_3, m_4, m_5, m_6, m_7);
    out(c, (msg7, m_7));

    (* Message 8 User -> App *)
    in(c, (=msg8, m_8:bitstring));
    let (symk7_enc:bitstring, m8_enc:bitstring) = m_8 in
    let (=symk7, symk_7:SymmetricKey) = dec(symk7_enc, symk_ua_dec) in
    let (=tag8, n_r':bitstring, vp_signed:bitstring) = dec(m8_enc, symk_7) in
    if n_r = n_r' then
    let (=vp_msg, vp:bitstring, sign_on_vp:bitstring) = vp_signed in
    if (check(vp, sign_on_vp, pku)) then
    let vp_2_prev:bitstring = (vp_2_msg, vp_signed, sig(vp_signed, ska)) in
    
    (* Message 9 *)
    new symk_8:SymmetricKey;
    let symk8_enc = enc((symk8, symk_8), symk_av_enc) in
    let m_9 = (symk8_enc, enc((tag9,vp_2_prev),symk_8)) in
    out(c2, m_9);

    
    (* Receive Message 10 *)
    in(c2, (=msg13, m_13:bitstring));
    let (symk13_enc:bitstring, m13_enc:bitstring) = m_13 in
    (* But I start extracting the messages *)
    (* The hash of the encrypted resource is computed as k_15 + resource *)
    let (=symk13, symk_13:SymmetricKey) = dec(symk13_enc, symk_av_dec) in
    let (=tag13, m13_dec:bitstring) = dec(m13_enc, symk_13) in
    let (encrypted_k12':bitstring, encrypted_resource':bitstring, hash_encrypted_resource':bitstring) = m13_dec in

    (* Now we can sign this resource and retrnsmit it to the CSS *)
    new symk_k14: SymmetricKey;
    let encrypted_k14 = enc((symk14, symk_k14), symk_av_enc) in
    let msg_sign = (m13_dec, sig(m13_dec, ska)) in
    let m_14 = (encrypted_k14, (tag14, enc(msg_sign, symk_k14))) in
    event auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4,m_5,m_6, m_7, m_8,m_9, m_13, m_14);
    out(c2,(msg14, m_14));

    in(c2, (=msg15, m_15:bitstring));
    let (symk15_enc:bitstring, m15_enc:bitstring) = m_15 in
    let (=symk15, symk_15:SymmetricKey) =  dec(symk15_enc, symk_av_dec) in
    let (=symkForResource, skForSkForRes:SymmetricKey) = dec(m15_enc, symk_15) in
    let (=tag16, skForRes:SymmetricKey) = dec(m15_enc, skForSkForRes) in
    (* Now I can decrypt the resource *)
    let resource' = dec(encrypted_resource', skForRes) in
    if (hash(resource') = hash_encrypted_resource') then
    (* Everything ok, not go to the TTP *)

    if (talksOnlyToHonest) then
        event auth_AppCompletesProtocol(m_1, m_2, m_3,m_4,m_5,m_6, m_7, m_8,m_9, m_13, m_14, m_15);
        out(ch(resource'), resource_fromApp);
    
    0.

let verifier(talksOnlyToHonest:bool, c:channel, c2:channel, v:bitstring, exp_v:exponent, skv:SecretKey, u:bitstring, pku:PublicKey, exp_u:G, a:bitstring, pka:PublicKey, exp_a:G, i:bitstring, pki:PublicKey, ttp:bitstring, pkttp:PublicKey, exp_ttp:G, uri:bitstring) =

    (* Message 3 App -> CSS *)
    in(c, (=msg3, m_3:bitstring));
    let (=KEXDHINITSERVER, g_sav_enc: bitstring, symk2_enc:bitstring, g_sav_enc_signed:bitstring) = m_3 in
    let (=gsav, g_sav:G) = adec(g_sav_enc, skv) in
    let K0 = exp(g_sav, exp_v) in
    let h = hash_fork(((exp(g, exp_v), g_sav, K0), keyEncAtoCTemp)) in
    let (=symk2, symk_2:SymmetricKey) = dec(symk2_enc, h) in
    let (g_sav':G, sign_g_sav:bitstring) = dec(g_sav_enc_signed, symk_2) in
    if check(hash((sig_gsav, pk(skv), g_sav)), sign_g_sav, pka) then
    
    (* Message 4 CSS -> App *)
    new sc: exponent;
    let g_sc = exp(g, sc) in
    let K = exp(g_sav, sc) in
    let h = hash_fork(((g_sc, g_sav, K), keyEncCtoATemp)) in
    new symk_k3:SymmetricKey;
    let diddoc_sc_signed = (g_sc,sig(hash((sig_gsac, pka, g_sc)), skv)) in
    let m_4:bitstring = (KEXDHREPLYSERVER, aenc((gsac, g_sc), pka), enc((symk3, symk_k3), h), enc(diddoc_sc_signed, symk_k3)) in 
    out(c, (msg4, m_4));

    let symk_av_enc = hash_fork((K, h, keyEncCtoA)) in
    let symk_av_dec = hash_fork((K, h, keyEncAtoC)) in

    (* Message 5 App -> CSS *)
    (* Send the VPR Request, so send the information about (i, v, u, uri, a) *)
    in(c, (=msg5, m_5:bitstring));
    let (symk4_enc:bitstring, m5_enc:bitstring) = m_5 in
    let (=symk4, symk_4:SymmetricKey) = dec(symk4_enc, symk_av_dec) in
    let (=tag5, (i':bitstring, v':bitstring, u':bitstring, uri':bitstring, a':bitstring)) =  dec(m5_enc,symk_4) in
    if (i', v', u', uri', a') = (i, v, u, uri, a) then

    (* Message 6 CSS -> App *)
    (* Generate the VPR for the User, and send it to the App *)
    new n_c:bitstring;
    let rule = (u, i, uri, a) in
    let vpr_send_prev = (dec_vpr_msg, v, rule, n_c)  in
    new symk_5:SymmetricKey;
    let enc_symk5 = enc((symk5, symk_5),symk_av_enc) in
    let m_6 = (enc_symk5, enc((tag6, vpr_send_prev), symk_5))  in
    event verifierInConeOfUser(m_3,m_4,m_5,m_6);
    out(c, (msg6, m_6));

    (* Message 9 App -> CSS *)
    (* Receive the VP^2 and checks for the signature applied *)
    in(c, (=msg9, m_9:bitstring));
    let (symk8_enc:bitstring, m9_enc:bitstring) = m_9 in
    let (=symk8, symk_8:SymmetricKey) = dec(symk8_enc, symk_av_dec) in
    let (=tag9, vp_signed_2:bitstring) = dec(m9_enc, symk_8) in
    let (=vp_2_msg, vp_signed:bitstring, vp_sign_2:bitstring) = vp_signed_2 in
    if (check(vp_signed, vp_sign_2, pka)) then


    let (=vp_msg, vp:bitstring, sign_vp:bitstring) = vp_signed in
    if check(vp, sign_vp, pku) then
    (* VP = (VPR, VC) *)
    let (vpr_rec:bitstring, vc_rec_signed:bitstring) = vp in

    let (vc_rec:bitstring, sign_vc_rec:bitstring) = vc_rec_signed in
    if check(vc_rec, sign_vc_rec, pki) then

    let (iss'':bitstring, u'':bitstring) = vc_rec in
    if (iss'', u'') = (i, u) then
    let (=dec_vpr_msg, v'':bitstring, rule'':bitstring, n_c'':bitstring) = vpr_rec in
    if (v'', rule'', n_c'') = (c, rule, n_c) then

    let (u''':bitstring, i''':bitstring, uri''':bitstring, a''':bitstring) = rule'' in
    if (u''', i''', uri''', a''') = (u, i, uri, a) then
    
    (* Begin communication with TTP *)
    (* Receive Message 8 *)
    in(c2, (=msg10, m_10:bitstring));
    let (=KEXDHINITTTP, g_sttp_enc: bitstring, symk10_enc:bitstring, g_sttp_enc_signed:bitstring) = m_10 in
    let (=gsttp, g_sttp:G) = adec(g_sttp_enc, skv) in
    let K3_temp = exp(g_sttp, exp_v) in
    let h3_temp = hash_fork((g_sttp, exp(g, exp_v), K3_temp, keyEncTTPtoVer)) in
    let (=symk10, symk_10:SymmetricKey) = dec(symk10_enc, h3_temp) in
    let (g_sttp':G, sign_g_sttp:bitstring) = dec(g_sttp_enc_signed, symk_10) in
    if check(hash((sig_gsttp, pk(skv), g_sttp)), sign_g_sttp, pkttp) then


    new sv: exponent;
    let g_sv = exp(g, sv) in
    let K3 = exp(g_sttp, sv) in
    let h3 = hash_fork((g_sttp, g_sv, K3, keyEncVertoTTP)) in
    new symk_k11:SymmetricKey;
    let diddoc_sv_signed = (g_sv, sig(hash((sig_gsttp, pkttp, g_sv)), skv)) in
    let m_11:bitstring = (KEXDHREPLYTTP, aenc((gsv, g_sv), pkttp), enc((symk11, symk_k11), h3), enc(diddoc_sv_signed, symk_k11)) in 
    out(c2, (msg11, m_11));

    let symk_ttpv_enc = hash_fork((K3, h3, keyEncVertoTTP)) in
    let symk_ttpv_dec = hash_fork((K3, h3, keyEncTTPtoVer)) in
    

    (* Once the verifier conclude the handshake with the TTP, then it is able to generate the encrypted resource to send to the App *)

    (* First generate the message we have to send to the App *)
    new symk_k12: SymmetricKey; (* The key that will be used by TTP to decrypt the resource in the case it is necessary *)
    let encrypted_k12 = enc((symk12, symk_k12), symk_ttpv_enc) in
    (* Compute the hash of the resource and the key used *)
    new resource:bitstring;
    let m_12 = (encrypted_k12, enc(resource, symk_k12), hash(resource)) in

    (* Message 10 - Now send it to the App *)
    new symk_k13: SymmetricKey;
    let encrypted_k13 = enc((symk13, symk_k13), symk_av_enc) in
    let m_13 = (encrypted_k13, enc((tag13, m_12), symk_k13)) in
    out(c, (msg13, m_13));


    (* Message 11 - Receive the resource signed from the App *)
    in(c, (=msg14, m_14:bitstring));
    let (symk14_enc:bitstring, m14_enc:bitstring) = m_14 in
    let (=symk14, symk_14:SymmetricKey) = dec(symk14_enc, symk_av_dec) in
    let (=tag14, m14_dec:bitstring) = dec(m14_enc, symk_14) in
    let (m14_received:bitstring, m14_signature:bitstring) = m14_dec in
    if (check(m14_received, m14_signature, pka)) then (* The message has been authentically signed*)


    (* Message 12 - Send the key for decrypting the resource to the App *)
    new symk_k15: SymmetricKey;
    let encrypted_k15 = enc((symk15, symk_k15), symk_av_enc) in
    let m_15 =(encrypted_k15, enc((tag16, symk_k12), symk_k15)) in
    

    event auth_VerifierSendsLastMessageToApp(m_3,m_4,m_5,m_6, m_9, m_10, m_11, m_12, m_13, m_14, m_15);

    out(c, (msg15, m_15)); (* Send the symmetric key used for encrypting the resource *)

    if talksOnlyToHonest then
        event auth_VerifierCompletesProtocol(m_3,m_4,m_5,m_6,m_9,m_10, m_11, m_12, m_13, m_14, m_15)|
        out(ch(resource), resource_fromVerifier);
    
    0.

let trustedThirdParty(talksOnlyToHonest:bool, c:channel, ttp:bitstring, exp_ttp:exponent, sk_ttp:SecretKey,a:bitstring, pka:PublicKey, exp_a:G,  v:bitstring, pkv:PublicKey, exp_v:G) =
    
    new sttp: exponent;
    let g_sttp = exp(g, sttp) in
    let K0 = exp(exp_v, sttp) in
    let h0 = hash_fork((g_sttp, exp_v, K0, keyEncTTPtoVer)) in
    new symk_10:SymmetricKey;
    let diddoc_sttp_signed = (g_sttp, sig((sig_gsttp, pkv, g_sttp),sk_ttp)) in
    let m_10:bitstring = (KEXDHINITTTP, aenc((gsttp, g_sttp), pkv), enc((symk10, symk_10), h0), enc(diddoc_sttp_signed, symk_10)) in
    out(c, m_10);

    in(c, m_11:bitstring);
    let (=KEXDHREPLYTTP, g_sv_enc: bitstring, symk_11_enc: bitstring, diddoc_sv_signed_enc:bitstring) = m_11 in
    let (=gsv, g_sv:G) = adec(g_sv_enc, sk_ttp) in
    let K = exp(g_sv, sttp) in
    let h = hash_fork((g_sttp, g_sv, K)) in
    let (=symk11, symk_11:SymmetricKey) = dec(symk_11_enc, h) in
    let (g_sv':G, g_sv_signed:bitstring) = dec(diddoc_sv_signed_enc, symk_11) in
    if check((gsv, pk(sk_ttp), g_sv), g_sv_signed , pkv) then

    let symk_ttpv_enc = hash_fork((K, h, keyEncTTPtoVer)) in
    let symk_ttpv_dec = hash_fork((K, h, keyEncVertoTTP)) in

    (*if talksOnlyToHonest then*)
       
    
    0.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* SECRECY *)

(*query attacker(vp_fromProver). 
query attacker(resource_fromApp). 
query attacker(resource_fromVerifier).*)

query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_vpr:bitstring, m_vp:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring, m_6:bitstring; 
    inj-event(auth_UserCompletesProtocol(m_handshakeReq, m_handshakeResp, m_vpr, m_vp))
    ==>
    inj-event(auth_AppSendsLastMessageToUser(m_handshakeReq, m_handshakeResp, m_3, m_4, m_5, m_6, m_vpr))
    &&
    inj-event(verifierInConeOfUser(m_3, m_4, m_5, m_6)).




query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_uri:bitstring, m_rule:bitstring, m_accesstoken:bitstring,  m_1:bitstring, m_2:bitstring,m_2_bis:bitstring, m_7:bitstring, m_8:bitstring,m_9:bitstring, m_10:bitstring,  m_11:bitstring, m_12:bitstring,  m_13:bitstring, m_14:bitstring, m_15:bitstring;
    inj-event(auth_AppCompletesProtocol(m_1, m_2, m_handshakeReq, m_handshakeResp, m_uri, m_rule, m_7, m_8, m_9, m_13, m_14, m_15))
    ==>
    inj-event(auth_VerifierSendsLastMessageToApp(m_handshakeReq, m_handshakeResp, m_uri, m_rule,  m_9, m_10, m_11, m_12, m_13, m_14, m_15))
    &&
    inj-event(auth_UserSendsLastMessageToApp(m_1, m_2, m_7, m_8)). 

query  m_handshakeReq:bitstring, m_handshakeResp:bitstring, m_complete:bitstring, m_handshake_ver:bitstring, m_handshake_resp_ver:bitstring, m_uri:bitstring, m_rule:bitstring, m_vpr:bitstring, m_vp:bitstring, m_1:bitstring, m_2:bitstring, m_2_bis:bitstring, m_7:bitstring, m_8:bitstring,  m_9:bitstring, m_10:bitstring,  m_11:bitstring, m_12:bitstring, m_13:bitstring, m_14:bitstring, m_15:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_handshake_ver, m_handshake_resp_ver, m_uri, m_vpr, m_9, m_10, m_11, m_12, m_13, m_14, m_15))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_handshake_ver, m_handshake_resp_ver, m_uri, m_vpr, m_7, m_8, m_9, m_13, m_14))
    &&
    inj-event(auth_UserSendsLastMessageToApp(m_1, m_2, m_7, m_8)).  

(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

free c:channel.
free c2:channel.
free c3:channel.
process (*use root process for setup *)

    (* create identities *)
    new u:bitstring;
    new a:bitstring;
    new v:bitstring;
    new i:bitstring;
    new ttp:bitstring;

    (*advertise identities*)
    out(c,u);
    out(c,a);
    out(c,v);
    out(c, i);
    out(c, ttp);

    (*declare secret keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;
    new sk_ttp:SecretKey;


    new exp_u:exponent;
    new exp_a:exponent;
    new exp_v:exponent;
    new exp_i:exponent;
    new exp_ttp:exponent;

    out(c, exp(g, exp_u));
    out(c, exp(g, exp_a));
    out(c, exp(g, exp_v));
    out(c, exp(g, exp_i));
    out(c, exp(g, exp_ttp));
    
    (*advertise public keys*)
    out(c,pk(sku));
    out(c,pk(ska));
    out(c,pk(skv));
    out(c,pk(ski));
    out(c, pk(sk_ttp));

    let vc = ((i, u), sig((i, u), ski)) in

    (*let agents dance*)
    (
        !user(true, c, u, exp_u, sku, a, pk(ska), exp(g, exp_a), v, pk(skv), exp(g, exp_v),vc, uri_req) |
        !user(false, c, u, exp_u, sku, e,pk(sk_E), exp(g, exp_E),v, pk(skv), exp(g, exp_v), vc, uri_req) |
        !user(false, c, u, exp_u, sku, a, pk(ska), exp(g, exp_a),e, pk(sk_E), exp(g, exp_E), vc, euri) |
        !user(false, c, u, exp_u, sku, e,pk(sk_E), exp(g, exp_E),e,pk(sk_E), exp(g, exp_E), vc, euri) |
        !app(true, c, c2, a, exp_a, ska, u, pk(sku), exp(g, exp_u), v, pk(skv), exp(g, exp_v), i, pk(ski), uri_req)  |
        !app(false, c,c2, a, exp_a, ska, e,pk(sk_E), exp(g, exp_E), v,  pk(skv), exp(g, exp_v), i, pk(ski), uri_req) |
        !app(false, c, c2, a, exp_a, ska, u, pk(sku), exp(g, exp_u), e,pk(sk_E), exp(g, exp_E), i, pk(ski), euri) |
        !app(false, c, c2, a, exp_a, ska, e,pk(sk_E), exp(g, exp_E), e, pk(sk_E), exp(g, exp_E), i, pk(ski), euri) |
        !verifier(true, c, c3, v, exp_v, skv, u, pk(sku), exp(g, exp_u), a, pk(ska), exp(g, exp_a), i, pk(ski),  ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !verifier(false, c, c3, v, exp_v, skv, e,pk(sk_E), exp(g, exp_E), a, pk(ska), exp(g, exp_a),  i, pk(ski), ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !verifier(false, c, c3, v, exp_v, skv, u, pk(sku), exp(g, exp_u), e,pk(sk_E), exp(g, exp_E), i, pk(ski),  ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !verifier(false, c, c3, v, exp_v, skv, e,pk(sk_E), exp(g, exp_E), e,pk(sk_E), exp(g, exp_E), i, pk(ski), ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !verifier(false, c, c3,  v, exp_v, skv, u, pk(sku), exp(g, exp_u), a, pk(ska), exp(g, exp_a), e,pk(sk_E),  ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !verifier(false, c, c3, v, exp_v, skv, e,pk(sk_E), exp(g, exp_E), a, pk(ska), exp(g, exp_a), e,pk(sk_E), ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req)  |
        !verifier(false, c, c3, v, exp_v, skv, u, pk(sku), exp(g, exp_u),e,pk(sk_E), exp(g, exp_E), e,pk(sk_E),  ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !verifier(false, c, c3, v, exp_v, skv, e,pk(sk_E), exp(g, exp_E), e,pk(sk_E), exp(g, exp_E), e,pk(sk_E), ttp, pk(sk_ttp), exp(g, exp_ttp), uri_req) |
        !trustedThirdParty(true, c3, ttp, exp_ttp, sk_ttp, a, pk(ska), exp(g, exp_a), v,pk(skv), exp(g, exp_v)) |
        !trustedThirdParty(false, c3, ttp, exp_ttp, sk_ttp, e,pk(sk_E), exp(g, exp_E),v, pk(skv), exp(g, exp_v)) |
        !trustedThirdParty(false, c3, ttp, exp_ttp, sk_ttp, a, pk(ska), exp(g, exp_a), e,pk(sk_E), exp(g, exp_E)) |
        !trustedThirdParty(false, c3, ttp, exp_ttp, sk_ttp, e,pk(sk_E), exp(g, exp_E),e,pk(sk_E), exp(g, exp_E))
    
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)