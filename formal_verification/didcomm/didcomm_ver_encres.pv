(* --------------------------------------------------------------------------------------------------------- *)
(* DIDComm *)
(* This is the full version of the protocol, where we send the encrypted resource and then the key once we receives the right signature *)
(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Types Definition *)
type SymmetricKey.  (* Symmetric Keys *)
type SecretKey.     (* Secret Keys *)
type PublicKey.     (* Public Keys*)
type G.             (* Generator *)
type exponent.      (* Exponent *)

(* Tags Definition *)
type tag.   (* Tag for message *)
type ktag.  (* Tag for symmetric key *)
type stag.  (* Tag for signature *)
type etag.  (* Tag for exponent *)

(* Tags for the encapsulation of the messages in plaintext *)
const tag_m1, tag_m2, tag_m3, tag_m4, tag_m5, tag_h1, tag_h2, tag_h3, tag_m6, tag_m7, tag_m8, tag_m9, tag_m10, tag_m11, tag_m12, tag_m13, tag_hs1, tag_hs2, tag_m14, tag_m15 :tag [data].

(* Tags for the transmission of the messages *)
const tag_M1, tag_M2, tag_M3, tag_M4, tag_M5, tag_H1, tag_H2, tag_H3, tag_M6, tag_M7, tag_M8, tag_M9, tag_M10, tag_M11, tag_M12, tag_M13, tag_HS1, tag_HS2, tag_M14, tag_M15 :tag [data].

(* Tags for the encryption of symmetric key messages - for the single message *)
const tag_k0, tag_k1, tag_k2, tag_k3, tag_k4, tag_k5, tag_k6, tag_k7, tag_k8, tag_k9, tag_k10, tag_k11, tag_k12, tag_k13, tag_k14, tag_k15, tag_k16, tag_k17, tag_k18, tag_k19: ktag[data].

(* Tags for the encryption of symmetric key messages - for the session key *)
const tag_k_g2v2sav, tag_k_g2sav2sc, tag_k_g2a2su, tag_k_g2su2sa, tag_k_g2t2sv, tag_k_g2sv2st: ktag[data].

(* Tags for the signature of exponent *)
const tag_sig_g2su, tag_sig_g2sa, tag_sig_g2sav, tag_sig_g2sc, tag_sig_g2st, tag_sig_g2sv: stag[data].

(* Tags for the encryption of exponent *)
const tag_g2su, tag_g2sa, tag_g2sav, tag_g2sc, tag_g2st, tag_g2sv: etag [data].

const tag_vpr, tag_vp, tag_vc, tag_sig_vp, tag_sig_vp_2, tag_attr, tag_vpr_fromu, tag_vpr_send:tag[data].

(* Constants needed *)
const uri_req:bitstring.    (* URI of the request *)
const g: G.                 (* Generator for the g^x *)

(* One-Way Functions *)
fun hash_pk(PublicKey): bitstring.      (* Hash of PublicKey *)
fun hash_fork(bitstring): SymmetricKey. (* Hash of bitstring to obtain a SymmetricKey*)
fun hash(bitstring): bitstring.         (* Hash of bitstring*)
fun pk(SecretKey):PublicKey.            (* Key derivation function *)

(* Functions *)

(* Exponent *)
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).

(* Symmetric Encryption *)
fun senc(bitstring, SymmetricKey):bitstring.
reduc forall msg:bitstring,symk:SymmetricKey; sdec(senc(msg,symk),symk)=msg.

(* Asymmetric Encryption *)
fun aenc(bitstring, PublicKey):bitstring.
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg.

(* Classical Digital Signature *)
fun sig(bitstring, SecretKey):bitstring.
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true.

(* Digital Signature of a Symmetric Key *)
fun sig_hash_k(SymmetricKey, SecretKey):bitstring.
reduc forall msg:SymmetricKey,sk:SecretKey; check_hash_k(msg,sig_hash_k(msg,sk),pk(sk))=true.

(* Channel for the defense *)
fun ch(bitstring): channel.         (* Messages channel *)
fun chSymK(SymmetricKey): channel.  (* SymmetricKey channel *)


(* Secrecy *)
free vp_fromProver: bitstring [private].            (* VP Released by the Prover *)
free resource_fromVerifier: bitstring [private].    (* Resource released by the Verifier *)
free resource_fromApp: bitstring [private].         (* Resource released by the App *)
free resource_fromTTP:bitstring[private].           (* Resource released by the TTP *)

(* Authentication *)
event auth_AppCompletesProtocol(bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring).
event auth_UserCompletesProtocol(bitstring,bitstring,bitstring, bitstring, bitstring).
event auth_VerifierCompletesProtocol(bitstring, bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring).
event auth_AppCompletesProtocolFull(bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring, bitstring,bitstring, bitstring,bitstring).
event auth_VerifierCompletesProtocolFull(bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring).

(* App -> User *)
event auth_AppSendsLastMessageToUser(bitstring, bitstring, bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring).
event verifierInConeOfUser(bitstring, bitstring,bitstring,bitstring,bitstring).

(* User -> App *)
event auth_UserSendsLastMessageToApp(bitstring,bitstring, bitstring, bitstring,bitstring).

(* Verifier -> App *)
event auth_VerifierSendsLastMessageToApp(bitstring, bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).
event auth_VerifierSendsLastMessageToAppFull(bitstring, bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).

(* App -> Verifier *)
event auth_AppSendsLastMessageToVerifier(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_AppCompletesProtocolWithUser(bitstring, bitstring,bitstring, bitstring, bitstring,bitstring,bitstring, bitstring).
event auth_TTPSendsLastMessageToVerifier(bitstring, bitstring).
event auth_TTPSendsLastMessageToVerifierFull(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event auth_TTPInConeOfApp(bitstring, bitstring, bitstring).
event auth_AppInConeOfVerifier(bitstring, bitstring, bitstring, bitstring).

event auth_TTPSendsLastMessageToApp(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event auth_TTPCompleteProtocolFull(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event auth_TTPCompleteProtocol(bitstring, bitstring, bitstring).


event reach.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

let user(talksOnlyToHonest:bool,  c_u2a:channel, DID_u:bitstring, u:exponent, sku:SecretKey, DID_a:bitstring, pka:PublicKey, g2a:G, DID_v:bitstring, pkv:PublicKey,  g2v:G, vc:bitstring, uri_req:bitstring) =
    (* Message H1 User -> App *)
    (* h1 = g^su, sig(g^su, sku) *)
    
    new su: exponent;
    let g2su = exp(g, su) in
    let g2a2su = exp(g2a, su) in
    let hash_g2a2su = hash_fork((g2su, g2a, g2a2su)) in
    let k_g2a2su = hash_fork((g2a2su, hash_g2a2su, tag_k_g2a2su)) in
    new k5:SymmetricKey;
    let h1 = (g2su, sig(hash((tag_sig_g2su, pka, g2su)),sku)) in
    let H1 = (tag_h1, aenc((tag_g2su, g2su), pka), senc((tag_k5, k5), k_g2a2su), senc(h1, k5)) in
    out(c_u2a, (tag_H1, H1));

    (* Message H2 App -> User *)
    (* h2 = g^sa, sig(g^sa, ska) *)
    in(c_u2a, (=tag_H2, H2:bitstring));
    let (=tag_h2, enc_g2sa: bitstring, enc_k6: bitstring, enc_h2:bitstring) = H2 in
    let (=tag_g2sa, g2sa:G) = adec(enc_g2sa, sku) in
    let g2sa2su = exp(g2sa, su) in
    let hash_g2sa2su = hash_fork((g2su, g2sa, g2sa2su)) in
    let k_g2sa2su = hash_fork((g2sa2su, hash_g2sa2su, tag_k_g2su2sa)) in (* The tag used tag_k_g2su2sa is reverted with respect to the construction because otherwise it will not work *)
    let (=tag_k6, k6:SymmetricKey) = sdec(enc_k6, k_g2sa2su) in
    let (g2sa':G, sig_g2sa:bitstring) = sdec(enc_h2, k6) in 
    if check(hash((tag_sig_g2sa, pk(sku), g2sa)), sig_g2sa, pka) then

    (* Message H3 User -> App *)
    (* h3 = ack *)
    new k7: SymmetricKey;
    new h3:bitstring;
    let enc_k7 = senc((tag_k7, k7), k_g2sa2su) in
    let H3 = (tag_h3, senc(h3, k7)) in
    out(c_u2a,(tag_H3, H3));
    
    (* Message 6 App -> User *)
    (* This is the VPR sent by the Verifier to the App, and then signed by the App for the User *)
    in(c_u2a, (=tag_M6, M6:bitstring));
    let (=tag_m6, enc_k8:bitstring, enc_m6:bitstring) = M6 in
    let (=tag_k8, k8:SymmetricKey) = sdec(enc_k8, k_g2sa2su) in
    let (vpr_2:bitstring, sig_vpr_2:bitstring) = sdec(enc_m6, k8)  in
    let (m5':bitstring, n_r':bitstring) = vpr_2 in
    let (rule':bitstring, n_c':bitstring) = m5' in
    let (=tag_vpr, DID_i':bitstring, DID_v':bitstring, DID_u':bitstring, DID_a':bitstring, uri':bitstring) = rule' in
    (* Check if the signature applied by the App is genuine *)
    if (check(vpr_2, sig_vpr_2, pka)) then
    (* Check that these are field we expect to sign  *)
    if ((DID_v', DID_u', DID_a', uri') = (DID_v, DID_u, DID_a, uri_req)) then  (*Who knows, maybe server is starting behaving maliciously *)

    
    (* Message 7 User -> App *)
    (* Produce the VP as response to the VPR *)
    let vp = (tag_vp, n_r', (tag_vpr_fromu, rule', n_c'), vc) in
    let m7 = (tag_sig_vp, vp, sig(vp, sku)) in
    new k9:SymmetricKey;
    let M7 = (tag_m7, senc((tag_k9, k9), k_g2sa2su), senc(m7, k9)) in
    
    event auth_UserSendsLastMessageToApp(H1, H2, H3, M6, M7);
    out(c_u2a, (tag_M7, M7));
    
    if talksOnlyToHonest then
        event auth_UserCompletesProtocol(H1, H2, H3, M6, M7)|
        out(ch(vp), vp_fromProver);
    
    0.

let app(talksOnlyToHonest:bool, c_a2v:channel, c_u2a:channel, c_a2t:channel, DID_a:bitstring, a:exponent, ska:SecretKey,  DID_u:bitstring, pku:PublicKey, g2u:G, DID_v:bitstring, pkv:PublicKey, g2v:G, DID_i:bitstring, pki:PublicKey, DID_t:bitstring, pkt:PublicKey, g2t:G ,uri:bitstring) =

    (* Message 1 App -> CSS *)
    (* m1 = (g^sav, sig(g^sav, ska))*)
    new sav: exponent;
    let g2sav = exp(g, sav) in
    let g2v2sav = exp(g2v, sav) in
    let hash_g2v2sav = hash_fork((g2v, g2sav, g2v2sav)) in
    let k_g2v2sav = hash_fork((g2v2sav, hash_g2v2sav, tag_k_g2v2sav)) in
    new k0:SymmetricKey;
    let m1 = (g2sav, sig(hash((tag_sig_g2sav, pkv, g2sav)), ska)) in
    let M1 = (tag_m1, aenc((tag_g2sav, g2sav), pkv), senc((tag_k0, k0), k_g2v2sav), senc(m1, k0)) in
    out(c_a2v, (tag_M1,M1));

    (* Message 2 CSS -> App *)
    (* m2 = (g^sc, sig(g^sc, skv))*)
    in(c_a2v, (=tag_M2, M2:bitstring));
    let (=tag_m2, enc_g2sc: bitstring, enc_k1: bitstring, enc_m2:bitstring) = M2 in
    let(=tag_g2sc, g2sc:G) = adec(enc_g2sc, ska) in
    let g2sc2sav = exp(g2sc, sav) in
    let hash_g2sc2sav = hash_fork((g2sc, g2sav, g2sc2sav)) in 
    let k_g2sc2sav = hash_fork((g2sc2sav, hash_g2sc2sav, tag_k_g2sav2sc)) in (* The tag used tag_k_g2sav2sc is reverted with respect to the construction because otherwise it will not work *)
    let (=tag_k1, k1:SymmetricKey) = sdec(enc_k1, k_g2sc2sav) in
    let (g2sc':G, sig_g2sc:bitstring) = sdec(enc_m2, k1) in
    if check(hash((tag_sig_g2sc, pk(ska), g2sc)), sig_g2sc, pkv) then

    (* Message 3 App -> CSS *)
    (* Send ack to the CSS *)
    new k2: SymmetricKey;
    new m3:bitstring;
    let M3 = (tag_m3, senc((tag_k2, k2), k_g2sc2sav), senc(m3, k2)) in
    out(c_a2v,(tag_M3, M3));

    (* Message 4 App -> CSS *)
    (* m4 = (i, v, u, uri, a) *)
    new k3: SymmetricKey;
    let enc_k3 = senc((tag_k3, k3), k_g2sc2sav) in
    let m4 = (DID_i, DID_v, DID_u, DID_a, uri) in
    let M4 = (tag_m4, enc_k3, senc(m4, k3)) in
    out(c_a2v,(tag_M4, M4));

    (* Message 5 CSS -> App *)
    (* Receive m5 = (v, rule, n_v) from the CSS *)
    in(c_a2v, (=tag_M5, M5:bitstring));
    let (=tag_m5, enc_k4:bitstring, enc_m5:bitstring) = M5 in
    let (=tag_k4, k4:SymmetricKey) = sdec(enc_k4, k_g2sc2sav) in
    let (m5:bitstring) = sdec(enc_m5, k4)  in
    let (=tag_vpr_send, rule':bitstring, n_c':bitstring) = m5 in
    let (=tag_vpr, DID_i':bitstring, DID_v':bitstring, DID_u':bitstring, DID_a':bitstring, uri':bitstring) = rule' in
    if ((DID_i', DID_v', DID_u', DID_a', uri') = (DID_i, DID_v, DID_u, DID_a, uri)) then  (*Who knows, maybe server is starting behaving maliciously *)

    
    (* Message H1 User -> App *)
    (* h1 = g^su, sig(g^su, sku) *)
    in(c_u2a, (=tag_H1, H1:bitstring));
    let (=tag_h1, enc_g2su: bitstring, enc_k5:bitstring, enc_h1:bitstring) = H1 in
    let (=tag_g2su, g2su:G) = adec(enc_g2su, ska) in
    let g2su2a = exp(g2su, a) in
    let hash_g2su2a = hash_fork((g2su, exp(g, a), g2su2a)) in
    let k_g2su2a = hash_fork((g2su2a, hash_g2su2a, tag_k_g2a2su)) in (* The tag used tag_k_g2a2su is reverted with respect to the construction because otherwise it will not work *)
    let (=tag_k5, k5:SymmetricKey) = sdec(enc_k5, k_g2su2a) in
    let (g2su':G, sig_g2su:bitstring) = sdec(enc_h1, k5) in
    if check(hash((tag_sig_g2su, pk(ska), g2su)), sig_g2su, pku) then
    

    (* Message H2 App -> User *)
    (* h2 = g^sa, sig(g^sa, ska) *)
    new sa: exponent;
    let g2sa = exp(g, sa) in
    let g2su2sa = exp(g2su, sa) in
    let hash_g2su2sa = hash_fork((g2su, g2sa, g2su2sa)) in
    let k_g2su2sa = hash_fork((g2su2sa, hash_g2su2sa, tag_k_g2su2sa)) in
    new k6:SymmetricKey;
    let h2 = (g2sa, sig(hash((tag_sig_g2sa, pku, g2sa)), ska)) in
    let H2 = (tag_h2, aenc((tag_g2sa, g2sa), pku), senc((tag_k6, k6), k_g2su2sa), senc(h2, k6)) in 
    out(c_u2a, (tag_H2, H2));

    (* Message H3 User -> App *)
    (* Receive the ack, no need to check anything on this *)
    in(c_u2a, (=tag_H3, H3:bitstring));


    (* Message 6 App -> User *)
    (* Send the VPR^2, which is the VPR signed with secret key of app + nonce *)
    new n_r:bitstring;
    let vpr_2 = ((rule', n_c'), n_r) in
    let m6 = (vpr_2, sig(vpr_2, ska)) in
    new k8:SymmetricKey;
    let M6 = (tag_m6, senc((tag_k8, k8), k_g2su2sa), senc(m6, k8)) in
    event auth_AppSendsLastMessageToUser(M1, M2, M3, M4, M5, H1, H2, H3, M6);
    out(c_u2a, (tag_M6, M6));
    (* Here we are able to reach the process, line 286. After this we are not able to reach*)
    
    
    (* Message 7 User -> App *)
    in(c_u2a, (=tag_M7, M7:bitstring));
    let (=tag_m7, enc_k9:bitstring, enc_m7:bitstring) = M7 in
    let (=tag_k9, k9:SymmetricKey) = sdec(enc_k9, k_g2su2sa) in
    let (m7':bitstring) = sdec(enc_m7, k9) in
    let (=tag_sig_vp, vp:bitstring, sig_vp:bitstring) = m7' in
    let (=tag_vp, n_r':bitstring, vpr':bitstring, vc':bitstring) = vp in
    if n_r = n_r'  then
    if (check(vp, sig_vp, pku)) then

    (* Message 8 App -> CSS *)
    new k10:SymmetricKey;
    let m8 = (tag_sig_vp_2, (tag_sig_vp, vp, sig_vp), sig((tag_sig_vp, vp, sig_vp), ska)) in
    let M8 = (tag_m8, senc((tag_k10, k10), k_g2sc2sav), senc(m8, k10)) in
    out(c_a2v, (tag_M8, M8));

(*
    (* Message 10 CSS -> App *)
    in(c_a2v, (=msg10, m_10:bitstring));
    let (symk16_enc:bitstring, m10_enc:bitstring) = m_10 in
    (* We cannot yet access the content of resource *)
    (* But I start extracting the messages *)
    let (=symk16, symk_16:SymmetricKey) = dec(symk16_enc, symk_av_dec) in
    let (=tag10, m10_dec:bitstring) = dec(m10_enc, symk_16) in
    let (encrypted_k15':bitstring, encrypted_resource':bitstring, hash_resource':bitstring) = m10_dec in

    (* Message 11 App -> CSS *)
    (* Now we can sign the hash of the resource and retrnsmit it to the CSS *)
    new symk_k17: SymmetricKey;
    let encrypted_k17 = enc((symk17, symk_k17), symk_av_enc) in
    let msg_sign = ((sig_hash_res, hash_resource'), sig((sig_hash_res, hash_resource'), ska)) in
    let m_11 = (encrypted_k17, (tag11, enc(msg_sign, symk_k17))) in
    event auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11);
    out(c2,(msg11, m_11));

    (* Message K15 CSS -> App *)
    in(c2, (=msgK15, k_15:bitstring));
    let (symk18_enc:bitstring, k_15_enc:bitstring) = k_15 in
    let (=symk18, symk_18:SymmetricKey) =  dec(symk18_enc, symk_av_dec) in
    let (=tag15K, skForSkForRes:SymmetricKey) = dec(k_15_enc, symk_18) in
    (* Now I can decrypt the resource *)
    let (=theResource, resource':bitstring) = dec(encrypted_resource', skForSkForRes) in
 
    (*if (hash(resource') = hash_resource' then*)
        (* Everything ok, not go to the TTP *)
        
        (* Start handshake with the TTP *)
        new dhsecretATTP: exponent;
        let dhpublicATTP = exp(g, dhsecretATTP) in
        let m_16 = (tag16, dhpublicATTP) in
        out(c3,(msg16, m_16));

        (* Receive the respond message *)
        in(c3, (=msg17, m_17:bitstring));
        let (=tag17, dhpublicTTP: G, sign_ttp: bitstring) = m_17 in
        let K_ttp = exp(dhpublicTTP, dhsecretATTP) in
        let h_ttp = hash_fork((dhpublicATTP, dhpublicTTP, K_ttp)) in
        if check_hash_k(h_ttp, sign_ttp, pk_ttp) = true then

        let symk_attp_enc = hash_fork((K_ttp, h_ttp, keyEncAtoTTP)) in
        let symk_attp_dec = hash_fork((K_ttp, h_ttp, keyEncTTPtoA)) in
    
        (* Transmit the msg signed, msg received by the CSS *)
        let m_18 = enc((tag18, m10_dec, msg_sign), symk_attp_enc) in
        out(c3, (msg18, m_18));

        (* Receive the key for decrypt *)
        in (c3, (=msg19, m_19:bitstring));
        let (=tag19, symkForDecrypt:SymmetricKey) = dec(m_19, symk_attp_dec)  in
        let (=theResource, resource'':bitstring) = dec(encrypted_resource', symkForDecrypt) in
        if (hash((theResource, resource'')) = hash_resource') then
        if (talksOnlyToHonest) then
        event auth_AppInConeOfVerifier(m_16, m_17, m_18, m_19);
        event auth_AppCompletesProtocol(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11, k_15);
        out(ch(resource'), resource_fromApp);
        event auth_AppCompletesProtocolFull(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11, m_16, m_17, m_18, m_19);
        out(ch(resource''), resource_fromTTP);*)
    0.

let verifier(talksOnlyToHonest:bool,  c_a2v:channel, c_v2t:channel, DID_v:bitstring, v:exponent, skv:SecretKey, DID_u:bitstring, pku:PublicKey, g2u:G, DID_a:bitstring, pka:PublicKey,  g2a:G, DID_i:bitstring, pki:PublicKey, DID_t:bitstring, pkt:PublicKey, g2t:G, uri_req:bitstring) =
               
    (* Message 1 App -> CSS *)
    (* m1 = (g^sav, sig(g^sav, ska)) *)
    in(c_a2v, (=tag_M1, M1:bitstring));
    let (=tag_m1, enc_g2sav: bitstring, enc_k0:bitstring, enc_m1:bitstring) = M1 in
    let (=tag_g2sav, g2sav:G) = adec(enc_g2sav, skv) in
    let g2sav2v = exp(g2sav, v) in
    let hash_g2sav2v = hash_fork((exp(g, v), g2sav, g2sav2v)) in
    let k_g2sav2v = hash_fork((g2sav2v, hash_g2sav2v, tag_k_g2v2sav)) in (* The tag used tag_k_g2v2sav is reverted with respect to the construction because otherwise it will not work *)
    let (=tag_k0, k0:SymmetricKey) = sdec(enc_k0, k_g2sav2v) in
    let (g2sav':G, sig_g2sav:bitstring) = sdec(enc_m1, k0) in
    if check(hash((tag_sig_g2sav, pk(skv), g2sav)), sig_g2sav, pka) then
    
    (* Message 2 CSS -> App *)
    (* m2 = (g^sc, sig(g^sc, skv))*)
    new sc: exponent;
    let g2sc = exp(g, sc) in
    let g2sav2sc = exp(g2sav, sc) in
    let hash_g2sav2sc = hash_fork((g2sc, g2sav, g2sav2sc)) in
    let k_g2sav2sc = hash_fork((g2sav2sc, hash_g2sav2sc, tag_k_g2sav2sc)) in
    new k1:SymmetricKey;
    let m2 = (g2sc,sig(hash((tag_sig_g2sc, pka, g2sc)), skv)) in
    let M2 = (tag_m2, aenc((tag_g2sc, g2sc), pka), senc((tag_k1, k1), k_g2sav2sc), senc(m2, k1)) in 
    out(c_a2v, (tag_M2, M2));

    (* Message 3 App -> CSS *)
    (* m3 = ack *)
    in(c_a2v, (=tag_M3, M3:bitstring));

    (* Message 4 App -> CSS *)
    (* m4 = (i, v, u, uri, a) *)
    in(c_a2v, (=tag_M4, M4:bitstring));
    let (=tag_m4, enc_k3:bitstring, enc_m4:bitstring) = M4 in
    let (=tag_k3, k3:SymmetricKey) = sdec(enc_k3, k_g2sav2sc) in
    let (DID_i':bitstring, DID_v':bitstring, DID_u':bitstring, DID_a':bitstring, uri':bitstring) =  sdec(enc_m4,k3) in
    if (DID_i', DID_v', DID_u', DID_a', uri') = (DID_i, DID_v, DID_u, DID_a, uri_req) then
    
    (* Message 5 CSS -> App *)
    (* m5 = (rule, n_c) *)
    new n_c:bitstring;
    let rule = (tag_vpr, DID_i, DID_v, DID_u, DID_a, uri_req) in
    let m5 = (tag_vpr_send, rule, n_c)  in
    new k4:SymmetricKey;
    let enc_k4 = senc((tag_k4, k4),k_g2sav2sc) in
    let M5 = (tag_m5, enc_k4, senc(m5, k4))  in
    event verifierInConeOfUser(M1,M2,M3,M4,M5);
    out(c_a2v, (tag_M5, M5));



    (* Message 8 App -> CSS *)
    (* Receive the VP^2 and checks for the signature applied *)
    in(c_a2v, (=tag_M8, M8:bitstring));
    let (=tag_m8, enc_k10:bitstring, enc_m8:bitstring) = M8 in
    let (=tag_k10, k10:SymmetricKey) = sdec(enc_k10, k_g2sav2sc) in
    let (=tag_sig_vp_2, m7':bitstring, sig_m7':bitstring) = sdec(enc_m8, k10) in
    if (check(m7', sig_m7', pka)) then
    let (=tag_sig_vp, vp:bitstring, sig_vp:bitstring) =  m7' in
    if check(vp, sig_vp, pku) then
    let (=tag_vp, n_r':bitstring, vpr':bitstring, vc':bitstring) = vp in
    let (=tag_vc, attr':bitstring, sig_attr':bitstring) = vc' in
    if check(attr', sig_attr', pki) then
    let (=tag_attr, DID_iss'':bitstring, DID_u'':bitstring) = attr' in
    if (DID_iss'', DID_u'') = (DID_i, DID_u) then
    let (=tag_vpr_fromu, rule'':bitstring, n_c'':bitstring) = vpr' in
    if (n_c'') = (n_c) then
    let (=tag_vpr, DID_i''':bitstring, DID_v''':bitstring, DID_u''':bitstring, DID_a''':bitstring, uri_req''':bitstring) = rule'' in
    if ((DID_i, DID_v, DID_u, DID_a, uri_req) = (DID_i''', DID_v''', DID_u''', DID_a''', uri_req''')) then

    
    (* Message 9 CSS -> TTP *)
    new sv: exponent;
    let g2sv = exp(g, sv) in
    let g2t2sv = exp(g2t, sv) in
    let hash_g2t2sv = hash_fork((g2t, g2sv, g2t2sv)) in
    let k_g2t2sv = hash_fork((g2t2sv, hash_g2t2sv, tag_k_g2t2sv)) in
    new k12:SymmetricKey;
    let m9 = (g2sv, sig(hash((tag_sig_g2sv, pkt, g2sv)), skv)) in
    let M9 = (tag_m9, aenc((tag_g2sv, g2sv), pkt), senc((tag_k12, k12), k_g2t2sv), senc(m9, k12)) in 
    out(c_v2t, (tag_M9, M9));

    
    (* Message 10 TTP -> CSS *)
    in(c_v2t, (=tag_M10, M10:bitstring));
    let (=tag_m10, enc_g2st: bitstring, enc_k13:bitstring, enc_m10:bitstring) = M10 in
    let (=tag_g2st, g2st:G) = adec(enc_g2st, skv) in
    let g2st2sv = exp(g2st, sv) in
    let hash_g2st2sv = hash_fork((g2st, g2sv, g2st2sv)) in
    let k_g2st2sv = hash_fork((g2st2sv, hash_g2st2sv, tag_k_g2sv2st)) in
   
    let (=tag_k13, k13:SymmetricKey) = sdec(enc_k13, k_g2st2sv) in
    let (g2st':G, sig_g2st:bitstring) = sdec(enc_m10, k13) in

    if check(hash((tag_sig_g2st, pk(skv), g2st)), sig_g2st, pkt) then

    event reach;
 (*
    (* Message 9 CSS -> TTP *)
    (* Send ack to the TTP *)
    new symk_14: SymmetricKey;
    new ack_ttp:bitstring;
    let symk14_enc = enc((symk14, symk_14), symk_av_enc) in
    let m_9 = (symk14_enc, enc((tag9, ack_ttp), symk_14)) in
    out(c2,(msg9, m_9));

    (* Once the verifier conclude the handshake with the TTP, then it is able to generate the encrypted resource to send to the App *)

    (* First generate the message we have to send to the App *)
    new symk_k15: SymmetricKey; (* The key that will be used by TTP to decrypt the resource in the case it is necessary *)
    let encrypted_k15 = enc((symk15, symk_k15), symk_ttpv_enc) in
    (* Compute the hash of the resource and the key used *)
    new resource:bitstring;
    let m_res = (encrypted_k15, enc((theResource, resource), symk_k15), hash((theResource, resource))) in

    
    (* Message 10 - CSS -> App *)
    (* Message containing the encrypted resource *)
    new symk_k16: SymmetricKey;
    let encrypted_k16 = enc((symk16, symk_k16), symk_av_enc) in
    let m_10 = (encrypted_k16, enc((tag10, m_res), symk_k16)) in
    out(c, (msg10, m_10));


    (* Message 11 - App -> CSS *)
    (* Message containing the signature applied over the resoruce *)
    in(c, (=msg11, m_11:bitstring));
    let (symk17_enc:bitstring, m_11_enc:bitstring) = m_11 in
    let (=symk17, symk_17:SymmetricKey) = dec(symk17_enc, symk_av_dec) in
    let (=tag11, m11_dec:bitstring) = dec(m_11_enc, symk_17) in
    let (m11_received:bitstring, m11_signature:bitstring) = m11_dec in
    if (check(m11_received, m11_signature, pka)) then (* The message has been authentically signed*)
    if (m11_received = hash((theResource, resource))) then (* The App correctly signed only the hash we sent *)


    (* Message 15 - CSS -> App *) 
    (* Send the key for decrypting the resource to the App *)
    new symk_k18: SymmetricKey;
    let encrypted_k18 = enc((symk18, symk_k18), symk_av_enc) in
    let k_15 =(encrypted_k18, enc((tag15K, symk_k15), symk_k18)) in

    event auth_VerifierSendsLastMessageToApp(m_1, m_2, m_3, m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15);
    event auth_VerifierSendsLastMessageToAppFull(m_1, m_2, m_3, m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11);
    out(c, (msgK15, k_15));

    in(c2, (=msg12, m_12:bitstring));
    let (symk19_enc:bitstring, m_12_enc:bitstring) = m_12 in
    let (=symk19, symk_19:SymmetricKey) = dec(symk19_enc, symk_ttpv_dec) in
    let (=tag11, m11_dec_bis:bitstring) = dec(m_12_enc, symk_19) in
    let (resHashFromAppByTTP:bitstring, sigResHashFromAppByTTP:bitstring) = m11_dec_bis in
    if check(resHashFromAppByTTP, sigResHashFromAppByTTP, pka) then
    let (=sig_hash_res, hashSigned:bitstring) = resHashFromAppByTTP in
    if hash((theResource, resource)) = hashSigned then

    if talksOnlyToHonest then
        event auth_VerifierCompletesProtocol(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15)|
        event auth_VerifierCompletesProtocolFull(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, m_12)|
        out(ch(resource), resource_fromVerifier);
    *)
    0.

let trustedThirdParty(talksOnlyToHonest:bool, c_a2t:channel, c_v2t:channel, DID_t:bitstring, t:exponent, skt:SecretKey,DID_a:bitstring, pka:PublicKey, g2a:G,  DID_v:bitstring, pkv:PublicKey, g2v:G) =
    
    
    (* Message 9 CSS -> TTP *)
    in(c_v2t, (=tag_M9, M9:bitstring));
    let (=tag_m9, enc_g2sv: bitstring, enc_k12: bitstring, enc_m9:bitstring) = M9 in
    let (=tag_g2sv, g2sv:G) = adec(enc_g2sv, skt) in
    let g2sv2t= exp(g2sv, t) in
    let hash_g2sv2t = hash_fork((exp(g, t), g2sv, g2sv2t)) in
    let k_g2sv2t = hash_fork((g2sv2t, hash_g2sv2t, tag_k_g2t2sv)) in
    let (=tag_k12, k12:SymmetricKey) = sdec(enc_k12, k_g2sv2t) in
    let (g2sv':G, sig_g2sv:bitstring) = sdec(enc_m9, k12) in
    if check(hash((tag_sig_g2sv, pk(skt), g2sv)), sig_g2sv , pkv) then
    
    (* Message 10 TTP -> CSS *)
    new st: exponent;

    let g2st = exp(g, st) in
    let g2sv2st = exp(g2sv, st) in
    let hash_g2sv2st = hash_fork((g2st, g2sv, g2sv2st)) in
    let k_g2sv2st = hash_fork((g2sv2st, hash_g2sv2st, tag_k_g2sv2st)) in
    new k13:SymmetricKey;
    let m10 = (g2st, sig(hash((tag_sig_g2st, pkv, g2st)), skt)) in
    let M10 = (tag_m10, aenc((tag_g2st, g2st), pkv), senc((tag_k13, k13), k_g2sv2st), senc(m10, k13)) in
    event auth_TTPSendsLastMessageToVerifier(M9, M10);
    out(c_v2t, (tag_M10, M10));

    
    (*
    (* Message 9 CSS -> TTP *)
    (* Receive the ack, no need to check anything on this *)
    in(c, (=msg9, m_9:bitstring));

    event auth_TTPInConeOfApp(m_7, m_8, m_9);


    (*Receive message from App - This is the thrid message *)

    (* HTTPS Handshake between App and TTP *)
    in(c2, (=msg16, m_16:bitstring));
    let (=tag16, dhpublicATTP: G) = m_16 in
    new dhsecretTTPA: exponent;
    let dhpublicTTPA = exp(g, dhsecretTTPA) in
    let K_app = exp(dhpublicATTP, dhsecretTTPA) in
    let h_app = hash_fork((dhpublicATTP, dhpublicTTPA, K_app)) in
    let m_17 = (tag17, dhpublicTTPA, sig_hash_k(h_app, sk_ttp)) in 
    out(c2, (msg17, m_17));
    

    let symk_attp_enc = hash_fork((K_app, h_app, keyEncTTPtoA)) in
    let symk_attp_dec = hash_fork((K_app, h_app, keyEncAtoTTP)) in

    in(c2, (=msg18, m_18:bitstring));
    let (=tag18, m_10:bitstring, m_11:bitstring) = dec(m_18,symk_attp_dec) in
    let (res_hash_wrap:bitstring, sig_res_hash':bitstring) = m_11 in
    if (check(res_hash_wrap, sig_res_hash', pka)) then
    let (=sig_hash_res, res_hash':bitstring) = res_hash_wrap in
    
    let (encrypted_k15':bitstring, encrypted_resource':bitstring, hash_resource':bitstring) = m_10 in

    let (=symk15, keyForDecryptResource:SymmetricKey) = dec(encrypted_k15', symk_ttpv_dec) in
    let (=theResource, dec_res:bitstring) = dec(encrypted_resource', keyForDecryptResource) in
    if hash((theResource, dec_res)) = res_hash' then (* The App is not an attacker because signed the right hash *)

    let m_19=enc((tag19, keyForDecryptResource), symk_attp_enc) in
    out(c2, (msg19, m_19));
    event auth_TTPSendsLastMessageToApp(m_7, m_8, m_9, m_16, m_17, m_18, m_19);

    new symk_k19: SymmetricKey;
    let encrypted_k19 = enc((symk19, symk_k19), symk_ttpv_enc) in
    let m_12 = (encrypted_k19, enc((tag11, (res_hash_wrap, sig_res_hash')), symk_k19)) in
    event auth_TTPSendsLastMessageToVerifierFull(m_7, m_8,m_16, m_17, m_18, m_19, m_12);
    out(c, (msg12, m_12));
    
    if (talksOnlyToHonest) then
        event auth_TTPCompleteProtocolFull(m_7, m_8, m_9, m_16, m_17, m_18, m_19, m_12)|
        event auth_TTPCompleteProtocol(m_7, m_8, m_9);
    *)
    0.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Sanity Check *) 
query event(reach).

(* SECRECY *)
(* query attacker(vp_fromProver). 
query attacker(resource_fromApp). 
query attacker(resource_fromVerifier).
query attacker(resource_fromTTP).

query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring; 
    inj-event(auth_UserCompletesProtocol(h_1, h_2, h_3, m_5, m_6))
    ==>
    inj-event(auth_AppSendsLastMessageToUser(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5))
    &&
    inj-event(verifierInConeOfUser(m_1, m_2, m_3, m_4, m_vpr)).
    
(* If the TTP reveals the message at the end, then the TTP must receive a message from the App (third message)  *)
(* Without asking the key to the TTP *)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp_2:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, k_15:bitstring; 
   inj-event(auth_AppCompletesProtocol(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5, m_6, m_vp_2, m_10, m_11, k_15))
    ==>
    inj-event(auth_VerifierSendsLastMessageToApp(m_1, m_2, m_3, m_4, m_vpr, m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPInConeOfApp(m_7, m_8, m_9)).  

(* Asking the key to the TTP *)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp_2:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, k_15:bitstring,m_16:bitstring, m_17:bitstring, m_18:bitstring, m_19:bitstring; 
    inj-event(auth_AppCompletesProtocolFull(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5, m_6, m_vp_2, m_10, m_11, m_16, m_17, m_18, m_19))
    ==>
    inj-event(auth_VerifierSendsLastMessageToAppFull(m_1, m_2, m_3, m_4, m_vpr, m_vp_2, m_7, m_8, m_9, m_10, m_11))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPSendsLastMessageToApp(m_7, m_8, m_9, m_16, m_17, m_18, m_19)). 

query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring,m_vp_2:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, k_15:bitstring,m_16:bitstring, m_17:bitstring, m_18:bitstring, m_19:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPSendsLastMessageToVerifier(m_7, m_8)).

query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring,m_vp_2:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, m_12:bitstring,m_16:bitstring, m_17:bitstring, m_18:bitstring, m_19:bitstring; 
    inj-event(auth_VerifierCompletesProtocolFull(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, m_12))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11))
    &&
    inj-event(auth_AppInConeOfVerifier(m_16, m_17, m_18, m_19))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPSendsLastMessageToVerifierFull(m_7, m_8, m_16, m_17, m_18, m_19, m_12)). *)


(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Define the channels *)
free c:channel.
free c_u2a:channel. (* For User - App*)
free c_a2v:channel. (* For App - Verifier *)
free c_v2t:channel. (* For Verifier - TTP *)
free c_a2t:channel. (* For App - TTP *)

(* Definition for the attacker *)
free skE:SecretKey.
free E:exponent.
free DID_E:bitstring.

process (*use root process for setup *)

    (* Declare identities *)
    new DID_u:bitstring;
    new DID_a:bitstring;
    new DID_v:bitstring;
    new DID_i:bitstring;
    new DID_t:bitstring;

    (* Advertise identities*)
    out(c, DID_u);
    out(c, DID_a);
    out(c, DID_v);
    out(c, DID_i);
    out(c, DID_t);

    (* Declare Secret Keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;
    new skt:SecretKey;

    (* Declare Exponents *)
    new u:exponent;
    new a:exponent;
    new v:exponent;
    new i:exponent;
    new t:exponent;

    (* Advertise Public Exponent (Generators)*)
    out(c, exp(g, u));
    out(c, exp(g, a));
    out(c, exp(g, v));
    out(c, exp(g, i));
    out(c, exp(g, t));
    
    (* Advertise Public Keys *)
    out(c, pk(sku));
    out(c, pk(ska));
    out(c, pk(skv));
    out(c, pk(ski));
    out(c, pk(skt));

    let vc = (tag_vc, (tag_attr, DID_i, DID_u), sig((tag_attr, DID_i, DID_u), ski)) in

    (*let agents dance*)
    (
        (!app(true, c_a2v, c_u2a, c_a2t, DID_a, a, ska, DID_u, pk(sku), exp(g,u), DID_v, pk(skv), exp(g,v), DID_i, pk(ski), DID_t, pk(skt), exp(g,t), uri_req)) |
        (!verifier(true,  c_a2v, c_v2t, DID_v, v, skv, DID_u, pk(sku), exp(g,u), DID_a, pk(ska),  exp(g,a), DID_i, pk(ski), DID_t, pk(skt), exp(g,t), uri_req)) |
        (!user(true,  c_u2a, DID_u, u, sku, DID_a, pk(ska), exp(g,a), DID_v, pk(skv),  exp(g,v), vc, uri_req)) |
        (!trustedThirdParty(true,  c_a2t, c_v2t, DID_t, t, skt, DID_a, pk(ska),  exp(g,a), DID_v, pk(skv), exp(g,v)))
        (*(!app(false, c, c2, c4, a, exp_a, ska, e, pk(sk_E), exp(g,exp_E), v, pk(skv),  exp(g,exp_v), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp),uri_req)) |
        (!app(false, c, c2, c4, a, exp_a, ska, u, pk(sku),  exp(g,exp_u), e, pk(sk_E), exp(g,exp_E), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!app(false, c, c2, c4, a, exp_a, ska, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), a, pk(ska),  exp(g,exp_a), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), e, pk(sk_E), exp(g,exp_E), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), a, pk(ska),  exp(g,exp_a), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), a, pk(ska),  exp(g,exp_a), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) | 
        (!user(false, c, u, exp_u, sku, e, pk(sk_E), exp(g,exp_E), v, pk(skv),  exp(g,exp_v), vc, uri_req)) |
        (!user(false, c, u, exp_u, sku, a, pk(ska),  exp(g,exp_a), e, pk(sk_E), exp(g,exp_E), vc, euri)) |
        (!user(false, c, u, exp_u, sku, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), vc, euri)) |
        (!trustedThirdParty(false, c3, c4, ttp, exp_ttp, sk_ttp, e, pk(sk_E), exp(g,exp_E), v, pk(skv),  exp(g,exp_v))) |
        (!trustedThirdParty(false, c3, c4, ttp, exp_ttp, sk_ttp, a, pk(ska),  exp(g,exp_a), e, pk(sk_E), exp(g,exp_E))) |
        (!trustedThirdParty(false, c3, c4, ttp, exp_ttp, sk_ttp, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E))) *)
    
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)