(* --------------------------------------------------------------------------------------------------------- *)
(* DIDComm *)
(* This is the full version of the protocol, where we send the encrypted resource and then the key once we receives the right signature *)
(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* START keys *)
type SymmetricKey.
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)
type G.
type exponent.

const uri_req:bitstring.

type tag.
type ktag.

const KEXDHINITSERVER, KEXDHREPLYSERVER, tag3, tag4, tagVPR, KEXDHINIT, KEXDHREPLY, tagH3, tag5, tag6, tag_vp_2, KEXDHINITTTP, KEXDHREPLYTTP, tag9, tag10, tag11, tag15K, tag12, tag16, tag17, tag18, tag19:tag [data].

const msg1, msg2, msg3, msg4, msgVPR, msgH1, msgH2, msgH3 ,msg5, msg6, msgVP2, msg7, msg8, msg9, msg10, msg11, msgK15, msg12, msg16, msg17, msg18, msg19, msg20, theResource:tag [data].

const keyEncStoC, keyEncCtoS, keyEncAtoC, keyEncCtoA, keyEncAtoTTP, keyEncTTPtoA: ktag [data].
const keyEncStoCTemp, keyEncCtoSTemp, keyEncAtoCTemp, keyEncCtoATemp, keyEncTTPtoVer, keyEncVertoTTP, keyEncTTPtoVerTemp, keyEncVertoTTPTemp: ktag [data].
const symkForResource, symk0, symk1, symk2, symk3, symk4, symk5, symk6, symk7, symk8, symk9, symk10, symk12, symk13, symk14, symk15, symk16, symk17, symk18, symk19:ktag[data].
const dec_vpr_msg, dec_vpr_2_msg, vp_msg, vp_2_msg: tag[data].
const sig_gsu, sig_gsa, sig_gsav, sig_gsc, sig_gsttp, sig_gsv, sig_hash_res:  ktag [data].
const gsu, gsa, gsav, gsc, gsttp, gsv:  ktag [data].

(* START hash *)
fun hash_pk(PublicKey): bitstring.
fun hash_fork(bitstring): SymmetricKey.
fun hash(bitstring): bitstring.
(* End hash *)

(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(* START digital signature *)
fun sig_hash_k(SymmetricKey(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:SymmetricKey,sk:SecretKey; check_hash_k(msg,sig_hash_k(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(*DEFS*)
fun ch(bitstring): channel.
fun chSymK(SymmetricKey): channel.



const g: G.
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).


(* SECRECY *)

free vp_fromProver: bitstring [private].
free resource_fromVerifier: bitstring [private].
free resource_fromApp: bitstring [private].
free resource_fromTTP:bitstring[private].


(* AUTHENTICATION *)

event auth_AppCompletesProtocol(bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring).
event auth_UserCompletesProtocol(bitstring,bitstring,bitstring, bitstring, bitstring).
event auth_VerifierCompletesProtocol(bitstring, bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring).
event auth_AppCompletesProtocolFull(bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring, bitstring,bitstring, bitstring,bitstring).
event auth_VerifierCompletesProtocolFull(bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring).

(* App -> User *)
event auth_AppSendsLastMessageToUser(bitstring, bitstring, bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring).
event verifierInConeOfUser(bitstring, bitstring,bitstring,bitstring,bitstring).

(* User -> App *)
event auth_UserSendsLastMessageToApp(bitstring,bitstring, bitstring, bitstring,bitstring).

(* Verifier -> App *)
event auth_VerifierSendsLastMessageToApp(bitstring, bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).
event auth_VerifierSendsLastMessageToAppFull(bitstring, bitstring,bitstring,bitstring,bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).

(* App -> Verifier *)
event auth_AppSendsLastMessageToVerifier(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_AppCompletesProtocolWithUser(bitstring, bitstring,bitstring, bitstring, bitstring,bitstring,bitstring, bitstring).
event auth_TTPSendsLastMessageToVerifier(bitstring, bitstring).
event auth_TTPSendsLastMessageToVerifierFull(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event auth_TTPInConeOfApp(bitstring, bitstring, bitstring).
event auth_AppInConeOfVerifier(bitstring, bitstring, bitstring, bitstring).

event auth_TTPSendsLastMessageToApp(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event auth_TTPCompleteProtocolFull(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event auth_TTPCompleteProtocol(bitstring, bitstring, bitstring).


event reach.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Definition for the attacker *)
free sk_E:SecretKey.
free exp_E:exponent.
free e:bitstring.
free euri:bitstring.

let user(talksOnlyToHonest:bool, c:channel, u:bitstring, exp_u:exponent, sku:SecretKey, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, exp_v:G, vc:bitstring, uri:bitstring) =
    (* Message H1 User -> App *)

    new su: exponent;
    let g_su = exp(g, su) in
    let K0 = exp(exp_a, su) in
    let h0 = hash_fork((g_su, exp_a, K0)) in
    let symk_ua_enc_temp = hash_fork((K0, h0, keyEncCtoSTemp)) in
    new symk_5:SymmetricKey;
    let diddoc_su_signed = (g_su, sig(hash((sig_gsu, pka, g_su)),sku)) in
    let h_1 = (KEXDHINIT, aenc((gsu, g_su), pka), enc((symk5, symk_5), symk_ua_enc_temp), enc(diddoc_su_signed, symk_5)) in
    out(c, (msgH1, h_1));

    (* Message H2 App -> User *)
    in(c, (=msgH2, h_2:bitstring));
    let (=KEXDHREPLY, g_sa_enc: bitstring, symk_6_enc: bitstring, diddoc_sa_signed_enc:bitstring) = h_2 in
    let (=gsa, g_sa:G) = adec(g_sa_enc, sku) in
    let K = exp(g_sa, su) in
    let h = hash_fork((g_su, g_sa, K)) in
    let symk_ua_enc = hash_fork((K, h, keyEncCtoS)) in
    let symk_ua_dec = hash_fork((K, h, keyEncStoC)) in
    let (=symk6, symk_6:SymmetricKey) = dec(symk_6_enc, symk_ua_dec) in
    let (g_sa':G, g_sa_signed:bitstring) = dec(diddoc_sa_signed_enc, symk_6) in
    if check(hash((sig_gsa, pk(sku), g_sa)), g_sa_signed , pka) then



    (* Message H3 User -> App *)
    (* Send ack to the App *)
    new symk_7: SymmetricKey;
    new ack:bitstring;
    let symk2_enc = enc((symk7, symk_7), symk_ua_enc) in
    let h_3 = (symk2_enc, enc((tagH3, ack), symk_7)) in
    out(c,(msgH3, h_3));
    

    (* Message 5 App -> User *)
    (* This is the VPR sent by the Verifier to the App, and then signed by the App for the User *)
    in(c, (=msg5, m_5:bitstring));
    let (symk8_enc:bitstring, m5_enc:bitstring) = m_5 in
    let (=symk8, symk_8:SymmetricKey) = dec(symk8_enc, symk_ua_dec) in
    let (=tag5, n_r:bitstring,  v':bitstring, vpr_signed:bitstring) = dec(m5_enc, symk_8)  in
    if (v = v') then
    let (=dec_vpr_2_msg, vpr_rec:bitstring, sig_vpr_2:bitstring) = vpr_signed in
    (* Check if the signature applied by the App is genuine *)
    if (check(vpr_rec, sig_vpr_2, pka)) then

    let (=dec_vpr_msg, v'':bitstring, rule':bitstring, n_c:bitstring) = vpr_rec in
    let (u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    (* Check that these are field we expect to sign  *)
    if ((u', uri', a', v'') = (u, uri, a, v)) then
    
    (* Message 6 User -> App *)
    (* Produce the VP as response to the VPR *)
    let vp = (vp_msg, (vpr_rec, vc), sig((vpr_rec, vc), sku)) in
    new symk_9:SymmetricKey;
    let symk9_enc = enc((symk9, symk_9), symk_ua_enc) in
    let m_6 = (symk9_enc, enc((tag6, n_r, vp), symk_9)) in
    
    event auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5,m_6);
    out(c, (msg6, m_6));
    
    if talksOnlyToHonest then
        event auth_UserCompletesProtocol(h_1, h_2, h_3, m_5, m_6)|
        out(ch(vp), vp_fromProver);

    0.

let app(talksOnlyToHonest:bool, c:channel,c2:channel, c3:channel, a:bitstring, exp_a:exponent, ska:SecretKey,  u:bitstring, pku:PublicKey, exp_u:G, v:bitstring, pkv:PublicKey, exp_v:G, i:bitstring, pki:PublicKey, ttp:bitstring, pk_ttp:PublicKey, exp_ttp:G ,uri:bitstring) =

    (* Message 1 App -> CSS *)
    (* Send the communication request *)
    new sav: exponent;
    let g_sav = exp(g, sav) in
    let KC_temp = exp(exp_v, sav) in
    let hc_temp = hash_fork((exp_v, g_sav, KC_temp)) in
    let symk_av_enc_temp = hash_fork((KC_temp, hc_temp, keyEncAtoCTemp)) in
    new symk_0:SymmetricKey;
    let diddoc_sav_signed = (g_sav, sig(hash((sig_gsav, pkv, g_sav)), ska)) in
    let m_1 = (KEXDHINITSERVER, aenc((gsav, g_sav), pkv), enc((symk0, symk_0), symk_av_enc_temp), enc(diddoc_sav_signed, symk_0)) in
    out(c2, (msg1,m_1));

    (* Message 2 CSS -> App *)
    (* Send the response *)
    in(c2, (=msg2, m_2:bitstring));
    let (=KEXDHREPLYSERVER, g_sc_enc: bitstring, symk1_enc: bitstring, g_sc_signed_enc:bitstring) = m_2 in
    let(=gsc, g_sc:G) = adec(g_sc_enc, ska) in
    let KC = exp(g_sc, sav) in
    let hc = hash_fork((g_sc, g_sav, KC)) in
    let symk_av_enc = hash_fork((KC, hc, keyEncAtoC)) in
    let symk_av_dec = hash_fork((KC, hc, keyEncCtoA)) in
    let (=symk1, symk_1:SymmetricKey) = dec(symk1_enc, symk_av_dec) in
    let (g_sc':G, g_sc_sisn:bitstring) = dec(g_sc_signed_enc, symk_1) in
    if check(hash((sig_gsc, pk(ska), g_sc)), g_sc_sisn, pkv) then


    (* Message 3 App -> CSS *)
    (* Send ack to the CSS *)
    new symk_2: SymmetricKey;
    new ack_css:bitstring;
    let symk2_enc = enc((symk2, symk_2), symk_av_enc) in
    let m_3 = (symk2_enc, enc((tag3, ack_css), symk_2)) in
    out(c2,(msg3, m_3));

    (* Message 4 App -> CSS *)
    (* Send (i, v, u, uri, a) to the CSS *)
    new symk_3: SymmetricKey;
    let symk3_enc = enc((symk3, symk_3), symk_av_enc) in
    let m_4 = (symk3_enc, enc((tag4, (i, v, u, uri, a)), symk_3)) in
    out(c2,(msg4, m_4));

    (* Message VPR CSS -> App *)
    (* Receive the VPR = (v, rule, n_v) from the CSS *)
    in(c2, (=msgVPR, m_vpr:bitstring));
    let (symk4_enc:bitstring, m_vpr_enc:bitstring) = m_vpr in
    let (=symk4, symk_4:SymmetricKey) = dec(symk4_enc, symk_av_dec) in
    let (=tagVPR, dec_vpr:bitstring) = dec(m_vpr_enc, symk_4)  in
    let (=dec_vpr_msg, v':bitstring, rule':bitstring, n_c':bitstring) = dec_vpr in
    let(u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    if ((v', u', i', uri', a') = (v, u, i, uri, a)) then  (*Who knows, maybe server is starting behaving maliciously *)

    (* Message H1 User -> App *)
    (* Receive the communication request *)
    in(c, (=msgH1, h_1:bitstring));
    let (=KEXDHINIT, g_su_enc: bitstring, symk5_enc:bitstring, g_su_signed_enc:bitstring) = h_1 in
    let (=gsu, g_su:G) = adec(g_su_enc, ska) in
    let K_temp = exp(g_su, exp_a) in
    let h_temp = hash_fork((g_su, exp(g, exp_a), K_temp)) in
    let symk_ua_dec_temp = hash_fork((K_temp, h_temp, keyEncCtoSTemp)) in
    let (=symk5, symk_5:SymmetricKey) = dec(symk5_enc, symk_ua_dec_temp) in
    let (g_su':G, g_su_sign:bitstring) = dec(g_su_signed_enc, symk_5) in
    if check(hash((sig_gsu, pk(ska), g_su)), g_su_sign, pku) then
    

    (* Message H2 App -> User *)
    (* Send the response *)
    new sa: exponent;
    let g_sa = exp(g, sa) in
    let K = exp(g_su, sa) in
    (*let h = hash_fork(((g_su, g_sa, K), keyEncStoCTemp)) in*)
    let h = hash_fork((g_su, g_sa, K)) in
    let symk_ua_enc = hash_fork((K, h, keyEncStoC)) in
    let symk_ua_dec = hash_fork((K, h, keyEncCtoS)) in

    new symk_6:SymmetricKey;
    let diddoc_sa_enc = (g_sa, sig(hash((sig_gsa, pku, g_sa)), ska)) in
    let h_2 = (KEXDHREPLY, aenc((gsa, g_sa), pku), enc((symk6, symk_6), symk_ua_enc), enc(diddoc_sa_enc, symk_6)) in 
    out(c, (msgH2, h_2));

    (* Message H3 User -> App *)
    (* Receive the ack, no need to check anything on this *)
    in(c, (=msgH3, h_3:bitstring));

    (* Message 5 App -> User *)
    (* Send the VPR^2, which is the VPR signed with secret key of app + nonce *)
    new n_r:bitstring;
    let vpr_signed = (dec_vpr_2_msg, dec_vpr, sig(dec_vpr, ska)) in
    new symk_8:SymmetricKey;
    let symk8_enc = enc((symk8, symk_8), symk_ua_enc) in
    let m_5 = (symk8_enc, enc((tag5, n_r, v, vpr_signed), symk_8)) in

    event auth_AppSendsLastMessageToUser(m_1,m_2,m_3, m_4, m_vpr, h_1, h_2, h_3, m_5);
    out(c, (msg5, m_5));

    (* Here we are able to reach the process, line 286. After this we are not able to reach*)
    
    (* Message 6 User -> App *)
    in(c, (=msg6, m_6:bitstring));
    let (symk9_enc:bitstring, m6_enc:bitstring) = m_6 in
    let (=symk9, symk_9:SymmetricKey) = dec(symk9_enc, symk_ua_dec) in
    let (=tag6, n_r':bitstring, vp_signed:bitstring) = dec(m6_enc, symk_9) in
    if n_r = n_r'  then
    let (=vp_msg, vp:bitstring, sign_on_vp:bitstring) = vp_signed in
    if (check(vp, sign_on_vp, pku)) then
    let vp_2_prev = (vp_2_msg, vp_signed, sig(vp_signed, ska)) in
    event reach;
    
    (* Message VP^2 App -> CSS *)
    new symk_10:SymmetricKey;
    let symk10_enc = enc((symk10, symk_10), symk_av_enc) in
    let m_vp_2 = (symk10_enc, enc((tag_vp_2,vp_2_prev),symk_10)) in
    out(c2, (msgVP2, m_vp_2));


    (* Message 10 CSS -> App *)
    in(c2, (=msg10, m_10:bitstring));
    let (symk16_enc:bitstring, m10_enc:bitstring) = m_10 in
    (* We cannot yet access the content of resource *)
    (* But I start extracting the messages *)
    let (=symk16, symk_16:SymmetricKey) = dec(symk16_enc, symk_av_dec) in
    let (=tag10, m10_dec:bitstring) = dec(m10_enc, symk_16) in
    let (encrypted_k15':bitstring, encrypted_resource':bitstring, hash_resource':bitstring) = m10_dec in

    (* Message 11 App -> CSS *)
    (* Now we can sign the hash of the resource and retrnsmit it to the CSS *)
    new symk_k17: SymmetricKey;
    let encrypted_k17 = enc((symk17, symk_k17), symk_av_enc) in
    let msg_sign = ((sig_hash_res, hash_resource'), sig((sig_hash_res, hash_resource'), ska)) in
    let m_11 = (encrypted_k17, (tag11, enc(msg_sign, symk_k17))) in
    event auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11);
    out(c2,(msg11, m_11));

    (* Message K15 CSS -> App *)
    in(c2, (=msgK15, k_15:bitstring));
    let (symk18_enc:bitstring, k_15_enc:bitstring) = k_15 in
    let (=symk18, symk_18:SymmetricKey) =  dec(symk18_enc, symk_av_dec) in
    let (=tag15K, skForSkForRes:SymmetricKey) = dec(k_15_enc, symk_18) in
    (* Now I can decrypt the resource *)
    let (=theResource, resource':bitstring) = dec(encrypted_resource', skForSkForRes) in
 
    (*if (hash(resource') = hash_resource' then*)
        (* Everything ok, not go to the TTP *)
        
        (* Start handshake with the TTP *)
        new dhsecretATTP: exponent;
        let dhpublicATTP = exp(g, dhsecretATTP) in
        let m_16 = (tag16, dhpublicATTP) in
        out(c3,(msg16, m_16));

        (* Receive the respond message *)
        in(c3, (=msg17, m_17:bitstring));
        let (=tag17, dhpublicTTP: G, sign_ttp: bitstring) = m_17 in
        let K_ttp = exp(dhpublicTTP, dhsecretATTP) in
        let h_ttp = hash_fork((dhpublicATTP, dhpublicTTP, K_ttp)) in
        if check_hash_k(h_ttp, sign_ttp, pk_ttp) = true then

        let symk_attp_enc = hash_fork((K_ttp, h_ttp, keyEncAtoTTP)) in
        let symk_attp_dec = hash_fork((K_ttp, h_ttp, keyEncTTPtoA)) in
    
        (* Transmit the msg signed, msg received by the CSS *)
        let m_18 = enc((tag18, m10_dec, msg_sign), symk_attp_enc) in
        out(c3, (msg18, m_18));

        (* Receive the key for decrypt *)
        in (c3, (=msg19, m_19:bitstring));
        let (=tag19, symkForDecrypt:SymmetricKey) = dec(m_19, symk_attp_dec)  in
        let (=theResource, resource'':bitstring) = dec(encrypted_resource', symkForDecrypt) in
        if (hash((theResource, resource'')) = hash_resource') then
        if (talksOnlyToHonest) then
        event auth_AppInConeOfVerifier(m_16, m_17, m_18, m_19);
        event auth_AppCompletesProtocol(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11, k_15);
        out(ch(resource'), resource_fromApp);
        event auth_AppCompletesProtocolFull(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11, m_16, m_17, m_18, m_19);
        out(ch(resource''), resource_fromTTP);
    0.

let verifier(talksOnlyToHonest:bool, c:channel, c2:channel, v:bitstring, exp_v:exponent, skv:SecretKey, u:bitstring, pku:PublicKey, exp_u:G, a:bitstring, pka:PublicKey, exp_a:G, i:bitstring, pki:PublicKey, ttp:bitstring, pkttp:PublicKey, exp_ttp:G, uri:bitstring) =
    
    (* Message 1 App -> CSS *)
    in(c, (=msg1, m_1:bitstring));
    let (=KEXDHINITSERVER, g_sav_enc: bitstring, symk0_enc:bitstring, g_sav_enc_signed:bitstring) = m_1 in
    let (=gsav, g_sav:G) = adec(g_sav_enc, skv) in
    let K0 = exp(g_sav, exp_v) in
    let h0 = hash_fork((exp(g, exp_v), g_sav, K0)) in

    let symk_av_dec_temp = hash_fork((K0, h0, keyEncAtoCTemp)) in
    let (=symk0, symk_0:SymmetricKey) = dec(symk0_enc, symk_av_dec_temp) in
    let (g_sav':G, sign_g_sav:bitstring) = dec(g_sav_enc_signed, symk_0) in
    if check(hash((sig_gsav, pk(skv), g_sav)), sign_g_sav, pka) then
    
    (* Message 2 CSS -> App *)
    new sc: exponent;
    let g_sc = exp(g, sc) in
    let K = exp(g_sav, sc) in
    let h = hash_fork((g_sc, g_sav, K)) in
    let symk_av_enc = hash_fork((K, h, keyEncCtoA)) in
    let symk_av_dec = hash_fork((K, h, keyEncAtoC)) in
    new symk_1:SymmetricKey;
    let diddoc_sc_signed = (g_sc,sig(hash((sig_gsc, pka, g_sc)), skv)) in
    let m_2 = (KEXDHREPLYSERVER, aenc((gsc, g_sc), pka), enc((symk1, symk_1), symk_av_enc), enc(diddoc_sc_signed, symk_1)) in 
    out(c, (msg2, m_2));



    (* Message 3 App -> CSS *)
    (* Receive the ack, no need to check anything on this *)
    in(c, (=msg3, m_3:bitstring));

    (* Message 5 App -> CSS *)
    (* Send the VPR Request, so send the information about (i, v, u, uri, a) *)
    in(c, (=msg4, m_4:bitstring));
    let (symk3_enc:bitstring, m4_enc:bitstring) = m_4 in
    let (=symk3, symk_3:SymmetricKey) = dec(symk3_enc, symk_av_dec) in
    let (=tag4, (i':bitstring, v':bitstring, u':bitstring, uri':bitstring, a':bitstring)) =  dec(m4_enc,symk_3) in
    if (i', v', u', uri', a') = (i, v, u, uri, a) then

    (* Message VPR CSS -> App *)
    (* Generate the VPR for the User, and send it to the App *)
    new n_c:bitstring;
    let rule = (u, i, uri, a) in
    let vpr_send_prev = (dec_vpr_msg, v, rule, n_c)  in
    new symk_4:SymmetricKey;
    let enc_symk4 = enc((symk4, symk_4),symk_av_enc) in
    let m_vpr = (enc_symk4, enc((tagVPR, vpr_send_prev), symk_4))  in
    event verifierInConeOfUser(m_1,m_2,m_3,m_4,m_vpr);
    out(c, (msgVPR, m_vpr));

    (* Message VP_2 App -> CSS *)
    (* Receive the VP^2 and checks for the signature applied *)
    in(c, (=msgVP2, m_vp_2:bitstring));
    let (symk10_enc:bitstring, m_vp_2_enc:bitstring) = m_vp_2 in
    let (=symk10, symk_10:SymmetricKey) = dec(symk10_enc, symk_av_dec) in
    let (=tag_vp_2, vp_signed_2:bitstring) = dec(m_vp_2_enc, symk_10) in
    let (=vp_2_msg, vp_signed:bitstring, vp_sign_2:bitstring) = vp_signed_2 in
    if (check(vp_signed, vp_sign_2, pka)) then


    let (=vp_msg, vp:bitstring, sign_vp:bitstring) = vp_signed in
    if check(vp, sign_vp, pku) then
    (* VP = (VPR, VC) *)
    let (vpr_rec:bitstring, vc_rec_signed:bitstring) = vp in

    let (vc_rec:bitstring, sign_vc_rec:bitstring) = vc_rec_signed in
    if check(vc_rec, sign_vc_rec, pki) then

    let (iss'':bitstring, u'':bitstring) = vc_rec in
    if (iss'', u'') = (i, u) then
    let (=dec_vpr_msg, v'':bitstring, rule'':bitstring, n_c'':bitstring) = vpr_rec in
    if (v'', rule'', n_c'') = (v, rule, n_c) then

    let (u''':bitstring, i''':bitstring, uri''':bitstring, a''':bitstring) = rule'' in
    if (u''', i''', uri''', a''') = (u, i, uri, a) then
    
    (* Begin communication with TTP *)
    (* Message 7 CSS -> TTP *)
    new sv: exponent;
    let g_sv = exp(g, sv) in
    let K3_temp = exp(exp_ttp, sv) in
    let h3_temp = hash_fork((exp_ttp, g_sv, K3_temp)) in
    let symk_ttpv_enc_temp = hash_fork((K3_temp, h3_temp, keyEncVertoTTPTemp)) in
    new symk_12:SymmetricKey;
    let diddoc_sv_signed = (g_sv, sig(hash((sig_gsttp, pkttp, g_sv)), skv)) in
    let m_7 = (KEXDHINITTTP, aenc((gsv, g_sv), pkttp), enc((symk12, symk_12), symk_ttpv_enc_temp), enc(diddoc_sv_signed, symk_12)) in 
    out(c2, (msg7, m_7));

    (* Message 8 TTP -> CSS *)
    in(c2, (=msg8, m_8:bitstring));
    let (=KEXDHREPLYTTP, g_sttp_enc: bitstring, symk13_enc:bitstring, g_sttp_enc_signed:bitstring) = m_8 in
    let (=gsttp, g_sttp:G) = adec(g_sttp_enc, skv) in
    let K3 = exp(g_sttp, sv) in
    let h3 = hash_fork((g_sttp, g_sv, K3)) in

    let symk_ttpv_enc = hash_fork((K3, h3, keyEncVertoTTP)) in
    let symk_ttpv_dec = hash_fork((K3, h3, keyEncTTPtoVer)) in
    let (=symk13, symk_13:SymmetricKey) = dec(symk13_enc, symk_ttpv_dec) in
    let (g_sttp':G, sign_g_sttp:bitstring) = dec(g_sttp_enc_signed, symk_13) in
    if check(hash((sig_gsttp, pk(skv), g_sttp)), sign_g_sttp, pkttp) then

    
    (* Message 9 CSS -> TTP *)
    (* Send ack to the TTP *)
    new symk_14: SymmetricKey;
    new ack_ttp:bitstring;
    let symk14_enc = enc((symk14, symk_14), symk_av_enc) in
    let m_9 = (symk14_enc, enc((tag9, ack_ttp), symk_14)) in
    out(c2,(msg9, m_9));

    (* Once the verifier conclude the handshake with the TTP, then it is able to generate the encrypted resource to send to the App *)

    (* First generate the message we have to send to the App *)
    new symk_k15: SymmetricKey; (* The key that will be used by TTP to decrypt the resource in the case it is necessary *)
    let encrypted_k15 = enc((symk15, symk_k15), symk_ttpv_enc) in
    (* Compute the hash of the resource and the key used *)
    new resource:bitstring;
    let m_res = (encrypted_k15, enc((theResource, resource), symk_k15), hash((theResource, resource))) in

    (* Message 10 - CSS -> App *)
    (* Message containing the encrypted resource *)
    new symk_k16: SymmetricKey;
    let encrypted_k16 = enc((symk16, symk_k16), symk_av_enc) in
    let m_10 = (encrypted_k16, enc((tag10, m_res), symk_k16)) in
    out(c, (msg10, m_10));


    (* Message 11 - App -> CSS *)
    (* Message containing the signature applied over the resoruce *)
    in(c, (=msg11, m_11:bitstring));
    let (symk17_enc:bitstring, m_11_enc:bitstring) = m_11 in
    let (=symk17, symk_17:SymmetricKey) = dec(symk17_enc, symk_av_dec) in
    let (=tag11, m11_dec:bitstring) = dec(m_11_enc, symk_17) in
    let (m11_received:bitstring, m11_signature:bitstring) = m11_dec in
    if (check(m11_received, m11_signature, pka)) then (* The message has been authentically signed*)
    if (m11_received = hash((theResource, resource))) then (* The App correctly signed only the hash we sent *)


    (* Message 15 - CSS -> App *) 
    (* Send the key for decrypting the resource to the App *)
    new symk_k18: SymmetricKey;
    let encrypted_k18 = enc((symk18, symk_k18), symk_av_enc) in
    let k_15 =(encrypted_k18, enc((tag15K, symk_k15), symk_k18)) in

    event auth_VerifierSendsLastMessageToApp(m_1, m_2, m_3, m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15);
    event auth_VerifierSendsLastMessageToAppFull(m_1, m_2, m_3, m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11);
    out(c, (msgK15, k_15));

    in(c2, (=msg12, m_12:bitstring));
    let (symk19_enc:bitstring, m_12_enc:bitstring) = m_12 in
    let (=symk19, symk_19:SymmetricKey) = dec(symk19_enc, symk_ttpv_dec) in
    let (=tag11, m11_dec_bis:bitstring) = dec(m_12_enc, symk_19) in
    let (resHashFromAppByTTP:bitstring, sigResHashFromAppByTTP:bitstring) = m11_dec_bis in
    if check(resHashFromAppByTTP, sigResHashFromAppByTTP, pka) then
    let (=sig_hash_res, hashSigned:bitstring) = resHashFromAppByTTP in
    if hash((theResource, resource)) = hashSigned then

    if talksOnlyToHonest then
        event auth_VerifierCompletesProtocol(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15)|
        event auth_VerifierCompletesProtocolFull(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, m_12)|
        out(ch(resource), resource_fromVerifier);
    
    0.

let trustedThirdParty(talksOnlyToHonest:bool, c:channel, c2:channel, ttp:bitstring, exp_ttp:exponent, sk_ttp:SecretKey,a:bitstring, pka:PublicKey, exp_a:G,  v:bitstring, pkv:PublicKey, exp_v:G) =
    
    (* Message 7 CSS -> TTP *)
    in(c, (=msg7, m_7:bitstring));
    let (=KEXDHINITTTP, g_sv_enc: bitstring, symk_12_enc: bitstring, diddoc_sv_signed_enc:bitstring) = m_7 in
    let (=gsv, g_sv:G) = adec(g_sv_enc, sk_ttp) in
    let K = exp(g_sv, exp_ttp) in
    let h = hash_fork((exp(g, exp_ttp), g_sv, K)) in
    let symk_ttpv_dec_temp = hash_fork((K, h, keyEncVertoTTPTemp)) in
    let (=symk12, symk_12:SymmetricKey) = dec(symk_12_enc, h) in
    let (g_sv':G, g_sv_signed:bitstring) = dec(diddoc_sv_signed_enc, symk_12) in
    if check((sig_gsttp, pk(sk_ttp), g_sv), g_sv_signed , pkv) then

    (* Message 8 TTP -> CSS *)
    new sttp: exponent;
    let g_sttp = exp(g, sttp) in
    let K0 = exp(g_sv, sttp) in
    let h0 = hash_fork((g_sttp, g_sv, K0)) in

    let symk_ttpv_enc = hash_fork((K0, h0, keyEncTTPtoVer)) in
    let symk_ttpv_dec = hash_fork((K0, h0, keyEncVertoTTP)) in
    new symk_13:SymmetricKey;
    let diddoc_sttp_signed = (g_sttp, sig((sig_gsttp, pkv, g_sttp),sk_ttp)) in
    let m_8 = (KEXDHREPLYTTP, aenc((gsttp, g_sttp), pkv), enc((symk13, symk_13), symk_ttpv_enc), enc(diddoc_sttp_signed, symk_13)) in
    event auth_TTPSendsLastMessageToVerifier(m_7, m_8);
    out(c, (msg8, m_8));

    (* Message 9 CSS -> TTP *)
    (* Receive the ack, no need to check anything on this *)
    in(c, (=msg9, m_9:bitstring));

    event auth_TTPInConeOfApp(m_7, m_8, m_9);


    (*Receive message from App - This is the thrid message *)

    (* HTTPS Handshake between App and TTP *)
    in(c2, (=msg16, m_16:bitstring));
    let (=tag16, dhpublicATTP: G) = m_16 in
    new dhsecretTTPA: exponent;
    let dhpublicTTPA = exp(g, dhsecretTTPA) in
    let K_app = exp(dhpublicATTP, dhsecretTTPA) in
    let h_app = hash_fork((dhpublicATTP, dhpublicTTPA, K_app)) in
    let m_17 = (tag17, dhpublicTTPA, sig_hash_k(h_app, sk_ttp)) in 
    out(c2, (msg17, m_17));
    

    let symk_attp_enc = hash_fork((K_app, h_app, keyEncTTPtoA)) in
    let symk_attp_dec = hash_fork((K_app, h_app, keyEncAtoTTP)) in

    in(c2, (=msg18, m_18:bitstring));
    let (=tag18, m_10:bitstring, m_11:bitstring) = dec(m_18,symk_attp_dec) in
    let (res_hash_wrap:bitstring, sig_res_hash':bitstring) = m_11 in
    if (check(res_hash_wrap, sig_res_hash', pka)) then
    let (=sig_hash_res, res_hash':bitstring) = res_hash_wrap in
    
    let (encrypted_k15':bitstring, encrypted_resource':bitstring, hash_resource':bitstring) = m_10 in

    let (=symk15, keyForDecryptResource:SymmetricKey) = dec(encrypted_k15', symk_ttpv_dec) in
    let (=theResource, dec_res:bitstring) = dec(encrypted_resource', keyForDecryptResource) in
    if hash((theResource, dec_res)) = res_hash' then (* The App is not an attacker because signed the right hash *)

    let m_19=enc((tag19, keyForDecryptResource), symk_attp_enc) in
    out(c2, (msg19, m_19));
    event auth_TTPSendsLastMessageToApp(m_7, m_8, m_9, m_16, m_17, m_18, m_19);

    new symk_k19: SymmetricKey;
    let encrypted_k19 = enc((symk19, symk_k19), symk_ttpv_enc) in
    let m_12 = (encrypted_k19, enc((tag11, (res_hash_wrap, sig_res_hash')), symk_k19)) in
    event auth_TTPSendsLastMessageToVerifierFull(m_7, m_8,m_16, m_17, m_18, m_19, m_12);
    out(c, (msg12, m_12));
    
    if (talksOnlyToHonest) then
        event auth_TTPCompleteProtocolFull(m_7, m_8, m_9, m_16, m_17, m_18, m_19, m_12)|
        event auth_TTPCompleteProtocol(m_7, m_8, m_9);

    0.
(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Sanity Check *)
query event(reach).

(* SECRECY *)
query attacker(vp_fromProver). 
query attacker(resource_fromApp). 
query attacker(resource_fromVerifier).
query attacker(resource_fromTTP).

query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring; 
    inj-event(auth_UserCompletesProtocol(h_1, h_2, h_3, m_5, m_6))
    ==>
    inj-event(auth_AppSendsLastMessageToUser(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5))
    &&
    inj-event(verifierInConeOfUser(m_1, m_2, m_3, m_4, m_vpr)).
    
(* If the TTP reveals the message at the end, then the TTP must receive a message from the App (third message)  *)
(* Without asking the key to the TTP *)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp_2:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, k_15:bitstring; 
   inj-event(auth_AppCompletesProtocol(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5, m_6, m_vp_2, m_10, m_11, k_15))
    ==>
    inj-event(auth_VerifierSendsLastMessageToApp(m_1, m_2, m_3, m_4, m_vpr, m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPInConeOfApp(m_7, m_8, m_9)).  

(* Asking the key to the TTP *)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp_2:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, k_15:bitstring,m_16:bitstring, m_17:bitstring, m_18:bitstring, m_19:bitstring; 
    inj-event(auth_AppCompletesProtocolFull(m_1, m_2, m_3, m_4, m_vpr, h_1, h_2, h_3, m_5, m_6, m_vp_2, m_10, m_11, m_16, m_17, m_18, m_19))
    ==>
    inj-event(auth_VerifierSendsLastMessageToAppFull(m_1, m_2, m_3, m_4, m_vpr, m_vp_2, m_7, m_8, m_9, m_10, m_11))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPSendsLastMessageToApp(m_7, m_8, m_9, m_16, m_17, m_18, m_19)). 

query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring,m_vp_2:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, k_15:bitstring,m_16:bitstring, m_17:bitstring, m_18:bitstring, m_19:bitstring; 
    inj-event(auth_VerifierCompletesProtocol(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, k_15))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPSendsLastMessageToVerifier(m_7, m_8)).

query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, h_1:bitstring, h_2:bitstring, h_3:bitstring,m_vp_2:bitstring, m_vpr:bitstring, m_5:bitstring, m_6:bitstring, m_vp:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, m_12:bitstring,m_16:bitstring, m_17:bitstring, m_18:bitstring, m_19:bitstring; 
    inj-event(auth_VerifierCompletesProtocolFull(m_1, m_2, m_3,m_4, m_vpr,m_vp_2, m_7, m_8, m_9, m_10, m_11, m_12))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1, m_2, m_3,m_4, m_vpr, h_1, h_2, h_3, m_5,m_6, m_vp_2, m_10, m_11))
    &&
    inj-event(auth_AppInConeOfVerifier(m_16, m_17, m_18, m_19))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6))
    &&
    inj-event(auth_TTPSendsLastMessageToVerifierFull(m_7, m_8, m_16, m_17, m_18, m_19, m_12)).


(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

(* Define the channels *)
free c:channel. (* For User - App*)
free c2:channel. (* For App - Verifier *)
free c3:channel. (* For Verifier - TTP *)
free c4:channel. (* For App - TTP *)

process (*use root process for setup *)

    (* create identities *)
    new u:bitstring;
    new a:bitstring;
    new v:bitstring;
    new i:bitstring;
    new ttp:bitstring;

    (*advertise identities*)
    out(c,u);
    out(c,a);
    out(c,v);
    out(c, i);
    out(c, ttp);

    (*declare secret keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;
    new sk_ttp:SecretKey;


    new exp_u:exponent;
    new exp_a:exponent;
    new exp_v:exponent;
    new exp_i:exponent;
    new exp_ttp:exponent;

    out(c, exp(g, exp_u));
    out(c, exp(g, exp_a));
    out(c, exp(g, exp_v));
    out(c, exp(g, exp_i));
    out(c, exp(g, exp_ttp));
    
    (*advertise public keys*)
    out(c,pk(sku));
    out(c,pk(ska));
    out(c,pk(skv));
    out(c,pk(ski));
    out(c, pk(sk_ttp));

    let vc = ((i, u), sig((i, u), ski)) in

    (*let agents dance*)
    (
        (!app(true,  c, c2, c4, a, exp_a, ska, u, pk(sku),  exp(g,exp_u), v, pk(skv),  exp(g,exp_v), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp),uri_req)) |
        (*(!app(false, c, c2, c4, a, exp_a, ska, e, pk(sk_E), exp(g,exp_E), v, pk(skv),  exp(g,exp_v), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp),uri_req)) |
        (!app(false, c, c2, c4, a, exp_a, ska, u, pk(sku),  exp(g,exp_u), e, pk(sk_E), exp(g,exp_E), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!app(false, c, c2, c4, a, exp_a, ska, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), i, pk(ski), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |*)
        (!verifier(true,  c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), a, pk(ska),  exp(g,exp_a), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
       (*(!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), a, pk(ska),  exp(g,exp_a), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), e, pk(sk_E), exp(g,exp_E), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), i, pk(ski),  ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), a, pk(ska),  exp(g,exp_a), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), a, pk(ska),  exp(g,exp_a), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, u, pk(sku),  exp(g,exp_u), e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) |
        (!verifier(false, c2, c3, v, exp_v, skv, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), ttp, pk(sk_ttp), exp(g,exp_ttp), uri_req)) | *)
        (!user(true,  c, u, exp_u, sku, a, pk(ska),  exp(g,exp_a), v, pk(skv),  exp(g,exp_v), vc, uri_req))
        (*(!user(false, c, u, exp_u, sku, e, pk(sk_E), exp(g,exp_E), v, pk(skv),  exp(g,exp_v), vc, uri_req)) |
        (!user(false, c, u, exp_u, sku, a, pk(ska),  exp(g,exp_a), e, pk(sk_E), exp(g,exp_E), vc, euri)) |
        (!user(false, c, u, exp_u, sku, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E), vc, euri)) *)
        (*(!trustedThirdParty(true,  c3, c4, ttp, exp_ttp, sk_ttp, a, pk(ska),  exp(g,exp_a), v, pk(skv),  exp(g,exp_v))) |
        (!trustedThirdParty(false, c3, c4, ttp, exp_ttp, sk_ttp, e, pk(sk_E), exp(g,exp_E), v, pk(skv),  exp(g,exp_v))) |
        (!trustedThirdParty(false, c3, c4, ttp, exp_ttp, sk_ttp, a, pk(ska),  exp(g,exp_a), e, pk(sk_E), exp(g,exp_E))) |
        (!trustedThirdParty(false, c3, c4, ttp, exp_ttp, sk_ttp, e, pk(sk_E), exp(g,exp_E), e, pk(sk_E), exp(g,exp_E)))*)
    
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)