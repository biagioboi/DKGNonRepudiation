(* --------------------------------------------------------------------------------------------------------- *)
(* DIDComm *)
(* This is the partial version of the entire protocol where we send the plain resource                       *)
(* and the protocol ends at this point                                                                       *)
(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)
(* Each message in plaintext is identified by mx, where x is the progressive counter. *)
(* Each message is wrapped and identified by Mx which contains the mx, plus all the informations for the encryption e.g. Mx = (enc(k_0, shared_secret), enc(g2x, pkx), enc(mx, k_0))  *)
(* Each wrapped message sent over the channel is tagged with a tag in the form of tag_IDMSG, where IDMSG = {Mx in case of wrapped messages, mx in case of plain messages, nx in case of nonce messages}*) 
(* All the message identified by $m_x$, are now identified by mx, without underscore *)
(* All the signature applied over the generator are firstly hashed, e.g. s_g2sav = sig(hash_gen(g2sav), skx) *)
(* The inizilize vectors are not considered as nonce, since their usage does not influence the security of the protocol since they are sent in plaintext over the channel *)
(* Each symmetric key encryption, and message encryption contains a tag. e.g. enc_m1 = ((tag_m1, m1), kx); enc_k1 = ((tag_k1, k1), shared_secret) *)
(* Each generation of shared secret contains a tag identifying the shared secret. e.g. g2x2y = (tag_g2xg2y, hash_gen(g(g2x, y)))*)
(* Each encryption of generator will be concatenated with the related tag e.g. aenc_g2x = aenc((tag_g2x, g2x), pkz) *)
(* To simplify the protocol, after the handshake and the establishment of shared secret, We don't send each time the session key *)

(* Types Definition *)
type SymmetricKey.  (* Symmetric Keys *)
type SecretKey.     (* Secret Keys *)
type PublicKey.     (* Public Keys*)
type G.             (* Generator *)
type exponent.      (* Exponent *)
type DID.           (* DID *)
type nonce.         (* Nonce *)

(* Tags Definition *)
type tag.   (* Tag for message *)
type ktag.  (* Tag for symmetric key *)
type etag.  (* Tag for exponent *)
(*set preciseActions = trueWithoutArgsInNames.
%set movenew = true. *)
set unifyDerivation = true .
set explainDerivation = true.
set displayDerivation = true.
 set traceDisplay = long.

(* Tags for the wrapping of the nonce in plaintext *)
const tag_th0, tag_th2 :tag [data].

(* Tags for the encapsulation of the messages in plaintext *)
const tag_m1, tag_m2, tag_m3, tag_m4, tag_m5, tag_m6, tag_m7, tag_m8, tag_m9, tag_m10, tag_m11:tag [data].

(* Tags for the encapsulation of the key in plaintext *)
const tag_k0, tag_k1, tag_k2, tag_k3, tag_k4, tag_k5, tag_k6, tag_k7, tag_k8, tag_k9, tag_k10 :ktag [data].

(* Tags for the encapsulation of the messages in cyphertext *)
const tag_M1, tag_M2, tag_M3, tag_M4, tag_M5, tag_M6, tag_M7, tag_M8, tag_M9, tag_M10, tag_M11 :tag [data].

(* Tags for the generation of shared_secret *)
const tag_g2v2sav, tag_g2sc2sav, tag_g2a2su, tag_g2su2sa :etag [data].

(* Tags for the asymmetric encryption of generator *)
const tag_g2sav, tag_g2sc, tag_g2su, tag_g2sa :etag [data].

(* Constants needed *)
const uri_req:bitstring.    (* URI of the request *)
const g: G.                 (* Generator for the g^x *)

(* One-Way Functions *)
fun hash_gen(G):bitstring.              (* Hash of G *)
fun bit2symk(bitstring):SymmetricKey.
fun Gtb(G):bitstring.                   (* Generator to obtain a bitstring *)
fun hash(bitstring): bitstring.         (* Hash of bitstring*)
fun pk(SecretKey):PublicKey.            (* Public Key Function *)

(* Functions *)

(* Exponent *)
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).

(* Symmetric Encryption *)
fun senc(bitstring, SymmetricKey):bitstring.
reduc forall msg:bitstring,symk:SymmetricKey; sdec(senc(msg,symk),symk)=msg.

(* Generator Asymmetric Encryption *)
fun aenc(bitstring, PublicKey):bitstring.
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg.

(* Classical Digital Signature *)
fun sig(bitstring, SecretKey):bitstring.
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true.

(* Function for Generating DIDs from Generator *)
fun gen_DID(G (*such that DID can not be inferred by others*)):DID.

(* Channel for the defense *)
fun ch(bitstring): channel.         (* Messages channel *)
fun chSymK(SymmetricKey): channel.  (* SymmetricKey channel *)


(* Secrecy *)
free vp_fromUser: bitstring [private].              (* VP Released by the User *)
free resource_fromVerifier: bitstring [private].    (* Resource released by the Verifier *)
free resource_fromApp: bitstring [private].         (* Resource released by the App *)

(* Authentication *)

(* User authenticates the App *)
event auth_UserCompletesProtocolWithApp(bitstring).
event auth_AppSendsLastMessageToUser(bitstring).

(* App authenticates the User *)
event auth_AppCompletesProtocolWithUser(bitstring).
event auth_UserSendsLastMessageToApp(bitstring).

(* Verifier authenticates the App *)
event auth_VerfierCompletesProtocolWithApp1_1(bitstring).
event auth_VerfierCompletesProtocolWithApp2_1(bitstring).
event auth_AppSendsLastMessageToVerifier1_1(bitstring).
event auth_AppSendsLastMessageToVerifier2_1(bitstring).

event auth_VerfierCompletesProtocolWithApp1_2(bitstring).
event auth_VerfierCompletesProtocolWithApp2_2(bitstring).
event auth_AppSendsLastMessageToVerifier1_2(bitstring).
event auth_AppSendsLastMessageToVerifier2_2(bitstring).

(* App authenticates the Verifier *)
event auth_AppCompletesProtocolWithVerifier(bitstring).
event auth_VerifierSendsLastMessageToApp(bitstring).
event reach.
event reachEndUser(bitstring, bitstring, bitstring, bitstring, bitstring).
event reachEndApp(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event reachEndCSS(bitstring, bitstring, bitstring, bitstring, bitstring).


(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

let user(talksOnlyToHonest:bool,  c_u2a:channel, DID_u:DID, u:exponent, sku:SecretKey, DID_a:DID, pka:PublicKey, g2a:G, DID_v:DID, pkv:PublicKey,  g2v:G, DID_i:DID, pki:PublicKey, vc:bitstring, uri:bitstring) =
    
    (* Private Definitions of exponent, SymmetricKey and nonce *)
    new su:exponent;
    new k4:SymmetricKey; new k6:SymmetricKey; new k8:SymmetricKey;
    new th3:nonce;
    
    in(c_u2a, (=tag_th2, th2':nonce));
    let g2su:G = exp(g, su) in
    let m5:bitstring = (th2', th3, sig(hash_gen(g2su), sku)) in
    let g2a2su:SymmetricKey = bit2symk((tag_g2a2su, hash_gen(exp(g2a, su)))) in
    let M5:bitstring = (senc((tag_k4, k4), g2a2su), aenc((tag_g2su, g2su), pka), senc((tag_m5, m5), k4)) in
    out(c_u2a, (tag_M5, M5));

    in(c_u2a, (=tag_M6, M6':bitstring));
    let (enc_k5:bitstring, enc_g2sa:bitstring, enc_m6:bitstring) = M6' in
    let (=tag_g2sa, g2sa':G) = adec(enc_g2sa, sku) in
    let g2su2sa = bit2symk((tag_g2su2sa, hash_gen(exp(g2sa', su)))) in
    let (=tag_k5, k5':SymmetricKey) = sdec(enc_k5, g2su2sa) in
    let (=tag_m6, m6':bitstring) = sdec(enc_m6, k5') in
    let (th3':nonce, s4:bitstring) = m6' in
    if check(hash_gen(g2sa'), s4, pka) then
    if (th3' = th3) then

    new m7:bitstring;
    let M7:bitstring = (senc((tag_k6, k6),g2su2sa), senc((tag_m7, m7), k6)) in
    out(c_u2a, (tag_M7, M7));

    in(c_u2a, (=tag_M8, M8':bitstring));
    let (enc_k7:bitstring, enc_m8:bitstring) = M8' in
    let (=tag_k7, k7':SymmetricKey) = sdec(enc_k7, g2su2sa) in
    let (=tag_m8, m8':bitstring) = sdec(enc_m8, k7') in 
    let (vpr2':bitstring, s5:bitstring) = m8' in
    let (m4':bitstring, nr':bitstring) = vpr2' in
    if check(hash(vpr2'), s5, pka) then
    (* To add check on VPR - m4' *)
      

    let vp:bitstring = (nr', m4', vc) in
    let m9:bitstring = (vp, sig(hash(vp), sku)) in
    let M9 = (senc((tag_k8, k8), g2su2sa), senc((tag_m9, m9), k8)) in
    (*event auth_UserSendsLastMessageToApp(senc((tag_m9, m9), k8));
     event reachEndUser(M5, M6', M7, M8', M9); *)
    out(c_u2a, (tag_M9, M9));

    if talksOnlyToHonest then
        (*event auth_UserCompletesProtocolWithApp(enc_m8);*)
        out(ch(vp), vp_fromUser);
    0.

let app(talksOnlyToHonest:bool, c_a2v:channel, c_u2a:channel, DID_a:DID, a:exponent, ska:SecretKey,  DID_u:DID, pku:PublicKey, g2u:G, DID_v:DID, pkv:PublicKey, g2v:G, DID_i:DID, pki:PublicKey ,uri:bitstring) =
    
    (* Private Definitions of exponent, SymmetricKey and nonce *)
    new sav:exponent; new sa:exponent;
    new k0:SymmetricKey; new k2:SymmetricKey; new k5:SymmetricKey; new k7:SymmetricKey; new k9:SymmetricKey;
    new th1:nonce; new th2:nonce; new nr:nonce;

    in(c_a2v, (=tag_th0, th0':nonce));
    let g2sav:G = exp(g, sav) in
    let m1:bitstring = (th0', th1, sig(hash_gen(g2sav), ska)) in
    let g2v2sav:SymmetricKey = bit2symk((tag_g2v2sav, hash_gen(exp(g2v, sav)))) in
    let M1:bitstring = (senc((tag_k0, k0), g2v2sav), aenc((tag_g2sav, g2sav), pkv), senc((tag_m1, m1), k0)) in
    out(c_a2v, (tag_M1, M1));


    in(c_a2v, (=tag_M2, M2':bitstring));
    let (enc_k1:bitstring, enc_g2sc:bitstring, enc_m2:bitstring) = M2' in
    let (=tag_g2sc, g2sc':G) = adec(enc_g2sc, ska) in
    let g2sc2sav:SymmetricKey = bit2symk((tag_g2sc2sav, hash_gen(exp(g2sc', sav)))) in
    let (=tag_k1, k1':SymmetricKey) = sdec(enc_k1, g2sc2sav) in
    let (=tag_m2, m2':bitstring) = sdec(enc_m2, k1') in
    let (th1':nonce, s2:bitstring) = m2' in
    if check(hash_gen(g2sc'), s2, pkv) then
    if (th1' = th1) then

    let m3:bitstring = (DID_i, DID_v, DID_u, DID_a, uri) in
    let M3:bitstring = (senc((tag_k2, k2), g2sc2sav), senc((tag_m3, m3), k2)) in 
    out(c_a2v, (tag_M3, M3));

    in(c_a2v, (=tag_M4, M4':bitstring));
    let (k3_enc:bitstring, m4_enc:bitstring) = M4' in
    let (=tag_k3, k3':SymmetricKey) = sdec(k3_enc, g2sc2sav) in
    let (=tag_m4, m4':bitstring) = sdec(m4_enc, k3') in
    let (attr':bitstring, uri':bitstring, nc':nonce) = m4' in
    if (uri' = uri) then
    
    out(c_u2a, (tag_th2, th2));
    in(c_u2a, (=tag_M5, M5':bitstring));
    let (enc_k4:bitstring, enc_g2su:bitstring, enc_m5:bitstring) = M5' in
    let (=tag_g2su, g2su':G) = adec(enc_g2su, ska) in
    let g2a2su:SymmetricKey = bit2symk((tag_g2a2su, hash_gen(exp(g2su', a)))) in
    let (=tag_k4, k4':SymmetricKey) = sdec(enc_k4, g2a2su) in
    let (=tag_m5, m5':bitstring) = sdec(enc_m5, k4') in
    let (th2':nonce, th3':nonce, s3:bitstring) = m5' in
    if check(hash_gen(g2su'), s3, pku) then
    if (th2' = th2) then

    let g2sa = exp(g, sa) in
    let m6:bitstring = (th3', sig(hash_gen(g2sa), ska)) in
    let g2su2sa:SymmetricKey = bit2symk((tag_g2su2sa, hash_gen(exp(g2su', sa)))) in
    let M6:bitstring = (senc((tag_k5, k5), g2su2sa), aenc((tag_g2sa, g2sa), pku), senc((tag_m6, m6), k5)) in
    out(c_u2a, (tag_M6, M6));

    in(c_u2a, (=tag_M7, M7':bitstring));
    let (enc_k6:bitstring, enc_m7:bitstring) = M7' in
    let (=tag_k6, k6':SymmetricKey) = sdec(enc_k6, g2su2sa) in
    let (=tag_m7, m7':bitstring) = sdec(enc_m7, k6') in

    let vpr2 = (m4', nr) in
    let m8 = (vpr2, sig(hash(vpr2), ska)) in
    let M8 = (senc((tag_k7, k7), g2su2sa), senc((tag_m8, m8), k7)) in
    (*event auth_AppSendsLastMessageToUser(senc((tag_m8, m8), k7));*)
    out(c_u2a, (tag_M8, M8));

    in(c_u2a, (=tag_M9, M9':bitstring));
    let (enc_k8:bitstring, enc_m9:bitstring) = M9' in
    let (=tag_k8, k8':SymmetricKey) = sdec(enc_k8, g2su2sa) in
    let (=tag_m9, m9':bitstring) = sdec(enc_m9, k8') in
    let (vp':bitstring, s6:bitstring) = m9' in
    let (nr':nonce, m4'':bitstring, vc':bitstring) = vp' in
    if check(hash(vp'), s6, pku) then
    if nr' = nr then

    let m10 = (m9', sig(hash(m9'), ska)) in
    let M10 = (senc((tag_k9, k9),g2sc2sav), senc((tag_m10, m10), k9)) in
    (* event reachEndApp(M1, M2', M3, M4', M5', M6, M7', M8, M9', M10); *)
    event auth_AppSendsLastMessageToVerifier1_1(k3_enc);
    event auth_AppSendsLastMessageToVerifier2_1(m4_enc);
    event auth_AppSendsLastMessageToVerifier1_2(senc((tag_k9, k9),g2sc2sav));
    event auth_AppSendsLastMessageToVerifier2_2(senc((tag_m10, m10), k9));
    out(c_a2v, (tag_M10, M10));

    in(c_a2v, (=tag_M11, M11':bitstring));
    let (enc_k10:bitstring, enc_m11:bitstring) = M11' in
    let (=tag_k10, k10':SymmetricKey) = sdec(enc_k10, g2sc2sav) in
    let (=tag_m11, m11':bitstring) = sdec(enc_m11, k10') in
    let (resource':bitstring) = m11' in
    if talksOnlyToHonest then
        (*event auth_AppCompletesProtocolWithUser(enc_m9)|
        event auth_AppCompletesProtocolWithVerifier(enc_m11)|*)
        out(ch(m11'), resource_fromApp);
    
    0.

let verifier(talksOnlyToHonest:bool,  c_a2v:channel, DID_v:DID, v:exponent, skv:SecretKey, DID_u:DID, pku:PublicKey, g2u:G, DID_a:DID, pka:PublicKey,  g2a:G, DID_i:DID, pki:PublicKey, claims:bitstring, uri:bitstring) =

    (* Private Definitions of exponent, SymmetricKey and nonce *)
    new sc:exponent;
    new k1:SymmetricKey; new k3:SymmetricKey; new k10:SymmetricKey;
    new th0:nonce; new nc:nonce;
    let rule = (DID_i, DID_v, DID_u, DID_a, uri) in
    let attr = (DID_u, DID_i, claims) in

    out(c_a2v, (tag_th0, th0)); 
    in(c_a2v, (=tag_M1, M1':bitstring));
    let (enc_k0:bitstring, enc_g2sav:bitstring, enc_m1:bitstring) = M1' in
    let (=tag_g2sav, g2sav':G) = adec(enc_g2sav, skv) in
    let g2v2sav:SymmetricKey = bit2symk((tag_g2v2sav, hash_gen(exp(g2sav', v)))) in
    let (=tag_k0, k0':SymmetricKey) = sdec(enc_k0, g2v2sav) in
    let (=tag_m1, m1':bitstring) = sdec(enc_m1, k0') in
    let (th0':nonce, th1':nonce, s1:bitstring) = m1' in
    if check(hash_gen(g2sav'), s1, pka) then
    if (th0' = th0) then

    let g2sc:G = exp(g, sc) in
    let g2sc2sav:SymmetricKey = bit2symk((tag_g2sc2sav, hash_gen(exp(g2sav', sc)))) in
    let m2:bitstring = (th1', sig(hash_gen(g2sc), skv)) in
    let M2:bitstring = (senc((tag_k1, k1), g2sc2sav), aenc((tag_g2sc, g2sc), pka), senc((tag_m2, m2), k1)) in
    out(c_a2v, (tag_M2, M2));

    in(c_a2v, (=tag_M3, M3':bitstring));
    let (enc_k2:bitstring, enc_m3:bitstring) = M3' in
    let (=tag_k2, k2':SymmetricKey) = sdec(enc_k2, g2sc2sav) in
    let (=tag_m3, m3':bitstring) = sdec(enc_m3, k2') in
    if (m3' = rule) then

    let m4:bitstring = (attr, uri, nc) in
    let M4:bitstring = (senc((tag_k3, k3), g2sc2sav), senc((tag_m4, m4), k3)) in
    out(c_a2v, (tag_M4, M4));

    in(c_a2v, (=tag_M10, M10':bitstring));
    let (=tag_m10, enc_k9:bitstring, enc_m10:bitstring) = M10' in
    let (=tag_k9, k9':SymmetricKey) = sdec(enc_k9, g2sc2sav) in
    let (=tag_m10, m10':bitstring) = sdec(enc_m10, k9') in
    let (m9'':bitstring, s7:bitstring) = m10' in
    let (vp'':bitstring, s6':bitstring) = m9'' in
    let (nr'':bitstring, m4'':bitstring, vc'':bitstring) = vp'' in
    let (attr'':bitstring, uri'':bitstring, nc'':nonce) = m4'' in
    if check(hash(m9''), s7, pka) then
    if check(hash(vp''), s6', pku) then
    if nc'' = nc then
    let (vc_claims:bitstring, sig_vc_claims:bitstring) = vc'' in
    if check(hash(vc_claims), sig_vc_claims, pki) then
    let (attr''':bitstring, DID_i''':DID, DID_u''':DID) =vc_claims in
    if (attr''' = attr) then


    new resource:bitstring;
    let m11:bitstring = resource in
    let M11:bitstring = (senc((tag_k10, k10), g2sc2sav), senc((tag_m11, m11), k10)) in
    (* event auth_VerifierSendsLastMessageToApp(senc((tag_m11, m11), k10)); *)
    out(c_a2v, (tag_M11, M11));
    (* event reachEndCSS(M1', M2, M3', M4, M10'); *)

       (*event reach;*)
    if talksOnlyToHonest then

        event auth_VerfierCompletesProtocolWithApp1_1(senc((tag_k3, k3), g2sc2sav));
        event auth_VerfierCompletesProtocolWithApp2_1(senc((tag_m4, m4), k3));
        event auth_VerfierCompletesProtocolWithApp1_2(enc_k9);
        event auth_VerfierCompletesProtocolWithApp2_2(enc_m10);
        out(ch(resource), resource_fromVerifier);
    0.

(* SECRECY *)

(*query attacker(vp_fromUser).
query attacker(resource_fromApp).
query attacker(resource_fromVerifier). *)

(*query M9:bitstring;
      event(auth_AppCompletesProtocolWithUser(M9)) ==> event(auth_UserSendsLastMessageToApp(M9)).
      
query M8:bitstring;
      event(auth_UserCompletesProtocolWithApp(M8)) ==> event(auth_AppSendsLastMessageToUser(M8)).

query M11:bitstring;
    event (auth_AppCompletesProtocolWithVerifier(M11)) ==> event(auth_VerifierSendsLastMessageToApp(M11)).*)

(* This might be used for checking the authentication *)
query K9:bitstring, M10:bitstring;
    (event(auth_VerfierCompletesProtocolWithApp1_2(K9)) && event(auth_VerfierCompletesProtocolWithApp1_2(M10)))==> (event(auth_AppSendsLastMessageToVerifier1_2(K9)) && event(auth_AppSendsLastMessageToVerifier1_2(M10))).

(* This might be used for checking the agreement *)
query  K3:bitstring, K9:bitstring, M4:bitstring, M10:bitstring;
    (event (auth_VerfierCompletesProtocolWithApp1_1(K3)) && event(auth_VerfierCompletesProtocolWithApp1_1(M4)) && event (auth_VerfierCompletesProtocolWithApp1_2(K9)) && event(auth_VerfierCompletesProtocolWithApp1_2(M10))) ==> (event(auth_AppSendsLastMessageToVerifier1_1(K3)) && event(auth_AppSendsLastMessageToVerifier1_1(M4)) && event(auth_AppSendsLastMessageToVerifier1_2(K9)) && event(auth_AppSendsLastMessageToVerifier1_2(M10))).

(* (* Give me false, this should be okay because all the three events are executed *)
query M1:bitstring, M2:bitstring, M3:bitstring, M4:bitstring, M5:bitstring, M6:bitstring, M7:bitstring, M8:bitstring, M9:bitstring, M10:bitstring;
    event(reachEndUser(M5, M6, M7, M8, M9)) && event(reachEndApp(M1, M2, M3, M4, M5, M6, M7, M8, M9, M10)) && event(reachEndCSS(M1, M2, M3, M4, M10)). *)


(* Define the channels *)
free c:channel.
free c_u2a:channel. (* For User - App*)
free c_a2v:channel. (* For App - Verifier *)

process (*use root process for setup *)


    (* Declare Secret Keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;

    (* Declare Exponents *)
    new u:exponent;
    new a:exponent;
    new v:exponent;
    new i:exponent;

    (* Advertise Public Exponent (Generators)*)
    out(c, exp(g, u));
    out(c, exp(g, a));
    out(c, exp(g, v));
    
    (* Advertise Public Keys *)
    out(c, pk(sku));
    out(c, pk(ska));
    out(c, pk(skv));
    out(c, pk(ski));


    (* Declare identities *)
    let DID_u = gen_DID(exp(g, u)) in
    let DID_a = gen_DID(exp(g, a)) in
    let DID_v = gen_DID(exp(g, v)) in
    let DID_i = gen_DID(exp(g, i)) in

    (* Advertise identities*)
    out(c, DID_u);
    out(c, DID_a);
    out(c, DID_v);
    out(c, DID_i);
    
    new claims:bitstring;
    let attr = (DID_u, DID_i, claims) in
    let vc = ((attr, DID_i, DID_u), sig(hash((attr, DID_i, DID_u)), ski)) in
   

    (

        (!verifier(true,  c_a2v,  DID_v, v, skv, DID_u, pk(sku), exp(g,u), DID_a, pk(ska),  exp(g,a), DID_i, pk(ski), claims, uri_req)) |
        (!app(true, c_a2v, c_u2a, DID_a, a, ska, DID_u, pk(sku), exp(g,u), DID_v, pk(skv), exp(g,v), DID_i, pk(ski), uri_req)) |
        (!user(true,  c_u2a, DID_u, u, sku, DID_a, pk(ska), exp(g,a), DID_v, pk(skv),  exp(g,v), DID_i, pk(ski), vc, uri_req))
    
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)