(* --------------------------------------------------------------------------------------------------------- *)
(* DIDComm Connect *)                                                                                             
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)
(* Since iv is public and the symmetric encryption leverage iv, we do not include it in the protocol since it is useless, do not add any strenght or weakenesses for the construction of AES *)
(* START keys *)
type SymmetricKey.
type SecretKey.
type PublicKey.
type key.
fun pk(SecretKey):PublicKey.

(* END keys *)

(* END Exponential *)
type G.
type exponent.
(* END Exponential *)

const g: G[data].
const uri_req:bitstring.
const usr:bitstring.
const scope:bitstring.
const resource:bitstring.

(* m1: app -> css - Request of Connection *)
(* m2: css -> app - Response to the request *)
(* m3: app -> css - Complete the connection *)
(* m4: app -> css - Send a Request of URI *)
(* vpr: css -> app - Send a VPR for the requested URI *)
(* h1: user -> app  - Request of Connection *)
(* h2: app -> user - Response to the request *)
(* h3: user -> app - Complete the connection *)
(* m5: app -> user - Send the Wrapped VPR *)
(* m6: user -> app - Send the VP *)
(* vp_2: app -> CSS - Send the wrapped VP *)
(* m7: CSS -> TTP - Request of Connection *)
(* m8: TTP -> CSS - Response to the Request *)
(* m9: CSS -> TTP - Complete the connection *)
(* m10: CSS -> app - Send the encrypted resource *)
(* m11: app -> CSS - Send the signature applied over the enc res *)
(* m12: CSS -> app - Send the encryption key *)
const tag1:bitstring.
const tag2:bitstring.
const tag3:bitstring.
const tag4:bitstring.
const tag5:bitstring.
const tag_vpr:bitstring.
const tag_h1:bitstring.
const tag_h2:bitstring.
const tag_h3:bitstring.
const tag6:bitstring.
const tag_vp_2:bitstring.
const tag7:bitstring.
const tag8:bitstring.
const tag9:bitstring.
const tag10:bitstring.
const tag11:bitstring.
const tag12:bitstring.



(* START hash *)
fun hash(bitstring): bitstring.
fun hash_pk(PublicKey): bitstring.
(* End hash *)

(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).

fun symk_to_bit(SymmetricKey): bitstring.
reduc forall symk:SymmetricKey; bit_to_symk(symk_to_bit(symk)) = symk.
(* END symmetric encryption *)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(* START Diffie-Hellman Exponential *)
fun exp(G, exponent): G.
equation forall x:exponent, y:exponent; exp(exp(g, x), y) = exp(exp(g, y), x).
(* END Diffie-Hellman Exponential *)

(* START Classic Encryption *)

(* Function for converting G - (g^a)^b to a SymmetricKey *)
fun gen_to_sym(G): SymmetricKey.

(* Function for converting received bitstring to G - (g^a)^b *)
(* Also used to generate DIDDoc *)
fun gen_to_bitstring(G): bitstring.
reduc forall gen:G; bitstring_to_gen(gen_to_bitstring(gen)) = gen.

(* START symmetric key encryption *)
fun skenc(SymmetricKey(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg - in our case a key*).
reduc forall msg:SymmetricKey,symk:SymmetricKey; skdec(skenc(msg,symk),symk)=msg (*symmetric decrypt - in our case using g^a^b*).
(* END symmetric key encryption *)

(*DEFS*)
fun ch(bitstring): channel.
fun chSymK(SymmetricKey): channel.
fun chDIDDoc(bitstring): channel.


(* SECRECY *)

free symk_0: bitstring [private].
free symk_5: bitstring [private].
free rule_fromVerifier: bitstring [private].
free vp_fromProver: bitstring [private].
free vp_fromVerifier: bitstring [private].
free cred_fromVerifier: bitstring [private].
free SymkForResource: bitstring [private].
free access_token_fromApp: bitstring [private].

(* AUTHENTICATION *)

event auth_AppCompletesProtocol(bitstring,bitstring, bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring,bitstring, bitstring, bitstring, bitstring).
event auth_UserCompletesProtocol(bitstring,bitstring,bitstring,bitstring,bitstring).
event auth_VerifierCompletesProtocol(bitstring,bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, SymmetricKey).

(* App -> User *)
event auth_AppSendsLastMessageToUser(bitstring,bitstring,bitstring,bitstring, bitstring, bitstring, bitstring, bitstring).
event verifierInConeOfUser(bitstring,bitstring, bitstring,bitstring,bitstring).

(* User -> App *)
event auth_UserSendsLastMessageToApp(bitstring,bitstring,bitstring, bitstring,bitstring).

(* Verifier -> App *)
event auth_VerifierSendsLastMessageToApp(bitstring,bitstring,bitstring,bitstring, bitstring,bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, SymmetricKey).

(* App -> Verifier *)
event auth_AppSendsLastMessageToVerifier(bitstring, bitstring, bitstring, bitstring, bitstring,bitstring,bitstring,bitstring,bitstring,bitstring, bitstring).
event auth_AppCompletesProtocolWithUser(bitstring, bitstring, bitstring,bitstring, bitstring, bitstring,bitstring,bitstring, bitstring).



(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

let user(talksOnlyToHonest:bool, c:channel, u:bitstring, sku:SecretKey, u_exp: exponent, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, vc:bitstring, uri:bitstring) =
    (* Simly because we need it later on *)
    let ((i_cred:bitstring, u_cred:bitstring), sig_cred:bitstring) = vc in

    (* Message H1 *)
    new su: exponent;
    let exp_su = exp(g, su) in
    new symk_k5: SymmetricKey;
    let diddoc = gen_to_bitstring(exp_su) in  (* Represent DIDDoc(g^{su}) *)
    let h_1 = (diddoc, sig(diddoc, sku)) in
    let encrypted_k5 = skenc(symk_k5, gen_to_sym(exp(exp_a, su))) in
    let bitstring_exp_su = gen_to_bitstring(exp_su) in
    out(c,(tag_h1, encrypted_k5, aenc(bitstring_exp_su, pka), enc(h_1, symk_k5)));

    (* Receive Message H2 *)
    in(c, h_2:bitstring);
    let (tag_h2':bitstring, encrypted_k6':bitstring, aenc_gena':bitstring, h_2':bitstring) = h_2 in
    if (tag_h2 = tag_h2') then
    let gen_a = bitstring_to_gen(adec(aenc_gena', sku)) in
    let shared_secret_final = exp(gen_a, su) in (* Different from the previous because now is computed using the session key of application *)
    let symk_k6' = skdec(encrypted_k6', gen_to_sym(shared_secret_final)) in
    let dec_h2 = dec(h_2', symk_k6') in (* Here it is the message *)
    let (diddoc_1':bitstring, sig_1':bitstring) = dec_h2 in
    let (gen_1':G) = bitstring_to_gen(diddoc_1') in
    if talksOnlyToHonest then
    if (check(diddoc_1', sig_1', pka)) then
    (* This is a really important check because otherwise we can falsify the DIDDoc *)
    if (gen_1'=gen_a) then

    (* Message H3 *)
    new symk_k7: SymmetricKey;
    new ack:bitstring;
    let h_3 = ack in
    let encrypted_k7 = skenc(symk_k7, gen_to_sym(shared_secret_final)) in
    out(c,(tag_h3, encrypted_k7, aenc(bitstring_exp_su, pka) ,enc(h_3, symk_k7)));

    (* Receive Message 5 *)
    in(c, m_5:bitstring);
    let (tag_m5':bitstring, encrypted_k8':bitstring, aenc_gena_m6':bitstring, m_5':bitstring) = m_5 in
    if (tag5 = tag_m5') then
    (*  CONSIDERATION
        Actually, here we are leveraging the past shared secret, but we can also compute the current shared secret
        Anyway, if we compute the shared secret each time, we also have to check it each time, w.r.t that one contained
        in the DIDDoc, which is much more closer to what is implemented in Credo.ts. *)
    (*  What really happens in the library is that once we define a shared secret, despite continue to sending it,
        it alwats check w.r.t. to the first one defined for the session. *)
    let symk_k8' = skdec(encrypted_k8', gen_to_sym(shared_secret_final)) in
    let dec_m5 = dec(m_5', symk_k8') in (* Here it is the message *)
    let (vpr_2:bitstring, sig_vpr_2:bitstring) = dec_m5 in
    let (vpr_rec:bitstring, scope':bitstring) = vpr_2 in
    let (rule':bitstring, usr':bitstring, n_c:bitstring) = vpr_rec in
    let (u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    (*  We trust the signature applied by the verifier because we trust the app, which already checked on this, 
        so we just check the signature applied by the app *)
    if (check(vpr_2, sig_vpr_2, pka)) then
    if ((u', i', uri', a') = (u, i_cred, uri, a)) then

    (* Message 6 *)
    new symk_k9: SymmetricKey;
    let vp = (vpr_rec, vc) in
    let m_6 = (vp, sig(vp, sku)) in
    let encrypted_k9 = skenc(symk_k9, gen_to_sym(shared_secret_final)) in
    event auth_UserSendsLastMessageToApp(h_1, h_2,h_3, m_5,m_6);
    out(c,(tag_h3, encrypted_k9, aenc(bitstring_exp_su, pka) ,enc(m_6, symk_k9)));

    if talksOnlyToHonest then
        event auth_UserCompletesProtocol(h_1, h_2,h_3, m_5,m_6)|
        out(ch(vp), vp_fromProver);
    0.

let app(talksOnlyToHonest:bool, c:channel, a:bitstring, ska:SecretKey,exp_a:exponent, u:bitstring, pku:PublicKey, exp_u:G, i:bitstring, pki:PublicKey, exp_i:G, v:bitstring, pkv:PublicKey, exp_v:G, uri:bitstring, good_resp:bitstring) =

    (* Message 1 *)
    new sav: exponent;
    let exp_sav = exp(g, sav) in
    new symk_k0: SymmetricKey;
    let diddoc = gen_to_bitstring(exp_sav) in  (* Represent DIDDoc(g^{sav}) *)
    let m_1 = (diddoc, sig(diddoc, ska)) in
    let sharedSecret = gen_to_sym(exp(exp_v, sav)) in (* (g^v)^sav*)
    let encrypted_k0 = skenc(symk_k0, sharedSecret) in
    let bitstring_exp_sav = gen_to_bitstring(exp_sav) in
    out(c,(tag1, encrypted_k0, aenc(bitstring_exp_sav, pkv) ,enc(m_1, symk_k0)));

    (* Receive Message 2 *)
    in(c, m_2:bitstring);
    let (tag2':bitstring, encrypted_k1':bitstring, aenc_genv':bitstring, m_2':bitstring) = m_2 in
    if (tag2 = tag2') then
    let gen_v = bitstring_to_gen(adec(aenc_genv', ska)) in
    let shared_secret_final = exp(gen_v, sav) in (* Different from the previous because now is computed using the session key of verifier*)
    let symk_k1' = skdec(encrypted_k1', gen_to_sym(shared_secret_final)) in
    let dec_m2 = dec(m_2', symk_k1') in (* Here it is the message *)
    let (diddoc_1':bitstring, sig_1':bitstring) = dec_m2 in
    let (gen_1':G) = bitstring_to_gen(diddoc_1') in
    if talksOnlyToHonest then
    if (check(diddoc_1', sig_1', pkv)) then
    (* This is a really important check because otherwise we can falsify the DIDDoc *)
    if (gen_1'=gen_v) then

    (* Message 3 *)
    new symk_k2: SymmetricKey;
    new ack:bitstring;
    let m_3 = ack in
    let encrypted_k2 = skenc(symk_k2, gen_to_sym(shared_secret_final)) in
    out(c,(tag3, encrypted_k2, aenc(bitstring_exp_sav, pkv) ,enc(m_3, symk_k2)));

    (* Message 4 *)
    new symk_k3: SymmetricKey;
    let m_4 = (u, i, uri, a)  in
    let encrypted_k3 = skenc(symk_k3, gen_to_sym(shared_secret_final)) in
    out(c,(tag4, encrypted_k3, aenc(bitstring_exp_sav, pkv) ,enc(m_4, symk_k3)));

    (* Receive VPR *)
    in(c, vpr_r:bitstring);
    let (vpr':bitstring, encrypted_k4':bitstring, aenc_genv_m5:bitstring, vpr':bitstring) = vpr_r in
    if (tag_vpr = vpr') then
    let symk_k4' = skdec(encrypted_k4', gen_to_sym(shared_secret_final)) in
    let dec_vpr = dec(vpr', symk_k4') in (* Here it is the message *)
    let (rule':bitstring, usr':bitstring, n_c':bitstring) = dec_vpr in
    let(u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = rule' in
    if ((u', i', uri', a') = (u, i, uri, a)) then (* Who knows, maybe server is starting behaving maliciously *)

    (* Receive Message H1 *)
    in(c, h_1:bitstring);
    let (tag_h1':bitstring, encrypted_k5':bitstring, aenc_genu':bitstring, h_1':bitstring) = h_1 in
    if (tag_h1 = tag_h1') then
    let gen_u = bitstring_to_gen(adec(aenc_genu', ska)) in
    let symk_k5' = skdec(encrypted_k5', gen_to_sym( exp(gen_u, exp_a))) in
    let dec_h1 = dec(h_1', symk_k5') in (* Here it is the message *)
    let (diddoc_1_user':bitstring, sig_1_user':bitstring) = dec_h1 in
    let (gen_1_user':G) = bitstring_to_gen(diddoc_1_user') in
    if talksOnlyToHonest then
    if (check(diddoc_1_user', sig_1_user', pku)) then
    (* This is a really important check because otherwise we can falsify the DIDDoc *)
    if (gen_1_user'=gen_u) then

    (* Message H2 *)
    new sa: exponent;
    let exp_sa = exp(g, sa) in
    new symk_k6: SymmetricKey;
    let diddoc_sa = gen_to_bitstring(exp_sa) in  (* Represent DIDDoc(g^{sa}) *)
    let h_2 = (diddoc_sa, sig(diddoc_sa, ska)) in
    let encrypted_k6 = skenc(symk_k6,  gen_to_sym(exp(gen_u, sa))) in
    let bitstring_exp_sa = gen_to_bitstring(exp_sa) in
    out(c,(tag_h2, encrypted_k6, aenc(bitstring_exp_sa, pku), enc(h_2, symk_k6)));

    (* Receive Message H3 *)
    in(c, h_3:bitstring);
    let (tag_h3':bitstring, encrypted_k7':bitstring, aenc_genu_h3:bitstring, h_3':bitstring) = h_3 in
    if (tag_h3 = tag_h3') then
    let symk_k7' = skdec(encrypted_k7', gen_to_sym(exp(gen_u, sa))) in
    let dec_h3 = dec(h_3', symk_k7') in (* Here it is the message *)
    let ack_user:bitstring = dec_h3 in

    (* Message 5 *)
    new symk_k8: SymmetricKey;
    let vpr_2 = (dec_vpr, scope) in
    let m_5 = (vpr_2, sig(vpr_2, ska)) in
    let encrypted_k8 = skenc(symk_k8, gen_to_sym(exp(gen_u, sa))) in
    event auth_AppSendsLastMessageToUser(m_1,m_2,m_3,m_4,h_1, h_2, h_3,m_5);
    out(c,(tag5, encrypted_k8, aenc(bitstring_exp_sa, pku) ,enc(m_5, symk_k8)));

    (* Receive Message 6 *)
    in(c, m_6:bitstring);
    let (tag6':bitstring, encrypted_k9':bitstring, aenc_genu_m6:bitstring, m_6':bitstring) = m_6 in
    if (tag6 = tag6') then
    let symk_k9' = skdec(encrypted_k9', gen_to_sym(exp(gen_u, sa))) in
    let dec_m6 = dec(m_6', symk_k9') in (* Here it is the message *)
    let (vp':bitstring, sig_vp':bitstring) = dec_m6 in
    if (check(vp', sig_vp', pku)) then
    
    (* Message VP_2 *)
    new symk_k10: SymmetricKey;
    let vp_2 = (vp', sig(vp', ska)) in
    let encrypted_k10 = skenc(symk_k10, gen_to_sym(shared_secret_final)) in
    event auth_AppSendsLastMessageToVerifier(m_1,m_2,m_3,m_4,vpr_r,h_1,h_2,h_3,m_5,m_6,vp_2);
    out(c,(tag_vp_2, encrypted_k10, aenc(bitstring_exp_sav, pkv) ,enc(vp_2, symk_k10)));


    (* Receive Message 10 *)
    in(c, m_10:bitstring);
    let (tag10':bitstring, encrypted_k16':bitstring, aenc_genv_m10:bitstring, m_10':bitstring) = m_10 in
    if (tag10 = tag10') then
    let symk_k16' = skdec(encrypted_k16', gen_to_sym(shared_secret_final)) in
    let enc_resource_enveloped = dec(m_10', symk_k16') in (* This message cannot be entirely read by the App, since the resource is encrypted *)
    (* But I start extracting the messages *)
    (* The hash of the encrypted resource is computed as k_15 + resource *)
    let (encrypted_k15':bitstring, aenc_genv_ttp':bitstring, encrypted_resource':bitstring, hash_encrypted_resource':bitstring) = m_10' in

    (* Now we can sign this resource and retrnsmit it to the CSS *)
    let m_11 = (m_10', sig(m_10', ska)) in
    new symk_k17: SymmetricKey;
    let encrypted_k17 = skenc(symk_k17, gen_to_sym(shared_secret_final)) in
    out(c,(tag11, encrypted_k17, aenc(bitstring_exp_sav, pkv), enc(m_11, symk_k17)));

    in(c, m_12:bitstring);
    let (tag12':bitstring, encrypted_k18':bitstring, aenc_genv_m12:bitstring, m_12':bitstring) = m_12 in
    if (tag12 = tag12') then
    let symk_k18' = skdec(encrypted_k18', gen_to_sym(shared_secret_final)) in
    let symk_for_decrypting_resource:SymmetricKey = skdec(m_12', symk_k18') in
    (* Now I can decrypt the resource *)
    let resource' = dec(encrypted_resource', symk_for_decrypting_resource) in
    if (resource' = good_resp) then
    (* Everything ok, not go to the TTP *)
    if (talksOnlyToHonest) then
    event auth_AppCompletesProtocol(m_1,m_2,m_3,m_4,vpr_r,h_1,h_2,h_3,m_5,m_6,vp_2,m_10, m_11,m_12);

    0.

let verifier(talksOnlyToHonest:bool, c:channel, v:bitstring, skv:SecretKey, exp_v:exponent, u:bitstring, pku:PublicKey, exp_u:G, a:bitstring, pka:PublicKey, exp_a:G, i:bitstring, pki:PublicKey, exp_i:G, ttp:bitstring, pkttp:PublicKey, exp_ttp:G, uri:bitstring) =

    (* Receive Message 1 *)
    in(c, m_1:bitstring);
    let (tag1':bitstring, encrypted_k0':bitstring, aenc_gena':bitstring, m_1':bitstring) = m_1 in
    if (tag1 = tag1') then
    let gen_a = bitstring_to_gen(adec(aenc_gena', skv)) in
    let shared_secret = exp(gen_a, exp_v) in
    let symk_k0' = skdec(encrypted_k0', gen_to_sym(shared_secret)) in
    let dec_m1 = dec(m_1', symk_k0') in (* Here it is the message *)
    let (diddoc_1':bitstring, sig_1':bitstring) = dec_m1 in
    let (gen_1':G) = bitstring_to_gen(diddoc_1') in
    if (check(diddoc_1', sig_1', pka)) then
    (* This is a really important check because otherwise we can falsify the DIDDoc *)
    if (gen_1'=gen_a) then

    (* Message 2 *)
    new sc: exponent;
    let exp_sc = exp(g, sc) in
    new symk_k1: SymmetricKey;
    let diddoc = gen_to_bitstring(exp_sc) in  (* Represent DIDDoc(g^{sc}) *)
    let m_2 = (diddoc, sig(diddoc, skv)) in
    let sharedSecret = gen_to_sym(exp(gen_a, sc)) in (* (g^sav)^sc -> this is different from the previous because we're now using session exponent *)
    let encrypted_k0 = skenc(symk_k1, sharedSecret) in
    let bitstring_exp_sav = gen_to_bitstring(exp_sc) in
    out(c,(tag2, encrypted_k0, aenc(bitstring_exp_sav, pka), enc(m_2, symk_k1)));

    (* Receive Message 3 *)
    in(c, m_3:bitstring);
    let (tag3':bitstring, encrypted_k2':bitstring, aenc_gena_m3:bitstring, m_3':bitstring) = m_3 in
    if (tag3 = tag3') then
    let symk_k2' = skdec(encrypted_k2', gen_to_sym(shared_secret)) in
    let dec_m3 = dec(m_3', symk_k2') in (* Here it is the message *)
    let ack:bitstring = dec_m1 in
    
    (* Receive Message 4 *)
    in(c, m_4:bitstring);
    let (tag4':bitstring, encrypted_k3':bitstring, aenc_gena_m4:bitstring, m_4':bitstring) = m_4 in
    if (tag4 = tag4') then
    let symk_k3' = skdec(encrypted_k3', gen_to_sym(shared_secret)) in
    let dec_m4 = dec(m_4', symk_k3') in (* Here it is the message *)
    let(u':bitstring, i':bitstring, uri':bitstring, a':bitstring) = dec_m4  in
    (* Not sure about this check, maybe we have to define the ROLE object, which is a container for these identities *)
    if (u', i', uri', a') = (u, i, uri, a) then
    
    (* Message VPR *)
    new symk_k4: SymmetricKey;
    new n_c:bitstring;
    let rule:bitstring = (u, i, uri, a) in
    (*  Notice, we are not signing the VPR, Is this okay? If the app trust this message, means that anyone can be in
        the middle, then the user is not able to check whether this really comes from the server or it is maliciously 
        created by the application. *)
    let vpr_send = (rule, usr, n_c)  in
    let encrypted_k4 = skenc(symk_k4, gen_to_sym(shared_secret)) in
    event verifierInConeOfUser(m_1,m_2,m_3,m_4,vpr_send);
    out(c,(tag_vpr, encrypted_k4, aenc(bitstring_exp_sav, pka) ,enc(vpr_send, symk_k4)));


    (* Receive VP_2 *)
    in(c, vp_2:bitstring);
    let (tag_vp_2':bitstring, encrypted_k10':bitstring, aenc_gena_vp_2:bitstring, vp_2':bitstring) = vp_2 in
    if (tag_vp_2=tag_vp_2') then
    let symk_k10' = skdec(encrypted_k10', gen_to_sym(shared_secret)) in
    let dec_vp_2 = dec(vp_2', symk_k10') in (* Here it is the message *)
    let (vp_2':bitstring, sign_vp_2':bitstring) = dec_vp_2 in
    (* Check signature applied on the wrapping - pka *)
    if (check(vp_2', sign_vp_2', pka)) then
    let (vp':bitstring, sign_vp':bitstring) = vp_2' in
    (* Check signature applied on the VP - pku *)
    if (check(vp', sign_vp', pku)) then
    let (vpr':bitstring, vc':bitstring) = vp' in
    let ((i'':bitstring, u'':bitstring), signature_vc:bitstring) = vc' in
    let (rule'':bitstring, usr'':bitstring, n_c'':bitstring) = vpr' in
    (* Check if signature applied on VC is valid *)
    if (check((i'', u''), signature_vc, pki)) then
    (* Check if the VPR is the requested one *)
    if ((rule'', usr'', n_c'') = (rule, usr, n_c)) then

    (* Message 7 - Request of Authentication *)
    new sv: exponent;
    let exp_sv = exp(g, sv) in
    new symk_k12: SymmetricKey;
    let diddoc_sv = gen_to_bitstring(exp_sv) in  (* Represent DIDDoc(g^{sv}) *)
    let m_7 = (diddoc, sig(diddoc, skv)) in
    let sharedSecret_sv = gen_to_sym(exp(exp_ttp, exp_v)) in (* (g^ttp)^sv*)
    let encrypted_k12 = skenc(symk_k12, sharedSecret_sv) in
    let bitstring_exp_sv = gen_to_bitstring(exp_sv) in
    out(c,(tag7, encrypted_k12, aenc(bitstring_exp_sv, pkttp) ,enc(m_7, symk_k12)));


    (* Receive Message 8 *)
    in(c, m_8:bitstring);
    let (tag8':bitstring, encrypted_k13':bitstring, aenc_gensttp':bitstring, m_8':bitstring) = m_8 in
    if (tag8 = tag8') then
    let gen_sttp = bitstring_to_gen(adec(aenc_gensttp', skv)) in
    let shared_secret_final_ttp = exp(gen_sttp, sv) in
    let symk_k13' = skdec(encrypted_k13', gen_to_sym(shared_secret_final_ttp)) in
    let dec_m2 = dec(m_8', symk_k13') in (* Here it is the message *)
    let (diddoc_ttp':bitstring, sig_ttp':bitstring) = dec_m2 in
    let (gen_ttp':G) = bitstring_to_gen(diddoc_ttp') in
    if talksOnlyToHonest then
    if (check(diddoc_ttp', sig_ttp', pkttp)) then
    (* This is a really important check because otherwise we can falsify the DIDDoc *)
    if (gen_ttp'=gen_sttp) then


    (* Message 9 - Complete the auth *)
    new symk_k14: SymmetricKey;
    new ack_ttp:bitstring;
    let m_9 = ack_ttp in
    let encrypted_k14 = skenc(symk_k14, gen_to_sym(shared_secret_final_ttp)) in
    out(c,(tag3, encrypted_k14, aenc(bitstring_exp_sv, pkttp), enc(m_9, symk_k14)));


    (* Once the verifier conclude the handshake with the TTP, then it is able to generate the encrypted resource to send to the App *)

    (* First generate the message we have to send to the App *)
    new symk_k15: SymmetricKey; (* The key that will be used by TTP to decrypt the resource in the case it is necessary *)
    let encrypted_k15 = (symk_k15, gen_to_sym(shared_secret_final_ttp)) in
    (* Compute the hash between the resource and the key used *)
    let to_hash = (resource, symk_k15) in
    let m_10 = (encrypted_k15, aenc(bitstring_exp_sv, pkttp), enc(resource, symk_k15), hash(to_hash)) in

    (* Message 10 - Now send it to the App *)
    new symk_k16: SymmetricKey;
    let encrypted_k16 = skenc(symk_k16, gen_to_sym(shared_secret)) in
    out(c,(tag10, encrypted_k16, aenc(bitstring_exp_sav, pka), enc(m_10, symk_k16)));


    (* Message 11 - Receive the resource signed from the App *)
    in(c, m_11:bitstring);
    let (tag11':bitstring, encrypted_k17':bitstring, aenc_gen_app_m11':bitstring, m_11':bitstring) = m_11 in
    if (tag11 = tag11') then
    let symk_k17' = skdec(encrypted_k17', gen_to_sym(shared_secret)) in
    let dec_m11 = dec(m_11', symk_k17') in
    let (m10_received:bitstring, m10_signature:bitstring) = dec_m11 in
    if (check(m10_signature, m10_received, pka)) then (* The message has been authentically signed*)


    (* Message 12 - Send the key for decrypting the resource to the App *)
    new symk_k18: SymmetricKey;
    let encrypted_k18 = skenc(symk_k18, gen_to_sym(shared_secret)) in
    out(c,(tag12, encrypted_k18, aenc(bitstring_exp_sav, pka), skenc(symk_k15, symk_k18))); (* Send the symmetric key used for encrypting the resource *)
    

    event auth_VerifierSendsLastMessageToApp(m_1,m_2,m_3,m_4,vpr_send,vp_2,m_7, m_8, m_9, m_10, m_11, symk_k15);
    out(chSymK(symk_k15), SymkForResource);
    
    if talksOnlyToHonest then
    event auth_VerifierCompletesProtocol(m_1,m_2,m_3,m_4,vpr_send,vp_2,m_7, m_8, m_9, m_10, m_11, symk_k15)|
    out(ch(vpr_send), rule_fromVerifier);
    
    0.

let ttp(talksOnlyToHonest: bool, c:channel, t:bitstring, skttp:SecretKey, exp_ttp:exponent, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, exp_v:G) =
    
    (* Message 7 - Receive Request of Authentication *)
    in(c, m_7:bitstring);
    let (tag7':bitstring, encrypted_k12':bitstring, aenc_gsv':bitstring, m_7':bitstring) = m_7 in
    if (tag7 = tag7') then
    let gen_sv = bitstring_to_gen(adec(aenc_gsv', skttp)) in
    let shared_secret_firstmessage = exp(gen_sv, exp_ttp) in
    let symk_k12' = skdec(encrypted_k12', gen_to_sym(shared_secret_firstmessage)) in
    let dec_m7 = dec(m_7', symk_k12') in (* Here it is the message *)
    let (diddoc_1':bitstring, sig_1':bitstring) = dec_m7 in
    let (gen_1':G) = bitstring_to_gen(diddoc_1') in (* Containing the session key *)
    if talksOnlyToHonest then
    if (check(diddoc_1', sig_1', pkv)) then
    (* This is a really important check because otherwise we can falsify the DIDDoc *)
    if (gen_1'=gen_sv) then

    (* Message 8 - Respond to the request *)
    new sttp: exponent;
    let exp_sttp = exp(g, sttp) in
    new symk_k13: SymmetricKey;
    let diddoc = gen_to_bitstring(exp_sttp) in  (* Represent DIDDoc(g^{sttp}) *)
    let m_8 = (diddoc, sig(diddoc, skttp)) in
    let shared_secret_final = gen_to_sym(exp(gen_sv, sttp)) in
    let encrypted_k13 = skenc(symk_k13, shared_secret_final) in
    let bitstring_exp_sttp = gen_to_bitstring(exp_sttp) in
    out(c,(tag8, encrypted_k13, aenc(bitstring_exp_sttp, pkv), enc(m_8, symk_k13)));


    (* Message 9 - Receive complete the auth *)
    in(c, m_9:bitstring);
    let (tag9':bitstring, encrypted_k14':bitstring, aenc_gsv_m9':bitstring, m_9':bitstring) = m_9 in
    if (tag9 = tag9') then
    let symk_k14' = skdec(encrypted_k14', shared_secret_final) in
    let dec_m9 = dec(m_9', symk_k14') in (* Here it is the message *)
    let(ack_ttp':bitstring) = dec_m9  in
    
    (* Ok, completed the exchagne with Verifier, now wait if we receive something from the user *)


0.
    
(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

let open_user(c:channel, u:bitstring, sku:SecretKey, u_exp:exponent, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, vc:bitstring, uri:bitstring) =
    in(c, e:bitstring);
    in(c, e2:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    in(c, euri:bitstring);
    in(c, exp_e1:G);
    if(e = a && e2 = v) then user(true, c, u, sku, u_exp, a, pka, exp_a, v, pkv, vc, uri)
    else if(e2 = v) then user(false, c, u, sku, u_exp, e, pke1, exp_e1, v, pkv, vc, uri)
    else if(e = a) then user(false, c, u, sku, u_exp, a, pka, exp_a, e2, pke2, vc, euri) (* Notice, exp do not change for the verifier since the user only need the exp_a, not using exp_v*)
    else user(false, c, u, sku, u_exp, e, pke1, exp_e1, e2, pke2, vc, euri).

let open_app(c:channel, a:bitstring, ska:SecretKey, exp_a:exponent, u:bitstring, pku:PublicKey, exp_u:G, i:bitstring, pki:PublicKey, exp_i:G, v:bitstring, pkv:PublicKey, exp_v:G, t:bitstring, pkttp:PublicKey, exp_ttp:G ,uri:bitstring, res:bitstring) =
    in(c, e1:bitstring);
    in(c, e2:bitstring);
    in(c, e3:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    in(c, pke3:PublicKey);
    in(c, euri:bitstring);
    in(c, eresource:bitstring);
    in(c, exp_e1:G);
    in(c, exp_e2:G);
    in(c, exp_e3:G);

    (* - - - *)
    if(e1 = u && e2 = i && e3 = v) then app(true, c, a, ska, exp_a, u, pku, exp_u, i, pki, exp_i, v, pkv, exp_v, uri, res) 
    (* A - - *)
    else if(e2 = i && e3 = v) then app(false, c, a, ska, exp_a, e1, pke1, exp_e1, i, pki, exp_i, v, pkv, exp_v, uri, res) 
    (* - A - *)
    else if(e1 = u && e3 = v) then app(false, c, a, ska, exp_a, u, pku, exp_u, e2, pke2, exp_e2, v, pkv, exp_v, uri, res) 
    (* - - A *)
    else if(e1 = u && e2 = i) then app(false, c, a, ska, exp_a, u, pku, exp_u, i, pki, exp_i, e3, pke3, exp_e3, euri, eresource) 
    (* A A - *)
    else if(e3 = v) then app(false, c, a, ska, exp_a, e1, pke1, exp_e1, e2, pke2, exp_e2, v, pkv, exp_v, uri, res) 
    (* - A A *)
    else if(e1 = u) then app(false, c, a, ska, exp_a, u, pku, exp_u, e2, pke2, exp_e2, e3, pke3, exp_e3, euri, eresource) 
    (* A - A *)
    else if(e2 = i) then app(false, c, a, ska, exp_a, e1, pke1, exp_e1, i, pki, exp_i, e3, pke3, exp_e3, euri, eresource) 
    (* A A A *)
    else app(false, c, a, ska, exp_a, e1, pke1, exp_e1, e2, pke2, exp_e2, e3, pke3, exp_e3, euri, eresource)
    .  (* euri is a URI for another server. If the verifier is the intended trusted Solid server then the uri is as expected *) 

let open_verifier(c:channel, v:bitstring, skv:SecretKey, exp_v:exponent, u:bitstring, pku:PublicKey, exp_u:G, a:bitstring, pka:PublicKey, exp_a:G, i:bitstring, pki:PublicKey, exp_i:G, t:bitstring, pkttp:PublicKey, exp_ttp:G, uri:bitstring) =
    in(c, e1:bitstring);
    in(c, e2:bitstring);
    in(c, e3:bitstring);
    in(c, e4:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    in(c, pke3:PublicKey);
    in(c, pke4:PublicKey);
    in(c, exp_e1:G);
    in(c, exp_e2:G);
    in(c, exp_e3:G);
    in(c, exp_e4:G);
    (* U  A  I TTP *)
    (* - - - - *)
    if(e1 = u && e2 = a && e3 = i && e4 = t) then verifier(true, c, v, skv,exp_v, u, pku, exp_u, a, pka, exp_a, i, pki, exp_i, t, pkttp, exp_ttp, uri)
    (* A - - - *)
    else if(e2 = a && e3 = i && e4 = t) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, a, pka, exp_a, i, pki, exp_i, t, pkttp, exp_ttp, uri)
    (* - A - - *)
    else if(e1 = u && e3 = i && e4 = t) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, e2, pke2, exp_e2, i, pki, exp_i, t, pkttp, exp_ttp, uri)
    (* - - A - *)
    else if(e1 = u && e2 = a && e4 = t) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, a, pka, exp_a, e3, pke3, exp_e3,t, pkttp, exp_ttp, uri)
    (* A A - - *)
    else if(e3 = i && e4 = t) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, e2, pke2, exp_e2, i, pki, exp_i, t, pkttp, exp_ttp,uri)
    (* - A A - *)
    else if(e1 = u && e4 = t) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, e2, pke2, exp_e2, e3, pke3, exp_e3,t, pkttp, exp_ttp,uri)
    (* A - A - *)
    else if(e2 = a && e4 = t) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, a, pka, exp_a, e3, pke3, exp_e3, t, pkttp, exp_ttp,uri)
    (* A A A - *)
    else if (e4 = t) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, e2, pke2, exp_e2, e3, pke3, exp_e3, t, pkttp, exp_ttp,uri)
    (* - - - A *)
    else if(e1 = u && e2 = a && e3 = i) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, a, pka, exp_a, i, pki, exp_i, e4, pke4, exp_e4, uri)
    (* A - - A *)
    else if(e2 = a && e3 = i) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, a, pka, exp_a, i, pki, exp_i,e4, pke4, exp_e4, uri)
    (* - A - A *)
    else if(e1 = u && e3 = i) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, e2, pke2, exp_e2, i, pki, exp_i, e4, pke4, exp_e4,uri)
    (* - - A A *)
    else if(e1 = u && e2 = a) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, a, pka, exp_a, e3, pke3, exp_e3,e4,  pke4, exp_e4,uri)
    (* A A - A *)
    else if(e3 = i) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, e2, pke2, exp_e2, i, pki, exp_i,e4, pke4, exp_e4, uri)
    (* - A A A *)
    else if(e1 = u) then verifier(false, c, v, skv,exp_v, u, pku, exp_u, e2, pke2, exp_e2, e3, pke3, exp_e3, e4, pke4, exp_e4,uri)
    (* A - A A *)
    else if(e2 = a) then verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, a, pka, exp_a, e3, pke3, exp_e3,e4,  pke4, exp_e4,uri)
    (* A A A A *)
    else verifier(false, c, v, skv,exp_v, e1, pke1, exp_e1, e2, pke2, exp_e2, e3, pke3, exp_e3, e4, pke4, exp_e4, uri)
    .

let open_ttp(c:channel, t:bitstring, skttp:SecretKey, exp_ttp:exponent, a:bitstring, pka:PublicKey, exp_a:G, v:bitstring, pkv:PublicKey, exp_v:G) =
    in(c, e1:bitstring);
    in(c, e2:bitstring);
    in(c, pke1:PublicKey);
    in(c, pke2:PublicKey);
    in(c, exp_e1:G);
    in(c, exp_e2:G);
    (* - - *)
    if(e1 = a && e2 = v) then ttp(true, c, t, skttp,exp_ttp, a, pka, exp_a, v, pkv, exp_v)
    (* A - *)
    else if(e2 = v) then ttp(false, c, t, skttp,exp_ttp, e1, pke1, exp_e1, v, pkv, exp_v)
    (* - A *)
    else if(e2 = a) then ttp(false, c, t, skttp,exp_ttp, a, pka, exp_a, e2, pke2, exp_e2)
    (* A A *)
    else ttp(false, c, t, skttp,exp_ttp, e1, pke1, exp_e1, e2, pke2, exp_e2)
    .

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* SECRECY *)

query attacker(rule_fromVerifier).
query attacker(vp_fromVerifier). 
query attacker(access_token_fromVerifier).


query  h_1:bitstring, h_2:bitstring, h_3:bitstring, m_1:bitstring, m_2:bitstring,m_3:bitstring,m_4:bitstring, m_5:bitstring, m_6:bitstring, vpr_send:bitstring; 
    inj-event(auth_UserCompletesProtocol(h_1, h_2, h_3, m_5, m_6))
    ==>
    inj-event(auth_AppSendsLastMessageToUser(m_1,m_2,m_3,m_4,h_1,h_2, h_3,m_5))
    &&
    inj-event(verifierInConeOfUser(m_1, m_2, m_3, m_4, vpr_send)).

query m_1:bitstring,m_2:bitstring,m_3:bitstring,m_4:bitstring,vpr_send:bitstring,h_1:bitstring,h_2:bitstring,h_3:bitstring,m_5:bitstring,m_6:bitstring,vp_2:bitstring,tkn_access:bitstring;
    inj-event(auth_VerifierCompletesProtocol(m_1,m_2,m_3,m_4,vpr_send,vp_2,m_7, m_8, m_9, m_10, m_11, symk_k15))
    ==>
    inj-event(auth_AppSendsLastMessageToVerifier(m_1,m_2,m_3,m_4,vpr_send,h_1,h_2,h_3,m_5,m_6,vp_2))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6)). 


query m_1:bitstring,m_2:bitstring,m_3:bitstring,m_4:bitstring,vpr_r:bitstring,h_1:bitstring,h_2:bitstring,h_3:bitstring,m_5:bitstring,m_6:bitstring,vp_2:bitstring,m_7:bitstring;
    inj-event(auth_AppCompletesProtocol(m_1, m_2, m_3, m_4, vpr_r, h_1, h_2, h_3,m_5,m_6,vp_2,m_10, m_11, m_12))
    ==>
    inj-event(auth_VerifierSendsLastMessageToApp(m_1, m_2, m_3, m_4, vpr_r, vp_2, m_7))
    &&
    inj-event(auth_UserSendsLastMessageToApp(h_1, h_2, h_3, m_5, m_6)). 



(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

free c:channel.
process (*use root process for setup *)

    (* create identities *)
    new u:bitstring;
    new a:bitstring;
    new v:bitstring;
    new i:bitstring;
    new t:bitstring;

    (*advertise identities*)
    out(c,u);
    out(c,a);
    out(c,v);
    out(c, i);
    out(c, t);

    (*declare secret keys*)
    new sku:SecretKey;
    new ska:SecretKey;
    new skv:SecretKey;
    new ski:SecretKey;
    new skttp:SecretKey;
    
    new v_exp:exponent;
    let exp_v:G = exp(g, v_exp) in
    new u_exp:exponent;
    let exp_u:G = exp(g, u_exp) in
    new a_exp:exponent;
    let exp_a:G = exp(g, a_exp) in
    new i_exp:exponent;
    let exp_i:G = exp(g, i_exp) in
    new ttp_exp:exponent;
    let exp_ttp:G = exp(g, ttp_exp) in

    (*advertise public keys*)
    out(c,pk(sku));
    out(c,pk(ska));
    out(c,pk(skv));
    out(c,pk(ski));
    out(c,pk(skttp));

    out(c, exp_v);
    out(c, exp_u);
    out(c, exp_a);
    out(c, exp_i);
    out(c, exp_ttp);

    let vc = ((i, u), sig((i, u), ski)) in

    (*let agents dance*)
    (
        ! open_user(c, u, sku, u_exp, a, pk(ska), exp_a, v, pk(skv), vc, uri_req)
      | ! open_app(c, a, ska, a_exp, u, pk(sku), exp_u, i, pk(ski), exp_i, v, pk(skv), exp_v, t, pk(skttp), exp_ttp, uri_req, resource)
      | ! open_verifier(c, v, skv, v_exp, u, pk(sku), exp_u, a, pk(ska), exp_a, i, pk(ski), exp_i, t, pk(skttp), exp_ttp, uri_req)
      (* TTP do not need any information about Issuer and User, it only needs information about Verifier and App *)
      | ! open_ttp(c, t, skttp, ttp_exp, a, pk(ska), exp_a, v, pk(skv), exp_v)
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)